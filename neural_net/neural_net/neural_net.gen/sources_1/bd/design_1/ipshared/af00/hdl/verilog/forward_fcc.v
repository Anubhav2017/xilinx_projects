// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="forward_fcc_forward_fcc,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=2649,HLS_SYN_LUT=2945,HLS_VERSION=2020_2}" *)

module forward_fcc (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_pp0_stage0 = 48'd256;
parameter    ap_ST_fsm_state12 = 48'd512;
parameter    ap_ST_fsm_state13 = 48'd1024;
parameter    ap_ST_fsm_state14 = 48'd2048;
parameter    ap_ST_fsm_state15 = 48'd4096;
parameter    ap_ST_fsm_state16 = 48'd8192;
parameter    ap_ST_fsm_state17 = 48'd16384;
parameter    ap_ST_fsm_state18 = 48'd32768;
parameter    ap_ST_fsm_state19 = 48'd65536;
parameter    ap_ST_fsm_state20 = 48'd131072;
parameter    ap_ST_fsm_state21 = 48'd262144;
parameter    ap_ST_fsm_pp1_stage0 = 48'd524288;
parameter    ap_ST_fsm_state25 = 48'd1048576;
parameter    ap_ST_fsm_state26 = 48'd2097152;
parameter    ap_ST_fsm_state27 = 48'd4194304;
parameter    ap_ST_fsm_state28 = 48'd8388608;
parameter    ap_ST_fsm_state29 = 48'd16777216;
parameter    ap_ST_fsm_state30 = 48'd33554432;
parameter    ap_ST_fsm_state31 = 48'd67108864;
parameter    ap_ST_fsm_state32 = 48'd134217728;
parameter    ap_ST_fsm_state33 = 48'd268435456;
parameter    ap_ST_fsm_state34 = 48'd536870912;
parameter    ap_ST_fsm_pp2_stage0 = 48'd1073741824;
parameter    ap_ST_fsm_pp2_stage1 = 48'd2147483648;
parameter    ap_ST_fsm_state42 = 48'd4294967296;
parameter    ap_ST_fsm_state43 = 48'd8589934592;
parameter    ap_ST_fsm_state44 = 48'd17179869184;
parameter    ap_ST_fsm_state45 = 48'd34359738368;
parameter    ap_ST_fsm_state46 = 48'd68719476736;
parameter    ap_ST_fsm_state47 = 48'd137438953472;
parameter    ap_ST_fsm_state48 = 48'd274877906944;
parameter    ap_ST_fsm_state49 = 48'd549755813888;
parameter    ap_ST_fsm_state50 = 48'd1099511627776;
parameter    ap_ST_fsm_state51 = 48'd2199023255552;
parameter    ap_ST_fsm_pp4_stage0 = 48'd4398046511104;
parameter    ap_ST_fsm_state55 = 48'd8796093022208;
parameter    ap_ST_fsm_state56 = 48'd17592186044416;
parameter    ap_ST_fsm_state57 = 48'd35184372088832;
parameter    ap_ST_fsm_state58 = 48'd70368744177664;
parameter    ap_ST_fsm_state59 = 48'd140737488355328;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] w;
wire   [31:0] y;
wire   [31:0] b;
wire   [31:0] xdimension;
wire   [31:0] ydimension;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln31_reg_699;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond3810_reg_719;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state51;
reg   [0:0] icmp_ln53_reg_802;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond3_reg_894;
reg   [0:0] exitcond3_reg_894_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond379_reg_760;
wire    ap_CS_fsm_state15;
reg   [0:0] icmp_ln33_reg_740;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [61:0] loop_index22_reg_289;
reg   [61:0] loop_index16_reg_300;
reg   [30:0] j_reg_322;
reg   [61:0] loop_index_reg_355;
reg   [31:0] ydimension_read_reg_654;
reg  signed [31:0] xdimension_read_reg_664;
reg   [31:0] b_read_reg_674;
reg   [31:0] y_read_reg_679;
reg   [31:0] w_read_reg_684;
reg   [31:0] x_read_reg_689;
wire  signed [6:0] trunc_ln31_fu_375_p1;
reg  signed [6:0] trunc_ln31_reg_694;
wire   [0:0] icmp_ln31_fu_379_p2;
wire  signed [61:0] sext_ln31_fu_385_p1;
reg  signed [61:0] sext_ln31_reg_703;
wire   [61:0] empty_22_fu_408_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond3810_fu_414_p2;
reg   [0:0] exitcond3810_reg_719_pp0_iter1_reg;
wire   [6:0] empty_25_fu_419_p1;
reg   [6:0] empty_25_reg_723;
reg   [6:0] empty_25_reg_723_pp0_iter1_reg;
reg   [31:0] gmem_addr_read_reg_728;
wire  signed [31:0] grp_fu_431_p2;
reg  signed [31:0] mul_ln33_reg_733;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln33_fu_435_p2;
wire    ap_CS_fsm_state14;
wire  signed [61:0] sext_ln33_fu_440_p1;
reg  signed [61:0] sext_ln33_reg_744;
wire   [61:0] empty_26_fu_463_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state22_pp1_stage0_iter0;
reg    ap_block_state23_pp1_stage0_iter1;
wire    ap_block_state24_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond379_fu_469_p2;
reg   [0:0] exitcond379_reg_760_pp1_iter1_reg;
wire   [6:0] empty_29_fu_474_p1;
reg   [6:0] empty_29_reg_764;
reg   [6:0] empty_29_reg_764_pp1_iter1_reg;
reg   [31:0] gmem_addr_1_read_reg_769;
wire   [0:0] cmp101_fu_506_p2;
reg   [0:0] cmp101_reg_780;
wire    ap_CS_fsm_state31;
wire   [31:0] add_ln35_fu_511_p2;
reg   [31:0] add_ln35_reg_784;
wire    ap_CS_fsm_state32;
reg   [6:0] y_t_addr_reg_792;
wire   [0:0] icmp_ln35_fu_517_p2;
wire   [6:0] empty_30_fu_535_p2;
reg   [6:0] empty_30_reg_797;
wire   [0:0] icmp_ln53_fu_540_p2;
reg   [31:0] gmem_addr_2_read_reg_806;
wire   [31:0] bitcast_ln37_fu_545_p1;
reg   [31:0] bitcast_ln37_reg_811;
wire    ap_CS_fsm_state34;
wire   [30:0] add_ln39_fu_549_p2;
reg   [30:0] add_ln39_reg_816;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state35_pp2_stage0_iter0;
wire    ap_block_state37_pp2_stage0_iter1;
wire    ap_block_state39_pp2_stage0_iter2;
wire    ap_block_state41_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln39_fu_559_p2;
reg   [0:0] icmp_ln39_reg_821;
reg   [0:0] icmp_ln39_reg_821_pp2_iter1_reg;
reg   [0:0] icmp_ln39_reg_821_pp2_iter2_reg;
wire   [31:0] zext_ln42_1_fu_578_p1;
reg   [31:0] zext_ln42_1_reg_830;
reg   [31:0] zext_ln42_1_reg_830_pp2_iter1_reg;
reg   [31:0] zext_ln42_1_reg_830_pp2_iter2_reg;
wire   [31:0] w_t_q0;
reg   [31:0] w_t_load_reg_840;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state36_pp2_stage1_iter0;
wire    ap_block_state38_pp2_stage1_iter1;
wire    ap_block_state40_pp2_stage1_iter2;
wire    ap_block_pp2_stage1_11001;
wire   [31:0] x_t_q0;
reg   [31:0] x_t_load_reg_845;
wire   [31:0] grp_fu_371_p2;
reg   [31:0] mul_reg_850;
wire   [30:0] add_ln45_fu_583_p2;
reg   [30:0] add_ln45_reg_855;
wire    ap_CS_fsm_state43;
wire   [0:0] icmp_ln45_fu_593_p2;
wire   [31:0] mulbuffer_t_q0;
reg   [31:0] mulbuffer_t_load_reg_868;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_366_p2;
wire    ap_CS_fsm_state49;
wire  signed [61:0] sext_ln53_fu_607_p1;
reg  signed [61:0] sext_ln53_reg_878;
wire   [61:0] empty_34_fu_630_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state52_pp4_stage0_iter0;
wire    ap_block_state53_pp4_stage0_iter1;
wire    ap_block_state54_pp4_stage0_iter2;
reg    ap_block_state54_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] exitcond3_fu_636_p2;
wire   [31:0] y_t_q0;
reg   [31:0] y_t_load_reg_903;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state21;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state22;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state35;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_block_state51_io;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state52;
reg   [6:0] x_t_address0;
reg    x_t_ce0;
reg    x_t_we0;
wire   [31:0] x_t_d0;
reg   [6:0] y_t_address0;
reg    y_t_ce0;
reg    y_t_we0;
reg   [31:0] y_t_d0;
reg   [6:0] w_t_address0;
reg    w_t_ce0;
reg    w_t_we0;
wire   [31:0] w_t_d0;
reg   [6:0] mulbuffer_t_address0;
reg    mulbuffer_t_ce0;
reg    mulbuffer_t_we0;
reg   [31:0] i_reg_311;
wire    ap_CS_fsm_state50;
reg   [30:0] ap_phi_mux_j_phi_fu_326_p4;
wire    ap_block_pp2_stage0;
reg   [30:0] j_1_reg_333;
wire    ap_CS_fsm_state42;
reg   [31:0] add2513_reg_344;
wire   [31:0] loop_index22_cast_cast_fu_427_p1;
wire   [31:0] loop_index16_cast_cast_fu_482_p1;
wire   [31:0] zext_ln37_fu_530_p1;
wire   [31:0] zext_ln42_fu_573_p1;
wire   [31:0] zext_ln48_fu_602_p1;
wire   [31:0] loop_index_cast_cast_fu_645_p1;
wire  signed [31:0] p_cast_cast_fu_397_p1;
wire  signed [31:0] p_cast1_cast_fu_452_p1;
wire  signed [31:0] sext_ln37_fu_495_p1;
wire   [31:0] p_cast3_cast_fu_619_p1;
reg    ap_block_state2_io;
reg    ap_block_state15_io;
reg    ap_block_state59;
wire    ap_block_pp4_stage0_01001;
wire    ap_CS_fsm_state45;
wire  signed [31:0] trunc_ln31_fu_375_p0;
wire  signed [31:0] icmp_ln31_fu_379_p0;
wire   [29:0] p_cast_fu_388_p4;
wire    ap_CS_fsm_state12;
wire   [29:0] p_cast1_fu_443_p4;
wire   [29:0] trunc_ln37_3_fu_486_p4;
wire   [29:0] trunc_ln37_fu_526_p1;
wire  signed [6:0] empty_30_fu_535_p0;
wire   [31:0] zext_ln39_fu_555_p1;
wire   [6:0] trunc_ln39_fu_564_p1;
wire   [6:0] add_ln42_fu_568_p2;
wire   [31:0] zext_ln45_fu_589_p1;
wire   [6:0] trunc_ln48_fu_598_p1;
wire   [29:0] p_cast3_fu_610_p4;
wire   [6:0] empty_36_fu_641_p1;
reg   [47:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
end

forward_fcc_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .w(w),
    .y(y),
    .b(b),
    .xdimension(xdimension),
    .ydimension(ydimension),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

forward_fcc_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(p_cast3_cast_fu_619_p1),
    .I_AWID(1'd0),
    .I_AWLEN(ydimension_read_reg_654),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

forward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
x_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_t_address0),
    .ce0(x_t_ce0),
    .we0(x_t_we0),
    .d0(x_t_d0),
    .q0(x_t_q0)
);

forward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
y_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y_t_address0),
    .ce0(y_t_ce0),
    .we0(y_t_we0),
    .d0(y_t_d0),
    .q0(y_t_q0)
);

forward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
w_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_t_address0),
    .ce0(w_t_ce0),
    .we0(w_t_we0),
    .d0(w_t_d0),
    .q0(w_t_q0)
);

forward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
mulbuffer_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mulbuffer_t_address0),
    .ce0(mulbuffer_t_ce0),
    .we0(mulbuffer_t_we0),
    .d0(mul_reg_850),
    .q0(mulbuffer_t_q0)
);

forward_fcc_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add2513_reg_344),
    .din1(mulbuffer_t_load_reg_868),
    .ce(1'b1),
    .dout(grp_fu_366_p2)
);

forward_fcc_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w_t_load_reg_840),
    .din1(x_t_load_reg_845),
    .ce(1'b1),
    .dout(grp_fu_371_p2)
);

forward_fcc_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydimension_read_reg_654),
    .din1(xdimension_read_reg_664),
    .ce(1'b1),
    .dout(grp_fu_431_p2)
);

forward_fcc_mul_7s_7s_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 7 ))
mul_7s_7s_7_1_1_U4(
    .din0(empty_30_fu_535_p0),
    .din1(trunc_ln31_reg_694),
    .dout(empty_30_fu_535_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state22) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state22)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state22);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state35) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((cmp101_reg_780 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone)))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if (((cmp101_reg_780 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state52) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln53_reg_802 == 1'd0) & (1'b0 == ap_block_state51_io))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state52)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state52);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln53_reg_802 == 1'd0) & (1'b0 == ap_block_state51_io))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        add2513_reg_344 <= bitcast_ln37_reg_811;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        add2513_reg_344 <= grp_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        i_reg_311 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        i_reg_311 <= add_ln35_reg_784;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        j_1_reg_333 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        j_1_reg_333 <= add_ln45_reg_855;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp101_reg_780 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        j_reg_322 <= 31'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln39_reg_821 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_reg_322 <= add_ln39_reg_816;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        loop_index16_reg_300 <= 62'd0;
    end else if (((exitcond379_fu_469_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index16_reg_300 <= empty_26_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_index22_reg_289 <= 62'd0;
    end else if (((exitcond3810_fu_414_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_index22_reg_289 <= empty_22_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln53_reg_802 == 1'd0) & (1'b0 == ap_block_state51_io))) begin
        loop_index_reg_355 <= 62'd0;
    end else if (((exitcond3_fu_636_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        loop_index_reg_355 <= empty_34_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add_ln35_reg_784 <= add_ln35_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln39_reg_816 <= add_ln39_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        add_ln45_reg_855 <= add_ln45_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_674 <= b;
        icmp_ln31_reg_699 <= icmp_ln31_fu_379_p2;
        trunc_ln31_reg_694 <= trunc_ln31_fu_375_p1;
        w_read_reg_684 <= w;
        x_read_reg_689 <= x;
        xdimension_read_reg_664 <= xdimension;
        y_read_reg_679 <= y;
        ydimension_read_reg_654 <= ydimension;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        bitcast_ln37_reg_811 <= bitcast_ln37_fu_545_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        cmp101_reg_780 <= cmp101_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3810_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_25_reg_723 <= empty_25_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_25_reg_723_pp0_iter1_reg <= empty_25_reg_723;
        exitcond3810_reg_719 <= exitcond3810_fu_414_p2;
        exitcond3810_reg_719_pp0_iter1_reg <= exitcond3810_reg_719;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond379_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_29_reg_764 <= empty_29_fu_474_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_29_reg_764_pp1_iter1_reg <= empty_29_reg_764;
        exitcond379_reg_760 <= exitcond379_fu_469_p2;
        exitcond379_reg_760_pp1_iter1_reg <= exitcond379_reg_760;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_517_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
        empty_30_reg_797 <= empty_30_fu_535_p2;
        y_t_addr_reg_792 <= zext_ln37_fu_530_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        exitcond3_reg_894 <= exitcond3_fu_636_p2;
        exitcond3_reg_894_pp4_iter1_reg <= exitcond3_reg_894;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond379_reg_760 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_read_reg_769 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        gmem_addr_2_read_reg_806 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3810_reg_719 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_728 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln33_reg_740 <= icmp_ln33_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln39_reg_821 <= icmp_ln39_fu_559_p2;
        icmp_ln39_reg_821_pp2_iter1_reg <= icmp_ln39_reg_821;
        icmp_ln39_reg_821_pp2_iter2_reg <= icmp_ln39_reg_821_pp2_iter1_reg;
        zext_ln42_1_reg_830_pp2_iter1_reg[6 : 0] <= zext_ln42_1_reg_830[6 : 0];
        zext_ln42_1_reg_830_pp2_iter2_reg[6 : 0] <= zext_ln42_1_reg_830_pp2_iter1_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
        icmp_ln53_reg_802 <= icmp_ln53_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln33_reg_733 <= grp_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_821_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        mul_reg_850 <= grp_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        mulbuffer_t_load_reg_868 <= mulbuffer_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln31_reg_703 <= sext_ln31_fu_385_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sext_ln33_reg_744 <= sext_ln33_fu_440_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        sext_ln53_reg_878 <= sext_ln53_fu_607_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_reg_821 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        w_t_load_reg_840 <= w_t_q0;
        x_t_load_reg_845 <= x_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (exitcond3_reg_894 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        y_t_load_reg_903 <= y_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_559_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln42_1_reg_830[6 : 0] <= zext_ln42_1_fu_578_p1[6 : 0];
    end
end

always @ (*) begin
    if ((exitcond3810_fu_414_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond379_fu_469_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_559_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state35 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state35 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_636_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state52 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state52 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln53_reg_802 == 1'd0)) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln39_reg_821 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_j_phi_fu_326_p4 = add_ln39_reg_816;
    end else begin
        ap_phi_mux_j_phi_fu_326_p4 = j_reg_322;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln53_reg_802 == 1'd0)) & (1'b1 == ap_CS_fsm_state59))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_ARADDR = sext_ln37_fu_495_p1;
    end else if (((icmp_ln33_reg_740 == 1'd0) & (1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
        gmem_ARADDR = p_cast1_cast_fu_452_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln31_reg_699 == 1'd0))) begin
        gmem_ARADDR = p_cast_cast_fu_397_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        gmem_ARLEN = ydimension_read_reg_654;
    end else if (((icmp_ln33_reg_740 == 1'd0) & (1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
        gmem_ARLEN = mul_ln33_reg_733;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln31_reg_699 == 1'd0))) begin
        gmem_ARLEN = xdimension_read_reg_664;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((icmp_ln33_reg_740 == 1'd0) & (1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln31_reg_699 == 1'd0)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln53_reg_802 == 1'd0) & (1'b0 == ap_block_state51_io))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln53_reg_802 == 1'd0)) & (1'b1 == ap_CS_fsm_state59) & (icmp_ln53_reg_802 == 1'd0))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((exitcond379_reg_760 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3810_reg_719 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_894_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((icmp_ln33_reg_740 == 1'd0) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln31_reg_699 == 1'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln53_reg_802 == 1'd0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) & (icmp_ln53_reg_802 == 1'd0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | ((exitcond379_reg_760 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond3810_reg_719 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_reg_894_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        mulbuffer_t_address0 = zext_ln48_fu_602_p1;
    end else if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        mulbuffer_t_address0 = zext_ln42_1_reg_830_pp2_iter2_reg;
    end else begin
        mulbuffer_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        mulbuffer_t_ce0 = 1'b1;
    end else begin
        mulbuffer_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln39_reg_821_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        mulbuffer_t_we0 = 1'b1;
    end else begin
        mulbuffer_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        w_t_address0 = zext_ln42_fu_573_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        w_t_address0 = loop_index16_cast_cast_fu_482_p1;
    end else begin
        w_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        w_t_ce0 = 1'b1;
    end else begin
        w_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond379_reg_760_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        w_t_we0 = 1'b1;
    end else begin
        w_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        x_t_address0 = zext_ln42_1_fu_578_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        x_t_address0 = loop_index22_cast_cast_fu_427_p1;
    end else begin
        x_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        x_t_ce0 = 1'b1;
    end else begin
        x_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond3810_reg_719_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_t_we0 = 1'b1;
    end else begin
        x_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        y_t_address0 = loop_index_cast_cast_fu_645_p1;
    end else if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state34))) begin
        y_t_address0 = y_t_addr_reg_792;
    end else begin
        y_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state34) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        y_t_ce0 = 1'b1;
    end else begin
        y_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        y_t_d0 = add2513_reg_344;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        y_t_d0 = bitcast_ln37_fu_545_p1;
    end else begin
        y_t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((cmp101_reg_780 == 1'd1) & (1'b1 == ap_CS_fsm_state50)))) begin
        y_t_we0 = 1'b1;
    end else begin
        y_t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln31_reg_699 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln31_reg_699 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond3810_fu_414_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond3810_fu_414_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln33_reg_740 == 1'd1) & (1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((icmp_ln33_reg_740 == 1'd0) & (1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_block_state15_io))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond379_fu_469_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((exitcond379_fu_469_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((icmp_ln35_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((cmp101_reg_780 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln39_fu_559_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if ((((ap_enable_reg_pp2_iter3 == 1'b1) & (ap_enable_reg_pp2_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln39_fu_559_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln45_fu_593_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln53_reg_802 == 1'd0) & (1'b0 == ap_block_state51_io))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln53_reg_802 == 1'd1) & (1'b0 == ap_block_state51_io))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond3_fu_636_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond3_fu_636_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln53_reg_802 == 1'd0)) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_511_p2 = (i_reg_311 + 32'd1);

assign add_ln39_fu_549_p2 = (ap_phi_mux_j_phi_fu_326_p4 + 31'd1);

assign add_ln42_fu_568_p2 = (trunc_ln39_fu_564_p1 + empty_30_reg_797);

assign add_ln45_fu_583_p2 = (j_1_reg_333 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond3810_reg_719 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond3810_reg_719 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond379_reg_760 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond379_reg_760 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond3810_reg_719 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((gmem_ARREADY == 1'b0) & (icmp_ln33_reg_740 == 1'd0));
end

assign ap_block_state22_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond379_reg_760 == 1'd0));
end

assign ap_block_state24_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (icmp_ln31_reg_699 == 1'd0));
end

assign ap_block_state35_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state51_io = ((gmem_AWREADY == 1'b0) & (icmp_ln53_reg_802 == 1'd0));
end

assign ap_block_state52_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_io = ((gmem_WREADY == 1'b0) & (exitcond3_reg_894_pp4_iter1_reg == 1'd0));
end

assign ap_block_state54_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59 = ((gmem_BVALID == 1'b0) & (icmp_ln53_reg_802 == 1'd0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln37_fu_545_p1 = gmem_addr_2_read_reg_806;

assign cmp101_fu_506_p2 = (($signed(xdimension_read_reg_664) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_22_fu_408_p2 = (loop_index22_reg_289 + 62'd1);

assign empty_25_fu_419_p1 = loop_index22_reg_289[6:0];

assign empty_26_fu_463_p2 = (loop_index16_reg_300 + 62'd1);

assign empty_29_fu_474_p1 = loop_index16_reg_300[6:0];

assign empty_30_fu_535_p0 = i_reg_311[6:0];

assign empty_34_fu_630_p2 = (loop_index_reg_355 + 62'd1);

assign empty_36_fu_641_p1 = loop_index_reg_355[6:0];

assign exitcond379_fu_469_p2 = ((loop_index16_reg_300 == sext_ln33_reg_744) ? 1'b1 : 1'b0);

assign exitcond3810_fu_414_p2 = ((loop_index22_reg_289 == sext_ln31_reg_703) ? 1'b1 : 1'b0);

assign exitcond3_fu_636_p2 = ((loop_index_reg_355 == sext_ln53_reg_878) ? 1'b1 : 1'b0);

assign gmem_WDATA = y_t_load_reg_903;

assign icmp_ln31_fu_379_p0 = xdimension;

assign icmp_ln31_fu_379_p2 = ((icmp_ln31_fu_379_p0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_435_p2 = ((mul_ln33_reg_733 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_517_p2 = ((i_reg_311 == ydimension_read_reg_654) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_559_p2 = ((zext_ln39_fu_555_p1 == xdimension_read_reg_664) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_593_p2 = ((zext_ln45_fu_589_p1 == xdimension_read_reg_664) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_540_p2 = ((ydimension_read_reg_654 == 32'd0) ? 1'b1 : 1'b0);

assign loop_index16_cast_cast_fu_482_p1 = empty_29_reg_764_pp1_iter1_reg;

assign loop_index22_cast_cast_fu_427_p1 = empty_25_reg_723_pp0_iter1_reg;

assign loop_index_cast_cast_fu_645_p1 = empty_36_fu_641_p1;

assign p_cast1_cast_fu_452_p1 = $signed(p_cast1_fu_443_p4);

assign p_cast1_fu_443_p4 = {{w_read_reg_684[31:2]}};

assign p_cast3_cast_fu_619_p1 = $signed(p_cast3_fu_610_p4);

assign p_cast3_fu_610_p4 = {{y_read_reg_679[31:2]}};

assign p_cast_cast_fu_397_p1 = $signed(p_cast_fu_388_p4);

assign p_cast_fu_388_p4 = {{x_read_reg_689[31:2]}};

assign sext_ln31_fu_385_p1 = xdimension_read_reg_664;

assign sext_ln33_fu_440_p1 = mul_ln33_reg_733;

assign sext_ln37_fu_495_p1 = $signed(trunc_ln37_3_fu_486_p4);

assign sext_ln53_fu_607_p1 = $signed(ydimension_read_reg_654);

assign trunc_ln31_fu_375_p0 = xdimension;

assign trunc_ln31_fu_375_p1 = trunc_ln31_fu_375_p0[6:0];

assign trunc_ln37_3_fu_486_p4 = {{b_read_reg_674[31:2]}};

assign trunc_ln37_fu_526_p1 = i_reg_311[29:0];

assign trunc_ln39_fu_564_p1 = ap_phi_mux_j_phi_fu_326_p4[6:0];

assign trunc_ln48_fu_598_p1 = j_1_reg_333[6:0];

assign w_t_d0 = gmem_addr_1_read_reg_769;

assign x_t_d0 = gmem_addr_read_reg_728;

assign zext_ln37_fu_530_p1 = trunc_ln37_fu_526_p1;

assign zext_ln39_fu_555_p1 = ap_phi_mux_j_phi_fu_326_p4;

assign zext_ln42_1_fu_578_p1 = trunc_ln39_fu_564_p1;

assign zext_ln42_fu_573_p1 = add_ln42_fu_568_p2;

assign zext_ln45_fu_589_p1 = j_1_reg_333;

assign zext_ln48_fu_602_p1 = trunc_ln48_fu_598_p1;

always @ (posedge ap_clk) begin
    zext_ln42_1_reg_830[31:7] <= 25'b0000000000000000000000000;
    zext_ln42_1_reg_830_pp2_iter1_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln42_1_reg_830_pp2_iter2_reg[31:7] <= 25'b0000000000000000000000000;
end

endmodule //forward_fcc
