// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="backward_fcc_backward_fcc,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=0,HLS_SYN_FF=3333,HLS_SYN_LUT=4190,HLS_VERSION=2020_2}" *)

module backward_fcc (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 99'd1;
parameter    ap_ST_fsm_state2 = 99'd2;
parameter    ap_ST_fsm_state3 = 99'd4;
parameter    ap_ST_fsm_state4 = 99'd8;
parameter    ap_ST_fsm_state5 = 99'd16;
parameter    ap_ST_fsm_state6 = 99'd32;
parameter    ap_ST_fsm_state7 = 99'd64;
parameter    ap_ST_fsm_state8 = 99'd128;
parameter    ap_ST_fsm_pp0_stage0 = 99'd256;
parameter    ap_ST_fsm_state12 = 99'd512;
parameter    ap_ST_fsm_state13 = 99'd1024;
parameter    ap_ST_fsm_state14 = 99'd2048;
parameter    ap_ST_fsm_state15 = 99'd4096;
parameter    ap_ST_fsm_state16 = 99'd8192;
parameter    ap_ST_fsm_state17 = 99'd16384;
parameter    ap_ST_fsm_state18 = 99'd32768;
parameter    ap_ST_fsm_state19 = 99'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 99'd131072;
parameter    ap_ST_fsm_state23 = 99'd262144;
parameter    ap_ST_fsm_state24 = 99'd524288;
parameter    ap_ST_fsm_state25 = 99'd1048576;
parameter    ap_ST_fsm_state26 = 99'd2097152;
parameter    ap_ST_fsm_state27 = 99'd4194304;
parameter    ap_ST_fsm_state28 = 99'd8388608;
parameter    ap_ST_fsm_state29 = 99'd16777216;
parameter    ap_ST_fsm_state30 = 99'd33554432;
parameter    ap_ST_fsm_state31 = 99'd67108864;
parameter    ap_ST_fsm_state32 = 99'd134217728;
parameter    ap_ST_fsm_pp2_stage0 = 99'd268435456;
parameter    ap_ST_fsm_state36 = 99'd536870912;
parameter    ap_ST_fsm_state37 = 99'd1073741824;
parameter    ap_ST_fsm_state38 = 99'd2147483648;
parameter    ap_ST_fsm_state39 = 99'd4294967296;
parameter    ap_ST_fsm_state40 = 99'd8589934592;
parameter    ap_ST_fsm_state41 = 99'd17179869184;
parameter    ap_ST_fsm_state42 = 99'd34359738368;
parameter    ap_ST_fsm_pp3_stage0 = 99'd68719476736;
parameter    ap_ST_fsm_state46 = 99'd137438953472;
parameter    ap_ST_fsm_state47 = 99'd274877906944;
parameter    ap_ST_fsm_state48 = 99'd549755813888;
parameter    ap_ST_fsm_state49 = 99'd1099511627776;
parameter    ap_ST_fsm_state50 = 99'd2199023255552;
parameter    ap_ST_fsm_state51 = 99'd4398046511104;
parameter    ap_ST_fsm_state52 = 99'd8796093022208;
parameter    ap_ST_fsm_pp4_stage0 = 99'd17592186044416;
parameter    ap_ST_fsm_state56 = 99'd35184372088832;
parameter    ap_ST_fsm_state57 = 99'd70368744177664;
parameter    ap_ST_fsm_state58 = 99'd140737488355328;
parameter    ap_ST_fsm_state59 = 99'd281474976710656;
parameter    ap_ST_fsm_pp5_stage0 = 99'd562949953421312;
parameter    ap_ST_fsm_state67 = 99'd1125899906842624;
parameter    ap_ST_fsm_state68 = 99'd2251799813685248;
parameter    ap_ST_fsm_state69 = 99'd4503599627370496;
parameter    ap_ST_fsm_state70 = 99'd9007199254740992;
parameter    ap_ST_fsm_state71 = 99'd18014398509481984;
parameter    ap_ST_fsm_state72 = 99'd36028797018963968;
parameter    ap_ST_fsm_state73 = 99'd72057594037927936;
parameter    ap_ST_fsm_state74 = 99'd144115188075855872;
parameter    ap_ST_fsm_state75 = 99'd288230376151711744;
parameter    ap_ST_fsm_state76 = 99'd576460752303423488;
parameter    ap_ST_fsm_state77 = 99'd1152921504606846976;
parameter    ap_ST_fsm_state78 = 99'd2305843009213693952;
parameter    ap_ST_fsm_state79 = 99'd4611686018427387904;
parameter    ap_ST_fsm_state80 = 99'd9223372036854775808;
parameter    ap_ST_fsm_state81 = 99'd18446744073709551616;
parameter    ap_ST_fsm_state82 = 99'd36893488147419103232;
parameter    ap_ST_fsm_state83 = 99'd73786976294838206464;
parameter    ap_ST_fsm_state84 = 99'd147573952589676412928;
parameter    ap_ST_fsm_state85 = 99'd295147905179352825856;
parameter    ap_ST_fsm_state86 = 99'd590295810358705651712;
parameter    ap_ST_fsm_state87 = 99'd1180591620717411303424;
parameter    ap_ST_fsm_state88 = 99'd2361183241434822606848;
parameter    ap_ST_fsm_state89 = 99'd4722366482869645213696;
parameter    ap_ST_fsm_state90 = 99'd9444732965739290427392;
parameter    ap_ST_fsm_state91 = 99'd18889465931478580854784;
parameter    ap_ST_fsm_state92 = 99'd37778931862957161709568;
parameter    ap_ST_fsm_state93 = 99'd75557863725914323419136;
parameter    ap_ST_fsm_state94 = 99'd151115727451828646838272;
parameter    ap_ST_fsm_state95 = 99'd302231454903657293676544;
parameter    ap_ST_fsm_state96 = 99'd604462909807314587353088;
parameter    ap_ST_fsm_state97 = 99'd1208925819614629174706176;
parameter    ap_ST_fsm_pp6_stage0 = 99'd2417851639229258349412352;
parameter    ap_ST_fsm_state101 = 99'd4835703278458516698824704;
parameter    ap_ST_fsm_state102 = 99'd9671406556917033397649408;
parameter    ap_ST_fsm_state103 = 99'd19342813113834066795298816;
parameter    ap_ST_fsm_state104 = 99'd38685626227668133590597632;
parameter    ap_ST_fsm_state105 = 99'd77371252455336267181195264;
parameter    ap_ST_fsm_pp7_stage0 = 99'd154742504910672534362390528;
parameter    ap_ST_fsm_state109 = 99'd309485009821345068724781056;
parameter    ap_ST_fsm_state110 = 99'd618970019642690137449562112;
parameter    ap_ST_fsm_state111 = 99'd1237940039285380274899124224;
parameter    ap_ST_fsm_state112 = 99'd2475880078570760549798248448;
parameter    ap_ST_fsm_state113 = 99'd4951760157141521099596496896;
parameter    ap_ST_fsm_pp8_stage0 = 99'd9903520314283042199192993792;
parameter    ap_ST_fsm_state117 = 99'd19807040628566084398385987584;
parameter    ap_ST_fsm_state118 = 99'd39614081257132168796771975168;
parameter    ap_ST_fsm_state119 = 99'd79228162514264337593543950336;
parameter    ap_ST_fsm_state120 = 99'd158456325028528675187087900672;
parameter    ap_ST_fsm_state121 = 99'd316912650057057350374175801344;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [98:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] w;
wire   [31:0] b;
wire   [31:0] dx;
wire   [31:0] dy;
wire   [31:0] xdimension;
wire   [31:0] ydimension;
wire   [31:0] lr;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln41_reg_1102;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond8122_reg_1124;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state97;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp6_stage0;
reg   [0:0] exitcond6312_reg_1388;
reg   [0:0] exitcond6312_reg_1388_pp6_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state105;
reg   [0:0] icmp_ln42_reg_1138;
reg    ap_enable_reg_pp8_iter2;
wire    ap_block_pp8_stage0;
reg   [0:0] exitcond10_reg_1428;
reg   [0:0] exitcond10_reg_1428_pp8_iter1_reg;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state113;
reg    ap_enable_reg_pp7_iter2;
wire    ap_block_pp7_stage0;
reg   [0:0] exitcond6211_reg_1408;
reg   [0:0] exitcond6211_reg_1408_pp7_iter1_reg;
reg   [0:0] icmp_ln43_reg_1182;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond7718_reg_1253;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond7819_reg_1228;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond7920_reg_1203;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond8021_reg_1160;
wire    ap_CS_fsm_state13;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [31:0] gmem_AWADDR;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [61:0] loop_index58_reg_412;
reg   [61:0] loop_index52_reg_423;
reg   [61:0] loop_index46_reg_434;
reg   [61:0] loop_index40_reg_445;
reg   [61:0] loop_index34_reg_456;
reg   [31:0] i_reg_467;
reg   [61:0] loop_index28_reg_500;
reg   [61:0] loop_index22_reg_511;
reg   [61:0] loop_index_reg_522;
wire   [31:0] dy_t_q0;
reg   [31:0] reg_568;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state71;
wire   [31:0] w_t_q0;
reg   [31:0] reg_573;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_state60_pp5_stage0_iter0;
wire    ap_block_state61_pp5_stage0_iter1;
wire    ap_block_state62_pp5_stage0_iter2;
wire    ap_block_state63_pp5_stage0_iter3;
wire    ap_block_state64_pp5_stage0_iter4;
wire    ap_block_state65_pp5_stage0_iter5;
wire    ap_block_state66_pp5_stage0_iter6;
wire    ap_block_pp5_stage0_11001;
reg   [0:0] cmp148_reg_1278;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter1;
wire    ap_block_state106_pp7_stage0_iter0;
wire    ap_block_state107_pp7_stage0_iter1;
wire    ap_block_state108_pp7_stage0_iter2;
reg    ap_block_state108_io;
reg    ap_block_pp7_stage0_11001;
wire   [31:0] grp_fu_537_p2;
reg   [31:0] reg_579;
reg    ap_enable_reg_pp5_iter5;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state90;
wire   [31:0] grp_fu_533_p2;
reg   [31:0] reg_586;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state95;
wire   [31:0] b_t_q0;
reg   [31:0] reg_592;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_state98_pp6_stage0_iter0;
wire    ap_block_state99_pp6_stage0_iter1;
wire    ap_block_state100_pp6_stage0_iter2;
reg    ap_block_state100_io;
reg    ap_block_pp6_stage0_11001;
reg   [31:0] lr_read_reg_1038;
reg  signed [31:0] ydimension_read_reg_1043;
reg  signed [31:0] xdimension_read_reg_1055;
reg   [31:0] dy_read_reg_1066;
reg   [31:0] dx_read_reg_1071;
reg   [31:0] b_read_reg_1076;
reg   [31:0] w_read_reg_1081;
reg   [31:0] x_read_reg_1086;
wire  signed [13:0] empty_fu_597_p1;
reg  signed [13:0] empty_reg_1091;
wire   [13:0] empty_24_fu_601_p1;
reg   [13:0] empty_24_reg_1097;
wire   [0:0] icmp_ln41_fu_605_p2;
wire  signed [61:0] sext_ln41_fu_611_p1;
reg  signed [61:0] sext_ln41_reg_1106;
wire   [61:0] empty_26_fu_634_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond8122_fu_640_p2;
reg   [0:0] exitcond8122_reg_1124_pp0_iter1_reg;
wire   [6:0] empty_29_fu_645_p1;
reg   [6:0] empty_29_reg_1128;
reg   [6:0] empty_29_reg_1128_pp0_iter1_reg;
reg   [31:0] gmem_addr_read_reg_1133;
wire   [0:0] icmp_ln42_fu_657_p2;
wire    ap_CS_fsm_state12;
wire  signed [61:0] sext_ln42_fu_662_p1;
reg  signed [61:0] sext_ln42_reg_1142;
wire   [61:0] empty_30_fu_676_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state20_pp1_stage0_iter0;
reg    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond8021_fu_682_p2;
reg   [0:0] exitcond8021_reg_1160_pp1_iter1_reg;
wire   [6:0] empty_33_fu_687_p1;
reg   [6:0] empty_33_reg_1164;
reg   [6:0] empty_33_reg_1164_pp1_iter1_reg;
reg   [31:0] gmem_addr_1_read_reg_1169;
wire  signed [31:0] grp_fu_699_p2;
reg  signed [31:0] mul_ln43_reg_1174;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln43_fu_703_p2;
wire    ap_CS_fsm_state25;
wire  signed [61:0] sext_ln43_fu_708_p1;
reg  signed [61:0] sext_ln43_reg_1186;
wire   [61:0] empty_34_fu_722_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state33_pp2_stage0_iter0;
reg    ap_block_state34_pp2_stage0_iter1;
wire    ap_block_state35_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] exitcond7920_fu_728_p2;
reg   [0:0] exitcond7920_reg_1203_pp2_iter1_reg;
wire   [13:0] empty_37_fu_733_p1;
reg   [13:0] empty_37_reg_1207;
reg   [13:0] empty_37_reg_1207_pp2_iter1_reg;
reg   [31:0] gmem_addr_2_read_reg_1212;
wire   [61:0] empty_38_fu_756_p2;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state43_pp3_stage0_iter0;
reg    ap_block_state44_pp3_stage0_iter1;
wire    ap_block_state45_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [0:0] exitcond7819_fu_762_p2;
reg   [0:0] exitcond7819_reg_1228_pp3_iter1_reg;
wire   [6:0] empty_41_fu_767_p1;
reg   [6:0] empty_41_reg_1232;
reg   [6:0] empty_41_reg_1232_pp3_iter1_reg;
reg   [31:0] gmem_addr_3_read_reg_1237;
wire   [61:0] empty_42_fu_799_p2;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state53_pp4_stage0_iter0;
reg    ap_block_state54_pp4_stage0_iter1;
wire    ap_block_state55_pp4_stage0_iter2;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] exitcond7718_fu_805_p2;
reg   [0:0] exitcond7718_reg_1253_pp4_iter1_reg;
wire   [6:0] empty_45_fu_810_p1;
reg   [6:0] empty_45_reg_1257;
reg   [6:0] empty_45_reg_1257_pp4_iter1_reg;
reg   [31:0] gmem_addr_4_read_reg_1262;
(* use_dsp48 = "no" *) wire  signed [13:0] add_ln48_fu_822_p2;
reg  signed [13:0] add_ln48_reg_1267;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state58;
wire   [0:0] cmp148_fu_831_p2;
wire  signed [13:0] grp_fu_1028_p2;
reg  signed [13:0] mul15_le_reg_1282;
wire   [31:0] add_ln48_1_fu_836_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [0:0] icmp_ln48_fu_842_p2;
reg   [6:0] dx_t_addr_1_reg_1296;
reg   [6:0] dx_t_addr_1_reg_1296_pp5_iter1_reg;
reg   [6:0] dx_t_addr_1_reg_1296_pp5_iter2_reg;
reg   [6:0] dx_t_addr_1_reg_1296_pp5_iter3_reg;
reg   [6:0] dx_t_addr_1_reg_1296_pp5_iter4_reg;
reg   [6:0] dx_t_addr_1_reg_1296_pp5_iter5_reg;
wire   [31:0] add_ln60_fu_866_p2;
reg   [31:0] add_ln60_reg_1306;
wire    ap_CS_fsm_state68;
wire   [0:0] icmp_ln60_fu_872_p2;
wire   [6:0] empty_47_fu_881_p1;
reg   [6:0] empty_47_reg_1319;
wire   [29:0] grp_fu_541_p4;
reg   [29:0] p_cast9_reg_1324;
wire   [31:0] i_1_cast_cast_fu_885_p1;
reg   [31:0] i_1_cast_cast_reg_1329;
wire    ap_CS_fsm_state70;
wire  signed [13:0] grp_fu_1033_p2;
reg  signed [13:0] empty_48_reg_1339;
wire   [31:0] add_ln62_fu_889_p2;
reg   [31:0] add_ln62_reg_1344;
wire    ap_CS_fsm_state72;
wire   [0:0] icmp_ln62_fu_899_p2;
(* use_dsp48 = "no" *) wire   [13:0] add_ln65_fu_913_p2;
reg   [13:0] add_ln65_reg_1357;
reg   [6:0] b_t_addr_1_reg_1362;
wire   [31:0] x_t_q0;
reg   [31:0] x_t_load_reg_1367;
wire    ap_CS_fsm_state73;
reg   [13:0] w_t_addr_2_reg_1372;
wire    ap_CS_fsm_state80;
wire   [61:0] empty_50_fu_932_p2;
reg    ap_enable_reg_pp6_iter0;
wire   [0:0] exitcond6312_fu_938_p2;
wire   [61:0] empty_54_fu_968_p2;
reg    ap_enable_reg_pp7_iter0;
wire   [0:0] exitcond6211_fu_974_p2;
wire   [61:0] empty_58_fu_1004_p2;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter0;
wire    ap_block_state114_pp8_stage0_iter0;
wire    ap_block_state115_pp8_stage0_iter1;
wire    ap_block_state116_pp8_stage0_iter2;
reg    ap_block_state116_io;
reg    ap_block_pp8_stage0_11001;
wire   [0:0] exitcond10_fu_1010_p2;
wire   [31:0] dx_t_q0;
reg   [31:0] dx_t_load_reg_1437;
reg    ap_enable_reg_pp8_iter1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state19;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state32;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state33;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state42;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state43;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state52;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state53;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state60;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg    ap_enable_reg_pp5_iter4;
reg    ap_enable_reg_pp5_iter6;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state98;
reg    ap_block_state105;
reg    ap_block_state105_io;
reg    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state106;
reg    ap_block_state113;
reg    ap_block_state113_io;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state114;
reg   [6:0] x_t_address0;
reg    x_t_ce0;
reg    x_t_we0;
wire   [31:0] x_t_d0;
reg   [6:0] b_t_address0;
reg    b_t_ce0;
reg    b_t_we0;
reg   [31:0] b_t_d0;
reg   [13:0] w_t_address0;
reg    w_t_ce0;
reg    w_t_we0;
reg   [31:0] w_t_d0;
reg   [6:0] dx_t_address0;
reg    dx_t_ce0;
reg    dx_t_we0;
reg   [31:0] dx_t_d0;
reg   [6:0] dy_t_address0;
reg    dy_t_ce0;
reg    dy_t_we0;
wire   [31:0] dy_t_d0;
reg   [31:0] i_1_reg_478;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state67;
reg   [31:0] j_reg_489;
wire    ap_CS_fsm_state87;
wire   [31:0] loop_index58_cast_cast_fu_653_p1;
wire   [31:0] loop_index52_cast_cast_fu_695_p1;
wire   [31:0] loop_index46_cast_cast_fu_741_p1;
wire   [31:0] loop_index40_cast_cast_fu_775_p1;
wire   [31:0] loop_index34_cast_cast_fu_818_p1;
wire   [31:0] add_ln48_cast12_fu_827_p1;
wire   [31:0] i_cast_cast_fu_851_p1;
wire    ap_block_pp5_stage0;
wire   [31:0] zext_ln51_fu_861_p1;
wire   [31:0] zext_ln64_fu_908_p1;
wire   [31:0] zext_ln65_fu_918_p1;
wire   [31:0] loop_index28_cast_cast_fu_947_p1;
wire   [31:0] loop_index22_cast_cast_fu_983_p1;
wire   [31:0] loop_index_cast_cast_fu_1019_p1;
wire  signed [31:0] p_cast_cast_fu_623_p1;
wire  signed [31:0] p_cast1_cast_fu_665_p1;
wire  signed [31:0] p_cast2_cast_fu_711_p1;
wire  signed [31:0] p_cast3_cast_fu_745_p1;
wire  signed [31:0] p_cast4_cast_fu_788_p1;
wire  signed [31:0] p_cast9_cast_fu_922_p1;
wire  signed [31:0] p_cast10_cast_fu_957_p1;
wire  signed [31:0] p_cast11_cast_fu_993_p1;
reg    ap_block_state2_io;
reg    ap_block_state13_io;
reg    ap_block_state26_io;
reg    ap_block_state36_io;
reg    ap_block_state46_io;
wire   [31:0] empty_53_fu_952_p1;
wire    ap_block_pp6_stage0_01001;
wire   [31:0] empty_57_fu_988_p1;
wire    ap_block_pp7_stage0_01001;
reg    ap_block_state121;
wire   [31:0] empty_61_fu_1024_p1;
wire    ap_block_pp8_stage0_01001;
wire   [31:0] empty_32_fu_691_p1;
wire    ap_CS_fsm_state89;
wire   [31:0] empty_36_fu_737_p1;
wire   [31:0] empty_40_fu_771_p1;
reg   [31:0] grp_fu_533_p0;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state91;
reg   [31:0] grp_fu_537_p0;
reg   [31:0] grp_fu_537_p1;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state78;
wire  signed [31:0] empty_fu_597_p0;
wire  signed [31:0] empty_24_fu_601_p0;
wire  signed [31:0] icmp_ln41_fu_605_p0;
wire   [29:0] p_cast_fu_614_p4;
wire    ap_CS_fsm_state23;
wire   [29:0] grp_fu_550_p4;
wire   [29:0] grp_fu_559_p4;
wire   [29:0] p_cast4_fu_779_p4;
wire   [13:0] empty_46_fu_847_p1;
(* use_dsp48 = "no" *) wire   [13:0] add_ln51_fu_856_p2;
wire   [6:0] trunc_ln64_fu_904_p1;
wire   [13:0] trunc_ln62_fu_895_p1;
wire   [6:0] empty_52_fu_943_p1;
wire   [13:0] empty_56_fu_979_p1;
wire   [6:0] empty_60_fu_1015_p1;
wire  signed [13:0] grp_fu_1028_p0;
wire  signed [13:0] grp_fu_1033_p0;
reg   [98:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 99'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter5 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter6 = 1'b0;
end

backward_fcc_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .w(w),
    .b(b),
    .dx(dx),
    .dy(dy),
    .xdimension(xdimension),
    .ydimension(ydimension),
    .lr(lr),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

backward_fcc_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(gmem_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

backward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
x_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_t_address0),
    .ce0(x_t_ce0),
    .we0(x_t_we0),
    .d0(x_t_d0),
    .q0(x_t_q0)
);

backward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
b_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b_t_address0),
    .ce0(b_t_ce0),
    .we0(b_t_we0),
    .d0(b_t_d0),
    .q0(b_t_q0)
);

backward_fcc_w_t #(
    .DataWidth( 32 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
w_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_t_address0),
    .ce0(w_t_ce0),
    .we0(w_t_we0),
    .d0(w_t_d0),
    .q0(w_t_q0)
);

backward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
dx_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dx_t_address0),
    .ce0(dx_t_ce0),
    .we0(dx_t_we0),
    .d0(dx_t_d0),
    .q0(dx_t_q0)
);

backward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
dy_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dy_t_address0),
    .ce0(dy_t_ce0),
    .we0(dy_t_we0),
    .d0(dy_t_d0),
    .q0(dy_t_q0)
);

backward_fcc_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_533_p0),
    .din1(reg_579),
    .ce(1'b1),
    .dout(grp_fu_533_p2)
);

backward_fcc_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_537_p0),
    .din1(grp_fu_537_p1),
    .ce(1'b1),
    .dout(grp_fu_537_p2)
);

backward_fcc_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydimension_read_reg_1043),
    .din1(xdimension_read_reg_1055),
    .ce(1'b1),
    .dout(grp_fu_699_p2)
);

backward_fcc_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1028_p0),
    .din1(empty_reg_1091),
    .ce(1'b1),
    .dout(grp_fu_1028_p2)
);

backward_fcc_mul_mul_14s_14s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
mul_mul_14s_14s_14_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1033_p0),
    .din1(empty_reg_1091),
    .ce(1'b1),
    .dout(grp_fu_1033_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state20))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state33))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state33)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state43))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state43)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state43);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state53))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state52)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state53)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state53);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state52)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state60))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state60)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state60);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            ap_enable_reg_pp5_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state98))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state98)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state98);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage0_subdone) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state106))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state106)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state106);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end else if ((~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
            ap_enable_reg_pp7_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage0_subdone) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b1 == ap_condition_pp8_exit_iter0_state114))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if ((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1))) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state114)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state114);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if ((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1))) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        i_1_reg_478 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        i_1_reg_478 <= add_ln60_reg_1306;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        i_reg_467 <= 32'd0;
    end else if (((icmp_ln48_fu_842_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        i_reg_467 <= add_ln48_1_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        j_reg_489 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        j_reg_489 <= add_ln62_reg_1344;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
        loop_index22_reg_511 <= 62'd0;
    end else if (((exitcond6211_fu_974_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        loop_index22_reg_511 <= empty_54_fu_968_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
        loop_index28_reg_500 <= 62'd0;
    end else if (((exitcond6312_fu_938_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        loop_index28_reg_500 <= empty_50_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        loop_index34_reg_456 <= 62'd0;
    end else if (((exitcond7718_fu_805_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        loop_index34_reg_456 <= empty_42_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        loop_index40_reg_445 <= 62'd0;
    end else if (((exitcond7819_fu_762_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        loop_index40_reg_445 <= empty_38_fu_756_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        loop_index46_reg_434 <= 62'd0;
    end else if (((exitcond7920_fu_728_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        loop_index46_reg_434 <= empty_34_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        loop_index52_reg_423 <= 62'd0;
    end else if (((exitcond8021_fu_682_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        loop_index52_reg_423 <= empty_30_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_index58_reg_412 <= 62'd0;
    end else if (((exitcond8122_fu_640_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loop_index58_reg_412 <= empty_26_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1))) begin
        loop_index_reg_522 <= 62'd0;
    end else if (((exitcond10_fu_1010_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        loop_index_reg_522 <= empty_58_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        add_ln48_reg_1267 <= add_ln48_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        add_ln60_reg_1306 <= add_ln60_fu_866_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        add_ln62_reg_1344 <= add_ln62_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state72))) begin
        add_ln65_reg_1357 <= add_ln65_fu_913_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_1076 <= b;
        dx_read_reg_1071 <= dx;
        dy_read_reg_1066 <= dy;
        empty_24_reg_1097 <= empty_24_fu_601_p1;
        empty_reg_1091 <= empty_fu_597_p1;
        icmp_ln41_reg_1102 <= icmp_ln41_fu_605_p2;
        lr_read_reg_1038 <= lr;
        w_read_reg_1081 <= w;
        x_read_reg_1086 <= x;
        xdimension_read_reg_1055 <= xdimension;
        ydimension_read_reg_1043 <= ydimension;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
        b_t_addr_1_reg_1362 <= i_1_cast_cast_reg_1329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        cmp148_reg_1278 <= cmp148_fu_831_p2;
        mul15_le_reg_1282 <= grp_fu_1028_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_842_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        dx_t_addr_1_reg_1296 <= i_cast_cast_fu_851_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        dx_t_addr_1_reg_1296_pp5_iter1_reg <= dx_t_addr_1_reg_1296;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        dx_t_addr_1_reg_1296_pp5_iter2_reg <= dx_t_addr_1_reg_1296_pp5_iter1_reg;
        dx_t_addr_1_reg_1296_pp5_iter3_reg <= dx_t_addr_1_reg_1296_pp5_iter2_reg;
        dx_t_addr_1_reg_1296_pp5_iter4_reg <= dx_t_addr_1_reg_1296_pp5_iter3_reg;
        dx_t_addr_1_reg_1296_pp5_iter5_reg <= dx_t_addr_1_reg_1296_pp5_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (exitcond10_reg_1428 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        dx_t_load_reg_1437 <= dx_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8122_fu_640_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_29_reg_1128 <= empty_29_fu_645_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_29_reg_1128_pp0_iter1_reg <= empty_29_reg_1128;
        exitcond8122_reg_1124 <= exitcond8122_fu_640_p2;
        exitcond8122_reg_1124_pp0_iter1_reg <= exitcond8122_reg_1124;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8021_fu_682_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_33_reg_1164 <= empty_33_fu_687_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        empty_33_reg_1164_pp1_iter1_reg <= empty_33_reg_1164;
        exitcond8021_reg_1160 <= exitcond8021_fu_682_p2;
        exitcond8021_reg_1160_pp1_iter1_reg <= exitcond8021_reg_1160;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7920_fu_728_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_37_reg_1207 <= empty_37_fu_733_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_37_reg_1207_pp2_iter1_reg <= empty_37_reg_1207;
        exitcond7920_reg_1203 <= exitcond7920_fu_728_p2;
        exitcond7920_reg_1203_pp2_iter1_reg <= exitcond7920_reg_1203;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7819_fu_762_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        empty_41_reg_1232 <= empty_41_fu_767_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        empty_41_reg_1232_pp3_iter1_reg <= empty_41_reg_1232;
        exitcond7819_reg_1228 <= exitcond7819_fu_762_p2;
        exitcond7819_reg_1228_pp3_iter1_reg <= exitcond7819_reg_1228;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7718_fu_805_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_45_reg_1257 <= empty_45_fu_810_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        empty_45_reg_1257_pp4_iter1_reg <= empty_45_reg_1257;
        exitcond7718_reg_1253 <= exitcond7718_fu_805_p2;
        exitcond7718_reg_1253_pp4_iter1_reg <= exitcond7718_reg_1253;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
        empty_47_reg_1319 <= empty_47_fu_881_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        empty_48_reg_1339 <= grp_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        exitcond10_reg_1428 <= exitcond10_fu_1010_p2;
        exitcond10_reg_1428_pp8_iter1_reg <= exitcond10_reg_1428;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        exitcond6211_reg_1408 <= exitcond6211_fu_974_p2;
        exitcond6211_reg_1408_pp7_iter1_reg <= exitcond6211_reg_1408;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        exitcond6312_reg_1388 <= exitcond6312_fu_938_p2;
        exitcond6312_reg_1388_pp6_iter1_reg <= exitcond6312_reg_1388;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8021_reg_1160 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem_addr_1_read_reg_1169 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7920_reg_1203 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem_addr_2_read_reg_1212 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7819_reg_1228 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        gmem_addr_3_read_reg_1237 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7718_reg_1253 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        gmem_addr_4_read_reg_1262 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8122_reg_1124 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_read_reg_1133 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        i_1_cast_cast_reg_1329[6 : 0] <= i_1_cast_cast_fu_885_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln42_reg_1138 <= icmp_ln42_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        icmp_ln43_reg_1182 <= icmp_ln43_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln43_reg_1174 <= grp_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_872_p2 == 1'd1) & (icmp_ln42_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
        p_cast9_reg_1324 <= {{b_read_reg_1076[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state59))) begin
        reg_568 <= dy_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | ((ap_enable_reg_pp7_iter1 == 1'b1) & (exitcond6211_reg_1408 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((cmp148_reg_1278 == 1'd1) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        reg_573 <= w_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state81) | ((ap_enable_reg_pp5_iter5 == 1'b1) & (cmp148_reg_1278 == 1'd1) & (1'b0 == ap_block_pp5_stage0_11001)))) begin
        reg_579 <= grp_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state86))) begin
        reg_586 <= grp_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) | ((ap_enable_reg_pp6_iter1 == 1'b1) & (exitcond6312_reg_1388 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0)))) begin
        reg_592 <= b_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln41_reg_1106 <= sext_ln41_fu_611_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sext_ln42_reg_1142 <= sext_ln42_fu_662_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sext_ln43_reg_1186 <= sext_ln43_fu_708_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        w_t_addr_2_reg_1372 <= zext_ln65_fu_918_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        x_t_load_reg_1367 <= x_t_q0;
    end
end

always @ (*) begin
    if ((exitcond8122_fu_640_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond8021_fu_682_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7920_fu_728_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7819_fu_762_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state43 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state43 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond7718_fu_805_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state53 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state53 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_842_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state60 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state60 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond6312_fu_938_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state98 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state98 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond6211_fu_974_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state106 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state106 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond10_fu_1010_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state114 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state114 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln41_reg_1102 == 1'd1)) & (1'b1 == ap_CS_fsm_state121))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter5 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln41_reg_1102 == 1'd1)) & (1'b1 == ap_CS_fsm_state121))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        b_t_address0 = loop_index28_cast_cast_fu_947_p1;
    end else if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state96))) begin
        b_t_address0 = b_t_addr_1_reg_1362;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        b_t_address0 = loop_index52_cast_cast_fu_695_p1;
    end else begin
        b_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state96) | ((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        b_t_ce0 = 1'b1;
    end else begin
        b_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        b_t_d0 = reg_586;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        b_t_d0 = empty_32_fu_691_p1;
    end else begin
        b_t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) | ((exitcond8021_reg_1160_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        b_t_we0 = 1'b1;
    end else begin
        b_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        dx_t_address0 = loop_index_cast_cast_fu_1019_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter6 == 1'b1))) begin
        dx_t_address0 = dx_t_addr_1_reg_1296_pp5_iter5_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dx_t_address0 = loop_index40_cast_cast_fu_775_p1;
    end else begin
        dx_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter6 == 1'b1)))) begin
        dx_t_ce0 = 1'b1;
    end else begin
        dx_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter6 == 1'b1))) begin
        dx_t_d0 = reg_579;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dx_t_d0 = empty_40_fu_771_p1;
    end else begin
        dx_t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((cmp148_reg_1278 == 1'd1) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter6 == 1'b1)) | ((exitcond7819_reg_1228_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        dx_t_we0 = 1'b1;
    end else begin
        dx_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        dy_t_address0 = i_1_cast_cast_fu_885_p1;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        dy_t_address0 = add_ln48_cast12_fu_827_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        dy_t_address0 = loop_index34_cast_cast_fu_818_p1;
    end else begin
        dy_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state58) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        dy_t_ce0 = 1'b1;
    end else begin
        dy_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond7718_reg_1253_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        dy_t_we0 = 1'b1;
    end else begin
        dy_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46))) begin
        gmem_ARADDR = p_cast4_cast_fu_788_p1;
    end else if (((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln41_reg_1102 == 1'd1))) begin
        gmem_ARADDR = p_cast3_cast_fu_745_p1;
    end else if (((icmp_ln43_reg_1182 == 1'd1) & (1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
        gmem_ARADDR = p_cast2_cast_fu_711_p1;
    end else if (((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
        gmem_ARADDR = p_cast1_cast_fu_665_p1;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln41_reg_1102 == 1'd1))) begin
        gmem_ARADDR = p_cast_cast_fu_623_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_1182 == 1'd1) & (1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
        gmem_ARLEN = mul_ln43_reg_1174;
    end else if ((((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46)) | ((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)))) begin
        gmem_ARLEN = ydimension_read_reg_1043;
    end else if ((((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln41_reg_1102 == 1'd1)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln41_reg_1102 == 1'd1)))) begin
        gmem_ARLEN = xdimension_read_reg_1055;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln43_reg_1182 == 1'd1) & (1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26)) | ((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46)) | ((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln41_reg_1102 == 1'd1)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln41_reg_1102 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1))) begin
        gmem_AWADDR = p_cast11_cast_fu_993_p1;
    end else if ((~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
        gmem_AWADDR = p_cast10_cast_fu_957_p1;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
        gmem_AWADDR = p_cast9_cast_fu_922_p1;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1))) begin
        gmem_AWLEN = xdimension_read_reg_1055;
    end else if ((~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
        gmem_AWLEN = mul_ln43_reg_1174;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
        gmem_AWLEN = ydimension_read_reg_1043;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1)) | (~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_BVALID == 1'b0) & (icmp_ln41_reg_1102 == 1'd1)) & (1'b1 == ap_CS_fsm_state121) & (icmp_ln41_reg_1102 == 1'd1)) | (~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state113)) | (~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln42_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state105)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond8021_reg_1160 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond7920_reg_1203 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond7819_reg_1228 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((exitcond7718_reg_1253 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((exitcond8122_reg_1124 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond10_reg_1428_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_01001))) begin
        gmem_WDATA = empty_61_fu_1024_p1;
    end else if (((exitcond6211_reg_1408_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_01001))) begin
        gmem_WDATA = empty_57_fu_988_p1;
    end else if (((exitcond6312_reg_1388_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_01001))) begin
        gmem_WDATA = empty_53_fu_952_p1;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond6211_reg_1408_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001)) | ((exitcond10_reg_1428_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)) | ((exitcond6312_reg_1388_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state36) & (icmp_ln41_reg_1102 == 1'd1)) | ((icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state26)) | ((icmp_ln42_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln42_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state46)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln41_reg_1102 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | ((icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105)) | ((1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state113)) | ((1'b1 == ap_CS_fsm_state121) & (icmp_ln41_reg_1102 == 1'd1)) | ((icmp_ln42_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state105)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond8021_reg_1160 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((exitcond7920_reg_1203 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((exitcond7819_reg_1228 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((exitcond7718_reg_1253 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((exitcond8122_reg_1124 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond6211_reg_1408_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0)) | ((exitcond10_reg_1428_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0)) | ((exitcond6312_reg_1388_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        grp_fu_533_p0 = reg_592;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_533_p0 = reg_573;
    end else begin
        grp_fu_533_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_537_p0 = reg_579;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state74) | ((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
        grp_fu_537_p0 = reg_568;
    end else begin
        grp_fu_537_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_537_p1 = x_t_load_reg_1367;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state78))) begin
        grp_fu_537_p1 = lr_read_reg_1038;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        grp_fu_537_p1 = reg_573;
    end else begin
        grp_fu_537_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        w_t_address0 = loop_index22_cast_cast_fu_983_p1;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        w_t_address0 = w_t_addr_2_reg_1372;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        w_t_address0 = zext_ln65_fu_918_p1;
    end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        w_t_address0 = zext_ln51_fu_861_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        w_t_address0 = loop_index46_cast_cast_fu_741_p1;
    end else begin
        w_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state87) | ((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        w_t_ce0 = 1'b1;
    end else begin
        w_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        w_t_d0 = reg_586;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        w_t_d0 = empty_36_fu_737_p1;
    end else begin
        w_t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((exitcond7920_reg_1203_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        w_t_we0 = 1'b1;
    end else begin
        w_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        x_t_address0 = zext_ln64_fu_908_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_t_address0 = loop_index58_cast_cast_fu_653_p1;
    end else begin
        x_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        x_t_ce0 = 1'b1;
    end else begin
        x_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond8122_reg_1124_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        x_t_we0 = 1'b1;
    end else begin
        x_t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln41_reg_1102 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln41_reg_1102 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond8122_fu_640_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond8122_fu_640_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln42_reg_1138 == 1'd0) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond8021_fu_682_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond8021_fu_682_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln43_reg_1182 == 1'd0) & (1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if (((icmp_ln43_reg_1182 == 1'd1) & (1'b0 == ap_block_state26_io) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond7920_fu_728_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((exitcond7920_fu_728_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln41_reg_1102 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else if (((1'b0 == ap_block_state36_io) & (1'b1 == ap_CS_fsm_state36) & (icmp_ln41_reg_1102 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((exitcond7819_fu_762_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((exitcond7819_fu_762_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((icmp_ln42_reg_1138 == 1'd0) & (1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else if (((icmp_ln42_reg_1138 == 1'd1) & (1'b0 == ap_block_state46_io) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((exitcond7718_fu_805_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((exitcond7718_fu_805_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((icmp_ln48_fu_842_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter5 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter5 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter6 == 1'b1)) | ((icmp_ln48_fu_842_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((icmp_ln60_fu_872_p2 == 1'd1) & (icmp_ln42_reg_1138 == 1'd0) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end else if (((icmp_ln60_fu_872_p2 == 1'd1) & (icmp_ln42_reg_1138 == 1'd1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((icmp_ln62_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state97 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((exitcond6312_fu_938_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((exitcond6312_fu_938_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            if ((~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd1) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((~((1'b1 == ap_block_state105_io) | ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1))) & (icmp_ln43_reg_1182 == 1'd0) & (1'b1 == ap_CS_fsm_state105))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((exitcond6211_fu_974_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone)) & ~((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((exitcond6211_fu_974_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            if ((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((~((1'b1 == ap_block_state113_io) | ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1))) & (1'b1 == ap_CS_fsm_state113) & (icmp_ln41_reg_1102 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((ap_enable_reg_pp8_iter1 == 1'b0) & (exitcond10_fu_1010_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) & ~((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) | ((ap_enable_reg_pp8_iter1 == 1'b0) & (exitcond10_fu_1010_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln41_reg_1102 == 1'd1)) & (1'b1 == ap_CS_fsm_state121))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state121;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_1_fu_836_p2 = (i_reg_467 + 32'd1);

assign add_ln48_cast12_fu_827_p1 = $unsigned(add_ln48_reg_1267);

assign add_ln48_fu_822_p2 = ($signed(empty_24_reg_1097) + $signed(14'd16383));

assign add_ln51_fu_856_p2 = ($signed(empty_46_fu_847_p1) + $signed(mul15_le_reg_1282));

assign add_ln60_fu_866_p2 = (i_1_reg_478 + 32'd1);

assign add_ln62_fu_889_p2 = (j_reg_489 + 32'd1);

assign add_ln65_fu_913_p2 = ($signed(trunc_ln62_fu_895_p1) + $signed(empty_48_reg_1339));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd80];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond8122_reg_1124 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond8122_reg_1124 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond8021_reg_1160 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond8021_reg_1160 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond7920_reg_1203 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond7920_reg_1203 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond7819_reg_1228 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond7819_reg_1228 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond7718_reg_1253 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond7718_reg_1253 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b1 == ap_block_state100_io));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b1 == ap_block_state100_io));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage0_11001 = ((ap_enable_reg_pp7_iter2 == 1'b1) & (1'b1 == ap_block_state108_io));
end

always @ (*) begin
    ap_block_pp7_stage0_subdone = ((ap_enable_reg_pp7_iter2 == 1'b1) & (1'b1 == ap_block_state108_io));
end

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b1 == ap_block_state116_io));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b1 == ap_block_state116_io));
end

always @ (*) begin
    ap_block_state100_io = ((gmem_WREADY == 1'b0) & (exitcond6312_reg_1388_pp6_iter1_reg == 1'd0));
end

assign ap_block_state100_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state105 = ((gmem_BVALID == 1'b0) & (icmp_ln42_reg_1138 == 1'd1));
end

always @ (*) begin
    ap_block_state105_io = ((gmem_AWREADY == 1'b0) & (icmp_ln43_reg_1182 == 1'd1));
end

assign ap_block_state106_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state108_io = ((gmem_WREADY == 1'b0) & (exitcond6211_reg_1408_pp7_iter1_reg == 1'd0));
end

assign ap_block_state108_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond8122_reg_1124 == 1'd0));
end

always @ (*) begin
    ap_block_state113 = ((gmem_BVALID == 1'b0) & (icmp_ln43_reg_1182 == 1'd1));
end

always @ (*) begin
    ap_block_state113_io = ((gmem_AWREADY == 1'b0) & (icmp_ln41_reg_1102 == 1'd1));
end

assign ap_block_state114_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp8_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state116_io = ((gmem_WREADY == 1'b0) & (exitcond10_reg_1428_pp8_iter1_reg == 1'd0));
end

assign ap_block_state116_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state121 = ((gmem_BVALID == 1'b0) & (icmp_ln41_reg_1102 == 1'd1));
end

always @ (*) begin
    ap_block_state13_io = ((gmem_ARREADY == 1'b0) & (icmp_ln42_reg_1138 == 1'd1));
end

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond8021_reg_1160 == 1'd0));
end

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = ((gmem_ARREADY == 1'b0) & (icmp_ln43_reg_1182 == 1'd1));
end

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (icmp_ln41_reg_1102 == 1'd1));
end

assign ap_block_state33_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond7920_reg_1203 == 1'd0));
end

assign ap_block_state35_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state36_io = ((gmem_ARREADY == 1'b0) & (icmp_ln41_reg_1102 == 1'd1));
end

assign ap_block_state43_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state44_pp3_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond7819_reg_1228 == 1'd0));
end

assign ap_block_state45_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state46_io = ((gmem_ARREADY == 1'b0) & (icmp_ln42_reg_1138 == 1'd1));
end

assign ap_block_state53_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_pp4_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond7718_reg_1253 == 1'd0));
end

assign ap_block_state55_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp5_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp5_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp148_fu_831_p2 = (($signed(ydimension_read_reg_1043) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign dy_t_d0 = gmem_addr_4_read_reg_1262;

assign empty_24_fu_601_p0 = ydimension;

assign empty_24_fu_601_p1 = empty_24_fu_601_p0[13:0];

assign empty_26_fu_634_p2 = (loop_index58_reg_412 + 62'd1);

assign empty_29_fu_645_p1 = loop_index58_reg_412[6:0];

assign empty_30_fu_676_p2 = (loop_index52_reg_423 + 62'd1);

assign empty_32_fu_691_p1 = gmem_addr_1_read_reg_1169;

assign empty_33_fu_687_p1 = loop_index52_reg_423[6:0];

assign empty_34_fu_722_p2 = (loop_index46_reg_434 + 62'd1);

assign empty_36_fu_737_p1 = gmem_addr_2_read_reg_1212;

assign empty_37_fu_733_p1 = loop_index46_reg_434[13:0];

assign empty_38_fu_756_p2 = (loop_index40_reg_445 + 62'd1);

assign empty_40_fu_771_p1 = gmem_addr_3_read_reg_1237;

assign empty_41_fu_767_p1 = loop_index40_reg_445[6:0];

assign empty_42_fu_799_p2 = (loop_index34_reg_456 + 62'd1);

assign empty_45_fu_810_p1 = loop_index34_reg_456[6:0];

assign empty_46_fu_847_p1 = i_reg_467[13:0];

assign empty_47_fu_881_p1 = i_1_reg_478[6:0];

assign empty_50_fu_932_p2 = (loop_index28_reg_500 + 62'd1);

assign empty_52_fu_943_p1 = loop_index28_reg_500[6:0];

assign empty_53_fu_952_p1 = reg_592;

assign empty_54_fu_968_p2 = (loop_index22_reg_511 + 62'd1);

assign empty_56_fu_979_p1 = loop_index22_reg_511[13:0];

assign empty_57_fu_988_p1 = reg_573;

assign empty_58_fu_1004_p2 = (loop_index_reg_522 + 62'd1);

assign empty_60_fu_1015_p1 = loop_index_reg_522[6:0];

assign empty_61_fu_1024_p1 = dx_t_load_reg_1437;

assign empty_fu_597_p0 = xdimension;

assign empty_fu_597_p1 = empty_fu_597_p0[13:0];

assign exitcond10_fu_1010_p2 = ((loop_index_reg_522 == sext_ln41_reg_1106) ? 1'b1 : 1'b0);

assign exitcond6211_fu_974_p2 = ((loop_index22_reg_511 == sext_ln43_reg_1186) ? 1'b1 : 1'b0);

assign exitcond6312_fu_938_p2 = ((loop_index28_reg_500 == sext_ln42_reg_1142) ? 1'b1 : 1'b0);

assign exitcond7718_fu_805_p2 = ((loop_index34_reg_456 == sext_ln42_reg_1142) ? 1'b1 : 1'b0);

assign exitcond7819_fu_762_p2 = ((loop_index40_reg_445 == sext_ln41_reg_1106) ? 1'b1 : 1'b0);

assign exitcond7920_fu_728_p2 = ((loop_index46_reg_434 == sext_ln43_reg_1186) ? 1'b1 : 1'b0);

assign exitcond8021_fu_682_p2 = ((loop_index52_reg_423 == sext_ln42_reg_1142) ? 1'b1 : 1'b0);

assign exitcond8122_fu_640_p2 = ((loop_index58_reg_412 == sext_ln41_reg_1106) ? 1'b1 : 1'b0);

assign grp_fu_1028_p0 = ($signed(empty_24_reg_1097) + $signed(14'd16383));

assign grp_fu_1033_p0 = i_1_reg_478[13:0];

assign grp_fu_541_p4 = {{b_read_reg_1076[31:2]}};

assign grp_fu_550_p4 = {{w_read_reg_1081[31:2]}};

assign grp_fu_559_p4 = {{dx_read_reg_1071[31:2]}};

assign i_1_cast_cast_fu_885_p1 = empty_47_reg_1319;

assign i_cast_cast_fu_851_p1 = empty_46_fu_847_p1;

assign icmp_ln41_fu_605_p0 = xdimension;

assign icmp_ln41_fu_605_p2 = ((icmp_ln41_fu_605_p0 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_657_p2 = ((ydimension_read_reg_1043 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_703_p2 = ((mul_ln43_reg_1174 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_842_p2 = ((i_reg_467 == xdimension_read_reg_1055) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_872_p2 = ((i_1_reg_478 == ydimension_read_reg_1043) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_899_p2 = ((j_reg_489 == xdimension_read_reg_1055) ? 1'b1 : 1'b0);

assign loop_index22_cast_cast_fu_983_p1 = empty_56_fu_979_p1;

assign loop_index28_cast_cast_fu_947_p1 = empty_52_fu_943_p1;

assign loop_index34_cast_cast_fu_818_p1 = empty_45_reg_1257_pp4_iter1_reg;

assign loop_index40_cast_cast_fu_775_p1 = empty_41_reg_1232_pp3_iter1_reg;

assign loop_index46_cast_cast_fu_741_p1 = empty_37_reg_1207_pp2_iter1_reg;

assign loop_index52_cast_cast_fu_695_p1 = empty_33_reg_1164_pp1_iter1_reg;

assign loop_index58_cast_cast_fu_653_p1 = empty_29_reg_1128_pp0_iter1_reg;

assign loop_index_cast_cast_fu_1019_p1 = empty_60_fu_1015_p1;

assign p_cast10_cast_fu_957_p1 = $signed(grp_fu_550_p4);

assign p_cast11_cast_fu_993_p1 = $signed(grp_fu_559_p4);

assign p_cast1_cast_fu_665_p1 = $signed(grp_fu_541_p4);

assign p_cast2_cast_fu_711_p1 = $signed(grp_fu_550_p4);

assign p_cast3_cast_fu_745_p1 = $signed(grp_fu_559_p4);

assign p_cast4_cast_fu_788_p1 = $signed(p_cast4_fu_779_p4);

assign p_cast4_fu_779_p4 = {{dy_read_reg_1066[31:2]}};

assign p_cast9_cast_fu_922_p1 = $signed(p_cast9_reg_1324);

assign p_cast_cast_fu_623_p1 = $signed(p_cast_fu_614_p4);

assign p_cast_fu_614_p4 = {{x_read_reg_1086[31:2]}};

assign sext_ln41_fu_611_p1 = xdimension_read_reg_1055;

assign sext_ln42_fu_662_p1 = ydimension_read_reg_1043;

assign sext_ln43_fu_708_p1 = mul_ln43_reg_1174;

assign trunc_ln62_fu_895_p1 = j_reg_489[13:0];

assign trunc_ln64_fu_904_p1 = j_reg_489[6:0];

assign x_t_d0 = gmem_addr_read_reg_1133;

assign zext_ln51_fu_861_p1 = add_ln51_fu_856_p2;

assign zext_ln64_fu_908_p1 = trunc_ln64_fu_904_p1;

assign zext_ln65_fu_918_p1 = add_ln65_reg_1357;

always @ (posedge ap_clk) begin
    i_1_cast_cast_reg_1329[31:7] <= 25'b0000000000000000000000000;
end

endmodule //backward_fcc
