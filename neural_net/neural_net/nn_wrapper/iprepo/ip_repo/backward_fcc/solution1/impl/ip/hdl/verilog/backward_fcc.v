// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="backward_fcc_backward_fcc,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=3254,HLS_SYN_LUT=3476,HLS_VERSION=2020_2}" *)

module backward_fcc (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_pp0_stage0 = 39'd512;
parameter    ap_ST_fsm_state29 = 39'd1024;
parameter    ap_ST_fsm_state30 = 39'd2048;
parameter    ap_ST_fsm_state31 = 39'd4096;
parameter    ap_ST_fsm_state32 = 39'd8192;
parameter    ap_ST_fsm_state33 = 39'd16384;
parameter    ap_ST_fsm_state34 = 39'd32768;
parameter    ap_ST_fsm_state35 = 39'd65536;
parameter    ap_ST_fsm_state36 = 39'd131072;
parameter    ap_ST_fsm_state37 = 39'd262144;
parameter    ap_ST_fsm_state38 = 39'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 39'd1048576;
parameter    ap_ST_fsm_state46 = 39'd2097152;
parameter    ap_ST_fsm_state47 = 39'd4194304;
parameter    ap_ST_fsm_state48 = 39'd8388608;
parameter    ap_ST_fsm_state49 = 39'd16777216;
parameter    ap_ST_fsm_state50 = 39'd33554432;
parameter    ap_ST_fsm_state51 = 39'd67108864;
parameter    ap_ST_fsm_state52 = 39'd134217728;
parameter    ap_ST_fsm_state53 = 39'd268435456;
parameter    ap_ST_fsm_state54 = 39'd536870912;
parameter    ap_ST_fsm_state55 = 39'd1073741824;
parameter    ap_ST_fsm_state56 = 39'd2147483648;
parameter    ap_ST_fsm_state57 = 39'd4294967296;
parameter    ap_ST_fsm_pp2_stage0 = 39'd8589934592;
parameter    ap_ST_fsm_state61 = 39'd17179869184;
parameter    ap_ST_fsm_state62 = 39'd34359738368;
parameter    ap_ST_fsm_state63 = 39'd68719476736;
parameter    ap_ST_fsm_state64 = 39'd137438953472;
parameter    ap_ST_fsm_state65 = 39'd274877906944;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] x;
wire   [63:0] w;
wire   [63:0] y;
wire   [63:0] b;
wire   [63:0] dx;
wire   [63:0] dy;
wire   [63:0] db;
wire   [63:0] dw;
wire   [31:0] xdim;
wire   [31:0] ydim;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] cmp114_reg_783;
reg    ap_enable_reg_pp0_iter8;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter12;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter13;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter18;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln24_reg_892;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state38;
reg    ap_enable_reg_pp1_iter6;
reg   [0:0] icmp_ln24_reg_892_pp1_iter5_reg;
wire    ap_CS_fsm_state50;
reg   [0:0] icmp_ln16_reg_779;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln30_reg_911;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln30_reg_911_pp2_iter1_reg;
wire    ap_CS_fsm_state65;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] i_reg_298;
reg   [30:0] j_reg_331;
reg   [30:0] i_2_reg_342;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] reg_357;
wire    ap_block_state10_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_state11_io;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_state15_pp0_stage0_iter5;
wire    ap_block_state16_pp0_stage0_iter6;
wire    ap_block_state17_pp0_stage0_iter7;
reg    ap_block_state18_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state20_pp0_stage0_iter10;
wire    ap_block_state21_pp0_stage0_iter11;
wire    ap_block_state22_pp0_stage0_iter12;
reg    ap_block_state22_io;
wire    ap_block_state23_pp0_stage0_iter13;
reg    ap_block_state23_io;
wire    ap_block_state24_pp0_stage0_iter14;
wire    ap_block_state25_pp0_stage0_iter15;
wire    ap_block_state26_pp0_stage0_iter16;
wire    ap_block_state27_pp0_stage0_iter17;
reg    ap_block_state28_pp0_stage0_iter18;
reg    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp1_iter5;
wire    ap_block_state39_pp1_stage0_iter0;
reg    ap_block_state40_pp1_stage0_iter1;
wire    ap_block_state41_pp1_stage0_iter2;
wire    ap_block_state42_pp1_stage0_iter3;
wire    ap_block_state43_pp1_stage0_iter4;
wire    ap_block_state44_pp1_stage0_iter5;
wire    ap_block_state45_pp1_stage0_iter6;
reg    ap_block_state45_io;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln24_reg_892_pp1_iter4_reg;
reg   [31:0] ydim_read_reg_718;
reg  signed [31:0] xdim_read_reg_726;
reg   [63:0] dw_read_reg_737;
reg   [63:0] db_read_reg_742;
reg   [63:0] dy_read_reg_747;
reg   [63:0] dx_read_reg_753;
reg   [63:0] w_read_reg_758;
reg   [63:0] x_read_reg_763;
wire  signed [31:0] add_ln16_fu_361_p2;
reg  signed [31:0] add_ln16_reg_768;
reg   [63:0] gmem_addr_reg_773;
wire   [0:0] icmp_ln16_fu_409_p2;
wire   [0:0] cmp114_fu_414_p2;
wire  signed [33:0] sext_ln16_fu_419_p1;
reg  signed [33:0] sext_ln16_reg_787;
wire   [31:0] bitcast_ln18_fu_423_p1;
reg   [31:0] bitcast_ln18_reg_792;
wire   [31:0] add_ln16_1_fu_427_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln16_1_fu_433_p2;
reg   [63:0] gmem_addr_2_reg_806;
reg   [63:0] gmem_addr_3_reg_812;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter1_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter2_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter3_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter4_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter5_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter6_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter7_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter8_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter9_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter10_reg;
reg   [63:0] gmem_addr_3_reg_812_pp0_iter11_reg;
reg   [31:0] gmem_addr_2_read_reg_818;
wire   [31:0] bitcast_ln18_1_fu_521_p1;
wire   [30:0] trunc_ln24_fu_530_p1;
reg   [30:0] trunc_ln24_reg_828;
wire    ap_CS_fsm_state29;
reg   [63:0] gmem_addr_1_reg_834;
wire   [61:0] xdim_cast_fu_552_p1;
reg   [61:0] xdim_cast_reg_840;
wire   [30:0] add_ln23_fu_555_p2;
reg   [30:0] add_ln23_reg_845;
wire    ap_CS_fsm_state30;
wire   [61:0] add_ln23_1_fu_561_p2;
reg   [61:0] add_ln23_1_reg_850;
reg   [63:0] gmem_addr_6_reg_858;
wire   [0:0] icmp_ln23_fu_566_p2;
reg   [63:0] gmem_addr_7_reg_864;
reg   [63:0] gmem_addr_4_reg_870;
reg   [63:0] gmem_addr_5_reg_876;
wire   [31:0] empty_30_fu_679_p1;
reg   [31:0] empty_30_reg_882;
wire   [30:0] add_ln24_fu_683_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln24_fu_693_p2;
reg   [0:0] icmp_ln24_reg_892_pp1_iter1_reg;
reg   [0:0] icmp_ln24_reg_892_pp1_iter2_reg;
reg   [0:0] icmp_ln24_reg_892_pp1_iter3_reg;
reg   [31:0] gmem_addr_1_read_reg_896;
wire   [31:0] bitcast_ln25_fu_698_p1;
wire   [30:0] add_ln30_fu_707_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state58_pp2_stage0_iter0;
reg    ap_block_state59_pp2_stage0_iter1;
wire    ap_block_state60_pp2_stage0_iter2;
reg    ap_block_state60_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln30_fu_713_p2;
reg   [31:0] gmem_addr_4_read_reg_915;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state39;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
wire    ap_CS_fsm_state57;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state58;
reg   [30:0] i_1_reg_309;
reg    ap_block_state50;
reg   [61:0] phi_mul_reg_320;
wire  signed [63:0] sext_ln18_fu_395_p1;
wire  signed [63:0] sext_ln18_2_fu_491_p1;
wire  signed [63:0] sext_ln18_3_fu_511_p1;
wire  signed [63:0] sext_ln24_fu_542_p1;
wire  signed [63:0] p_cast_cast_fu_611_p1;
wire  signed [63:0] sext_ln24_1_fu_631_p1;
wire  signed [63:0] sext_ln30_fu_650_p1;
wire  signed [63:0] sext_ln30_1_fu_669_p1;
wire   [31:0] bitcast_ln18_2_fu_525_p1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state31_io;
wire   [31:0] bitcast_ln25_1_fu_702_p1;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_state51_io;
reg    ap_block_state65;
reg    ap_block_pp2_stage0_01001;
reg   [31:0] grp_fu_353_p0;
reg   [31:0] grp_fu_353_p1;
wire   [33:0] tmp_fu_367_p3;
wire  signed [63:0] p_cast1_fu_375_p1;
wire   [63:0] empty_fu_379_p2;
wire   [61:0] trunc_ln_fu_385_p4;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_405_p2;
wire   [33:0] tmp_1_fu_442_p3;
wire   [63:0] p_cast2_fu_450_p1;
wire   [33:0] i_cast_fu_438_p1;
wire   [33:0] add_ln18_fu_459_p2;
wire   [35:0] tmp_2_fu_464_p3;
wire  signed [63:0] sext_ln18_1_fu_472_p1;
wire   [63:0] add_ln18_1_fu_476_p2;
wire   [61:0] trunc_ln18_1_fu_481_p4;
wire   [63:0] empty_26_fu_454_p2;
wire   [61:0] trunc_ln18_2_fu_501_p4;
wire   [61:0] trunc_ln1_fu_533_p4;
wire   [63:0] tmp_3_fu_571_p3;
wire   [32:0] tmp_4_fu_584_p3;
wire   [63:0] p_cast5_fu_592_p1;
wire   [63:0] empty_29_fu_596_p2;
wire   [61:0] p_cast_fu_601_p4;
wire   [63:0] empty_28_fu_579_p2;
wire   [61:0] trunc_ln24_1_fu_621_p4;
wire   [61:0] trunc_ln2_fu_641_p4;
wire   [61:0] trunc_ln30_1_fu_660_p4;
wire   [31:0] j_cast_fu_689_p1;
reg    grp_fu_353_ce;
reg    grp_fu_405_ce;
reg   [38:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
end

backward_fcc_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .w(w),
    .y(y),
    .b(b),
    .dx(dx),
    .dy(dy),
    .db(db),
    .dw(dw),
    .xdim(xdim),
    .ydim(ydim),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

backward_fcc_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(gmem_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

backward_fcc_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_353_p0),
    .din1(grp_fu_353_p1),
    .ce(grp_fu_353_ce),
    .dout(grp_fu_353_p2)
);

backward_fcc_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add_ln16_reg_768),
    .din1(xdim_read_reg_726),
    .ce(grp_fu_405_ce),
    .dout(grp_fu_405_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end else if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp0_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state39) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state39)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state39);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end else if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
            ap_enable_reg_pp1_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state58) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state58)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state58);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (cmp114_reg_783 == 1'd1))) begin
        i_1_reg_309 <= 31'd0;
    end else if ((~((gmem_BVALID == 1'b0) & (icmp_ln16_reg_779 == 1'd1)) & (1'b1 == ap_CS_fsm_state50))) begin
        i_1_reg_309 <= add_ln23_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        i_2_reg_342 <= 31'd0;
    end else if (((icmp_ln30_fu_713_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_342 <= add_ln30_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_reg_298 <= 32'd0;
    end else if (((icmp_ln16_1_fu_433_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_298 <= add_ln16_1_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        j_reg_331 <= 31'd0;
    end else if (((icmp_ln24_fu_693_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_reg_331 <= add_ln24_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (cmp114_reg_783 == 1'd1))) begin
        phi_mul_reg_320 <= 62'd0;
    end else if ((~((gmem_BVALID == 1'b0) & (icmp_ln16_reg_779 == 1'd1)) & (1'b1 == ap_CS_fsm_state50))) begin
        phi_mul_reg_320 <= add_ln23_1_reg_850;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln16_reg_768 <= add_ln16_fu_361_p2;
        db_read_reg_742 <= db;
        dw_read_reg_737 <= dw;
        dx_read_reg_753 <= dx;
        dy_read_reg_747 <= dy;
        gmem_addr_reg_773 <= sext_ln18_fu_395_p1;
        w_read_reg_758 <= w;
        x_read_reg_763 <= x;
        xdim_read_reg_726 <= xdim;
        ydim_read_reg_718 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        add_ln23_1_reg_850 <= add_ln23_1_fu_561_p2;
        add_ln23_reg_845 <= add_ln23_fu_555_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bitcast_ln18_reg_792 <= bitcast_ln18_fu_423_p1;
        cmp114_reg_783 <= cmp114_fu_414_p2;
        icmp_ln16_reg_779 <= icmp_ln16_fu_409_p2;
        sext_ln16_reg_787 <= sext_ln16_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        empty_30_reg_882 <= empty_30_fu_679_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln24_reg_892 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_read_reg_896 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & (cmp114_reg_783 == 1'd1))) begin
        gmem_addr_1_reg_834 <= sext_ln24_fu_542_p1;
        trunc_ln24_reg_828 <= trunc_ln24_fu_530_p1;
        xdim_cast_reg_840[31 : 0] <= xdim_cast_fu_552_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_2_read_reg_818 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_1_fu_433_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_2_reg_806 <= sext_ln18_2_fu_491_p1;
        gmem_addr_3_reg_812 <= sext_ln18_3_fu_511_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        gmem_addr_3_reg_812_pp0_iter10_reg <= gmem_addr_3_reg_812_pp0_iter9_reg;
        gmem_addr_3_reg_812_pp0_iter11_reg <= gmem_addr_3_reg_812_pp0_iter10_reg;
        gmem_addr_3_reg_812_pp0_iter2_reg <= gmem_addr_3_reg_812_pp0_iter1_reg;
        gmem_addr_3_reg_812_pp0_iter3_reg <= gmem_addr_3_reg_812_pp0_iter2_reg;
        gmem_addr_3_reg_812_pp0_iter4_reg <= gmem_addr_3_reg_812_pp0_iter3_reg;
        gmem_addr_3_reg_812_pp0_iter5_reg <= gmem_addr_3_reg_812_pp0_iter4_reg;
        gmem_addr_3_reg_812_pp0_iter6_reg <= gmem_addr_3_reg_812_pp0_iter5_reg;
        gmem_addr_3_reg_812_pp0_iter7_reg <= gmem_addr_3_reg_812_pp0_iter6_reg;
        gmem_addr_3_reg_812_pp0_iter8_reg <= gmem_addr_3_reg_812_pp0_iter7_reg;
        gmem_addr_3_reg_812_pp0_iter9_reg <= gmem_addr_3_reg_812_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_3_reg_812_pp0_iter1_reg <= gmem_addr_3_reg_812;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_911 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        gmem_addr_4_read_reg_915 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        gmem_addr_4_reg_870 <= sext_ln30_fu_650_p1;
        gmem_addr_5_reg_876 <= sext_ln30_1_fu_669_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_566_p2 == 1'd0) & (icmp_ln16_reg_779 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        gmem_addr_6_reg_858 <= p_cast_cast_fu_611_p1;
        gmem_addr_7_reg_864 <= sext_ln24_1_fu_631_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln24_reg_892 <= icmp_ln24_fu_693_p2;
        icmp_ln24_reg_892_pp1_iter1_reg <= icmp_ln24_reg_892;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln24_reg_892_pp1_iter2_reg <= icmp_ln24_reg_892_pp1_iter1_reg;
        icmp_ln24_reg_892_pp1_iter3_reg <= icmp_ln24_reg_892_pp1_iter2_reg;
        icmp_ln24_reg_892_pp1_iter4_reg <= icmp_ln24_reg_892_pp1_iter3_reg;
        icmp_ln24_reg_892_pp1_iter5_reg <= icmp_ln24_reg_892_pp1_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln30_reg_911 <= icmp_ln30_fu_713_p2;
        icmp_ln30_reg_911_pp2_iter1_reg <= icmp_ln30_reg_911;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_892_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_357 <= grp_fu_353_p2;
    end
end

always @ (*) begin
    if ((icmp_ln16_1_fu_433_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_693_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state39 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_713_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp114_reg_783 == 1'd1)) & (1'b1 == ap_CS_fsm_state65))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp114_reg_783 == 1'd1)) & (1'b1 == ap_CS_fsm_state65))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_block_state51_io))) begin
        gmem_ARADDR = gmem_addr_4_reg_870;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        gmem_ARADDR = gmem_addr_1_reg_834;
    end else if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io))) begin
        gmem_ARADDR = gmem_addr_6_reg_858;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_ARADDR = gmem_addr_2_reg_806;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = gmem_addr_reg_773;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_block_state51_io))) begin
        gmem_ARLEN = ydim_read_reg_718;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        gmem_ARLEN = xdim_read_reg_726;
    end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_ARLEN = 32'd1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_block_state51_io)) | ((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_block_state51_io))) begin
        gmem_AWADDR = gmem_addr_5_reg_876;
    end else if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io))) begin
        gmem_AWADDR = gmem_addr_7_reg_864;
    end else if (((ap_enable_reg_pp0_iter12 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_AWADDR = gmem_addr_3_reg_812_pp0_iter11_reg;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_block_state51_io))) begin
        gmem_AWLEN = ydim_read_reg_718;
    end else if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io))) begin
        gmem_AWLEN = xdim_read_reg_726;
    end else if (((ap_enable_reg_pp0_iter12 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_AWLEN = 32'd1;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_block_state51_io)) | ((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_BVALID == 1'b0) & (cmp114_reg_783 == 1'd1)) & (1'b1 == ap_CS_fsm_state65) & (cmp114_reg_783 == 1'd1)) | (~((gmem_BVALID == 1'b0) & (icmp_ln16_reg_779 == 1'd1)) & (icmp_ln16_reg_779 == 1'd1) & (1'b1 == ap_CS_fsm_state50)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln30_reg_911 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln24_reg_892 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_911_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        gmem_WDATA = gmem_addr_4_read_reg_915;
    end else if (((icmp_ln24_reg_892_pp1_iter5_reg == 1'd0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        gmem_WDATA = bitcast_ln25_1_fu_702_p1;
    end else if (((ap_enable_reg_pp0_iter13 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        gmem_WDATA = bitcast_ln18_2_fu_525_p1;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_911_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln24_reg_892_pp1_iter5_reg == 1'd0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state31) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state65) & (cmp114_reg_783 == 1'd1)) | ((icmp_ln16_reg_779 == 1'd1) & (1'b1 == ap_CS_fsm_state50)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln30_reg_911 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln24_reg_892 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln30_reg_911_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln24_reg_892_pp1_iter5_reg == 1'd0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (cmp114_reg_783 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_353_ce = 1'b1;
    end else begin
        grp_fu_353_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_353_p0 = empty_30_reg_882;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_353_p0 = bitcast_ln18_reg_792;
    end else begin
        grp_fu_353_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_353_p1 = bitcast_ln25_fu_698_p1;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_353_p1 = bitcast_ln18_1_fu_521_p1;
    end else begin
        grp_fu_353_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_405_ce = 1'b1;
    end else begin
        grp_fu_405_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln16_1_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln16_1_fu_433_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (cmp114_reg_783 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln23_fu_566_p2 == 1'd0) & (icmp_ln16_reg_779 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else if (((icmp_ln23_fu_566_p2 == 1'd0) & (icmp_ln16_reg_779 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln24_fu_693_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln24_fu_693_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln16_reg_779 == 1'd1)) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (1'b0 == ap_block_state51_io))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln30_fu_713_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln30_fu_713_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if ((~((gmem_BVALID == 1'b0) & (cmp114_reg_783 == 1'd1)) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_1_fu_427_p2 = (i_reg_298 + 32'd1);

assign add_ln16_fu_361_p2 = ($signed(ydim) + $signed(32'd4294967295));

assign add_ln18_1_fu_476_p2 = ($signed(sext_ln18_1_fu_472_p1) + $signed(w_read_reg_758));

assign add_ln18_fu_459_p2 = ($signed(i_cast_fu_438_p1) + $signed(sext_ln16_reg_787));

assign add_ln23_1_fu_561_p2 = (phi_mul_reg_320 + xdim_cast_reg_840);

assign add_ln23_fu_555_p2 = (i_1_reg_309 + 31'd1);

assign add_ln24_fu_683_p2 = (j_reg_331 + 31'd1);

assign add_ln30_fu_707_p2 = (i_2_reg_342 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (cmp114_reg_783 == 1'd1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (cmp114_reg_783 == 1'd1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (cmp114_reg_783 == 1'd1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (cmp114_reg_783 == 1'd1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (cmp114_reg_783 == 1'd1)) | ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter12 == 1'b1)) | ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (cmp114_reg_783 == 1'd1)) | ((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((gmem_RVALID == 1'b0) & (icmp_ln24_reg_892 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state45_io) & (ap_enable_reg_pp1_iter6 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln24_reg_892 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state45_io) & (ap_enable_reg_pp1_iter6 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln24_reg_892 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((gmem_RVALID == 1'b0) & (icmp_ln30_reg_911 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state60_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln30_reg_911 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state60_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((gmem_RVALID == 1'b0) & (icmp_ln30_reg_911 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((gmem_ARREADY == 1'b0) & (cmp114_reg_783 == 1'd1));
end

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_pp0_stage0_iter8 = ((gmem_RVALID == 1'b0) & (cmp114_reg_783 == 1'd1));
end

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((gmem_AWREADY == 1'b0) & (cmp114_reg_783 == 1'd1));
end

assign ap_block_state22_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((gmem_WREADY == 1'b0) & (cmp114_reg_783 == 1'd1));
end

assign ap_block_state23_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_pp0_stage0_iter18 = ((gmem_BVALID == 1'b0) & (cmp114_reg_783 == 1'd1));
end

always @ (*) begin
    ap_block_state31_io = ((gmem_ARREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

assign ap_block_state39_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln24_reg_892 == 1'd0));
end

assign ap_block_state41_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state45_io = ((gmem_WREADY == 1'b0) & (icmp_ln24_reg_892_pp1_iter5_reg == 1'd0));
end

assign ap_block_state45_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state50 = ((gmem_BVALID == 1'b0) & (icmp_ln16_reg_779 == 1'd1));
end

always @ (*) begin
    ap_block_state51_io = ((gmem_ARREADY == 1'b0) | (gmem_AWREADY == 1'b0));
end

assign ap_block_state58_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln30_reg_911 == 1'd0));
end

always @ (*) begin
    ap_block_state60_io = ((gmem_WREADY == 1'b0) & (icmp_ln30_reg_911_pp2_iter1_reg == 1'd0));
end

assign ap_block_state60_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state65 = ((gmem_BVALID == 1'b0) & (cmp114_reg_783 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln18_1_fu_521_p1 = gmem_addr_2_read_reg_818;

assign bitcast_ln18_2_fu_525_p1 = reg_357;

assign bitcast_ln18_fu_423_p1 = gmem_RDATA;

assign bitcast_ln25_1_fu_702_p1 = reg_357;

assign bitcast_ln25_fu_698_p1 = gmem_addr_1_read_reg_896;

assign cmp114_fu_414_p2 = (($signed(ydim_read_reg_718) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_26_fu_454_p2 = (p_cast2_fu_450_p1 + dx_read_reg_753);

assign empty_28_fu_579_p2 = (tmp_3_fu_571_p3 + dw_read_reg_737);

assign empty_29_fu_596_p2 = (p_cast5_fu_592_p1 + dy_read_reg_747);

assign empty_30_fu_679_p1 = gmem_RDATA;

assign empty_fu_379_p2 = ($signed(p_cast1_fu_375_p1) + $signed(dy));

assign i_cast_fu_438_p1 = i_reg_298;

assign icmp_ln16_1_fu_433_p2 = ((i_reg_298 == xdim_read_reg_726) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_409_p2 = (($signed(xdim_read_reg_726) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_566_p2 = ((i_1_reg_309 == trunc_ln24_reg_828) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_693_p2 = ((j_cast_fu_689_p1 == xdim_read_reg_726) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_713_p2 = ((i_2_reg_342 == trunc_ln24_reg_828) ? 1'b1 : 1'b0);

assign j_cast_fu_689_p1 = j_reg_331;

assign p_cast1_fu_375_p1 = $signed(tmp_fu_367_p3);

assign p_cast2_fu_450_p1 = tmp_1_fu_442_p3;

assign p_cast5_fu_592_p1 = tmp_4_fu_584_p3;

assign p_cast_cast_fu_611_p1 = $signed(p_cast_fu_601_p4);

assign p_cast_fu_601_p4 = {{empty_29_fu_596_p2[63:2]}};

assign sext_ln16_fu_419_p1 = $signed(grp_fu_405_p2);

assign sext_ln18_1_fu_472_p1 = $signed(tmp_2_fu_464_p3);

assign sext_ln18_2_fu_491_p1 = $signed(trunc_ln18_1_fu_481_p4);

assign sext_ln18_3_fu_511_p1 = $signed(trunc_ln18_2_fu_501_p4);

assign sext_ln18_fu_395_p1 = $signed(trunc_ln_fu_385_p4);

assign sext_ln24_1_fu_631_p1 = $signed(trunc_ln24_1_fu_621_p4);

assign sext_ln24_fu_542_p1 = $signed(trunc_ln1_fu_533_p4);

assign sext_ln30_1_fu_669_p1 = $signed(trunc_ln30_1_fu_660_p4);

assign sext_ln30_fu_650_p1 = $signed(trunc_ln2_fu_641_p4);

assign tmp_1_fu_442_p3 = {{i_reg_298}, {2'd0}};

assign tmp_2_fu_464_p3 = {{add_ln18_fu_459_p2}, {2'd0}};

assign tmp_3_fu_571_p3 = {{phi_mul_reg_320}, {2'd0}};

assign tmp_4_fu_584_p3 = {{i_1_reg_309}, {2'd0}};

assign tmp_fu_367_p3 = {{add_ln16_fu_361_p2}, {2'd0}};

assign trunc_ln18_1_fu_481_p4 = {{add_ln18_1_fu_476_p2[63:2]}};

assign trunc_ln18_2_fu_501_p4 = {{empty_26_fu_454_p2[63:2]}};

assign trunc_ln1_fu_533_p4 = {{x_read_reg_763[63:2]}};

assign trunc_ln24_1_fu_621_p4 = {{empty_28_fu_579_p2[63:2]}};

assign trunc_ln24_fu_530_p1 = ydim_read_reg_718[30:0];

assign trunc_ln2_fu_641_p4 = {{dy_read_reg_747[63:2]}};

assign trunc_ln30_1_fu_660_p4 = {{db_read_reg_742[63:2]}};

assign trunc_ln_fu_385_p4 = {{empty_fu_379_p2[63:2]}};

assign xdim_cast_fu_552_p1 = $unsigned(xdim_read_reg_726);

always @ (posedge ap_clk) begin
    xdim_cast_reg_840[61:32] <= 30'b000000000000000000000000000000;
end

endmodule //backward_fcc
