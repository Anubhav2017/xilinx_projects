// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=70,HLS_SYN_DSP=0,HLS_SYN_FF=5765,HLS_SYN_LUT=5879,HLS_VERSION=2020_2}" *)

module fcc_combined (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        dx_Addr_A,
        dx_EN_A,
        dx_WEN_A,
        dx_Din_A,
        dx_Dout_A,
        dx_Clk_A,
        dx_Rst_A,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        y_Clk_A,
        y_Rst_A,
        dy_Addr_A,
        dy_EN_A,
        dy_WEN_A,
        dy_Din_A,
        dy_Dout_A,
        dy_Clk_A,
        dy_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 70'd1;
parameter    ap_ST_fsm_state2 = 70'd2;
parameter    ap_ST_fsm_state3 = 70'd4;
parameter    ap_ST_fsm_state4 = 70'd8;
parameter    ap_ST_fsm_state5 = 70'd16;
parameter    ap_ST_fsm_state6 = 70'd32;
parameter    ap_ST_fsm_state7 = 70'd64;
parameter    ap_ST_fsm_state8 = 70'd128;
parameter    ap_ST_fsm_pp0_stage0 = 70'd256;
parameter    ap_ST_fsm_state12 = 70'd512;
parameter    ap_ST_fsm_state13 = 70'd1024;
parameter    ap_ST_fsm_state14 = 70'd2048;
parameter    ap_ST_fsm_state15 = 70'd4096;
parameter    ap_ST_fsm_state16 = 70'd8192;
parameter    ap_ST_fsm_state17 = 70'd16384;
parameter    ap_ST_fsm_state18 = 70'd32768;
parameter    ap_ST_fsm_state19 = 70'd65536;
parameter    ap_ST_fsm_state20 = 70'd131072;
parameter    ap_ST_fsm_state21 = 70'd262144;
parameter    ap_ST_fsm_state22 = 70'd524288;
parameter    ap_ST_fsm_state23 = 70'd1048576;
parameter    ap_ST_fsm_state24 = 70'd2097152;
parameter    ap_ST_fsm_pp1_stage0 = 70'd4194304;
parameter    ap_ST_fsm_state28 = 70'd8388608;
parameter    ap_ST_fsm_state29 = 70'd16777216;
parameter    ap_ST_fsm_state30 = 70'd33554432;
parameter    ap_ST_fsm_state31 = 70'd67108864;
parameter    ap_ST_fsm_state32 = 70'd134217728;
parameter    ap_ST_fsm_pp2_stage0 = 70'd268435456;
parameter    ap_ST_fsm_pp2_stage1 = 70'd536870912;
parameter    ap_ST_fsm_state41 = 70'd1073741824;
parameter    ap_ST_fsm_pp3_stage0 = 70'd2147483648;
parameter    ap_ST_fsm_state45 = 70'd4294967296;
parameter    ap_ST_fsm_state46 = 70'd8589934592;
parameter    ap_ST_fsm_state47 = 70'd17179869184;
parameter    ap_ST_fsm_state48 = 70'd34359738368;
parameter    ap_ST_fsm_state49 = 70'd68719476736;
parameter    ap_ST_fsm_state50 = 70'd137438953472;
parameter    ap_ST_fsm_state51 = 70'd274877906944;
parameter    ap_ST_fsm_pp4_stage0 = 70'd549755813888;
parameter    ap_ST_fsm_state55 = 70'd1099511627776;
parameter    ap_ST_fsm_state56 = 70'd2199023255552;
parameter    ap_ST_fsm_state57 = 70'd4398046511104;
parameter    ap_ST_fsm_state58 = 70'd8796093022208;
parameter    ap_ST_fsm_state59 = 70'd17592186044416;
parameter    ap_ST_fsm_pp5_stage0 = 70'd35184372088832;
parameter    ap_ST_fsm_state63 = 70'd70368744177664;
parameter    ap_ST_fsm_state64 = 70'd140737488355328;
parameter    ap_ST_fsm_state65 = 70'd281474976710656;
parameter    ap_ST_fsm_state66 = 70'd562949953421312;
parameter    ap_ST_fsm_state67 = 70'd1125899906842624;
parameter    ap_ST_fsm_state68 = 70'd2251799813685248;
parameter    ap_ST_fsm_state69 = 70'd4503599627370496;
parameter    ap_ST_fsm_state70 = 70'd9007199254740992;
parameter    ap_ST_fsm_state71 = 70'd18014398509481984;
parameter    ap_ST_fsm_state72 = 70'd36028797018963968;
parameter    ap_ST_fsm_state73 = 70'd72057594037927936;
parameter    ap_ST_fsm_pp6_stage0 = 70'd144115188075855872;
parameter    ap_ST_fsm_state77 = 70'd288230376151711744;
parameter    ap_ST_fsm_state78 = 70'd576460752303423488;
parameter    ap_ST_fsm_state79 = 70'd1152921504606846976;
parameter    ap_ST_fsm_state80 = 70'd2305843009213693952;
parameter    ap_ST_fsm_state81 = 70'd4611686018427387904;
parameter    ap_ST_fsm_pp7_stage0 = 70'd9223372036854775808;
parameter    ap_ST_fsm_state88 = 70'd18446744073709551616;
parameter    ap_ST_fsm_state89 = 70'd36893488147419103232;
parameter    ap_ST_fsm_state90 = 70'd73786976294838206464;
parameter    ap_ST_fsm_pp8_stage0 = 70'd147573952589676412928;
parameter    ap_ST_fsm_pp8_stage1 = 70'd295147905179352825856;
parameter    ap_ST_fsm_state101 = 70'd590295810358705651712;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [1:0] x_WEN_A;
output  [15:0] x_Din_A;
input  [15:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] dx_Addr_A;
output   dx_EN_A;
output  [1:0] dx_WEN_A;
output  [15:0] dx_Din_A;
input  [15:0] dx_Dout_A;
output   dx_Clk_A;
output   dx_Rst_A;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [1:0] y_WEN_A;
output  [15:0] y_Din_A;
input  [15:0] y_Dout_A;
output   y_Clk_A;
output   y_Rst_A;
output  [31:0] dy_Addr_A;
output   dy_EN_A;
output  [1:0] dy_WEN_A;
output  [15:0] dy_Din_A;
input  [15:0] dy_Dout_A;
output   dy_Clk_A;
output   dy_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg x_EN_A;
reg dx_EN_A;
reg[1:0] dx_WEN_A;
reg[15:0] dx_Din_A;
reg y_EN_A;
reg[1:0] y_WEN_A;
reg dy_EN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [69:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] wt;
wire   [31:0] dwt;
wire   [31:0] b;
wire   [31:0] db;
wire   [31:0] debug_x;
wire   [31:0] debug_dx;
wire    debugip;
wire   [31:0] xdim;
wire   [31:0] ydim;
wire    fwprop;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln43_reg_1786;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln43_1_reg_1811;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln70_reg_2219;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln91_reg_1946;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state51;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln108_reg_2149;
reg   [0:0] icmp_ln108_reg_2149_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state59;
reg   [0:0] cmp36319_reg_1825;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter1;
wire    ap_block_pp8_stage0;
reg   [0:0] icmp_ln119_1_reg_2345;
reg    gmem2_blk_n_W;
wire    ap_CS_fsm_pp8_stage1;
wire    ap_block_pp8_stage1;
reg   [0:0] icmp_ln119_1_reg_2345_pp8_iter1_reg;
reg    gmem2_blk_n_B;
reg    ap_enable_reg_pp8_iter4;
reg   [0:0] icmp_ln119_1_reg_2345_pp8_iter3_reg;
reg    ap_enable_reg_pp8_iter2;
reg   [0:0] icmp_ln119_1_reg_2345_pp8_iter4_reg;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
reg   [31:0] gmem2_AWADDR;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
reg   [15:0] gmem2_WDATA;
wire    gmem2_ARREADY;
wire    gmem2_RVALID;
wire   [15:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [30:0] i_reg_552;
reg   [30:0] j_reg_610;
reg   [95:0] indvar_flatten_reg_621;
reg   [63:0] i_5_reg_632;
reg   [31:0] j_1_reg_644;
reg   [30:0] i_7_reg_655;
reg   [30:0] j_4_reg_678;
reg   [31:0] i_1_reg_689;
reg   [30:0] j_2_reg_712;
reg   [31:0] j_3_reg_734;
reg   [15:0] rhs_reg_745;
reg   [30:0] i_2_reg_756;
reg  signed [15:0] reg_772;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state33_pp2_stage0_iter0;
wire    ap_block_state35_pp2_stage0_iter1;
wire    ap_block_state37_pp2_stage0_iter2;
wire    ap_block_state39_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln96_reg_1970;
wire    ap_block_state91_pp8_stage0_iter0;
wire    ap_block_state93_pp8_stage0_iter1;
reg    ap_block_state93_io;
wire    ap_block_state95_pp8_stage0_iter2;
reg    ap_block_state95_io;
wire    ap_block_state97_pp8_stage0_iter3;
reg    ap_block_state99_pp8_stage0_iter4;
reg    ap_block_pp8_stage0_11001;
wire   [15:0] dwbuf_V_q0;
reg   [15:0] reg_777;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln96_reg_1970_pp2_iter1_reg;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state52_pp4_stage0_iter0;
wire    ap_block_state53_pp4_stage0_iter1;
wire    ap_block_state54_pp4_stage0_iter2;
reg    ap_block_state54_io;
reg    ap_block_pp4_stage0_11001;
reg   [0:0] fwprop_read_reg_1716;
reg  signed [31:0] ydim_read_reg_1720;
reg   [31:0] xdim_read_reg_1733;
reg   [0:0] debugip_read_reg_1751;
reg   [31:0] debug_dx_read_reg_1755;
reg   [31:0] debug_x_read_reg_1760;
reg   [31:0] b_read_reg_1765;
reg   [31:0] dwt_read_reg_1770;
reg   [31:0] wt_read_reg_1776;
reg   [26:0] trunc_ln41_1_reg_1781;
wire   [0:0] icmp_ln43_fu_798_p2;
wire   [28:0] num_iters_fu_845_p2;
reg   [28:0] num_iters_reg_1790;
wire   [30:0] trunc_ln43_fu_871_p1;
reg   [30:0] trunc_ln43_reg_1801;
wire    ap_CS_fsm_state8;
wire   [30:0] add_ln43_fu_874_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_1_fu_880_p2;
reg   [0:0] icmp_ln43_1_reg_1811_pp0_iter1_reg;
wire   [9:0] trunc_ln44_fu_885_p1;
reg   [9:0] trunc_ln44_reg_1815;
reg   [9:0] trunc_ln44_reg_1815_pp0_iter1_reg;
reg   [15:0] gmem_addr_read_reg_1820;
wire   [0:0] cmp36319_fu_893_p2;
wire    ap_CS_fsm_state12;
wire  signed [30:0] trunc_ln49_fu_898_p1;
reg  signed [30:0] trunc_ln49_reg_1829;
wire  signed [31:0] sext_ln49_fu_901_p1;
reg  signed [31:0] sext_ln49_reg_1836;
wire   [31:0] xor_ln49_fu_904_p2;
reg   [31:0] xor_ln49_reg_1841;
wire  signed [25:0] trunc_ln49_1_fu_909_p1;
reg  signed [25:0] trunc_ln49_1_reg_1847;
wire   [95:0] zext_ln96_fu_912_p1;
reg   [95:0] zext_ln96_reg_1852;
wire   [0:0] icmp_ln49_fu_915_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln49_fu_920_p2;
reg   [31:0] add_ln49_reg_1861;
wire  signed [63:0] p_cast9_fu_944_p1;
reg  signed [63:0] p_cast9_reg_1866;
wire   [30:0] shl_ln_fu_957_p3;
reg   [30:0] shl_ln_reg_1875;
wire   [9:0] trunc_ln53_2_fu_975_p3;
reg   [9:0] trunc_ln53_2_reg_1882;
wire   [31:0] ub_fu_999_p3;
reg   [31:0] ub_reg_1888;
wire   [0:0] grp_fu_767_p2;
reg   [0:0] icmp_ln90_reg_1893;
wire    ap_CS_fsm_state14;
wire   [63:0] add_ln90_fu_1011_p2;
reg   [63:0] add_ln90_reg_1897;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln90_1_fu_1017_p2;
wire   [30:0] grp_fu_1026_p2;
reg   [30:0] empty_49_reg_1915;
wire    ap_CS_fsm_state16;
reg   [31:0] gmem_addr_1_reg_1920;
wire    ap_CS_fsm_state17;
wire   [4:0] trunc_ln92_fu_1076_p1;
reg   [4:0] trunc_ln92_reg_1926;
wire    ap_CS_fsm_state21;
wire   [14:0] grp_fu_1657_p2;
reg   [14:0] mul_ln92_reg_1936;
wire    ap_CS_fsm_state24;
wire   [30:0] add_ln91_fu_1083_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state25_pp1_stage0_iter0;
reg    ap_block_state26_pp1_stage0_iter1;
wire    ap_block_state27_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln91_fu_1093_p2;
reg   [0:0] icmp_ln91_reg_1946_pp1_iter1_reg;
(* use_dsp48 = "no" *) wire   [14:0] add_ln92_fu_1102_p2;
reg   [14:0] add_ln92_reg_1950;
reg   [14:0] add_ln92_reg_1950_pp1_iter1_reg;
reg   [15:0] gmem_addr_1_read_reg_1955;
wire   [95:0] grp_fu_1034_p2;
reg   [95:0] mul_ln96_reg_1960;
wire    ap_CS_fsm_state32;
wire   [95:0] add_ln96_2_fu_1111_p2;
reg   [95:0] add_ln96_2_reg_1965;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln96_fu_1117_p2;
reg   [0:0] icmp_ln96_reg_1970_pp2_iter2_reg;
reg   [0:0] icmp_ln96_reg_1970_pp2_iter3_reg;
wire   [63:0] add_ln96_fu_1122_p2;
reg   [63:0] add_ln96_reg_1974;
wire   [0:0] icmp_ln97_fu_1128_p2;
reg   [0:0] icmp_ln97_reg_1979;
wire   [31:0] select_ln96_fu_1133_p3;
reg   [31:0] select_ln96_reg_1984;
wire   [9:0] select_ln96_2_fu_1149_p3;
reg   [9:0] select_ln96_2_reg_1989;
wire   [14:0] trunc_ln1118_fu_1161_p1;
reg   [14:0] trunc_ln1118_reg_2000;
reg   [9:0] dx_addr_2_reg_2005;
reg   [9:0] dx_addr_2_reg_2005_pp2_iter1_reg;
reg   [9:0] dx_addr_2_reg_2005_pp2_iter2_reg;
reg   [9:0] dx_addr_2_reg_2005_pp2_iter3_reg;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state34_pp2_stage1_iter0;
wire    ap_block_state36_pp2_stage1_iter1;
wire    ap_block_state38_pp2_stage1_iter2;
wire    ap_block_state40_pp2_stage1_iter3;
wire    ap_block_pp2_stage1_11001;
wire   [63:0] select_ln96_3_fu_1180_p3;
reg   [63:0] select_ln96_3_reg_2020;
wire   [31:0] add_ln97_fu_1186_p2;
reg   [31:0] add_ln97_reg_2025;
reg   [14:0] dwbuf_V_addr_1_reg_2045;
reg   [14:0] dwbuf_V_addr_1_reg_2045_pp2_iter2_reg;
wire   [30:0] add_ln103_fu_1252_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state42_pp3_stage0_iter0;
wire    ap_block_state43_pp3_stage0_iter1;
wire    ap_block_state44_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln103_fu_1262_p2;
reg   [0:0] icmp_ln103_reg_2080;
reg   [0:0] icmp_ln103_reg_2080_pp3_iter1_reg;
reg   [9:0] dbbuf_V_addr_reg_2084;
reg   [9:0] dbbuf_V_addr_reg_2084_pp3_iter1_reg;
wire   [15:0] dbbuf_V_q1;
reg   [15:0] dbbuf_V_load_reg_2095;
reg    ap_enable_reg_pp3_iter1;
wire   [63:0] add_ln107_fu_1283_p2;
reg   [63:0] add_ln107_reg_2100;
wire    ap_CS_fsm_state46;
wire   [0:0] icmp_ln107_fu_1289_p2;
wire   [31:0] indvars_iv_next31_fu_1303_p2;
wire   [31:0] indvars_iv_next29_fu_1309_p2;
wire   [30:0] grp_fu_1298_p2;
reg   [30:0] empty_55_reg_2123;
wire    ap_CS_fsm_state47;
reg   [31:0] gmem_addr_3_reg_2128;
wire    ap_CS_fsm_state48;
wire   [14:0] grp_fu_1689_p2;
reg   [14:0] mul_ln109_reg_2139;
wire   [30:0] add_ln108_fu_1360_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln108_fu_1370_p2;
wire   [31:0] add_ln65_fu_1389_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state60_pp5_stage0_iter0;
wire    ap_block_state61_pp5_stage0_iter1;
wire    ap_block_state62_pp5_stage0_iter2;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln65_fu_1395_p2;
wire   [63:0] add_ln69_fu_1409_p2;
reg   [63:0] add_ln69_reg_2175;
wire    ap_CS_fsm_state64;
wire   [0:0] icmp_ln69_1_fu_1415_p2;
wire   [30:0] grp_fu_1424_p2;
reg   [30:0] empty_44_reg_2188;
wire    ap_CS_fsm_state65;
reg   [31:0] gmem_addr_2_reg_2193;
wire    ap_CS_fsm_state66;
wire   [4:0] trunc_ln71_fu_1466_p1;
reg   [4:0] trunc_ln71_reg_2199;
wire    ap_CS_fsm_state70;
wire   [14:0] grp_fu_1695_p2;
reg   [14:0] mul_ln71_reg_2209;
wire    ap_CS_fsm_state73;
wire   [30:0] add_ln70_fu_1473_p2;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state74_pp6_stage0_iter0;
reg    ap_block_state75_pp6_stage0_iter1;
wire    ap_block_state76_pp6_stage0_iter2;
reg    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln70_fu_1483_p2;
reg   [0:0] icmp_ln70_reg_2219_pp6_iter1_reg;
(* use_dsp48 = "no" *) wire   [14:0] add_ln71_fu_1492_p2;
reg   [14:0] add_ln71_reg_2223;
reg   [14:0] add_ln71_reg_2223_pp6_iter1_reg;
reg   [15:0] gmem_addr_2_read_reg_2228;
wire   [63:0] add_ln76_fu_1501_p2;
reg   [63:0] add_ln76_reg_2233;
wire    ap_CS_fsm_state78;
wire   [9:0] trunc_ln78_fu_1512_p1;
reg   [9:0] trunc_ln78_reg_2241;
wire   [0:0] icmp_ln76_fu_1507_p2;
wire    ap_CS_fsm_state80;
reg   [9:0] y_addr_reg_2256;
wire   [14:0] grp_fu_1701_p2;
reg   [14:0] mul_ln78_reg_2261;
wire    ap_CS_fsm_state81;
wire   [15:0] bbuf_V_q0;
wire   [31:0] add_ln80_fu_1530_p2;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter0;
wire    ap_block_state82_pp7_stage0_iter0;
wire    ap_block_state83_pp7_stage0_iter1;
wire    ap_block_state84_pp7_stage0_iter2;
wire    ap_block_state85_pp7_stage0_iter3;
wire    ap_block_state86_pp7_stage0_iter4;
wire    ap_block_state87_pp7_stage0_iter5;
wire    ap_block_pp7_stage0_11001;
wire   [0:0] icmp_ln80_fu_1536_p2;
reg   [0:0] icmp_ln80_reg_2276;
reg   [0:0] icmp_ln80_reg_2276_pp7_iter1_reg;
reg   [0:0] icmp_ln80_reg_2276_pp7_iter2_reg;
reg   [0:0] icmp_ln80_reg_2276_pp7_iter3_reg;
reg   [0:0] icmp_ln80_reg_2276_pp7_iter4_reg;
(* use_dsp48 = "no" *) wire   [14:0] add_ln1116_fu_1550_p2;
reg   [14:0] add_ln1116_reg_2280;
reg    ap_enable_reg_pp7_iter5;
wire   [31:0] grp_fu_1007_p2;
reg   [31:0] mul156_reg_2315;
wire    ap_CS_fsm_state89;
wire   [0:0] icmp_ln119_fu_1584_p2;
wire    ap_CS_fsm_state90;
wire   [30:0] trunc_ln119_fu_1589_p1;
reg   [30:0] trunc_ln119_reg_2325;
wire  signed [31:0] sext_ln119_fu_1601_p1;
reg  signed [31:0] sext_ln119_reg_2330;
wire  signed [31:0] sext_ln119_1_fu_1614_p1;
reg  signed [31:0] sext_ln119_1_reg_2335;
wire   [30:0] add_ln119_fu_1618_p2;
reg   [30:0] add_ln119_reg_2340;
reg    ap_enable_reg_pp8_iter0;
wire   [0:0] icmp_ln119_1_fu_1624_p2;
reg   [0:0] icmp_ln119_1_reg_2345_pp8_iter2_reg;
reg   [31:0] gmem2_addr_reg_2354;
reg   [31:0] gmem2_addr_1_reg_2365;
reg   [31:0] gmem2_addr_1_reg_2365_pp8_iter1_reg;
reg   [15:0] dx_load_reg_2371;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state25;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state33;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter3;
wire    ap_CS_fsm_state41;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state42;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state52;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state60;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state74;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_flush_enable;
reg    ap_enable_reg_pp7_iter1;
reg    ap_enable_reg_pp7_iter2;
reg    ap_enable_reg_pp7_iter3;
reg    ap_enable_reg_pp7_iter4;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state91;
wire    ap_block_state92_pp8_stage1_iter0;
wire    ap_block_state94_pp8_stage1_iter1;
reg    ap_block_state94_io;
wire    ap_block_state96_pp8_stage1_iter2;
wire    ap_block_state98_pp8_stage1_iter3;
reg    ap_block_state100_pp8_stage1_iter4;
reg    ap_block_pp8_stage1_subdone;
reg    ap_enable_reg_pp8_iter3;
reg   [14:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
wire  signed [15:0] wbuf_V_q0;
reg   [9:0] bbuf_V_address0;
reg    bbuf_V_ce0;
reg    bbuf_V_we0;
reg   [14:0] dwbuf_V_address0;
reg    dwbuf_V_ce0;
reg    dwbuf_V_we0;
reg   [15:0] dwbuf_V_d0;
reg    dbbuf_V_ce0;
reg    dbbuf_V_we0;
wire   [15:0] dbbuf_V_d0;
wire   [9:0] dbbuf_V_address1;
reg    dbbuf_V_ce1;
reg   [31:0] indvars_iv30_reg_563;
reg   [31:0] indvars_iv28_reg_575;
reg   [31:0] k_reg_587;
reg   [63:0] i_3_reg_598;
wire    ap_CS_fsm_state28;
reg   [95:0] ap_phi_mux_indvar_flatten_phi_fu_625_p4;
wire    ap_block_pp2_stage0;
reg   [63:0] ap_phi_mux_i_5_phi_fu_636_p4;
reg   [31:0] ap_phi_mux_j_1_phi_fu_648_p4;
reg   [63:0] i_8_reg_666;
reg    ap_block_state59;
wire    ap_CS_fsm_state45;
reg   [63:0] i_4_reg_700;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state63;
reg   [63:0] i_6_reg_723;
wire    ap_CS_fsm_state88;
reg   [15:0] ap_phi_mux_rhs_phi_fu_749_p4;
wire    ap_block_pp7_stage0;
reg   [30:0] ap_phi_mux_i_2_phi_fu_760_p4;
wire   [31:0] zext_ln44_fu_889_p1;
wire   [31:0] zext_ln92_1_fu_1107_p1;
wire   [31:0] zext_ln1118_fu_1165_p1;
wire   [31:0] zext_ln96_2_fu_1175_p1;
wire    ap_block_pp2_stage1;
wire   [31:0] zext_ln96_3_fu_1191_p1;
wire   [31:0] zext_ln1118_1_fu_1199_p1;
wire   [31:0] zext_ln703_fu_1271_p1;
wire    ap_block_pp3_stage0;
wire   [31:0] zext_ln109_1_fu_1384_p1;
wire   [31:0] zext_ln66_fu_1404_p1;
wire    ap_block_pp5_stage0;
wire   [31:0] zext_ln71_1_fu_1497_p1;
wire   [31:0] zext_ln78_1_fu_1524_p1;
wire   [31:0] zext_ln1116_fu_1545_p1;
wire   [31:0] zext_ln1116_1_fu_1555_p1;
wire   [31:0] zext_ln120_fu_1629_p1;
wire  signed [31:0] sext_ln43_fu_860_p1;
wire  signed [31:0] sext_ln91_fu_1066_p1;
wire  signed [31:0] sext_ln108_fu_1342_p1;
wire  signed [31:0] sext_ln70_fu_1456_p1;
wire   [31:0] add_ln120_fu_1635_p2;
wire   [31:0] add_ln121_fu_1646_p2;
reg    ap_block_state2_io;
wire    ap_block_pp4_stage0_01001;
reg    ap_block_pp8_stage1_11001;
reg    ap_block_pp8_stage1_01001;
reg    ap_block_pp8_stage0_01001;
reg   [31:0] x_Addr_A_orig;
reg   [31:0] dy_Addr_A_orig;
reg   [31:0] dx_Addr_A_orig;
wire   [31:0] y_Addr_A_orig;
wire  signed [31:0] sub_ln41_fu_782_p1;
wire   [31:0] sub_ln41_fu_782_p2;
wire  signed [31:0] icmp_ln43_fu_798_p0;
wire   [27:0] zext_ln41_fu_811_p1;
wire   [26:0] trunc_ln41_2_fu_820_p4;
wire   [0:0] tmp_fu_804_p3;
wire   [27:0] sub_ln41_1_fu_814_p2;
wire   [27:0] zext_ln41_1_fu_829_p1;
wire   [27:0] select_ln41_fu_833_p3;
wire  signed [28:0] sext_ln41_fu_841_p1;
wire   [30:0] trunc_ln1_fu_851_p4;
wire   [0:0] empty_42_fu_926_p2;
wire   [31:0] smax32_fu_931_p3;
wire   [31:0] empty_43_fu_938_p2;
wire  signed [25:0] mul_ln53_fu_952_p0;
wire   [25:0] mul_ln53_fu_952_p2;
wire   [4:0] trunc_ln53_1_fu_971_p1;
wire   [31:0] shl_ln53_fu_965_p2;
wire   [31:0] add_ln53_fu_983_p2;
wire   [0:0] icmp_ln53_fu_989_p2;
wire   [31:0] sub_ln53_fu_994_p2;
wire  signed [30:0] grp_fu_1026_p0;
wire   [63:0] grp_fu_1034_p0;
wire   [31:0] grp_fu_1034_p1;
wire   [30:0] empty_50_fu_1039_p2;
wire   [31:0] tmp_2_fu_1043_p3;
wire   [31:0] empty_51_fu_1051_p2;
wire   [30:0] trunc_ln7_fu_1056_p4;
wire   [31:0] j_cast_fu_1089_p1;
wire   [14:0] trunc_ln92_1_fu_1098_p1;
wire   [9:0] trunc_ln96_fu_1141_p1;
wire   [9:0] trunc_ln96_1_fu_1145_p1;
wire   [9:0] add_ln96_1_fu_1171_p2;
wire   [14:0] grp_fu_1663_p3;
wire  signed [28:0] grp_fu_1671_p3;
wire  signed [28:0] grp_fu_1680_p3;
wire   [31:0] i_7_cast_fu_1258_p1;
wire   [9:0] trunc_ln703_fu_1267_p1;
wire  signed [30:0] grp_fu_1298_p0;
wire   [30:0] empty_56_fu_1315_p2;
wire   [31:0] tmp_4_fu_1319_p3;
wire   [31:0] empty_57_fu_1327_p2;
wire   [30:0] trunc_ln3_fu_1332_p4;
wire   [4:0] trunc_ln109_fu_1352_p1;
wire   [31:0] j_4_cast_fu_1366_p1;
wire   [14:0] trunc_ln109_1_fu_1375_p1;
(* use_dsp48 = "no" *) wire   [14:0] add_ln109_fu_1379_p2;
wire   [9:0] trunc_ln66_fu_1400_p1;
wire  signed [30:0] grp_fu_1424_p0;
wire   [30:0] empty_45_fu_1429_p2;
wire   [31:0] tmp_3_fu_1433_p3;
wire   [31:0] empty_46_fu_1441_p2;
wire   [30:0] trunc_ln2_fu_1446_p4;
wire   [31:0] j_2_cast_fu_1479_p1;
wire   [14:0] trunc_ln71_1_fu_1488_p1;
wire   [9:0] add_ln78_fu_1520_p2;
wire   [14:0] trunc_ln1116_fu_1541_p1;
wire  signed [28:0] grp_fu_1707_p3;
wire   [30:0] trunc_ln4_fu_1592_p4;
wire   [30:0] trunc_ln119_1_fu_1605_p4;
wire   [4:0] grp_fu_1657_p0;
wire   [10:0] grp_fu_1657_p1;
wire   [9:0] grp_fu_1663_p0;
wire   [10:0] grp_fu_1663_p1;
wire   [28:0] grp_fu_1671_p2;
wire   [28:0] grp_fu_1680_p2;
wire   [4:0] grp_fu_1689_p0;
wire   [10:0] grp_fu_1689_p1;
wire   [4:0] grp_fu_1695_p0;
wire   [10:0] grp_fu_1695_p1;
wire   [9:0] grp_fu_1701_p0;
wire   [10:0] grp_fu_1701_p1;
wire   [28:0] grp_fu_1707_p2;
reg    grp_fu_1689_ce;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state101;
reg   [69:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
wire   [95:0] grp_fu_1034_p00;
wire   [14:0] grp_fu_1657_p00;
wire   [14:0] grp_fu_1663_p00;
wire   [14:0] grp_fu_1689_p00;
wire   [14:0] grp_fu_1695_p00;
wire   [14:0] grp_fu_1701_p00;
reg    ap_condition_2708;
reg    ap_condition_2712;
reg    ap_condition_1681;
reg    ap_condition_1693;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 70'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter4 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter5 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter3 = 1'b0;
#0 ap_enable_reg_pp7_iter4 = 1'b0;
#0 ap_enable_reg_pp8_iter3 = 1'b0;
end

fcc_combined_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .wt(wt),
    .dwt(dwt),
    .b(b),
    .db(db),
    .debug_x(debug_x),
    .debug_dx(debug_dx),
    .debugip(debugip),
    .xdim(xdim),
    .ydim(ydim),
    .fwprop(fwprop),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fcc_combined_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_3_reg_2128),
    .I_AWID(1'd0),
    .I_AWLEN(xdim_read_reg_1733),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(reg_777),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

fcc_combined_gmem2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(gmem2_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

fcc_combined_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 32000 ),
    .AddressWidth( 15 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(gmem_addr_2_read_reg_2228),
    .q0(wbuf_V_q0)
);

fcc_combined_bbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
bbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_V_address0),
    .ce0(bbuf_V_ce0),
    .we0(bbuf_V_we0),
    .d0(gmem_addr_read_reg_1820),
    .q0(bbuf_V_q0)
);

fcc_combined_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 32000 ),
    .AddressWidth( 15 ))
dwbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dwbuf_V_address0),
    .ce0(dwbuf_V_ce0),
    .we0(dwbuf_V_we0),
    .d0(dwbuf_V_d0),
    .q0(dwbuf_V_q0)
);

fcc_combined_dbbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
dbbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dbbuf_V_addr_reg_2084_pp3_iter1_reg),
    .ce0(dbbuf_V_ce0),
    .we0(dbbuf_V_we0),
    .d0(dbbuf_V_d0),
    .address1(dbbuf_V_address1),
    .ce1(dbbuf_V_ce1),
    .q1(dbbuf_V_q1)
);

fcc_combined_mul_26s_26s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 26 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
mul_26s_26s_26_1_1_U1(
    .din0(mul_ln53_fu_952_p0),
    .din1(trunc_ln49_1_reg_1847),
    .dout(mul_ln53_fu_952_p2)
);

fcc_combined_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydim_read_reg_1720),
    .din1(xdim_read_reg_1733),
    .ce(1'b1),
    .dout(grp_fu_1007_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1026_p0),
    .din1(trunc_ln49_reg_1829),
    .ce(1'b1),
    .dout(grp_fu_1026_p2)
);

fcc_combined_mul_64ns_32ns_96_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
mul_64ns_32ns_96_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1034_p0),
    .din1(grp_fu_1034_p1),
    .ce(1'b1),
    .dout(grp_fu_1034_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1298_p0),
    .din1(trunc_ln49_reg_1829),
    .ce(1'b1),
    .dout(grp_fu_1298_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1424_p0),
    .din1(trunc_ln49_reg_1829),
    .ce(1'b1),
    .dout(grp_fu_1424_p2)
);

fcc_combined_mul_mul_5ns_11ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_mul_5ns_11ns_15_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1657_p0),
    .din1(grp_fu_1657_p1),
    .ce(1'b1),
    .dout(grp_fu_1657_p2)
);

fcc_combined_mac_muladd_10ns_11ns_15ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 15 ))
mac_muladd_10ns_11ns_15ns_15_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1663_p0),
    .din1(grp_fu_1663_p1),
    .din2(trunc_ln1118_reg_2000),
    .ce(1'b1),
    .dout(grp_fu_1663_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_772),
    .din1(dy_Dout_A),
    .din2(grp_fu_1671_p2),
    .ce(1'b1),
    .dout(grp_fu_1671_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wbuf_V_q0),
    .din1(dy_Dout_A),
    .din2(grp_fu_1680_p2),
    .ce(1'b1),
    .dout(grp_fu_1680_p3)
);

fcc_combined_mul_mul_5ns_11ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_mul_5ns_11ns_15_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1689_p0),
    .din1(grp_fu_1689_p1),
    .ce(grp_fu_1689_ce),
    .dout(grp_fu_1689_p2)
);

fcc_combined_mul_mul_5ns_11ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_mul_5ns_11ns_15_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1695_p0),
    .din1(grp_fu_1695_p1),
    .ce(1'b1),
    .dout(grp_fu_1695_p2)
);

fcc_combined_mul_mul_10ns_11ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_mul_10ns_11ns_15_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1701_p0),
    .din1(grp_fu_1701_p1),
    .ce(1'b1),
    .dout(grp_fu_1701_p2)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_Dout_A),
    .din1(wbuf_V_q0),
    .din2(grp_fu_1707_p2),
    .ce(1'b1),
    .dout(grp_fu_1707_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state25))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state25)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state33))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state42))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state42)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state42);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state52))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state52)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state52);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state60) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((icmp_ln49_fu_915_p2 == 1'd0) & (fwprop_read_reg_1716 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state60)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state60);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((icmp_ln49_fu_915_p2 == 1'd0) & (fwprop_read_reg_1716 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state74))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state73)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state74)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state74);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state73)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp7_flush_enable)) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state81)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
        end else if ((1'b1 == ap_CS_fsm_state81)) begin
            ap_enable_reg_pp7_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage0_subdone) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b1 == ap_condition_pp8_exit_iter0_state91))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln119_fu_1584_p2 == 1'd1))) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage1_subdone) & (1'b1 == ap_CS_fsm_pp8_stage1))) begin
            ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage1_subdone) & (1'b1 == ap_CS_fsm_pp8_stage1))) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage1_subdone) & (1'b1 == ap_CS_fsm_pp8_stage1))) begin
            ap_enable_reg_pp8_iter3 <= ap_enable_reg_pp8_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage1_subdone) & (1'b1 == ap_CS_fsm_pp8_stage1))) begin
            ap_enable_reg_pp8_iter4 <= ap_enable_reg_pp8_iter3;
        end else if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln119_fu_1584_p2 == 1'd1))) begin
            ap_enable_reg_pp8_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_915_p2 == 1'd0) & (fwprop_read_reg_1716 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        i_1_reg_689 <= 32'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln65_fu_1395_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        i_1_reg_689 <= add_ln65_fu_1389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln119_fu_1584_p2 == 1'd1))) begin
        i_2_reg_756 <= 31'd0;
    end else if (((icmp_ln119_1_reg_2345 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        i_2_reg_756 <= add_ln119_reg_2340;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_767_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i_3_reg_598 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        i_3_reg_598 <= add_ln90_reg_1897;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_767_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        i_4_reg_700 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        i_4_reg_700 <= add_ln69_reg_2175;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1970 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_5_reg_632 <= select_ln96_3_reg_2020;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        i_5_reg_632 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln69_1_fu_1415_p2 == 1'd1))) begin
        i_6_reg_723 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        i_6_reg_723 <= add_ln76_reg_2233;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_1262_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_7_reg_655 <= add_ln103_fu_1252_p2;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        i_7_reg_655 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_1893 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        i_8_reg_666 <= 64'd0;
    end else if ((~((gmem_BVALID == 1'b0) & (cmp36319_reg_1825 == 1'd1)) & (1'b1 == ap_CS_fsm_state59))) begin
        i_8_reg_666 <= add_ln107_reg_2100;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_552 <= 31'd0;
    end else if (((icmp_ln43_1_fu_880_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_552 <= add_ln43_fu_874_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1970 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_621 <= add_ln96_2_reg_1965;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        indvar_flatten_reg_621 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        indvars_iv28_reg_575 <= 32'd4294967295;
    end else if (((1'b1 == ap_CS_fsm_state46) & ((fwprop_read_reg_1716 == 1'd1) | ((icmp_ln107_fu_1289_p2 == 1'd1) | (icmp_ln90_reg_1893 == 1'd0))))) begin
        indvars_iv28_reg_575 <= indvars_iv_next29_fu_1309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        indvars_iv30_reg_563 <= 32'd4294967263;
    end else if (((1'b1 == ap_CS_fsm_state46) & ((fwprop_read_reg_1716 == 1'd1) | ((icmp_ln107_fu_1289_p2 == 1'd1) | (icmp_ln90_reg_1893 == 1'd0))))) begin
        indvars_iv30_reg_563 <= indvars_iv_next31_fu_1303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1970 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_1_reg_644 <= add_ln97_reg_2025;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        j_1_reg_644 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        j_2_reg_712 <= 31'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln70_fu_1483_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        j_2_reg_712 <= add_ln70_fu_1473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln80_fu_1536_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1))) begin
        j_3_reg_734 <= add_ln80_fu_1530_p2;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        j_3_reg_734 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        j_4_reg_678 <= 31'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln108_fu_1370_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        j_4_reg_678 <= add_ln108_fu_1360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_reg_610 <= 31'd0;
    end else if (((icmp_ln91_fu_1093_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_610 <= add_ln91_fu_1083_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_reg_587 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state46) & ((fwprop_read_reg_1716 == 1'd1) | ((icmp_ln107_fu_1289_p2 == 1'd1) | (icmp_ln90_reg_1893 == 1'd0))))) begin
        k_reg_587 <= add_ln49_reg_1861;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter5 == 1'b1) & (icmp_ln80_reg_2276_pp7_iter4_reg == 1'd0))) begin
        rhs_reg_745 <= {{grp_fu_1707_p3[28:13]}};
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        rhs_reg_745 <= bbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_reg_1893 == 1'd1) & (fwprop_read_reg_1716 == 1'd0) & (1'b1 == ap_CS_fsm_state46))) begin
        add_ln107_reg_2100 <= add_ln107_fu_1283_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln80_fu_1536_p2 == 1'd0))) begin
        add_ln1116_reg_2280 <= add_ln1116_fu_1550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1))) begin
        add_ln119_reg_2340 <= add_ln119_fu_1618_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln49_reg_1861 <= add_ln49_fu_920_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        add_ln69_reg_2175 <= add_ln69_fu_1409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln70_fu_1483_p2 == 1'd0))) begin
        add_ln71_reg_2223 <= add_ln71_fu_1492_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        add_ln71_reg_2223_pp6_iter1_reg <= add_ln71_reg_2223;
        icmp_ln70_reg_2219 <= icmp_ln70_fu_1483_p2;
        icmp_ln70_reg_2219_pp6_iter1_reg <= icmp_ln70_reg_2219;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        add_ln76_reg_2233 <= add_ln76_fu_1501_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln90_reg_1897 <= add_ln90_fu_1011_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_1093_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln92_reg_1950 <= add_ln92_fu_1102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln92_reg_1950_pp1_iter1_reg <= add_ln92_reg_1950;
        icmp_ln91_reg_1946 <= icmp_ln91_fu_1093_p2;
        icmp_ln91_reg_1946_pp1_iter1_reg <= icmp_ln91_reg_1946;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln96_2_reg_1965 <= add_ln96_2_fu_1111_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_1117_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln96_reg_1974 <= add_ln96_fu_1122_p2;
        dx_addr_2_reg_2005 <= zext_ln1118_fu_1165_p1;
        icmp_ln97_reg_1979 <= icmp_ln97_fu_1128_p2;
        select_ln96_2_reg_1989 <= select_ln96_2_fu_1149_p3;
        select_ln96_reg_1984 <= select_ln96_fu_1133_p3;
        trunc_ln1118_reg_2000 <= trunc_ln1118_fu_1161_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln96_reg_1970 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln97_reg_2025 <= add_ln97_fu_1186_p2;
        select_ln96_3_reg_2020 <= select_ln96_3_fu_1180_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_1765 <= b;
        debug_dx_read_reg_1755 <= debug_dx;
        debug_x_read_reg_1760 <= debug_x;
        debugip_read_reg_1751 <= debugip;
        dwt_read_reg_1770 <= dwt;
        fwprop_read_reg_1716 <= fwprop;
        icmp_ln43_reg_1786 <= icmp_ln43_fu_798_p2;
        trunc_ln41_1_reg_1781 <= {{sub_ln41_fu_782_p2[31:5]}};
        wt_read_reg_1776 <= wt;
        xdim_read_reg_1733 <= xdim;
        ydim_read_reg_1720 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        cmp36319_reg_1825 <= cmp36319_fu_893_p2;
        sext_ln49_reg_1836 <= sext_ln49_fu_901_p1;
        trunc_ln49_1_reg_1847 <= trunc_ln49_1_fu_909_p1;
        trunc_ln49_reg_1829 <= trunc_ln49_fu_898_p1;
        xor_ln49_reg_1841 <= xor_ln49_fu_904_p2;
        zext_ln96_reg_1852[31 : 0] <= zext_ln96_fu_912_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln103_fu_1262_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dbbuf_V_addr_reg_2084 <= zext_ln703_fu_1271_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dbbuf_V_addr_reg_2084_pp3_iter1_reg <= dbbuf_V_addr_reg_2084;
        icmp_ln103_reg_2080 <= icmp_ln103_fu_1262_p2;
        icmp_ln103_reg_2080_pp3_iter1_reg <= icmp_ln103_reg_2080;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln103_reg_2080 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dbbuf_V_load_reg_2095 <= dbbuf_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1970_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dwbuf_V_addr_1_reg_2045 <= zext_ln1118_1_fu_1199_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dwbuf_V_addr_1_reg_2045_pp2_iter2_reg <= dwbuf_V_addr_1_reg_2045;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        dx_addr_2_reg_2005_pp2_iter1_reg <= dx_addr_2_reg_2005;
        dx_addr_2_reg_2005_pp2_iter2_reg <= dx_addr_2_reg_2005_pp2_iter1_reg;
        dx_addr_2_reg_2005_pp2_iter3_reg <= dx_addr_2_reg_2005_pp2_iter2_reg;
        icmp_ln96_reg_1970 <= icmp_ln96_fu_1117_p2;
        icmp_ln96_reg_1970_pp2_iter1_reg <= icmp_ln96_reg_1970;
        icmp_ln96_reg_1970_pp2_iter2_reg <= icmp_ln96_reg_1970_pp2_iter1_reg;
        icmp_ln96_reg_1970_pp2_iter3_reg <= icmp_ln96_reg_1970_pp2_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_1_reg_2345 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        dx_load_reg_2371 <= dx_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        empty_44_reg_2188 <= grp_fu_1424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        empty_49_reg_1915 <= grp_fu_1026_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        empty_55_reg_2123 <= grp_fu_1298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln119_1_fu_1624_p2 == 1'd0))) begin
        gmem2_addr_1_reg_2365 <= add_ln121_fu_1646_p2;
        gmem2_addr_reg_2354 <= add_ln120_fu_1635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        gmem2_addr_1_reg_2365_pp8_iter1_reg <= gmem2_addr_1_reg_2365;
        icmp_ln119_1_reg_2345 <= icmp_ln119_1_fu_1624_p2;
        icmp_ln119_1_reg_2345_pp8_iter1_reg <= icmp_ln119_1_reg_2345;
        icmp_ln119_1_reg_2345_pp8_iter2_reg <= icmp_ln119_1_reg_2345_pp8_iter1_reg;
        icmp_ln119_1_reg_2345_pp8_iter3_reg <= icmp_ln119_1_reg_2345_pp8_iter2_reg;
        icmp_ln119_1_reg_2345_pp8_iter4_reg <= icmp_ln119_1_reg_2345_pp8_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_reg_1946 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem_addr_1_read_reg_1955 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36319_reg_1825 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        gmem_addr_1_reg_1920 <= sext_ln91_fu_1066_p1;
        trunc_ln92_reg_1926 <= trunc_ln92_fu_1076_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_2219 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        gmem_addr_2_read_reg_2228 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36319_reg_1825 == 1'd1) & (1'b1 == ap_CS_fsm_state66))) begin
        gmem_addr_2_reg_2193 <= sext_ln70_fu_1456_p1;
        trunc_ln71_reg_2199 <= trunc_ln71_fu_1466_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36319_reg_1825 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        gmem_addr_3_reg_2128 <= sext_ln108_fu_1342_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_1_reg_1811 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_read_reg_1820 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln108_reg_2149 <= icmp_ln108_fu_1370_p2;
        icmp_ln108_reg_2149_pp4_iter1_reg <= icmp_ln108_reg_2149;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_1_reg_1811 <= icmp_ln43_1_fu_880_p2;
        icmp_ln43_1_reg_1811_pp0_iter1_reg <= icmp_ln43_1_reg_1811;
        trunc_ln44_reg_1815_pp0_iter1_reg <= trunc_ln44_reg_1815;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        icmp_ln80_reg_2276 <= icmp_ln80_fu_1536_p2;
        icmp_ln80_reg_2276_pp7_iter1_reg <= icmp_ln80_reg_2276;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp7_stage0_11001)) begin
        icmp_ln80_reg_2276_pp7_iter2_reg <= icmp_ln80_reg_2276_pp7_iter1_reg;
        icmp_ln80_reg_2276_pp7_iter3_reg <= icmp_ln80_reg_2276_pp7_iter2_reg;
        icmp_ln80_reg_2276_pp7_iter4_reg <= icmp_ln80_reg_2276_pp7_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        icmp_ln90_reg_1893 <= grp_fu_767_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        mul156_reg_2315 <= grp_fu_1007_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mul_ln109_reg_2139 <= grp_fu_1689_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        mul_ln71_reg_2209 <= grp_fu_1695_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        mul_ln78_reg_2261 <= grp_fu_1701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln92_reg_1936 <= grp_fu_1657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mul_ln96_reg_1960 <= grp_fu_1034_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        num_iters_reg_1790 <= num_iters_fu_845_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_915_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        p_cast9_reg_1866 <= p_cast9_fu_944_p1;
        shl_ln_reg_1875[30 : 5] <= shl_ln_fu_957_p3[30 : 5];
        trunc_ln53_2_reg_1882[9 : 5] <= trunc_ln53_2_fu_975_p3[9 : 5];
        ub_reg_1888 <= ub_fu_999_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln96_reg_1970 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln119_1_reg_2345 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)))) begin
        reg_772 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln108_reg_2149 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((icmp_ln96_reg_1970_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reg_777 <= dwbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln119_fu_1584_p2 == 1'd1))) begin
        sext_ln119_1_reg_2335 <= sext_ln119_1_fu_1614_p1;
        sext_ln119_reg_2330 <= sext_ln119_fu_1601_p1;
        trunc_ln119_reg_2325 <= trunc_ln119_fu_1589_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln43_reg_1801 <= trunc_ln43_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_1_fu_880_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln44_reg_1815 <= trunc_ln44_fu_885_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln76_fu_1507_p2 == 1'd0))) begin
        trunc_ln78_reg_2241 <= trunc_ln78_fu_1512_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        y_addr_reg_2256 <= zext_ln78_1_fu_1524_p1;
    end
end

always @ (*) begin
    if ((icmp_ln43_1_fu_880_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln91_fu_1093_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln96_fu_1117_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln103_fu_1262_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state42 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state42 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln108_fu_1370_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state52 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state52 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln65_fu_1395_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state60 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state60 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_1483_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state74 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state74 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0_subdone) & (1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln80_fu_1536_p2 == 1'd1))) begin
        ap_condition_pp7_flush_enable = 1'b1;
    end else begin
        ap_condition_pp7_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln119_1_fu_1624_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state91 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state91 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter4 == 1'b0) & (ap_enable_reg_pp7_iter3 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter5 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter2 == 1'b0) & (ap_enable_reg_pp8_iter4 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter3 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln119_1_reg_2345 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        ap_phi_mux_i_2_phi_fu_760_p4 = add_ln119_reg_2340;
    end else begin
        ap_phi_mux_i_2_phi_fu_760_p4 = i_2_reg_756;
    end
end

always @ (*) begin
    if (((icmp_ln96_reg_1970 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_5_phi_fu_636_p4 = select_ln96_3_reg_2020;
    end else begin
        ap_phi_mux_i_5_phi_fu_636_p4 = i_5_reg_632;
    end
end

always @ (*) begin
    if (((icmp_ln96_reg_1970 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_625_p4 = add_ln96_2_reg_1965;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_625_p4 = indvar_flatten_reg_621;
    end
end

always @ (*) begin
    if (((icmp_ln96_reg_1970 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_1_phi_fu_648_p4 = add_ln97_reg_2025;
    end else begin
        ap_phi_mux_j_1_phi_fu_648_p4 = j_1_reg_644;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (ap_enable_reg_pp7_iter5 == 1'b1) & (icmp_ln80_reg_2276_pp7_iter4_reg == 1'd0))) begin
        ap_phi_mux_rhs_phi_fu_749_p4 = {{grp_fu_1707_p3[28:13]}};
    end else begin
        ap_phi_mux_rhs_phi_fu_749_p4 = rhs_reg_745;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        bbuf_V_address0 = zext_ln78_1_fu_1524_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bbuf_V_address0 = zext_ln44_fu_889_p1;
    end else begin
        bbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_1_reg_1811_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dbbuf_V_ce0 = 1'b1;
    end else begin
        dbbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dbbuf_V_ce1 = 1'b1;
    end else begin
        dbbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln103_reg_2080_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dbbuf_V_we0 = 1'b1;
    end else begin
        dbbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        dwbuf_V_address0 = zext_ln109_1_fu_1384_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dwbuf_V_address0 = dwbuf_V_addr_1_reg_2045_pp2_iter2_reg;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dwbuf_V_address0 = zext_ln1118_1_fu_1199_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dwbuf_V_address0 = zext_ln92_1_fu_1107_p1;
    end else begin
        dwbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        dwbuf_V_ce0 = 1'b1;
    end else begin
        dwbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dwbuf_V_d0 = {{grp_fu_1671_p3[28:13]}};
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dwbuf_V_d0 = gmem_addr_1_read_reg_1955;
    end else begin
        dwbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln96_reg_1970_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((icmp_ln91_reg_1946_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        dwbuf_V_we0 = 1'b1;
    end else begin
        dwbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1))) begin
        dx_Addr_A_orig = zext_ln120_fu_1629_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        dx_Addr_A_orig = zext_ln66_fu_1404_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dx_Addr_A_orig = dx_addr_2_reg_2005_pp2_iter3_reg;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        dx_Addr_A_orig = dx_addr_2_reg_2005_pp2_iter1_reg;
    end else begin
        dx_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        dx_Din_A = 16'd0;
    end else if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dx_Din_A = {{grp_fu_1680_p3[28:13]}};
    end else begin
        dx_Din_A = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp8_stage1_11001) & (1'b1 == ap_CS_fsm_pp8_stage1) & (ap_enable_reg_pp8_iter0 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
        dx_EN_A = 1'b1;
    end else begin
        dx_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln96_reg_1970_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln65_fu_1395_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
        dx_WEN_A = 2'd3;
    end else begin
        dx_WEN_A = 2'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dy_Addr_A_orig = zext_ln703_fu_1271_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        dy_Addr_A_orig = zext_ln96_3_fu_1191_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dy_Addr_A_orig = zext_ln96_2_fu_1175_p1;
    end else begin
        dy_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        dy_EN_A = 1'b1;
    end else begin
        dy_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp8_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_2712)) begin
            gmem2_AWADDR = gmem2_addr_1_reg_2365_pp8_iter1_reg;
        end else if ((1'b1 == ap_condition_2708)) begin
            gmem2_AWADDR = gmem2_addr_reg_2354;
        end else begin
            gmem2_AWADDR = 'bx;
        end
    end else begin
        gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage1_11001) & (1'b1 == ap_CS_fsm_pp8_stage1)) | ((icmp_ln119_1_reg_2345 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln119_1_reg_2345_pp8_iter4_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1) & (1'b0 == ap_block_pp8_stage1_11001) & (1'b1 == ap_CS_fsm_pp8_stage1)) | ((icmp_ln119_1_reg_2345_pp8_iter3_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0)) begin
        if ((1'b1 == ap_condition_1693)) begin
            gmem2_WDATA = dx_load_reg_2371;
        end else if ((1'b1 == ap_condition_1681)) begin
            gmem2_WDATA = reg_772;
        end else begin
            gmem2_WDATA = 'bx;
        end
    end else begin
        gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp8_iter2 == 1'b1) & (icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage1_11001) & (1'b1 == ap_CS_fsm_pp8_stage1)))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage1) & (1'b1 == ap_CS_fsm_pp8_stage1)) | ((icmp_ln119_1_reg_2345 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0)))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln119_1_reg_2345_pp8_iter4_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1) & (1'b0 == ap_block_pp8_stage1) & (1'b1 == ap_CS_fsm_pp8_stage1)) | ((icmp_ln119_1_reg_2345_pp8_iter3_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1) & (1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0)))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp8_iter2 == 1'b1) & (icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage1) & (1'b1 == ap_CS_fsm_pp8_stage1)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
        gmem_ARADDR = gmem_addr_2_reg_2193;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        gmem_ARADDR = gmem_addr_1_reg_1920;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln43_reg_1786 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = sext_ln43_fu_860_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67)))) begin
        gmem_ARLEN = xdim_read_reg_1733;
    end else if (((1'b0 == ap_block_state2_io) & (icmp_ln43_reg_1786 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = ydim_read_reg_1720;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67)) | ((1'b0 == ap_block_state2_io) & (icmp_ln43_reg_1786 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp36319_reg_1825 == 1'd1)) & (cmp36319_reg_1825 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln91_reg_1946 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln70_reg_2219 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((icmp_ln43_1_reg_1811 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_2149_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state67) | ((icmp_ln43_reg_1786 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((cmp36319_reg_1825 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln91_reg_1946 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln70_reg_2219 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((icmp_ln43_1_reg_1811 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln108_reg_2149_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51)))) begin
        grp_fu_1689_ce = 1'b1;
    end else begin
        grp_fu_1689_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1))) begin
        wbuf_V_address0 = zext_ln1116_1_fu_1555_p1;
    end else if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        wbuf_V_address0 = zext_ln71_1_fu_1497_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        wbuf_V_address0 = zext_ln1118_1_fu_1199_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1) & (icmp_ln70_reg_2219_pp6_iter1_reg == 1'd0))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1))) begin
        x_Addr_A_orig = zext_ln120_fu_1629_p1;
    end else if (((1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1))) begin
        x_Addr_A_orig = zext_ln1116_fu_1545_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_Addr_A_orig = zext_ln1118_fu_1165_p1;
    end else begin
        x_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (ap_enable_reg_pp8_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)) | ((1'b0 == ap_block_pp8_stage1_11001) & (1'b1 == ap_CS_fsm_pp8_stage1) & (ap_enable_reg_pp8_iter0 == 1'b1)) | ((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1)))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter5 == 1'b1))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter5 == 1'b1))) begin
        y_WEN_A = 2'd3;
    end else begin
        y_WEN_A = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (icmp_ln43_reg_1786 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b0 == ap_block_state2_io) & (icmp_ln43_reg_1786 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln43_1_fu_880_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln43_1_fu_880_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln49_fu_915_p2 == 1'd1) & (debugip_read_reg_1751 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else if (((icmp_ln49_fu_915_p2 == 1'd1) & (debugip_read_reg_1751 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else if (((icmp_ln49_fu_915_p2 == 1'd0) & (fwprop_read_reg_1716 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((grp_fu_767_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln90_1_fu_1017_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((cmp36319_reg_1825 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln91_fu_1093_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln91_fu_1093_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln96_fu_1117_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((icmp_ln96_fu_1117_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln103_fu_1262_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln103_fu_1262_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & ((fwprop_read_reg_1716 == 1'd1) | ((icmp_ln107_fu_1289_p2 == 1'd1) | (icmp_ln90_reg_1893 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((cmp36319_reg_1825 == 1'd0) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln108_fu_1370_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln108_fu_1370_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            if ((~((gmem_BVALID == 1'b0) & (cmp36319_reg_1825 == 1'd1)) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln65_fu_1395_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (icmp_ln65_fu_1395_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((grp_fu_767_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (icmp_ln69_1_fu_1415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((cmp36319_reg_1825 == 1'd0) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln70_fu_1483_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln70_fu_1483_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln76_fu_1507_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if (~((1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter4 == 1'b0) & (ap_enable_reg_pp7_iter5 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if (((1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter4 == 1'b0) & (ap_enable_reg_pp7_iter5 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln119_fu_1584_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (icmp_ln119_1_fu_1624_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1)) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage1;
            end else if (((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (icmp_ln119_1_fu_1624_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_pp8_stage1 : begin
            if ((~((ap_enable_reg_pp8_iter4 == 1'b1) & (1'b0 == ap_block_pp8_stage1_subdone) & (1'b1 == ap_CS_fsm_pp8_stage1) & (ap_enable_reg_pp8_iter3 == 1'b0)) & (1'b0 == ap_block_pp8_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if (((ap_enable_reg_pp8_iter4 == 1'b1) & (1'b0 == ap_block_pp8_stage1_subdone) & (1'b1 == ap_CS_fsm_pp8_stage1) & (ap_enable_reg_pp8_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage1;
            end
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_1252_p2 = (i_7_reg_655 + 31'd1);

assign add_ln107_fu_1283_p2 = (i_8_reg_666 + 64'd1);

assign add_ln108_fu_1360_p2 = (j_4_reg_678 + 31'd1);

assign add_ln109_fu_1379_p2 = (mul_ln109_reg_2139 + trunc_ln109_1_fu_1375_p1);

assign add_ln1116_fu_1550_p2 = (mul_ln78_reg_2261 + trunc_ln1116_fu_1541_p1);

assign add_ln119_fu_1618_p2 = (ap_phi_mux_i_2_phi_fu_760_p4 + 31'd1);

assign add_ln120_fu_1635_p2 = ($signed(zext_ln120_fu_1629_p1) + $signed(sext_ln119_reg_2330));

assign add_ln121_fu_1646_p2 = ($signed(zext_ln120_fu_1629_p1) + $signed(sext_ln119_1_reg_2335));

assign add_ln43_fu_874_p2 = (i_reg_552 + 31'd1);

assign add_ln49_fu_920_p2 = (k_reg_587 + 32'd1);

assign add_ln53_fu_983_p2 = (shl_ln53_fu_965_p2 + 32'd32);

assign add_ln65_fu_1389_p2 = (i_1_reg_689 + 32'd1);

assign add_ln69_fu_1409_p2 = (i_4_reg_700 + 64'd1);

assign add_ln70_fu_1473_p2 = (j_2_reg_712 + 31'd1);

assign add_ln71_fu_1492_p2 = (mul_ln71_reg_2209 + trunc_ln71_1_fu_1488_p1);

assign add_ln76_fu_1501_p2 = (i_6_reg_723 + 64'd1);

assign add_ln78_fu_1520_p2 = (trunc_ln78_reg_2241 + trunc_ln53_2_reg_1882);

assign add_ln80_fu_1530_p2 = (j_3_reg_734 + 32'd1);

assign add_ln90_fu_1011_p2 = (i_3_reg_598 + 64'd1);

assign add_ln91_fu_1083_p2 = (j_reg_610 + 31'd1);

assign add_ln92_fu_1102_p2 = (mul_ln92_reg_1936 + trunc_ln92_1_fu_1098_p1);

assign add_ln96_1_fu_1171_p2 = (select_ln96_2_reg_1989 + trunc_ln53_2_reg_1882);

assign add_ln96_2_fu_1111_p2 = (ap_phi_mux_indvar_flatten_phi_fu_625_p4 + 96'd1);

assign add_ln96_fu_1122_p2 = (ap_phi_mux_i_5_phi_fu_636_p4 + 64'd1);

assign add_ln97_fu_1186_p2 = (select_ln96_reg_1984 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_pp8_stage1 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd66];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln43_1_reg_1811 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln43_1_reg_1811 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln91_reg_1946 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln91_reg_1946 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln70_reg_2219 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln70_reg_2219 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_01001 = ((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter3_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_11001 = (((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter3_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1)) | ((1'b1 == ap_block_state95_io) & (ap_enable_reg_pp8_iter2 == 1'b1)) | ((1'b1 == ap_block_state93_io) & (ap_enable_reg_pp8_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = (((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter3_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1)) | ((1'b1 == ap_block_state95_io) & (ap_enable_reg_pp8_iter2 == 1'b1)) | ((1'b1 == ap_block_state93_io) & (ap_enable_reg_pp8_iter1 == 1'b1)));
end

assign ap_block_pp8_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage1_01001 = ((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter4_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage1_11001 = (((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter4_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1)) | ((1'b1 == ap_block_state94_io) & (ap_enable_reg_pp8_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp8_stage1_subdone = (((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter4_reg == 1'd0) & (ap_enable_reg_pp8_iter4 == 1'b1)) | ((1'b1 == ap_block_state94_io) & (ap_enable_reg_pp8_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state100_pp8_stage1_iter4 = ((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln43_1_reg_1811 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln91_reg_1946 == 1'd0));
end

assign ap_block_state27_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (icmp_ln43_reg_1786 == 1'd1));
end

assign ap_block_state33_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_io = ((gmem_WREADY == 1'b0) & (icmp_ln108_reg_2149_pp4_iter1_reg == 1'd0));
end

assign ap_block_state54_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59 = ((gmem_BVALID == 1'b0) & (cmp36319_reg_1825 == 1'd1));
end

assign ap_block_state60_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state75_pp6_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln70_reg_2219 == 1'd0));
end

assign ap_block_state76_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp7_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp7_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp7_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp8_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state93_io = ((gmem2_AWREADY == 1'b0) & (icmp_ln119_1_reg_2345 == 1'd0));
end

assign ap_block_state93_pp8_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state94_io = (((gmem2_WREADY == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0)) | ((gmem2_AWREADY == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0)));
end

assign ap_block_state94_pp8_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state95_io = ((gmem2_WREADY == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0));
end

assign ap_block_state95_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp8_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp8_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp8_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state99_pp8_stage0_iter4 = ((gmem2_BVALID == 1'b0) & (icmp_ln119_1_reg_2345_pp8_iter3_reg == 1'd0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1681 = ((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage1_01001) & (1'b1 == ap_CS_fsm_pp8_stage1));
end

always @ (*) begin
    ap_condition_1693 = ((ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_01001) & (1'b1 == ap_CS_fsm_pp8_stage0));
end

always @ (*) begin
    ap_condition_2708 = ((icmp_ln119_1_reg_2345 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0));
end

always @ (*) begin
    ap_condition_2712 = ((icmp_ln119_1_reg_2345_pp8_iter1_reg == 1'd0) & (1'b0 == ap_block_pp8_stage1_11001) & (1'b1 == ap_CS_fsm_pp8_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp36319_fu_893_p2 = (($signed(xdim_read_reg_1733) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign dbbuf_V_address1 = zext_ln703_fu_1271_p1;

assign dbbuf_V_d0 = (dy_Dout_A + dbbuf_V_load_reg_2095);

assign dx_Addr_A = dx_Addr_A_orig << 32'd1;

assign dx_Clk_A = ap_clk;

assign dx_Rst_A = ap_rst_n_inv;

assign dy_Addr_A = dy_Addr_A_orig << 32'd1;

assign dy_Clk_A = ap_clk;

assign dy_Din_A = 16'd0;

assign dy_Rst_A = ap_rst_n_inv;

assign dy_WEN_A = 2'd0;

assign empty_42_fu_926_p2 = (($signed(indvars_iv30_reg_563) > $signed(xor_ln49_reg_1841)) ? 1'b1 : 1'b0);

assign empty_43_fu_938_p2 = (indvars_iv28_reg_575 - smax32_fu_931_p3);

assign empty_45_fu_1429_p2 = (empty_44_reg_2188 + shl_ln_reg_1875);

assign empty_46_fu_1441_p2 = (tmp_3_fu_1433_p3 + wt_read_reg_1776);

assign empty_50_fu_1039_p2 = (empty_49_reg_1915 + shl_ln_reg_1875);

assign empty_51_fu_1051_p2 = (tmp_2_fu_1043_p3 + dwt_read_reg_1770);

assign empty_56_fu_1315_p2 = (empty_55_reg_2123 + shl_ln_reg_1875);

assign empty_57_fu_1327_p2 = (tmp_4_fu_1319_p3 + dwt_read_reg_1770);

assign grp_fu_1026_p0 = i_3_reg_598[30:0];

assign grp_fu_1034_p0 = grp_fu_1034_p00;

assign grp_fu_1034_p00 = $unsigned(p_cast9_reg_1866);

assign grp_fu_1034_p1 = zext_ln96_reg_1852;

assign grp_fu_1298_p0 = i_8_reg_666[30:0];

assign grp_fu_1424_p0 = i_4_reg_700[30:0];

assign grp_fu_1657_p0 = grp_fu_1657_p00;

assign grp_fu_1657_p00 = trunc_ln92_reg_1926;

assign grp_fu_1657_p1 = 15'd1000;

assign grp_fu_1663_p0 = grp_fu_1663_p00;

assign grp_fu_1663_p00 = select_ln96_2_fu_1149_p3;

assign grp_fu_1663_p1 = 15'd1000;

assign grp_fu_1671_p2 = {{reg_777}, {13'd0}};

assign grp_fu_1680_p2 = {{dx_Dout_A}, {13'd0}};

assign grp_fu_1689_p0 = grp_fu_1689_p00;

assign grp_fu_1689_p00 = trunc_ln109_fu_1352_p1;

assign grp_fu_1689_p1 = 15'd1000;

assign grp_fu_1695_p0 = grp_fu_1695_p00;

assign grp_fu_1695_p00 = trunc_ln71_reg_2199;

assign grp_fu_1695_p1 = 15'd1000;

assign grp_fu_1701_p0 = grp_fu_1701_p00;

assign grp_fu_1701_p00 = trunc_ln78_fu_1512_p1;

assign grp_fu_1701_p1 = 15'd1000;

assign grp_fu_1707_p2 = {{ap_phi_mux_rhs_phi_fu_749_p4}, {13'd0}};

assign grp_fu_767_p2 = (($signed(ub_reg_1888) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign i_7_cast_fu_1258_p1 = i_7_reg_655;

assign icmp_ln103_fu_1262_p2 = ((i_7_cast_fu_1258_p1 == ydim_read_reg_1720) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_1289_p2 = ((i_8_reg_666 == p_cast9_reg_1866) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_1370_p2 = ((j_4_cast_fu_1366_p1 == xdim_read_reg_1733) ? 1'b1 : 1'b0);

assign icmp_ln119_1_fu_1624_p2 = ((ap_phi_mux_i_2_phi_fu_760_p4 == trunc_ln119_reg_2325) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_1584_p2 = (($signed(mul156_reg_2315) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_880_p2 = ((i_reg_552 == trunc_ln43_reg_1801) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_798_p0 = ydim;

assign icmp_ln43_fu_798_p2 = (($signed(icmp_ln43_fu_798_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_915_p2 = ((k_reg_587 == sext_ln49_reg_1836) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_989_p2 = (($signed(add_ln53_fu_983_p2) > $signed(ydim_read_reg_1720)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_1395_p2 = ((i_1_reg_689 == xdim_read_reg_1733) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_1415_p2 = ((i_4_reg_700 == p_cast9_reg_1866) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_1483_p2 = ((j_2_cast_fu_1479_p1 == xdim_read_reg_1733) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_1507_p2 = ((i_6_reg_723 == p_cast9_reg_1866) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_1536_p2 = ((j_3_reg_734 == xdim_read_reg_1733) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_1017_p2 = ((i_3_reg_598 == p_cast9_reg_1866) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_1093_p2 = ((j_cast_fu_1089_p1 == xdim_read_reg_1733) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_1117_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_625_p4 == mul_ln96_reg_1960) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_1128_p2 = ((ap_phi_mux_j_1_phi_fu_648_p4 == xdim_read_reg_1733) ? 1'b1 : 1'b0);

assign indvars_iv_next29_fu_1309_p2 = ($signed(indvars_iv28_reg_575) + $signed(32'd4294967264));

assign indvars_iv_next31_fu_1303_p2 = ($signed(indvars_iv30_reg_563) + $signed(32'd4294967264));

assign j_2_cast_fu_1479_p1 = j_2_reg_712;

assign j_4_cast_fu_1366_p1 = j_4_reg_678;

assign j_cast_fu_1089_p1 = j_reg_610;

assign mul_ln53_fu_952_p0 = k_reg_587[25:0];

assign num_iters_fu_845_p2 = ($signed(sext_ln41_fu_841_p1) + $signed(29'd1));

assign p_cast9_fu_944_p1 = $signed(empty_43_fu_938_p2);

assign select_ln41_fu_833_p3 = ((tmp_fu_804_p3[0:0] == 1'b1) ? sub_ln41_1_fu_814_p2 : zext_ln41_1_fu_829_p1);

assign select_ln96_2_fu_1149_p3 = ((icmp_ln97_fu_1128_p2[0:0] == 1'b1) ? trunc_ln96_fu_1141_p1 : trunc_ln96_1_fu_1145_p1);

assign select_ln96_3_fu_1180_p3 = ((icmp_ln97_reg_1979[0:0] == 1'b1) ? add_ln96_reg_1974 : i_5_reg_632);

assign select_ln96_fu_1133_p3 = ((icmp_ln97_fu_1128_p2[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_j_1_phi_fu_648_p4);

assign sext_ln108_fu_1342_p1 = $signed(trunc_ln3_fu_1332_p4);

assign sext_ln119_1_fu_1614_p1 = $signed(trunc_ln119_1_fu_1605_p4);

assign sext_ln119_fu_1601_p1 = $signed(trunc_ln4_fu_1592_p4);

assign sext_ln41_fu_841_p1 = $signed(select_ln41_fu_833_p3);

assign sext_ln43_fu_860_p1 = $signed(trunc_ln1_fu_851_p4);

assign sext_ln49_fu_901_p1 = $signed(num_iters_reg_1790);

assign sext_ln70_fu_1456_p1 = $signed(trunc_ln2_fu_1446_p4);

assign sext_ln91_fu_1066_p1 = $signed(trunc_ln7_fu_1056_p4);

assign shl_ln53_fu_965_p2 = k_reg_587 << 32'd5;

assign shl_ln_fu_957_p3 = {{mul_ln53_fu_952_p2}, {5'd0}};

assign smax32_fu_931_p3 = ((empty_42_fu_926_p2[0:0] == 1'b1) ? indvars_iv30_reg_563 : xor_ln49_reg_1841);

assign sub_ln41_1_fu_814_p2 = (28'd0 - zext_ln41_fu_811_p1);

assign sub_ln41_fu_782_p1 = ydim;

assign sub_ln41_fu_782_p2 = ($signed(32'd0) - $signed(sub_ln41_fu_782_p1));

assign sub_ln53_fu_994_p2 = ($signed(ydim_read_reg_1720) - $signed(shl_ln53_fu_965_p2));

assign tmp_2_fu_1043_p3 = {{empty_50_fu_1039_p2}, {1'd0}};

assign tmp_3_fu_1433_p3 = {{empty_45_fu_1429_p2}, {1'd0}};

assign tmp_4_fu_1319_p3 = {{empty_56_fu_1315_p2}, {1'd0}};

assign tmp_fu_804_p3 = ydim_read_reg_1720[32'd31];

assign trunc_ln109_1_fu_1375_p1 = j_4_reg_678[14:0];

assign trunc_ln109_fu_1352_p1 = i_8_reg_666[4:0];

assign trunc_ln1116_fu_1541_p1 = j_3_reg_734[14:0];

assign trunc_ln1118_fu_1161_p1 = select_ln96_fu_1133_p3[14:0];

assign trunc_ln119_1_fu_1605_p4 = {{debug_dx_read_reg_1755[31:1]}};

assign trunc_ln119_fu_1589_p1 = mul156_reg_2315[30:0];

assign trunc_ln1_fu_851_p4 = {{b_read_reg_1765[31:1]}};

assign trunc_ln2_fu_1446_p4 = {{empty_46_fu_1441_p2[31:1]}};

assign trunc_ln3_fu_1332_p4 = {{empty_57_fu_1327_p2[31:1]}};

assign trunc_ln41_2_fu_820_p4 = {{ydim_read_reg_1720[31:5]}};

assign trunc_ln43_fu_871_p1 = ydim_read_reg_1720[30:0];

assign trunc_ln44_fu_885_p1 = i_reg_552[9:0];

assign trunc_ln49_1_fu_909_p1 = xdim_read_reg_1733[25:0];

assign trunc_ln49_fu_898_p1 = xdim_read_reg_1733[30:0];

assign trunc_ln4_fu_1592_p4 = {{debug_x_read_reg_1760[31:1]}};

assign trunc_ln53_1_fu_971_p1 = k_reg_587[4:0];

assign trunc_ln53_2_fu_975_p3 = {{trunc_ln53_1_fu_971_p1}, {5'd0}};

assign trunc_ln66_fu_1400_p1 = i_1_reg_689[9:0];

assign trunc_ln703_fu_1267_p1 = i_7_reg_655[9:0];

assign trunc_ln71_1_fu_1488_p1 = j_2_reg_712[14:0];

assign trunc_ln71_fu_1466_p1 = i_4_reg_700[4:0];

assign trunc_ln78_fu_1512_p1 = i_6_reg_723[9:0];

assign trunc_ln7_fu_1056_p4 = {{empty_51_fu_1051_p2[31:1]}};

assign trunc_ln92_1_fu_1098_p1 = j_reg_610[14:0];

assign trunc_ln92_fu_1076_p1 = i_3_reg_598[4:0];

assign trunc_ln96_1_fu_1145_p1 = ap_phi_mux_i_5_phi_fu_636_p4[9:0];

assign trunc_ln96_fu_1141_p1 = add_ln96_fu_1122_p2[9:0];

assign ub_fu_999_p3 = ((icmp_ln53_fu_989_p2[0:0] == 1'b1) ? sub_ln53_fu_994_p2 : 32'd32);

assign x_Addr_A = x_Addr_A_orig << 32'd1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 16'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 2'd0;

assign xor_ln49_fu_904_p2 = (ydim_read_reg_1720 ^ 32'd4294967295);

assign y_Addr_A = y_Addr_A_orig << 32'd1;

assign y_Addr_A_orig = y_addr_reg_2256;

assign y_Clk_A = ap_clk;

assign y_Din_A = rhs_reg_745;

assign y_Rst_A = ap_rst_n_inv;

assign zext_ln109_1_fu_1384_p1 = add_ln109_fu_1379_p2;

assign zext_ln1116_1_fu_1555_p1 = add_ln1116_reg_2280;

assign zext_ln1116_fu_1545_p1 = trunc_ln1116_fu_1541_p1;

assign zext_ln1118_1_fu_1199_p1 = grp_fu_1663_p3;

assign zext_ln1118_fu_1165_p1 = trunc_ln1118_fu_1161_p1;

assign zext_ln120_fu_1629_p1 = ap_phi_mux_i_2_phi_fu_760_p4;

assign zext_ln41_1_fu_829_p1 = trunc_ln41_2_fu_820_p4;

assign zext_ln41_fu_811_p1 = trunc_ln41_1_reg_1781;

assign zext_ln44_fu_889_p1 = trunc_ln44_reg_1815_pp0_iter1_reg;

assign zext_ln66_fu_1404_p1 = trunc_ln66_fu_1400_p1;

assign zext_ln703_fu_1271_p1 = trunc_ln703_fu_1267_p1;

assign zext_ln71_1_fu_1497_p1 = add_ln71_reg_2223_pp6_iter1_reg;

assign zext_ln78_1_fu_1524_p1 = add_ln78_fu_1520_p2;

assign zext_ln92_1_fu_1107_p1 = add_ln92_reg_1950_pp1_iter1_reg;

assign zext_ln96_2_fu_1175_p1 = add_ln96_1_fu_1171_p2;

assign zext_ln96_3_fu_1191_p1 = select_ln96_2_reg_1989;

assign zext_ln96_fu_912_p1 = xdim_read_reg_1733;

always @ (posedge ap_clk) begin
    zext_ln96_reg_1852[95:32] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_1875[4:0] <= 5'b00000;
    trunc_ln53_2_reg_1882[4:0] <= 5'b00000;
end

endmodule //fcc_combined
