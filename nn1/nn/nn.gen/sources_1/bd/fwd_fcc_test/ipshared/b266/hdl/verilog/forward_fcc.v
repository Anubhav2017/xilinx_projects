// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="forward_fcc_forward_fcc,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=2383,HLS_SYN_LUT=2564,HLS_VERSION=2020_2}" *)

module forward_fcc (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 50'd2048;
parameter    ap_ST_fsm_state15 = 50'd4096;
parameter    ap_ST_fsm_state16 = 50'd8192;
parameter    ap_ST_fsm_state17 = 50'd16384;
parameter    ap_ST_fsm_state18 = 50'd32768;
parameter    ap_ST_fsm_state19 = 50'd65536;
parameter    ap_ST_fsm_state20 = 50'd131072;
parameter    ap_ST_fsm_state21 = 50'd262144;
parameter    ap_ST_fsm_state22 = 50'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 50'd1048576;
parameter    ap_ST_fsm_state26 = 50'd2097152;
parameter    ap_ST_fsm_state27 = 50'd4194304;
parameter    ap_ST_fsm_state28 = 50'd8388608;
parameter    ap_ST_fsm_state29 = 50'd16777216;
parameter    ap_ST_fsm_state30 = 50'd33554432;
parameter    ap_ST_fsm_state31 = 50'd67108864;
parameter    ap_ST_fsm_state32 = 50'd134217728;
parameter    ap_ST_fsm_state33 = 50'd268435456;
parameter    ap_ST_fsm_state34 = 50'd536870912;
parameter    ap_ST_fsm_state35 = 50'd1073741824;
parameter    ap_ST_fsm_pp2_stage0 = 50'd2147483648;
parameter    ap_ST_fsm_state39 = 50'd4294967296;
parameter    ap_ST_fsm_state40 = 50'd8589934592;
parameter    ap_ST_fsm_state41 = 50'd17179869184;
parameter    ap_ST_fsm_state42 = 50'd34359738368;
parameter    ap_ST_fsm_state43 = 50'd68719476736;
parameter    ap_ST_fsm_state44 = 50'd137438953472;
parameter    ap_ST_fsm_state45 = 50'd274877906944;
parameter    ap_ST_fsm_state46 = 50'd549755813888;
parameter    ap_ST_fsm_state47 = 50'd1099511627776;
parameter    ap_ST_fsm_pp3_stage0 = 50'd2199023255552;
parameter    ap_ST_fsm_state54 = 50'd4398046511104;
parameter    ap_ST_fsm_state55 = 50'd8796093022208;
parameter    ap_ST_fsm_pp4_stage0 = 50'd17592186044416;
parameter    ap_ST_fsm_state59 = 50'd35184372088832;
parameter    ap_ST_fsm_state60 = 50'd70368744177664;
parameter    ap_ST_fsm_state61 = 50'd140737488355328;
parameter    ap_ST_fsm_state62 = 50'd281474976710656;
parameter    ap_ST_fsm_state63 = 50'd562949953421312;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] w;
wire   [31:0] y;
wire   [31:0] b;
wire   [31:0] xdim;
wire   [31:0] ydim;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln29_reg_826;
wire    ap_CS_fsm_state16;
reg   [0:0] icmp_ln36_reg_801;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond889_reg_857;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state55;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond5_reg_1006;
reg   [0:0] exitcond5_reg_1006_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state41;
reg   [0:0] cmp2257_reg_774;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln43_reg_962;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond878_reg_898;
wire    ap_CS_fsm_state29;
reg   [0:0] icmp_ln37_reg_878;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] j_reg_306;
reg   [62:0] loop_index78_reg_317;
reg   [62:0] loop_index72_reg_328;
reg   [30:0] j_1_reg_350;
reg   [15:0] rhs_reg_361;
reg   [62:0] loop_index_reg_372;
reg   [31:0] ydim_read_reg_733;
reg  signed [31:0] xdim_read_reg_744;
reg   [31:0] b_read_reg_753;
reg   [31:0] y_read_reg_758;
reg   [31:0] w_read_reg_763;
reg   [31:0] x_read_reg_769;
wire   [0:0] cmp2257_fu_383_p2;
wire  signed [30:0] empty_fu_389_p1;
reg  signed [30:0] empty_reg_778;
wire   [31:0] add_ln28_fu_393_p2;
reg   [31:0] add_ln28_reg_783;
wire    ap_CS_fsm_state2;
wire   [6:0] empty_25_fu_404_p1;
reg   [6:0] empty_25_reg_791;
wire   [0:0] icmp_ln28_fu_399_p2;
wire   [0:0] icmp_ln36_fu_417_p2;
wire   [30:0] grp_fu_412_p2;
reg   [30:0] empty_27_reg_805;
wire    ap_CS_fsm_state3;
wire   [13:0] mul_ln30_fu_425_p2;
reg   [13:0] mul_ln30_reg_810;
wire    ap_CS_fsm_state4;
reg   [31:0] gmem_addr_1_reg_815;
wire   [30:0] add_ln29_fu_463_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln29_fu_473_p2;
reg   [0:0] icmp_ln29_reg_826_pp0_iter1_reg;
wire   [13:0] add_ln30_fu_482_p2;
reg   [13:0] add_ln30_reg_830;
reg   [13:0] add_ln30_reg_830_pp0_iter1_reg;
reg   [15:0] gmem_addr_1_read_reg_835;
wire  signed [62:0] sext_ln36_fu_491_p1;
reg  signed [62:0] sext_ln36_reg_840;
wire   [62:0] empty_32_fu_514_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state23_pp1_stage0_iter0;
reg    ap_block_state24_pp1_stage0_iter1;
wire    ap_block_state25_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond889_fu_520_p2;
reg   [0:0] exitcond889_reg_857_pp1_iter1_reg;
wire   [6:0] empty_34_fu_525_p1;
reg   [6:0] empty_34_reg_861;
reg   [6:0] empty_34_reg_861_pp1_iter1_reg;
reg   [15:0] gmem_addr_read_reg_866;
wire  signed [31:0] grp_fu_533_p2;
reg  signed [31:0] mul_ln37_reg_871;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln37_fu_537_p2;
wire    ap_CS_fsm_state28;
wire  signed [62:0] sext_ln37_fu_542_p1;
reg  signed [62:0] sext_ln37_reg_882;
wire   [62:0] empty_35_fu_565_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state36_pp2_stage0_iter0;
reg    ap_block_state37_pp2_stage0_iter1;
wire    ap_block_state38_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] exitcond878_fu_571_p2;
reg   [0:0] exitcond878_reg_898_pp2_iter1_reg;
wire   [13:0] empty_37_fu_576_p1;
reg   [13:0] empty_37_reg_902;
reg   [13:0] empty_37_reg_902_pp2_iter1_reg;
reg   [15:0] gmem_addr_2_read_reg_907;
reg   [31:0] gmem_addr_3_reg_912;
wire    ap_CS_fsm_state39;
wire   [31:0] add_ln39_fu_603_p2;
reg   [31:0] add_ln39_reg_918;
wire    ap_CS_fsm_state40;
wire   [6:0] trunc_ln41_fu_614_p1;
reg   [6:0] trunc_ln41_reg_926;
wire   [0:0] icmp_ln39_fu_609_p2;
reg   [6:0] ybuf_V_addr_reg_936;
reg   [31:0] gmem_addr_4_reg_941;
wire   [13:0] mul_ln1116_fu_646_p2;
reg   [13:0] mul_ln1116_reg_947;
wire   [15:0] bbuf_V_q0;
reg   [15:0] bbuf_V_load_reg_952;
wire   [30:0] add_ln43_fu_652_p2;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state48_pp3_stage0_iter0;
reg    ap_block_state49_pp3_stage0_iter1;
wire    ap_block_state50_pp3_stage0_iter2;
wire    ap_block_state51_pp3_stage0_iter3;
wire    ap_block_state52_pp3_stage0_iter4;
wire    ap_block_state53_pp3_stage0_iter5;
reg    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln43_fu_662_p2;
reg   [0:0] icmp_ln43_reg_962_pp3_iter1_reg;
reg   [0:0] icmp_ln43_reg_962_pp3_iter2_reg;
reg   [0:0] icmp_ln43_reg_962_pp3_iter3_reg;
reg   [0:0] icmp_ln43_reg_962_pp3_iter4_reg;
wire   [13:0] add_ln1116_fu_671_p2;
reg   [13:0] add_ln1116_reg_966;
reg  signed [15:0] gmem_addr_3_read_reg_976;
reg    ap_enable_reg_pp3_iter5;
wire   [62:0] empty_41_fu_704_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state56_pp4_stage0_iter0;
wire    ap_block_state57_pp4_stage0_iter1;
wire    ap_block_state58_pp4_stage0_iter2;
reg    ap_block_state58_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] exitcond5_fu_710_p2;
wire   [15:0] ybuf_V_q0;
reg   [15:0] ybuf_V_load_reg_1015;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state22;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state35;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state36;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state47;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_condition_pp3_exit_iter3_state51;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state56;
reg   [6:0] ybuf_V_address0;
reg    ybuf_V_ce0;
reg    ybuf_V_we0;
reg   [15:0] ybuf_V_d0;
reg   [6:0] bbuf_V_address0;
reg    bbuf_V_ce0;
reg    bbuf_V_we0;
reg   [13:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
reg   [15:0] wbuf_V_d0;
wire  signed [15:0] wbuf_V_q0;
reg   [31:0] i_reg_295;
wire    ap_CS_fsm_state15;
reg   [31:0] i_1_reg_339;
wire    ap_CS_fsm_state54;
reg   [15:0] ap_phi_mux_rhs_phi_fu_365_p4;
wire   [31:0] zext_ln30_1_fu_487_p1;
wire   [31:0] loop_index78_cast_cast_fu_529_p1;
wire   [31:0] loop_index72_cast_cast_fu_580_p1;
wire   [31:0] zext_ln41_fu_618_p1;
wire   [31:0] zext_ln1116_1_fu_676_p1;
wire   [31:0] loop_index_cast_cast_fu_719_p1;
wire  signed [31:0] sext_ln29_fu_453_p1;
wire  signed [31:0] p_cast_cast_fu_503_p1;
wire  signed [31:0] p_cast2_cast_fu_554_p1;
wire  signed [31:0] sext_ln43_fu_593_p1;
wire  signed [31:0] p_cast4_cast_fu_633_p1;
reg    ap_block_state16_io;
reg    ap_block_state29_io;
reg    ap_block_state41_io;
reg    ap_block_state63;
wire    ap_block_pp4_stage0_01001;
wire  signed [31:0] cmp2257_fu_383_p0;
wire  signed [31:0] empty_fu_389_p0;
wire  signed [30:0] grp_fu_412_p0;
wire   [6:0] mul_ln30_fu_425_p0;
wire   [7:0] mul_ln30_fu_425_p1;
wire   [31:0] tmp_fu_431_p3;
wire   [31:0] empty_28_fu_438_p2;
wire   [30:0] trunc_ln_fu_443_p4;
wire   [31:0] j_cast_fu_469_p1;
wire   [13:0] trunc_ln30_fu_478_p1;
wire   [30:0] p_cast_fu_494_p4;
wire    ap_CS_fsm_state26;
wire   [30:0] p_cast2_fu_545_p4;
wire   [30:0] trunc_ln2_fu_584_p4;
wire   [30:0] p_cast4_fu_624_p4;
wire   [6:0] mul_ln1116_fu_646_p0;
wire   [7:0] mul_ln1116_fu_646_p1;
wire   [31:0] j_1_cast_fu_658_p1;
wire   [13:0] trunc_ln1116_fu_667_p1;
wire  signed [22:0] grp_fu_724_p3;
wire   [6:0] empty_43_fu_715_p1;
wire   [22:0] grp_fu_724_p2;
reg    grp_fu_724_ce;
reg   [49:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [13:0] mul_ln1116_fu_646_p00;
wire   [13:0] mul_ln30_fu_425_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
end

forward_fcc_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .w(w),
    .y(y),
    .b(b),
    .xdim(xdim),
    .ydim(ydim),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

forward_fcc_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_4_reg_941),
    .I_AWID(1'd0),
    .I_AWLEN(ydim_read_reg_733),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(ybuf_V_load_reg_1015),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

forward_fcc_ybuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
ybuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ybuf_V_address0),
    .ce0(ybuf_V_ce0),
    .we0(ybuf_V_we0),
    .d0(ybuf_V_d0),
    .q0(ybuf_V_q0)
);

forward_fcc_ybuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
bbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_V_address0),
    .ce0(bbuf_V_ce0),
    .we0(bbuf_V_we0),
    .d0(gmem_addr_read_reg_866),
    .q0(bbuf_V_q0)
);

forward_fcc_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(wbuf_V_d0),
    .q0(wbuf_V_q0)
);

forward_fcc_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_412_p0),
    .din1(empty_reg_778),
    .ce(1'b1),
    .dout(grp_fu_412_p2)
);

forward_fcc_mul_7ns_8ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_7ns_8ns_14_1_1_U2(
    .din0(mul_ln30_fu_425_p0),
    .din1(mul_ln30_fu_425_p1),
    .dout(mul_ln30_fu_425_p2)
);

forward_fcc_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydim_read_reg_733),
    .din1(xdim_read_reg_744),
    .ce(1'b1),
    .dout(grp_fu_533_p2)
);

forward_fcc_mul_7ns_8ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_7ns_8ns_14_1_1_U4(
    .din0(mul_ln1116_fu_646_p0),
    .din1(mul_ln1116_fu_646_p1),
    .dout(mul_ln1116_fu_646_p2)
);

forward_fcc_mac_muladd_16s_16s_23ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
mac_muladd_16s_16s_23ns_23_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_3_read_reg_976),
    .din1(wbuf_V_q0),
    .din2(grp_fu_724_p2),
    .ce(grp_fu_724_ce),
    .dout(grp_fu_724_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state23)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state36) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state36)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state36);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter3_state51)) begin
                ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            ap_enable_reg_pp3_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state56) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state56)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state56);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        i_1_reg_339 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        i_1_reg_339 <= add_ln39_reg_918;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_295 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_295 <= add_ln28_reg_783;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_662_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j_1_reg_350 <= add_ln43_fu_652_p2;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        j_1_reg_350 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_306 <= 31'd0;
    end else if (((icmp_ln29_fu_473_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_306 <= add_ln29_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        loop_index72_reg_328 <= 63'd0;
    end else if (((exitcond878_fu_571_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        loop_index72_reg_328 <= empty_35_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        loop_index78_reg_317 <= 63'd0;
    end else if (((exitcond889_fu_520_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index78_reg_317 <= empty_32_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
        loop_index_reg_372 <= 63'd0;
    end else if (((exitcond5_fu_710_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        loop_index_reg_372 <= empty_41_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter5 == 1'b1) & (icmp_ln43_reg_962_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        rhs_reg_361 <= {{grp_fu_724_p3[22:7]}};
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        rhs_reg_361 <= bbuf_V_load_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_662_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln1116_reg_966 <= add_ln1116_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln28_reg_783 <= add_ln28_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln30_reg_830 <= add_ln30_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln30_reg_830_pp0_iter1_reg <= add_ln30_reg_830;
        icmp_ln29_reg_826 <= icmp_ln29_fu_473_p2;
        icmp_ln29_reg_826_pp0_iter1_reg <= icmp_ln29_reg_826;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        add_ln39_reg_918 <= add_ln39_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_753 <= b;
        cmp2257_reg_774 <= cmp2257_fu_383_p2;
        empty_reg_778 <= empty_fu_389_p1;
        w_read_reg_763 <= w;
        x_read_reg_769 <= x;
        xdim_read_reg_744 <= xdim;
        y_read_reg_758 <= y;
        ydim_read_reg_733 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        bbuf_V_load_reg_952 <= bbuf_V_q0;
        mul_ln1116_reg_947 <= mul_ln1116_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_25_reg_791 <= empty_25_fu_404_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_27_reg_805 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond889_fu_520_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_34_reg_861 <= empty_34_fu_525_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_34_reg_861_pp1_iter1_reg <= empty_34_reg_861;
        exitcond889_reg_857 <= exitcond889_fu_520_p2;
        exitcond889_reg_857_pp1_iter1_reg <= exitcond889_reg_857;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond878_fu_571_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_37_reg_902 <= empty_37_fu_576_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_37_reg_902_pp2_iter1_reg <= empty_37_reg_902;
        exitcond878_reg_898 <= exitcond878_fu_571_p2;
        exitcond878_reg_898_pp2_iter1_reg <= exitcond878_reg_898;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        exitcond5_reg_1006 <= exitcond5_fu_710_p2;
        exitcond5_reg_1006_pp4_iter1_reg <= exitcond5_reg_1006;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_reg_826 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_1_read_reg_835 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp2257_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        gmem_addr_1_reg_815 <= sext_ln29_fu_453_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond878_reg_898 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        gmem_addr_2_read_reg_907 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        gmem_addr_3_read_reg_976 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gmem_addr_3_reg_912 <= sext_ln43_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (icmp_ln36_reg_801 == 1'd1))) begin
        gmem_addr_4_reg_941 <= p_cast4_cast_fu_633_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond889_reg_857 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_read_reg_866 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln36_reg_801 <= icmp_ln36_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        icmp_ln37_reg_878 <= icmp_ln37_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln43_reg_962 <= icmp_ln43_fu_662_p2;
        icmp_ln43_reg_962_pp3_iter1_reg <= icmp_ln43_reg_962;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln43_reg_962_pp3_iter2_reg <= icmp_ln43_reg_962_pp3_iter1_reg;
        icmp_ln43_reg_962_pp3_iter3_reg <= icmp_ln43_reg_962_pp3_iter2_reg;
        icmp_ln43_reg_962_pp3_iter4_reg <= icmp_ln43_reg_962_pp3_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln30_reg_810 <= mul_ln30_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        mul_ln37_reg_871 <= grp_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sext_ln36_reg_840 <= sext_ln36_fu_491_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sext_ln37_reg_882 <= sext_ln37_fu_542_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_609_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        trunc_ln41_reg_926 <= trunc_ln41_fu_614_p1;
        ybuf_V_addr_reg_936 <= zext_ln41_fu_618_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (exitcond5_reg_1006 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        ybuf_V_load_reg_1015 <= ybuf_V_q0;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_473_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond889_fu_520_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond878_fu_571_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_condition_pp3_exit_iter3_state51 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter3_state51 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_662_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_710_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state56 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state56 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln36_reg_801 == 1'd1)) & (1'b1 == ap_CS_fsm_state63))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter5 == 1'b1) & (icmp_ln43_reg_962_pp3_iter4_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_rhs_phi_fu_365_p4 = {{grp_fu_724_p3[22:7]}};
    end else begin
        ap_phi_mux_rhs_phi_fu_365_p4 = rhs_reg_361;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln36_reg_801 == 1'd1)) & (1'b1 == ap_CS_fsm_state63))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        bbuf_V_address0 = zext_ln41_fu_618_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bbuf_V_address0 = loop_index78_cast_cast_fu_529_p1;
    end else begin
        bbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond889_reg_857_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp2257_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io))) begin
        gmem_ARADDR = gmem_addr_3_reg_912;
    end else if (((icmp_ln37_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io))) begin
        gmem_ARADDR = p_cast2_cast_fu_554_p1;
    end else if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln36_reg_801 == 1'd1) & (1'b0 == ap_block_state16_io))) begin
        gmem_ARADDR = p_cast_cast_fu_503_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_ARADDR = gmem_addr_1_reg_815;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io))) begin
        gmem_ARLEN = mul_ln37_reg_871;
    end else if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln36_reg_801 == 1'd1) & (1'b0 == ap_block_state16_io))) begin
        gmem_ARLEN = ydim_read_reg_733;
    end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((cmp2257_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io)))) begin
        gmem_ARLEN = xdim_read_reg_744;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln37_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io)) | ((cmp2257_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io)) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln36_reg_801 == 1'd1) & (1'b0 == ap_block_state16_io)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln36_reg_801 == 1'd1)) & (1'b1 == ap_CS_fsm_state63) & (icmp_ln36_reg_801 == 1'd1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond878_reg_898 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln43_reg_962 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond889_reg_857 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_reg_826 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_reg_1006_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln37_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_state29)) | ((cmp2257_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state41)) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln36_reg_801 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) & (icmp_ln36_reg_801 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond878_reg_898 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln43_reg_962 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond889_reg_857 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln29_reg_826 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond5_reg_1006_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        grp_fu_724_ce = 1'b1;
    end else begin
        grp_fu_724_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        wbuf_V_address0 = zext_ln1116_1_fu_676_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        wbuf_V_address0 = loop_index72_cast_cast_fu_580_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        wbuf_V_address0 = zext_ln30_1_fu_487_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        wbuf_V_d0 = gmem_addr_2_read_reg_907;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        wbuf_V_d0 = gmem_addr_1_read_reg_835;
    end else begin
        wbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond878_reg_898_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln29_reg_826_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ybuf_V_address0 = loop_index_cast_cast_fu_719_p1;
    end else if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state41))) begin
        ybuf_V_address0 = ybuf_V_addr_reg_936;
    end else begin
        ybuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io)))) begin
        ybuf_V_ce0 = 1'b1;
    end else begin
        ybuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        ybuf_V_d0 = rhs_reg_361;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        ybuf_V_d0 = bbuf_V_q0;
    end else begin
        ybuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((cmp2257_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state54)) | ((1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io)))) begin
        ybuf_V_we0 = 1'b1;
    end else begin
        ybuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln28_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((cmp2257_reg_774 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln29_fu_473_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln29_fu_473_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln36_reg_801 == 1'd0) & (1'b0 == ap_block_state16_io))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln36_reg_801 == 1'd1) & (1'b0 == ap_block_state16_io))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond889_fu_520_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((exitcond889_fu_520_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln37_reg_878 == 1'd1) & (1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if (((icmp_ln37_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_state29) & (1'b0 == ap_block_state29_io))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond878_fu_571_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((exitcond878_fu_571_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((icmp_ln39_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (icmp_ln36_reg_801 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else if (((icmp_ln39_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40) & (icmp_ln36_reg_801 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((cmp2257_reg_774 == 1'd0) & (1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else if (((cmp2257_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_state41) & (1'b0 == ap_block_state41_io))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state55 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond5_fu_710_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond5_fu_710_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln36_reg_801 == 1'd1)) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_671_p2 = (mul_ln1116_reg_947 + trunc_ln1116_fu_667_p1);

assign add_ln28_fu_393_p2 = (i_reg_295 + 32'd1);

assign add_ln29_fu_463_p2 = (j_reg_306 + 31'd1);

assign add_ln30_fu_482_p2 = (mul_ln30_reg_810 + trunc_ln30_fu_478_p1);

assign add_ln39_fu_603_p2 = (i_1_reg_339 + 32'd1);

assign add_ln43_fu_652_p2 = (j_1_reg_350 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd49];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln29_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln29_reg_826 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond889_reg_857 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond889_reg_857 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond878_reg_898 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond878_reg_898 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln43_reg_962 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln43_reg_962 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state58_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state58_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln29_reg_826 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((gmem_ARREADY == 1'b0) & (icmp_ln36_reg_801 == 1'd1));
end

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond889_reg_857 == 1'd0));
end

assign ap_block_state25_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((gmem_ARREADY == 1'b0) & (icmp_ln37_reg_878 == 1'd0));
end

assign ap_block_state36_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond878_reg_898 == 1'd0));
end

assign ap_block_state38_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_io = ((gmem_ARREADY == 1'b0) & (cmp2257_reg_774 == 1'd1));
end

assign ap_block_state48_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state49_pp3_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln43_reg_962 == 1'd0));
end

assign ap_block_state50_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state58_io = ((gmem_WREADY == 1'b0) & (exitcond5_reg_1006_pp4_iter1_reg == 1'd0));
end

assign ap_block_state58_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state63 = ((gmem_BVALID == 1'b0) & (icmp_ln36_reg_801 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp2257_fu_383_p0 = xdim;

assign cmp2257_fu_383_p2 = (($signed(cmp2257_fu_383_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_25_fu_404_p1 = i_reg_295[6:0];

assign empty_28_fu_438_p2 = (tmp_fu_431_p3 + w_read_reg_763);

assign empty_32_fu_514_p2 = (loop_index78_reg_317 + 63'd1);

assign empty_34_fu_525_p1 = loop_index78_reg_317[6:0];

assign empty_35_fu_565_p2 = (loop_index72_reg_328 + 63'd1);

assign empty_37_fu_576_p1 = loop_index72_reg_328[13:0];

assign empty_41_fu_704_p2 = (loop_index_reg_372 + 63'd1);

assign empty_43_fu_715_p1 = loop_index_reg_372[6:0];

assign empty_fu_389_p0 = xdim;

assign empty_fu_389_p1 = empty_fu_389_p0[30:0];

assign exitcond5_fu_710_p2 = ((loop_index_reg_372 == sext_ln36_reg_840) ? 1'b1 : 1'b0);

assign exitcond878_fu_571_p2 = ((loop_index72_reg_328 == sext_ln37_reg_882) ? 1'b1 : 1'b0);

assign exitcond889_fu_520_p2 = ((loop_index78_reg_317 == sext_ln36_reg_840) ? 1'b1 : 1'b0);

assign grp_fu_412_p0 = i_reg_295[30:0];

assign grp_fu_724_p2 = {{ap_phi_mux_rhs_phi_fu_365_p4}, {7'd0}};

assign icmp_ln28_fu_399_p2 = ((i_reg_295 == ydim_read_reg_733) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_473_p2 = ((j_cast_fu_469_p1 == xdim_read_reg_744) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_417_p2 = ((ydim_read_reg_733 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_537_p2 = ((mul_ln37_reg_871 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_609_p2 = ((i_1_reg_339 == ydim_read_reg_733) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_662_p2 = ((j_1_cast_fu_658_p1 == xdim_read_reg_744) ? 1'b1 : 1'b0);

assign j_1_cast_fu_658_p1 = j_1_reg_350;

assign j_cast_fu_469_p1 = j_reg_306;

assign loop_index72_cast_cast_fu_580_p1 = empty_37_reg_902_pp2_iter1_reg;

assign loop_index78_cast_cast_fu_529_p1 = empty_34_reg_861_pp1_iter1_reg;

assign loop_index_cast_cast_fu_719_p1 = empty_43_fu_715_p1;

assign mul_ln1116_fu_646_p0 = mul_ln1116_fu_646_p00;

assign mul_ln1116_fu_646_p00 = trunc_ln41_reg_926;

assign mul_ln1116_fu_646_p1 = 14'd100;

assign mul_ln30_fu_425_p0 = mul_ln30_fu_425_p00;

assign mul_ln30_fu_425_p00 = empty_25_reg_791;

assign mul_ln30_fu_425_p1 = 14'd100;

assign p_cast2_cast_fu_554_p1 = $signed(p_cast2_fu_545_p4);

assign p_cast2_fu_545_p4 = {{w_read_reg_763[31:1]}};

assign p_cast4_cast_fu_633_p1 = $signed(p_cast4_fu_624_p4);

assign p_cast4_fu_624_p4 = {{y_read_reg_758[31:1]}};

assign p_cast_cast_fu_503_p1 = $signed(p_cast_fu_494_p4);

assign p_cast_fu_494_p4 = {{b_read_reg_753[31:1]}};

assign sext_ln29_fu_453_p1 = $signed(trunc_ln_fu_443_p4);

assign sext_ln36_fu_491_p1 = $signed(ydim_read_reg_733);

assign sext_ln37_fu_542_p1 = mul_ln37_reg_871;

assign sext_ln43_fu_593_p1 = $signed(trunc_ln2_fu_584_p4);

assign tmp_fu_431_p3 = {{empty_27_reg_805}, {1'd0}};

assign trunc_ln1116_fu_667_p1 = j_1_reg_350[13:0];

assign trunc_ln2_fu_584_p4 = {{x_read_reg_769[31:1]}};

assign trunc_ln30_fu_478_p1 = j_reg_306[13:0];

assign trunc_ln41_fu_614_p1 = i_1_reg_339[6:0];

assign trunc_ln_fu_443_p4 = {{empty_28_fu_438_p2[31:1]}};

assign zext_ln1116_1_fu_676_p1 = add_ln1116_reg_966;

assign zext_ln30_1_fu_487_p1 = add_ln30_reg_830_pp0_iter1_reg;

assign zext_ln41_fu_618_p1 = trunc_ln41_fu_614_p1;

endmodule //forward_fcc
