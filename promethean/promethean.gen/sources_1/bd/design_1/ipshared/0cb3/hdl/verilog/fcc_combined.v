// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=3449,HLS_SYN_LUT=3472,HLS_VERSION=2020_2}" *)

module fcc_combined (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        dx_Addr_A,
        dx_EN_A,
        dx_WEN_A,
        dx_Din_A,
        dx_Dout_A,
        dx_Clk_A,
        dx_Rst_A,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        y_Clk_A,
        y_Rst_A,
        dy_Addr_A,
        dy_EN_A,
        dy_WEN_A,
        dy_Din_A,
        dy_Dout_A,
        dy_Clk_A,
        dy_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 56'd1;
parameter    ap_ST_fsm_state2 = 56'd2;
parameter    ap_ST_fsm_state3 = 56'd4;
parameter    ap_ST_fsm_state4 = 56'd8;
parameter    ap_ST_fsm_state5 = 56'd16;
parameter    ap_ST_fsm_state6 = 56'd32;
parameter    ap_ST_fsm_state7 = 56'd64;
parameter    ap_ST_fsm_state8 = 56'd128;
parameter    ap_ST_fsm_pp0_stage0 = 56'd256;
parameter    ap_ST_fsm_state12 = 56'd512;
parameter    ap_ST_fsm_state13 = 56'd1024;
parameter    ap_ST_fsm_state14 = 56'd2048;
parameter    ap_ST_fsm_state15 = 56'd4096;
parameter    ap_ST_fsm_state16 = 56'd8192;
parameter    ap_ST_fsm_state17 = 56'd16384;
parameter    ap_ST_fsm_state18 = 56'd32768;
parameter    ap_ST_fsm_state19 = 56'd65536;
parameter    ap_ST_fsm_state20 = 56'd131072;
parameter    ap_ST_fsm_state21 = 56'd262144;
parameter    ap_ST_fsm_state22 = 56'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 56'd1048576;
parameter    ap_ST_fsm_state26 = 56'd2097152;
parameter    ap_ST_fsm_state27 = 56'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 56'd8388608;
parameter    ap_ST_fsm_pp2_stage1 = 56'd16777216;
parameter    ap_ST_fsm_state38 = 56'd33554432;
parameter    ap_ST_fsm_pp3_stage0 = 56'd67108864;
parameter    ap_ST_fsm_state42 = 56'd134217728;
parameter    ap_ST_fsm_state43 = 56'd268435456;
parameter    ap_ST_fsm_state44 = 56'd536870912;
parameter    ap_ST_fsm_state45 = 56'd1073741824;
parameter    ap_ST_fsm_state46 = 56'd2147483648;
parameter    ap_ST_fsm_pp4_stage0 = 56'd4294967296;
parameter    ap_ST_fsm_state50 = 56'd8589934592;
parameter    ap_ST_fsm_state51 = 56'd17179869184;
parameter    ap_ST_fsm_state52 = 56'd34359738368;
parameter    ap_ST_fsm_state53 = 56'd68719476736;
parameter    ap_ST_fsm_state54 = 56'd137438953472;
parameter    ap_ST_fsm_pp5_stage0 = 56'd274877906944;
parameter    ap_ST_fsm_state58 = 56'd549755813888;
parameter    ap_ST_fsm_state59 = 56'd1099511627776;
parameter    ap_ST_fsm_state60 = 56'd2199023255552;
parameter    ap_ST_fsm_state61 = 56'd4398046511104;
parameter    ap_ST_fsm_state62 = 56'd8796093022208;
parameter    ap_ST_fsm_state63 = 56'd17592186044416;
parameter    ap_ST_fsm_state64 = 56'd35184372088832;
parameter    ap_ST_fsm_state65 = 56'd70368744177664;
parameter    ap_ST_fsm_state66 = 56'd140737488355328;
parameter    ap_ST_fsm_state67 = 56'd281474976710656;
parameter    ap_ST_fsm_state68 = 56'd562949953421312;
parameter    ap_ST_fsm_pp6_stage0 = 56'd1125899906842624;
parameter    ap_ST_fsm_state72 = 56'd2251799813685248;
parameter    ap_ST_fsm_state73 = 56'd4503599627370496;
parameter    ap_ST_fsm_state74 = 56'd9007199254740992;
parameter    ap_ST_fsm_pp7_stage0 = 56'd18014398509481984;
parameter    ap_ST_fsm_state81 = 56'd36028797018963968;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [1:0] x_WEN_A;
output  [15:0] x_Din_A;
input  [15:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] dx_Addr_A;
output   dx_EN_A;
output  [1:0] dx_WEN_A;
output  [15:0] dx_Din_A;
input  [15:0] dx_Dout_A;
output   dx_Clk_A;
output   dx_Rst_A;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [1:0] y_WEN_A;
output  [15:0] y_Din_A;
input  [15:0] y_Dout_A;
output   y_Clk_A;
output   y_Rst_A;
output  [31:0] dy_Addr_A;
output   dy_EN_A;
output  [1:0] dy_WEN_A;
output  [15:0] dy_Din_A;
input  [15:0] dy_Dout_A;
output   dy_Clk_A;
output   dy_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg x_EN_A;
reg dx_EN_A;
reg[1:0] dx_WEN_A;
reg[15:0] dx_Din_A;
reg y_EN_A;
reg[1:0] y_WEN_A;
reg dy_EN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [55:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] wt;
wire   [31:0] dwt;
wire   [31:0] b;
wire   [31:0] db;
wire   [31:0] xdim;
wire   [31:0] ydim;
wire    fwprop;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln38_1_reg_1300;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln49_reg_1627;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln70_reg_1380;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state46;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln87_reg_1554;
reg   [0:0] icmp_ln87_reg_1554_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state54;
reg   [0:0] cmp72329_reg_1314;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] i_reg_433;
reg   [30:0] j_reg_456;
reg   [62:0] indvar_flatten_reg_467;
reg   [30:0] i_4_reg_478;
reg   [31:0] j_1_reg_489;
reg   [30:0] i_6_reg_500;
reg   [30:0] j_4_reg_523;
reg   [31:0] i_1_reg_534;
reg   [30:0] j_2_reg_557;
reg   [31:0] j_3_reg_579;
reg   [15:0] rhs_reg_590;
reg   [0:0] fwprop_read_reg_1240;
reg   [31:0] ydim_read_reg_1244;
reg   [31:0] xdim_read_reg_1252;
reg   [31:0] dwt_read_reg_1269;
reg   [31:0] wt_read_reg_1275;
wire   [0:0] icmp_ln38_fu_606_p2;
reg   [0:0] icmp_ln38_reg_1280;
reg   [31:0] gmem_addr_reg_1284;
wire   [30:0] trunc_ln38_fu_632_p1;
reg   [30:0] trunc_ln38_reg_1290;
wire    ap_CS_fsm_state8;
wire   [30:0] add_ln38_fu_635_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln38_1_fu_641_p2;
reg   [0:0] icmp_ln38_1_reg_1300_pp0_iter1_reg;
wire   [5:0] trunc_ln39_fu_646_p1;
reg   [5:0] trunc_ln39_reg_1304;
reg   [5:0] trunc_ln39_reg_1304_pp0_iter1_reg;
reg   [15:0] gmem_addr_read_reg_1309;
wire   [0:0] grp_fu_601_p2;
wire    ap_CS_fsm_state12;
wire   [30:0] empty_45_fu_654_p1;
reg   [30:0] empty_45_reg_1318;
wire  signed [30:0] empty_46_fu_657_p1;
reg  signed [30:0] empty_46_reg_1326;
reg   [0:0] icmp_ln44_reg_1332;
wire   [30:0] add_ln69_fu_660_p2;
reg   [30:0] add_ln69_reg_1336;
wire    ap_CS_fsm_state13;
wire   [5:0] empty_48_fu_671_p1;
reg   [5:0] empty_48_reg_1344;
wire   [0:0] icmp_ln69_fu_666_p2;
wire   [30:0] grp_fu_675_p2;
reg   [30:0] empty_49_reg_1359;
wire    ap_CS_fsm_state14;
wire   [11:0] mul_ln71_fu_695_p2;
reg   [11:0] mul_ln71_reg_1364;
wire    ap_CS_fsm_state15;
reg   [31:0] gmem_addr_1_reg_1369;
wire   [30:0] add_ln70_fu_733_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state23_pp1_stage0_iter0;
reg    ap_block_state24_pp1_stage0_iter1;
wire    ap_block_state25_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln70_fu_743_p2;
reg   [0:0] icmp_ln70_reg_1380_pp1_iter1_reg;
wire   [11:0] add_ln71_fu_752_p2;
reg   [11:0] add_ln71_reg_1384;
reg   [11:0] add_ln71_reg_1384_pp1_iter1_reg;
reg   [15:0] gmem_addr_1_read_reg_1389;
wire   [62:0] grp_fu_686_p2;
reg   [62:0] mul_ln75_reg_1394;
wire    ap_CS_fsm_state27;
wire   [62:0] add_ln75_1_fu_761_p2;
reg   [62:0] add_ln75_1_reg_1399;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state28_pp2_stage0_iter0;
wire    ap_block_state30_pp2_stage0_iter1;
wire    ap_block_state32_pp2_stage0_iter2;
wire    ap_block_state34_pp2_stage0_iter3;
wire    ap_block_state36_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln75_fu_767_p2;
reg   [0:0] icmp_ln75_reg_1404;
reg   [0:0] icmp_ln75_reg_1404_pp2_iter1_reg;
reg   [0:0] icmp_ln75_reg_1404_pp2_iter2_reg;
reg   [0:0] icmp_ln75_reg_1404_pp2_iter3_reg;
reg   [0:0] icmp_ln75_reg_1404_pp2_iter4_reg;
wire   [31:0] select_ln75_fu_783_p3;
reg   [31:0] select_ln75_reg_1408;
wire   [30:0] select_ln75_3_fu_816_p3;
reg   [30:0] select_ln75_3_reg_1423;
wire   [11:0] trunc_ln1118_fu_824_p1;
reg   [11:0] trunc_ln1118_reg_1428;
reg   [5:0] dx_addr_1_reg_1433;
reg   [5:0] dx_addr_1_reg_1433_pp2_iter1_reg;
reg   [5:0] dx_addr_1_reg_1433_pp2_iter2_reg;
reg   [5:0] dx_addr_1_reg_1433_pp2_iter3_reg;
reg   [5:0] dx_addr_1_reg_1433_pp2_iter4_reg;
wire   [31:0] add_ln76_fu_834_p2;
reg   [31:0] add_ln76_reg_1443;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state29_pp2_stage1_iter0;
wire    ap_block_state31_pp2_stage1_iter1;
wire    ap_block_state33_pp2_stage1_iter2;
wire    ap_block_state35_pp2_stage1_iter3;
wire    ap_block_state37_pp2_stage1_iter4;
wire    ap_block_pp2_stage1_11001;
wire  signed [28:0] sext_ln75_fu_839_p1;
reg  signed [28:0] sext_ln75_reg_1448;
reg  signed [28:0] sext_ln75_reg_1448_pp2_iter2_reg;
reg   [11:0] dwbuf_V_addr_1_reg_1464;
wire  signed [15:0] wbuf_V_q0;
reg  signed [15:0] wbuf_V_load_reg_1470;
reg    ap_enable_reg_pp2_iter2;
reg   [15:0] lhs_reg_1485;
reg    ap_enable_reg_pp2_iter3;
reg   [15:0] trunc_ln5_reg_1495;
wire   [30:0] add_ln82_fu_889_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state39_pp3_stage0_iter0;
wire    ap_block_state40_pp3_stage0_iter1;
wire    ap_block_state41_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln82_fu_895_p2;
reg   [0:0] icmp_ln82_reg_1505;
reg   [0:0] icmp_ln82_reg_1505_pp3_iter1_reg;
reg   [5:0] dbbuf_V_addr_reg_1509;
reg   [5:0] dbbuf_V_addr_reg_1509_pp3_iter1_reg;
wire   [30:0] add_ln86_fu_917_p2;
reg   [30:0] add_ln86_reg_1520;
wire    ap_CS_fsm_state43;
wire   [5:0] empty_55_fu_928_p1;
reg   [5:0] empty_55_reg_1528;
wire   [0:0] icmp_ln86_fu_923_p2;
wire   [30:0] grp_fu_932_p2;
reg   [30:0] empty_56_reg_1533;
wire    ap_CS_fsm_state44;
wire   [11:0] mul_ln88_fu_940_p2;
reg   [11:0] mul_ln88_reg_1538;
wire    ap_CS_fsm_state45;
reg   [31:0] gmem_addr_3_reg_1543;
wire   [30:0] add_ln87_fu_978_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state47_pp4_stage0_iter0;
wire    ap_block_state48_pp4_stage0_iter1;
wire    ap_block_state49_pp4_stage0_iter2;
reg    ap_block_state49_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln87_fu_988_p2;
wire   [15:0] dwbuf_V_q1;
reg   [15:0] dwbuf_V_load_reg_1563;
reg    ap_enable_reg_pp4_iter1;
wire   [31:0] add_ln44_fu_1007_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state55_pp5_stage0_iter0;
wire    ap_block_state56_pp5_stage0_iter1;
wire    ap_block_state57_pp5_stage0_iter2;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln44_1_fu_1013_p2;
wire   [30:0] empty_36_fu_1027_p1;
reg   [30:0] empty_36_reg_1582;
wire    ap_CS_fsm_state58;
wire  signed [30:0] empty_37_fu_1030_p1;
reg  signed [30:0] empty_37_reg_1588;
wire   [30:0] add_ln48_fu_1033_p2;
reg   [30:0] add_ln48_reg_1593;
wire    ap_CS_fsm_state59;
wire   [5:0] empty_39_fu_1044_p1;
reg   [5:0] empty_39_reg_1601;
wire   [0:0] icmp_ln48_fu_1039_p2;
wire   [30:0] grp_fu_1048_p2;
reg   [30:0] empty_40_reg_1606;
wire    ap_CS_fsm_state60;
wire   [11:0] mul_ln50_fu_1056_p2;
reg   [11:0] mul_ln50_reg_1611;
wire    ap_CS_fsm_state61;
reg   [31:0] gmem_addr_2_reg_1616;
wire   [30:0] add_ln49_fu_1094_p2;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state69_pp6_stage0_iter0;
reg    ap_block_state70_pp6_stage0_iter1;
wire    ap_block_state71_pp6_stage0_iter2;
reg    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln49_fu_1104_p2;
reg   [0:0] icmp_ln49_reg_1627_pp6_iter1_reg;
wire   [11:0] add_ln50_fu_1113_p2;
reg   [11:0] add_ln50_reg_1631;
reg   [11:0] add_ln50_reg_1631_pp6_iter1_reg;
reg   [15:0] gmem_addr_2_read_reg_1636;
wire   [30:0] add_ln55_fu_1122_p2;
reg   [30:0] add_ln55_reg_1641;
wire    ap_CS_fsm_state73;
wire   [5:0] trunc_ln57_fu_1133_p1;
reg   [5:0] trunc_ln57_reg_1649;
wire   [0:0] icmp_ln55_fu_1128_p2;
reg   [5:0] y_addr_reg_1659;
wire   [11:0] mul_ln1116_fu_1146_p2;
reg   [11:0] mul_ln1116_reg_1664;
wire    ap_CS_fsm_state74;
wire   [15:0] bbuf_V_q0;
wire   [31:0] add_ln59_fu_1152_p2;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter0;
wire    ap_block_state75_pp7_stage0_iter0;
wire    ap_block_state76_pp7_stage0_iter1;
wire    ap_block_state77_pp7_stage0_iter2;
wire    ap_block_state78_pp7_stage0_iter3;
wire    ap_block_state79_pp7_stage0_iter4;
wire    ap_block_state80_pp7_stage0_iter5;
wire    ap_block_pp7_stage0_11001;
wire   [0:0] icmp_ln59_fu_1158_p2;
reg   [0:0] icmp_ln59_reg_1679;
reg   [0:0] icmp_ln59_reg_1679_pp7_iter1_reg;
reg   [0:0] icmp_ln59_reg_1679_pp7_iter2_reg;
reg   [0:0] icmp_ln59_reg_1679_pp7_iter3_reg;
reg   [0:0] icmp_ln59_reg_1679_pp7_iter4_reg;
wire   [11:0] add_ln1116_fu_1172_p2;
reg   [11:0] add_ln1116_reg_1683;
reg    ap_enable_reg_pp7_iter5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state22;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter4;
wire    ap_CS_fsm_state38;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state39;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state47;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state55;
reg    ap_enable_reg_pp5_iter1;
reg    ap_enable_reg_pp5_iter2;
wire    ap_CS_fsm_state68;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state69;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_flush_enable;
reg    ap_enable_reg_pp7_iter1;
reg    ap_enable_reg_pp7_iter2;
reg    ap_enable_reg_pp7_iter3;
reg    ap_enable_reg_pp7_iter4;
reg   [11:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
reg   [5:0] bbuf_V_address0;
reg    bbuf_V_ce0;
reg    bbuf_V_we0;
reg   [11:0] dwbuf_V_address0;
reg    dwbuf_V_ce0;
reg    dwbuf_V_we0;
reg   [15:0] dwbuf_V_d0;
reg   [11:0] dwbuf_V_address1;
reg    dwbuf_V_ce1;
reg    dbbuf_V_ce0;
reg    dbbuf_V_we0;
wire   [15:0] dbbuf_V_d0;
reg    dbbuf_V_ce1;
wire   [15:0] dbbuf_V_q1;
reg  signed [30:0] i_2_reg_444;
wire    ap_CS_fsm_state26;
reg   [62:0] ap_phi_mux_indvar_flatten_phi_fu_471_p4;
wire    ap_block_pp2_stage0;
reg   [30:0] ap_phi_mux_i_4_phi_fu_482_p4;
reg   [31:0] ap_phi_mux_j_1_phi_fu_493_p4;
reg  signed [30:0] i_7_reg_511;
reg    ap_block_state54;
wire    ap_CS_fsm_state42;
reg  signed [30:0] i_3_reg_545;
wire    ap_CS_fsm_state72;
reg   [30:0] i_5_reg_568;
wire    ap_CS_fsm_state81;
reg   [15:0] ap_phi_mux_rhs_phi_fu_594_p4;
wire    ap_block_pp7_stage0;
wire   [31:0] zext_ln39_fu_650_p1;
wire   [31:0] zext_ln71_1_fu_757_p1;
wire   [31:0] zext_ln75_2_fu_807_p1;
wire   [31:0] zext_ln1118_fu_828_p1;
wire   [31:0] zext_ln1118_2_fu_847_p1;
wire    ap_block_pp2_stage1;
wire   [31:0] zext_ln703_fu_904_p1;
wire    ap_block_pp3_stage0;
wire   [31:0] zext_ln88_1_fu_1002_p1;
wire   [31:0] zext_ln45_fu_1022_p1;
wire    ap_block_pp5_stage0;
wire   [31:0] zext_ln50_1_fu_1118_p1;
wire   [31:0] zext_ln57_fu_1137_p1;
wire   [31:0] zext_ln1116_fu_1167_p1;
wire   [31:0] zext_ln1116_2_fu_1177_p1;
wire  signed [31:0] sext_ln38_fu_622_p1;
wire  signed [31:0] sext_ln70_fu_723_p1;
wire  signed [31:0] sext_ln87_fu_968_p1;
wire  signed [31:0] sext_ln49_fu_1084_p1;
wire    ap_block_pp4_stage0_01001;
reg   [31:0] dy_Addr_A_orig;
reg   [31:0] x_Addr_A_orig;
reg   [31:0] dx_Addr_A_orig;
wire   [31:0] y_Addr_A_orig;
wire   [30:0] trunc_ln_fu_612_p4;
wire   [30:0] grp_fu_686_p0;
wire   [31:0] grp_fu_686_p1;
wire   [5:0] mul_ln71_fu_695_p0;
wire   [6:0] mul_ln71_fu_695_p1;
wire   [31:0] tmp_fu_701_p3;
wire   [31:0] empty_50_fu_708_p2;
wire   [30:0] trunc_ln3_fu_713_p4;
wire   [31:0] j_cast_fu_739_p1;
wire   [11:0] trunc_ln71_fu_748_p1;
wire   [0:0] icmp_ln76_fu_778_p2;
wire   [30:0] add_ln75_fu_772_p2;
wire   [5:0] trunc_ln75_fu_791_p1;
wire   [5:0] trunc_ln75_1_fu_795_p1;
wire   [5:0] select_ln75_2_fu_799_p3;
wire   [11:0] grp_fu_1206_p3;
wire  signed [28:0] grp_fu_1214_p3;
wire  signed [28:0] grp_fu_1223_p3;
wire   [5:0] trunc_ln703_fu_900_p1;
wire   [5:0] mul_ln88_fu_940_p0;
wire   [6:0] mul_ln88_fu_940_p1;
wire   [31:0] tmp_2_fu_946_p3;
wire   [31:0] empty_57_fu_953_p2;
wire   [30:0] trunc_ln1_fu_958_p4;
wire   [31:0] j_4_cast_fu_984_p1;
wire   [11:0] trunc_ln88_fu_993_p1;
wire   [11:0] add_ln88_fu_997_p2;
wire   [5:0] trunc_ln45_fu_1018_p1;
wire   [5:0] mul_ln50_fu_1056_p0;
wire   [6:0] mul_ln50_fu_1056_p1;
wire   [31:0] tmp_1_fu_1062_p3;
wire   [31:0] empty_41_fu_1069_p2;
wire   [30:0] trunc_ln6_fu_1074_p4;
wire   [31:0] j_2_cast_fu_1100_p1;
wire   [11:0] trunc_ln50_fu_1109_p1;
wire   [5:0] mul_ln1116_fu_1146_p0;
wire   [6:0] mul_ln1116_fu_1146_p1;
wire   [11:0] trunc_ln1116_fu_1163_p1;
wire  signed [28:0] grp_fu_1231_p3;
wire   [5:0] grp_fu_1206_p0;
wire   [6:0] grp_fu_1206_p1;
wire   [28:0] grp_fu_1214_p2;
wire  signed [15:0] grp_fu_1223_p1;
wire   [28:0] grp_fu_1223_p2;
wire   [28:0] grp_fu_1231_p2;
reg   [55:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
wire   [11:0] grp_fu_1206_p00;
wire   [62:0] grp_fu_686_p00;
wire   [62:0] grp_fu_686_p10;
wire   [11:0] mul_ln1116_fu_1146_p00;
wire   [11:0] mul_ln50_fu_1056_p00;
wire   [11:0] mul_ln71_fu_695_p00;
wire   [11:0] mul_ln88_fu_940_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 56'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter3 = 1'b0;
#0 ap_enable_reg_pp7_iter4 = 1'b0;
end

fcc_combined_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .wt(wt),
    .dwt(dwt),
    .b(b),
    .db(db),
    .xdim(xdim),
    .ydim(ydim),
    .fwprop(fwprop),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fcc_combined_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_3_reg_1543),
    .I_AWID(1'd0),
    .I_AWLEN(xdim_read_reg_1252),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(dwbuf_V_load_reg_1563),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

fcc_combined_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(gmem_addr_2_read_reg_1636),
    .q0(wbuf_V_q0)
);

fcc_combined_bbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
bbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_V_address0),
    .ce0(bbuf_V_ce0),
    .we0(bbuf_V_we0),
    .d0(gmem_addr_read_reg_1309),
    .q0(bbuf_V_q0)
);

fcc_combined_dwbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
dwbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dwbuf_V_address0),
    .ce0(dwbuf_V_ce0),
    .we0(dwbuf_V_we0),
    .d0(dwbuf_V_d0),
    .address1(dwbuf_V_address1),
    .ce1(dwbuf_V_ce1),
    .q1(dwbuf_V_q1)
);

fcc_combined_dbbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dbbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dbbuf_V_addr_reg_1509_pp3_iter1_reg),
    .ce0(dbbuf_V_ce0),
    .we0(dbbuf_V_we0),
    .d0(dbbuf_V_d0),
    .address1(dbbuf_V_addr_reg_1509),
    .ce1(dbbuf_V_ce1),
    .q1(dbbuf_V_q1)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_2_reg_444),
    .din1(empty_46_reg_1326),
    .ce(1'b1),
    .dout(grp_fu_675_p2)
);

fcc_combined_mul_31ns_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32ns_63_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_686_p0),
    .din1(grp_fu_686_p1),
    .ce(1'b1),
    .dout(grp_fu_686_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U3(
    .din0(mul_ln71_fu_695_p0),
    .din1(mul_ln71_fu_695_p1),
    .dout(mul_ln71_fu_695_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_7_reg_511),
    .din1(empty_46_reg_1326),
    .ce(1'b1),
    .dout(grp_fu_932_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U5(
    .din0(mul_ln88_fu_940_p0),
    .din1(mul_ln88_fu_940_p1),
    .dout(mul_ln88_fu_940_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_3_reg_545),
    .din1(empty_37_reg_1588),
    .ce(1'b1),
    .dout(grp_fu_1048_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U7(
    .din0(mul_ln50_fu_1056_p0),
    .din1(mul_ln50_fu_1056_p1),
    .dout(mul_ln50_fu_1056_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U8(
    .din0(mul_ln1116_fu_1146_p0),
    .din1(mul_ln1116_fu_1146_p1),
    .dout(mul_ln1116_fu_1146_p2)
);

fcc_combined_mac_muladd_6ns_7ns_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_7ns_12ns_12_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1206_p0),
    .din1(grp_fu_1206_p1),
    .din2(trunc_ln1118_reg_1428),
    .ce(1'b1),
    .dout(grp_fu_1206_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_Dout_A),
    .din1(dy_Dout_A),
    .din2(grp_fu_1214_p2),
    .ce(1'b1),
    .dout(grp_fu_1214_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wbuf_V_load_reg_1470),
    .din1(grp_fu_1223_p1),
    .din2(grp_fu_1223_p2),
    .ce(1'b1),
    .dout(grp_fu_1223_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_Dout_A),
    .din1(wbuf_V_q0),
    .din2(grp_fu_1231_p2),
    .ce(1'b1),
    .dout(grp_fu_1231_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state23)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state39) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state39)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state39);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state47) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state47)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state47);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state55) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((fwprop_read_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state55)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state55);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((fwprop_read_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state69) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state68)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state69)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state69);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state68)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp7_flush_enable)) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state74)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
        end else if ((1'b1 == ap_CS_fsm_state74)) begin
            ap_enable_reg_pp7_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_1_fu_1013_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_1_reg_534 <= add_ln44_fu_1007_p2;
    end else if (((fwprop_read_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i_1_reg_534 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1280 == 1'd1) & (fwprop_read_reg_1240 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i_2_reg_444 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        i_2_reg_444 <= add_ln69_reg_1336;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1280 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        i_3_reg_545 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        i_3_reg_545 <= add_ln48_reg_1593;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln75_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_4_reg_478 <= select_ln75_3_reg_1423;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_4_reg_478 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_1039_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        i_5_reg_568 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        i_5_reg_568 <= add_ln55_reg_1641;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        i_6_reg_500 <= 31'd0;
    end else if (((icmp_ln82_fu_895_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_6_reg_500 <= add_ln82_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_7_reg_511 <= 31'd0;
    end else if ((~((gmem_BVALID == 1'b0) & (cmp72329_reg_1314 == 1'd1)) & (1'b1 == ap_CS_fsm_state54))) begin
        i_7_reg_511 <= add_ln86_reg_1520;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_433 <= 31'd0;
    end else if (((icmp_ln38_1_fu_641_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_433 <= add_ln38_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln75_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten_reg_467 <= add_ln75_1_reg_1399;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        indvar_flatten_reg_467 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln75_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_1_reg_489 <= add_ln76_reg_1443;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j_1_reg_489 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        j_2_reg_557 <= 31'd0;
    end else if (((icmp_ln49_fu_1104_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        j_2_reg_557 <= add_ln49_fu_1094_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1158_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        j_3_reg_579 <= add_ln59_fu_1152_p2;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        j_3_reg_579 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        j_4_reg_523 <= 31'd0;
    end else if (((icmp_ln87_fu_988_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        j_4_reg_523 <= add_ln87_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        j_reg_456 <= 31'd0;
    end else if (((icmp_ln70_fu_743_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        j_reg_456 <= add_ln70_fu_733_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp7_iter5 == 1'b1) & (icmp_ln59_reg_1679_pp7_iter4_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        rhs_reg_590 <= {{grp_fu_1231_p3[28:13]}};
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        rhs_reg_590 <= bbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        add_ln1116_reg_1683 <= add_ln1116_fu_1172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        add_ln48_reg_1593 <= add_ln48_fu_1033_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_1104_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        add_ln50_reg_1631 <= add_ln50_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        add_ln50_reg_1631_pp6_iter1_reg <= add_ln50_reg_1631;
        icmp_ln49_reg_1627 <= icmp_ln49_fu_1104_p2;
        icmp_ln49_reg_1627_pp6_iter1_reg <= icmp_ln49_reg_1627;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        add_ln55_reg_1641 <= add_ln55_fu_1122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln69_reg_1336 <= add_ln69_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_743_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln71_reg_1384 <= add_ln71_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln71_reg_1384_pp1_iter1_reg <= add_ln71_reg_1384;
        icmp_ln70_reg_1380 <= icmp_ln70_fu_743_p2;
        icmp_ln70_reg_1380_pp1_iter1_reg <= icmp_ln70_reg_1380;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln75_1_reg_1399 <= add_ln75_1_fu_761_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1404 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        add_ln76_reg_1443 <= add_ln76_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1280 == 1'd1) & (fwprop_read_reg_1240 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        add_ln86_reg_1520 <= add_ln86_fu_917_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1280 == 1'd1) & (fwprop_read_reg_1240 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        cmp72329_reg_1314 <= grp_fu_601_p2;
        empty_45_reg_1318 <= empty_45_fu_654_p1;
        empty_46_reg_1326 <= empty_46_fu_657_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln82_fu_895_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_addr_reg_1509 <= zext_ln703_fu_904_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_addr_reg_1509_pp3_iter1_reg <= dbbuf_V_addr_reg_1509;
        icmp_ln82_reg_1505 <= icmp_ln82_fu_895_p2;
        icmp_ln82_reg_1505_pp3_iter1_reg <= icmp_ln82_reg_1505;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1404_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        dwbuf_V_addr_1_reg_1464 <= zext_ln1118_2_fu_847_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln87_reg_1554 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        dwbuf_V_load_reg_1563 <= dwbuf_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dwt_read_reg_1269 <= dwt;
        fwprop_read_reg_1240 <= fwprop;
        icmp_ln38_reg_1280 <= icmp_ln38_fu_606_p2;
        wt_read_reg_1275 <= wt;
        xdim_read_reg_1252 <= xdim;
        ydim_read_reg_1244 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_767_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dx_addr_1_reg_1433 <= zext_ln1118_fu_828_p1;
        select_ln75_reg_1408 <= select_ln75_fu_783_p3;
        trunc_ln1118_reg_1428 <= trunc_ln1118_fu_824_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dx_addr_1_reg_1433_pp2_iter1_reg <= dx_addr_1_reg_1433;
        dx_addr_1_reg_1433_pp2_iter2_reg <= dx_addr_1_reg_1433_pp2_iter1_reg;
        dx_addr_1_reg_1433_pp2_iter3_reg <= dx_addr_1_reg_1433_pp2_iter2_reg;
        dx_addr_1_reg_1433_pp2_iter4_reg <= dx_addr_1_reg_1433_pp2_iter3_reg;
        icmp_ln75_reg_1404 <= icmp_ln75_fu_767_p2;
        icmp_ln75_reg_1404_pp2_iter1_reg <= icmp_ln75_reg_1404;
        icmp_ln75_reg_1404_pp2_iter2_reg <= icmp_ln75_reg_1404_pp2_iter1_reg;
        icmp_ln75_reg_1404_pp2_iter3_reg <= icmp_ln75_reg_1404_pp2_iter2_reg;
        icmp_ln75_reg_1404_pp2_iter4_reg <= icmp_ln75_reg_1404_pp2_iter3_reg;
        sext_ln75_reg_1448_pp2_iter2_reg <= sext_ln75_reg_1448;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_1280 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        empty_36_reg_1582 <= empty_36_fu_1027_p1;
        empty_37_reg_1588 <= empty_37_fu_1030_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_1039_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state59))) begin
        empty_39_reg_1601 <= empty_39_fu_1044_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        empty_40_reg_1606 <= grp_fu_1048_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_666_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        empty_48_reg_1344 <= empty_48_fu_671_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_49_reg_1359 <= grp_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_923_p2 == 1'd0) & (icmp_ln38_reg_1280 == 1'd1) & (fwprop_read_reg_1240 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        empty_55_reg_1528 <= empty_55_fu_928_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        empty_56_reg_1533 <= grp_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_1380 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_read_reg_1389 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp72329_reg_1314 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        gmem_addr_1_reg_1369 <= sext_ln70_fu_723_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_1627 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        gmem_addr_2_read_reg_1636 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_1332 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
        gmem_addr_2_reg_1616 <= sext_ln49_fu_1084_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp72329_reg_1314 == 1'd1) & (1'b1 == ap_CS_fsm_state45))) begin
        gmem_addr_3_reg_1543 <= sext_ln87_fu_968_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_1_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_1309 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_addr_reg_1284 <= sext_ln38_fu_622_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln38_1_reg_1300 <= icmp_ln38_1_fu_641_p2;
        icmp_ln38_1_reg_1300_pp0_iter1_reg <= icmp_ln38_1_reg_1300;
        trunc_ln39_reg_1304_pp0_iter1_reg <= trunc_ln39_reg_1304;
    end
end

always @ (posedge ap_clk) begin
    if (((fwprop_read_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        icmp_ln44_reg_1332 <= grp_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        icmp_ln59_reg_1679 <= icmp_ln59_fu_1158_p2;
        icmp_ln59_reg_1679_pp7_iter1_reg <= icmp_ln59_reg_1679;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp7_stage0_11001)) begin
        icmp_ln59_reg_1679_pp7_iter2_reg <= icmp_ln59_reg_1679_pp7_iter1_reg;
        icmp_ln59_reg_1679_pp7_iter3_reg <= icmp_ln59_reg_1679_pp7_iter2_reg;
        icmp_ln59_reg_1679_pp7_iter4_reg <= icmp_ln59_reg_1679_pp7_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln87_reg_1554 <= icmp_ln87_fu_988_p2;
        icmp_ln87_reg_1554_pp4_iter1_reg <= icmp_ln87_reg_1554;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (icmp_ln75_reg_1404_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        lhs_reg_1485 <= dx_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        mul_ln1116_reg_1664 <= mul_ln1116_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        mul_ln50_reg_1611 <= mul_ln50_fu_1056_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul_ln71_reg_1364 <= mul_ln71_fu_695_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        mul_ln75_reg_1394 <= grp_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        mul_ln88_reg_1538 <= mul_ln88_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_767_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln75_3_reg_1423 <= select_ln75_3_fu_816_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sext_ln75_reg_1448 <= sext_ln75_fu_839_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln38_reg_1290 <= trunc_ln38_fu_632_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_1_fu_641_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln39_reg_1304 <= trunc_ln39_fu_646_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_1128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        trunc_ln57_reg_1649 <= trunc_ln57_fu_1133_p1;
        y_addr_reg_1659 <= zext_ln57_fu_1137_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_1404_pp2_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        trunc_ln5_reg_1495 <= {{grp_fu_1223_p3[28:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln75_reg_1404_pp2_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        wbuf_V_load_reg_1470 <= wbuf_V_q0;
    end
end

always @ (*) begin
    if ((icmp_ln38_1_fu_641_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln70_fu_743_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_767_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln82_fu_895_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state39 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln87_fu_988_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state47 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state47 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln44_1_fu_1013_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln49_fu_1104_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state69 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state69 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_1158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
        ap_condition_pp7_flush_enable = 1'b1;
    end else begin
        ap_condition_pp7_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & ((icmp_ln38_reg_1280 == 1'd0) | ((icmp_ln86_fu_923_p2 == 1'd1) | (fwprop_read_reg_1240 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter5 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter4 == 1'b0) & (ap_enable_reg_pp7_iter3 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln75_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_4_phi_fu_482_p4 = select_ln75_3_reg_1423;
    end else begin
        ap_phi_mux_i_4_phi_fu_482_p4 = i_4_reg_478;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln75_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_471_p4 = add_ln75_1_reg_1399;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_471_p4 = indvar_flatten_reg_467;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln75_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_j_1_phi_fu_493_p4 = add_ln76_reg_1443;
    end else begin
        ap_phi_mux_j_1_phi_fu_493_p4 = j_1_reg_489;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter5 == 1'b1) & (icmp_ln59_reg_1679_pp7_iter4_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0))) begin
        ap_phi_mux_rhs_phi_fu_594_p4 = {{grp_fu_1231_p3[28:13]}};
    end else begin
        ap_phi_mux_rhs_phi_fu_594_p4 = rhs_reg_590;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & ((icmp_ln38_reg_1280 == 1'd0) | ((icmp_ln86_fu_923_p2 == 1'd1) | (fwprop_read_reg_1240 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        bbuf_V_address0 = zext_ln57_fu_1137_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bbuf_V_address0 = zext_ln39_fu_650_p1;
    end else begin
        bbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln38_1_reg_1300_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dbbuf_V_ce0 = 1'b1;
    end else begin
        dbbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_ce1 = 1'b1;
    end else begin
        dbbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln82_reg_1505_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dbbuf_V_we0 = 1'b1;
    end else begin
        dbbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dwbuf_V_address0 = dwbuf_V_addr_1_reg_1464;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        dwbuf_V_address0 = zext_ln71_1_fu_757_p1;
    end else begin
        dwbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        dwbuf_V_address1 = zext_ln88_1_fu_1002_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dwbuf_V_address1 = zext_ln1118_2_fu_847_p1;
    end else begin
        dwbuf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        dwbuf_V_ce0 = 1'b1;
    end else begin
        dwbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        dwbuf_V_ce1 = 1'b1;
    end else begin
        dwbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dwbuf_V_d0 = {{grp_fu_1214_p3[28:13]}};
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        dwbuf_V_d0 = gmem_addr_1_read_reg_1389;
    end else begin
        dwbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln75_reg_1404_pp2_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln70_reg_1380_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        dwbuf_V_we0 = 1'b1;
    end else begin
        dwbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        dx_Addr_A_orig = zext_ln45_fu_1022_p1;
    end else if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dx_Addr_A_orig = dx_addr_1_reg_1433_pp2_iter4_reg;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dx_Addr_A_orig = dx_addr_1_reg_1433_pp2_iter1_reg;
    end else begin
        dx_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        dx_Din_A = 16'd0;
    end else if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dx_Din_A = trunc_ln5_reg_1495;
    end else begin
        dx_Din_A = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        dx_EN_A = 1'b1;
    end else begin
        dx_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln44_1_fu_1013_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln75_reg_1404_pp2_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        dx_WEN_A = 2'd3;
    end else begin
        dx_WEN_A = 2'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        dy_Addr_A_orig = zext_ln703_fu_904_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dy_Addr_A_orig = zext_ln75_2_fu_807_p1;
    end else begin
        dy_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        dy_EN_A = 1'b1;
    end else begin
        dy_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state62)) begin
            gmem_ARADDR = gmem_addr_2_reg_1616;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            gmem_ARADDR = gmem_addr_1_reg_1369;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = gmem_addr_reg_1284;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state62)))) begin
        gmem_ARLEN = xdim_read_reg_1252;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = ydim_read_reg_1244;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state62)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp72329_reg_1314 == 1'd1)) & (cmp72329_reg_1314 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln70_reg_1380 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln49_reg_1627 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_1_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_1554_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((cmp72329_reg_1314 == 1'd1) & (1'b1 == ap_CS_fsm_state54))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln70_reg_1380 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln49_reg_1627 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_1_reg_1300 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_1554_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1))) begin
        wbuf_V_address0 = zext_ln1116_2_fu_1177_p1;
    end else if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        wbuf_V_address0 = zext_ln50_1_fu_1118_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        wbuf_V_address0 = zext_ln1118_2_fu_847_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_1627_pp6_iter1_reg == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        x_Addr_A_orig = zext_ln1116_fu_1167_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        x_Addr_A_orig = zext_ln1118_fu_828_p1;
    end else begin
        x_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter5 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter5 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        y_WEN_A = 2'd3;
    end else begin
        y_WEN_A = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln38_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((ap_start == 1'b1) & (icmp_ln38_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln38_1_fu_641_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln38_1_fu_641_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((fwprop_read_reg_1240 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((icmp_ln38_reg_1280 == 1'd1) & (fwprop_read_reg_1240 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln69_fu_666_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((cmp72329_reg_1314 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln70_fu_743_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln70_fu_743_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln75_fu_767_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln75_fu_767_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter4 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter4 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln82_fu_895_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln82_fu_895_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & ((icmp_ln38_reg_1280 == 1'd0) | ((icmp_ln86_fu_923_p2 == 1'd1) | (fwprop_read_reg_1240 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((cmp72329_reg_1314 == 1'd0) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln87_fu_988_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln87_fu_988_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            if ((~((gmem_BVALID == 1'b0) & (cmp72329_reg_1314 == 1'd1)) & (1'b1 == ap_CS_fsm_state54))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((icmp_ln44_1_fu_1013_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((icmp_ln44_1_fu_1013_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln38_reg_1280 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln48_fu_1039_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((icmp_ln44_reg_1332 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((icmp_ln49_fu_1104_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((icmp_ln49_fu_1104_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (ap_enable_reg_pp6_iter1 == 1'b0) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln55_fu_1128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if (~((ap_enable_reg_pp7_iter5 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter4 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if (((ap_enable_reg_pp7_iter5 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter4 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_1172_p2 = (mul_ln1116_reg_1664 + trunc_ln1116_fu_1163_p1);

assign add_ln38_fu_635_p2 = (i_reg_433 + 31'd1);

assign add_ln44_fu_1007_p2 = (i_1_reg_534 + 32'd1);

assign add_ln48_fu_1033_p2 = ($signed(i_3_reg_545) + $signed(31'd1));

assign add_ln49_fu_1094_p2 = (j_2_reg_557 + 31'd1);

assign add_ln50_fu_1113_p2 = (mul_ln50_reg_1611 + trunc_ln50_fu_1109_p1);

assign add_ln55_fu_1122_p2 = (i_5_reg_568 + 31'd1);

assign add_ln59_fu_1152_p2 = (j_3_reg_579 + 32'd1);

assign add_ln69_fu_660_p2 = ($signed(i_2_reg_444) + $signed(31'd1));

assign add_ln70_fu_733_p2 = (j_reg_456 + 31'd1);

assign add_ln71_fu_752_p2 = (mul_ln71_reg_1364 + trunc_ln71_fu_748_p1);

assign add_ln75_1_fu_761_p2 = (ap_phi_mux_indvar_flatten_phi_fu_471_p4 + 63'd1);

assign add_ln75_fu_772_p2 = (ap_phi_mux_i_4_phi_fu_482_p4 + 31'd1);

assign add_ln76_fu_834_p2 = (select_ln75_reg_1408 + 32'd1);

assign add_ln82_fu_889_p2 = (i_6_reg_500 + 31'd1);

assign add_ln86_fu_917_p2 = ($signed(i_7_reg_511) + $signed(31'd1));

assign add_ln87_fu_978_p2 = (j_4_reg_523 + 31'd1);

assign add_ln88_fu_997_p2 = (mul_ln88_reg_1538 + trunc_ln88_fu_993_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd55];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln38_1_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln38_1_reg_1300 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln70_reg_1380 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln70_reg_1380 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state49_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state49_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln49_reg_1627 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln49_reg_1627 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln38_1_reg_1300 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln70_reg_1380 == 1'd0));
end

assign ap_block_state25_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state49_io = ((gmem_WREADY == 1'b0) & (icmp_ln87_reg_1554_pp4_iter1_reg == 1'd0));
end

assign ap_block_state49_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54 = ((gmem_BVALID == 1'b0) & (cmp72329_reg_1314 == 1'd1));
end

assign ap_block_state55_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state70_pp6_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln49_reg_1627 == 1'd0));
end

assign ap_block_state71_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp7_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp7_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp7_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dbbuf_V_d0 = (dy_Dout_A + dbbuf_V_q1);

assign dx_Addr_A = dx_Addr_A_orig << 32'd1;

assign dx_Clk_A = ap_clk;

assign dx_Rst_A = ap_rst_n_inv;

assign dy_Addr_A = dy_Addr_A_orig << 32'd1;

assign dy_Clk_A = ap_clk;

assign dy_Din_A = 16'd0;

assign dy_Rst_A = ap_rst_n_inv;

assign dy_WEN_A = 2'd0;

assign empty_36_fu_1027_p1 = ydim_read_reg_1244[30:0];

assign empty_37_fu_1030_p1 = xdim_read_reg_1252[30:0];

assign empty_39_fu_1044_p1 = i_3_reg_545[5:0];

assign empty_41_fu_1069_p2 = (tmp_1_fu_1062_p3 + wt_read_reg_1275);

assign empty_45_fu_654_p1 = ydim_read_reg_1244[30:0];

assign empty_46_fu_657_p1 = xdim_read_reg_1252[30:0];

assign empty_48_fu_671_p1 = i_2_reg_444[5:0];

assign empty_50_fu_708_p2 = (tmp_fu_701_p3 + dwt_read_reg_1269);

assign empty_55_fu_928_p1 = i_7_reg_511[5:0];

assign empty_57_fu_953_p2 = (tmp_2_fu_946_p3 + dwt_read_reg_1269);

assign grp_fu_1206_p0 = grp_fu_1206_p00;

assign grp_fu_1206_p00 = select_ln75_2_fu_799_p3;

assign grp_fu_1206_p1 = 12'd50;

assign grp_fu_1214_p2 = {{dwbuf_V_q1}, {13'd0}};

assign grp_fu_1223_p1 = sext_ln75_reg_1448_pp2_iter2_reg;

assign grp_fu_1223_p2 = {{lhs_reg_1485}, {13'd0}};

assign grp_fu_1231_p2 = {{ap_phi_mux_rhs_phi_fu_594_p4}, {13'd0}};

assign grp_fu_601_p2 = (($signed(xdim_read_reg_1252) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign grp_fu_686_p0 = grp_fu_686_p00;

assign grp_fu_686_p00 = empty_45_reg_1318;

assign grp_fu_686_p1 = grp_fu_686_p10;

assign grp_fu_686_p10 = xdim_read_reg_1252;

assign icmp_ln38_1_fu_641_p2 = ((i_reg_433 == trunc_ln38_reg_1290) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_606_p2 = (($signed(ydim) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_1013_p2 = ((i_1_reg_534 == xdim_read_reg_1252) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1039_p2 = ((i_3_reg_545 == empty_36_reg_1582) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1104_p2 = ((j_2_cast_fu_1100_p1 == xdim_read_reg_1252) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_1128_p2 = ((i_5_reg_568 == empty_36_reg_1582) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_1158_p2 = ((j_3_reg_579 == xdim_read_reg_1252) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_666_p2 = ((i_2_reg_444 == empty_45_reg_1318) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_743_p2 = ((j_cast_fu_739_p1 == xdim_read_reg_1252) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_767_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_471_p4 == mul_ln75_reg_1394) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_778_p2 = ((ap_phi_mux_j_1_phi_fu_493_p4 == xdim_read_reg_1252) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_895_p2 = ((i_6_reg_500 == empty_45_reg_1318) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_923_p2 = ((i_7_reg_511 == empty_45_reg_1318) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_988_p2 = ((j_4_cast_fu_984_p1 == xdim_read_reg_1252) ? 1'b1 : 1'b0);

assign j_2_cast_fu_1100_p1 = j_2_reg_557;

assign j_4_cast_fu_984_p1 = j_4_reg_523;

assign j_cast_fu_739_p1 = j_reg_456;

assign mul_ln1116_fu_1146_p0 = mul_ln1116_fu_1146_p00;

assign mul_ln1116_fu_1146_p00 = trunc_ln57_reg_1649;

assign mul_ln1116_fu_1146_p1 = 12'd50;

assign mul_ln50_fu_1056_p0 = mul_ln50_fu_1056_p00;

assign mul_ln50_fu_1056_p00 = empty_39_reg_1601;

assign mul_ln50_fu_1056_p1 = 12'd50;

assign mul_ln71_fu_695_p0 = mul_ln71_fu_695_p00;

assign mul_ln71_fu_695_p00 = empty_48_reg_1344;

assign mul_ln71_fu_695_p1 = 12'd50;

assign mul_ln88_fu_940_p0 = mul_ln88_fu_940_p00;

assign mul_ln88_fu_940_p00 = empty_55_reg_1528;

assign mul_ln88_fu_940_p1 = 12'd50;

assign select_ln75_2_fu_799_p3 = ((icmp_ln76_fu_778_p2[0:0] == 1'b1) ? trunc_ln75_fu_791_p1 : trunc_ln75_1_fu_795_p1);

assign select_ln75_3_fu_816_p3 = ((icmp_ln76_fu_778_p2[0:0] == 1'b1) ? add_ln75_fu_772_p2 : ap_phi_mux_i_4_phi_fu_482_p4);

assign select_ln75_fu_783_p3 = ((icmp_ln76_fu_778_p2[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_j_1_phi_fu_493_p4);

assign sext_ln38_fu_622_p1 = $signed(trunc_ln_fu_612_p4);

assign sext_ln49_fu_1084_p1 = $signed(trunc_ln6_fu_1074_p4);

assign sext_ln70_fu_723_p1 = $signed(trunc_ln3_fu_713_p4);

assign sext_ln75_fu_839_p1 = $signed(dy_Dout_A);

assign sext_ln87_fu_968_p1 = $signed(trunc_ln1_fu_958_p4);

assign tmp_1_fu_1062_p3 = {{empty_40_reg_1606}, {1'd0}};

assign tmp_2_fu_946_p3 = {{empty_56_reg_1533}, {1'd0}};

assign tmp_fu_701_p3 = {{empty_49_reg_1359}, {1'd0}};

assign trunc_ln1116_fu_1163_p1 = j_3_reg_579[11:0];

assign trunc_ln1118_fu_824_p1 = select_ln75_fu_783_p3[11:0];

assign trunc_ln1_fu_958_p4 = {{empty_57_fu_953_p2[31:1]}};

assign trunc_ln38_fu_632_p1 = ydim_read_reg_1244[30:0];

assign trunc_ln39_fu_646_p1 = i_reg_433[5:0];

assign trunc_ln3_fu_713_p4 = {{empty_50_fu_708_p2[31:1]}};

assign trunc_ln45_fu_1018_p1 = i_1_reg_534[5:0];

assign trunc_ln50_fu_1109_p1 = j_2_reg_557[11:0];

assign trunc_ln57_fu_1133_p1 = i_5_reg_568[5:0];

assign trunc_ln6_fu_1074_p4 = {{empty_41_fu_1069_p2[31:1]}};

assign trunc_ln703_fu_900_p1 = i_6_reg_500[5:0];

assign trunc_ln71_fu_748_p1 = j_reg_456[11:0];

assign trunc_ln75_1_fu_795_p1 = ap_phi_mux_i_4_phi_fu_482_p4[5:0];

assign trunc_ln75_fu_791_p1 = add_ln75_fu_772_p2[5:0];

assign trunc_ln88_fu_993_p1 = j_4_reg_523[11:0];

assign trunc_ln_fu_612_p4 = {{b[31:1]}};

assign x_Addr_A = x_Addr_A_orig << 32'd1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 16'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 2'd0;

assign y_Addr_A = y_Addr_A_orig << 32'd1;

assign y_Addr_A_orig = y_addr_reg_1659;

assign y_Clk_A = ap_clk;

assign y_Din_A = rhs_reg_590;

assign y_Rst_A = ap_rst_n_inv;

assign zext_ln1116_2_fu_1177_p1 = add_ln1116_reg_1683;

assign zext_ln1116_fu_1167_p1 = trunc_ln1116_fu_1163_p1;

assign zext_ln1118_2_fu_847_p1 = grp_fu_1206_p3;

assign zext_ln1118_fu_828_p1 = trunc_ln1118_fu_824_p1;

assign zext_ln39_fu_650_p1 = trunc_ln39_reg_1304_pp0_iter1_reg;

assign zext_ln45_fu_1022_p1 = trunc_ln45_fu_1018_p1;

assign zext_ln50_1_fu_1118_p1 = add_ln50_reg_1631_pp6_iter1_reg;

assign zext_ln57_fu_1137_p1 = trunc_ln57_fu_1133_p1;

assign zext_ln703_fu_904_p1 = trunc_ln703_fu_900_p1;

assign zext_ln71_1_fu_757_p1 = add_ln71_reg_1384_pp1_iter1_reg;

assign zext_ln75_2_fu_807_p1 = select_ln75_2_fu_799_p3;

assign zext_ln88_1_fu_1002_p1 = add_ln88_fu_997_p2;

endmodule //fcc_combined
