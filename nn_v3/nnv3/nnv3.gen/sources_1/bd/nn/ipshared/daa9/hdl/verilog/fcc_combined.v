// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=134,HLS_SYN_DSP=0,HLS_SYN_FF=5793,HLS_SYN_LUT=5331,HLS_VERSION=2020_2}" *)

module fcc_combined (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        dx_Addr_A,
        dx_EN_A,
        dx_WEN_A,
        dx_Din_A,
        dx_Dout_A,
        dx_Clk_A,
        dx_Rst_A,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        y_Clk_A,
        y_Rst_A,
        dy_Addr_A,
        dy_EN_A,
        dy_WEN_A,
        dy_Din_A,
        dy_Dout_A,
        dy_Clk_A,
        dy_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 71'd1;
parameter    ap_ST_fsm_state2 = 71'd2;
parameter    ap_ST_fsm_state3 = 71'd4;
parameter    ap_ST_fsm_state4 = 71'd8;
parameter    ap_ST_fsm_state5 = 71'd16;
parameter    ap_ST_fsm_state6 = 71'd32;
parameter    ap_ST_fsm_state7 = 71'd64;
parameter    ap_ST_fsm_state8 = 71'd128;
parameter    ap_ST_fsm_state9 = 71'd256;
parameter    ap_ST_fsm_state10 = 71'd512;
parameter    ap_ST_fsm_state11 = 71'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 71'd2048;
parameter    ap_ST_fsm_state15 = 71'd4096;
parameter    ap_ST_fsm_state16 = 71'd8192;
parameter    ap_ST_fsm_state17 = 71'd16384;
parameter    ap_ST_fsm_state18 = 71'd32768;
parameter    ap_ST_fsm_state19 = 71'd65536;
parameter    ap_ST_fsm_state20 = 71'd131072;
parameter    ap_ST_fsm_state21 = 71'd262144;
parameter    ap_ST_fsm_state22 = 71'd524288;
parameter    ap_ST_fsm_state23 = 71'd1048576;
parameter    ap_ST_fsm_state24 = 71'd2097152;
parameter    ap_ST_fsm_state25 = 71'd4194304;
parameter    ap_ST_fsm_state26 = 71'd8388608;
parameter    ap_ST_fsm_state27 = 71'd16777216;
parameter    ap_ST_fsm_state28 = 71'd33554432;
parameter    ap_ST_fsm_state29 = 71'd67108864;
parameter    ap_ST_fsm_state30 = 71'd134217728;
parameter    ap_ST_fsm_pp1_stage0 = 71'd268435456;
parameter    ap_ST_fsm_state34 = 71'd536870912;
parameter    ap_ST_fsm_state35 = 71'd1073741824;
parameter    ap_ST_fsm_pp2_stage0 = 71'd2147483648;
parameter    ap_ST_fsm_pp2_stage1 = 71'd4294967296;
parameter    ap_ST_fsm_state44 = 71'd8589934592;
parameter    ap_ST_fsm_pp3_stage0 = 71'd17179869184;
parameter    ap_ST_fsm_state48 = 71'd34359738368;
parameter    ap_ST_fsm_state49 = 71'd68719476736;
parameter    ap_ST_fsm_state50 = 71'd137438953472;
parameter    ap_ST_fsm_state51 = 71'd274877906944;
parameter    ap_ST_fsm_state52 = 71'd549755813888;
parameter    ap_ST_fsm_state53 = 71'd1099511627776;
parameter    ap_ST_fsm_state54 = 71'd2199023255552;
parameter    ap_ST_fsm_pp4_stage0 = 71'd4398046511104;
parameter    ap_ST_fsm_state58 = 71'd8796093022208;
parameter    ap_ST_fsm_state59 = 71'd17592186044416;
parameter    ap_ST_fsm_state60 = 71'd35184372088832;
parameter    ap_ST_fsm_state61 = 71'd70368744177664;
parameter    ap_ST_fsm_state62 = 71'd140737488355328;
parameter    ap_ST_fsm_state63 = 71'd281474976710656;
parameter    ap_ST_fsm_state64 = 71'd562949953421312;
parameter    ap_ST_fsm_state65 = 71'd1125899906842624;
parameter    ap_ST_fsm_state66 = 71'd2251799813685248;
parameter    ap_ST_fsm_state67 = 71'd4503599627370496;
parameter    ap_ST_fsm_state68 = 71'd9007199254740992;
parameter    ap_ST_fsm_state69 = 71'd18014398509481984;
parameter    ap_ST_fsm_state70 = 71'd36028797018963968;
parameter    ap_ST_fsm_state71 = 71'd72057594037927936;
parameter    ap_ST_fsm_state72 = 71'd144115188075855872;
parameter    ap_ST_fsm_pp5_stage0 = 71'd288230376151711744;
parameter    ap_ST_fsm_state76 = 71'd576460752303423488;
parameter    ap_ST_fsm_state77 = 71'd1152921504606846976;
parameter    ap_ST_fsm_state78 = 71'd2305843009213693952;
parameter    ap_ST_fsm_state79 = 71'd4611686018427387904;
parameter    ap_ST_fsm_state80 = 71'd9223372036854775808;
parameter    ap_ST_fsm_pp6_stage0 = 71'd18446744073709551616;
parameter    ap_ST_fsm_state87 = 71'd36893488147419103232;
parameter    ap_ST_fsm_state88 = 71'd73786976294838206464;
parameter    ap_ST_fsm_state89 = 71'd147573952589676412928;
parameter    ap_ST_fsm_pp7_stage0 = 71'd295147905179352825856;
parameter    ap_ST_fsm_pp7_stage1 = 71'd590295810358705651712;
parameter    ap_ST_fsm_state100 = 71'd1180591620717411303424;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [1:0] x_WEN_A;
output  [15:0] x_Din_A;
input  [15:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] dx_Addr_A;
output   dx_EN_A;
output  [1:0] dx_WEN_A;
output  [15:0] dx_Din_A;
input  [15:0] dx_Dout_A;
output   dx_Clk_A;
output   dx_Rst_A;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [1:0] y_WEN_A;
output  [15:0] y_Din_A;
input  [15:0] y_Dout_A;
output   y_Clk_A;
output   y_Rst_A;
output  [31:0] dy_Addr_A;
output   dy_EN_A;
output  [1:0] dy_WEN_A;
output  [15:0] dy_Din_A;
input  [15:0] dy_Dout_A;
output   dy_Clk_A;
output   dy_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg x_EN_A;
reg dx_EN_A;
reg[1:0] dx_WEN_A;
reg y_EN_A;
reg[1:0] y_WEN_A;
reg[15:0] y_Din_A;
reg dy_EN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [70:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] wt;
wire   [31:0] dwt;
wire   [31:0] b;
wire   [31:0] db;
wire   [31:0] debug_x;
wire   [31:0] debug_dx;
wire    debugip;
wire   [31:0] xdim;
wire   [31:0] ydim;
wire    fwprop;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg   [0:0] icmp_ln43_reg_1708;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln43_1_reg_1733;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln66_reg_2112;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln87_reg_1886;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state52;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln104_reg_2064;
reg   [0:0] icmp_ln104_reg_2064_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state62;
reg   [0:0] cmp37257_reg_1755;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter1;
wire    ap_block_pp7_stage0;
reg   [0:0] icmp_ln115_1_reg_2238;
reg    gmem2_blk_n_W;
wire    ap_CS_fsm_pp7_stage1;
wire    ap_block_pp7_stage1;
reg   [0:0] icmp_ln115_1_reg_2238_pp7_iter1_reg;
reg    gmem2_blk_n_B;
reg    ap_enable_reg_pp7_iter4;
reg   [0:0] icmp_ln115_1_reg_2238_pp7_iter3_reg;
reg    ap_enable_reg_pp7_iter2;
reg   [0:0] icmp_ln115_1_reg_2238_pp7_iter4_reg;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
reg   [31:0] gmem2_AWADDR;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
reg   [15:0] gmem2_WDATA;
wire    gmem2_ARREADY;
wire    gmem2_RVALID;
wire   [15:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [30:0] i_reg_543;
reg   [30:0] j_1_reg_589;
reg   [62:0] indvar_flatten_reg_600;
reg   [30:0] i_5_reg_611;
reg   [31:0] j_3_reg_622;
reg   [30:0] i_6_reg_633;
reg   [30:0] j_4_reg_656;
reg   [30:0] j_reg_679;
reg   [31:0] j_2_reg_701;
reg   [15:0] rhs_reg_712;
reg   [30:0] i_1_reg_721;
reg  signed [15:0] reg_732;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state36_pp2_stage0_iter0;
wire    ap_block_state38_pp2_stage0_iter1;
wire    ap_block_state40_pp2_stage0_iter2;
wire    ap_block_state42_pp2_stage0_iter3;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln92_reg_1910;
wire    ap_block_state90_pp7_stage0_iter0;
wire    ap_block_state92_pp7_stage0_iter1;
reg    ap_block_state92_io;
wire    ap_block_state94_pp7_stage0_iter2;
reg    ap_block_state94_io;
wire    ap_block_state96_pp7_stage0_iter3;
reg    ap_block_state98_pp7_stage0_iter4;
reg    ap_block_pp7_stage0_11001;
wire   [15:0] dwbuf_V_q0;
reg   [15:0] reg_737;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln92_reg_1910_pp2_iter1_reg;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state55_pp4_stage0_iter0;
wire    ap_block_state56_pp4_stage0_iter1;
wire    ap_block_state57_pp4_stage0_iter2;
reg    ap_block_state57_io;
reg    ap_block_pp4_stage0_11001;
reg   [0:0] fwprop_read_reg_1619;
reg  signed [31:0] ydim_read_reg_1623;
reg   [31:0] xdim_read_reg_1635;
reg   [0:0] debugip_read_reg_1651;
reg   [31:0] debug_dx_read_reg_1655;
reg   [31:0] debug_x_read_reg_1660;
reg   [31:0] b_read_reg_1665;
reg   [31:0] dwt_read_reg_1670;
reg   [31:0] wt_read_reg_1676;
reg   [0:0] tmp_reg_1681;
wire    ap_CS_fsm_state2;
wire   [64:0] grp_fu_753_p2;
reg   [64:0] mul_ln41_reg_1692;
wire    ap_CS_fsm_state3;
reg   [26:0] tmp_2_reg_1697;
wire   [26:0] sub_ln41_1_fu_790_p2;
reg   [26:0] sub_ln41_1_reg_1703;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln43_fu_796_p2;
wire   [26:0] num_iters_fu_806_p2;
reg   [26:0] num_iters_reg_1712;
wire   [30:0] trunc_ln43_fu_832_p1;
reg   [30:0] trunc_ln43_reg_1723;
wire    ap_CS_fsm_state11;
wire   [30:0] add_ln43_fu_835_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln43_1_fu_841_p2;
reg   [0:0] icmp_ln43_1_reg_1733_pp0_iter1_reg;
wire   [9:0] trunc_ln44_fu_846_p1;
reg   [9:0] trunc_ln44_reg_1737;
reg   [9:0] trunc_ln44_reg_1737_pp0_iter1_reg;
reg   [15:0] gmem_addr_read_reg_1742;
wire  signed [30:0] trunc_ln49_fu_854_p1;
reg  signed [30:0] trunc_ln49_reg_1747;
wire    ap_CS_fsm_state15;
wire   [0:0] cmp37257_fu_863_p2;
wire    ap_CS_fsm_state16;
wire  signed [38:0] sext_ln49_fu_868_p1;
reg  signed [38:0] sext_ln49_reg_1759;
wire  signed [31:0] sext_ln49_1_fu_871_p1;
reg  signed [31:0] sext_ln49_1_reg_1764;
wire  signed [30:0] grp_fu_857_p2;
reg  signed [30:0] mul_ln53_reg_1769;
wire   [62:0] zext_ln92_fu_874_p1;
reg   [62:0] zext_ln92_reg_1774;
wire   [31:0] add_ln53_fu_877_p2;
reg   [31:0] add_ln53_reg_1779;
wire    ap_CS_fsm_state17;
wire   [37:0] add_ln49_fu_883_p2;
reg   [37:0] add_ln49_reg_1785;
wire   [0:0] icmp_ln49_fu_889_p2;
wire   [30:0] grp_fu_898_p2;
reg   [30:0] mul_ln53_1_reg_1798;
wire    ap_CS_fsm_state18;
wire   [37:0] grp_fu_910_p2;
reg   [37:0] mul_ln53_2_reg_1810;
wire    ap_CS_fsm_state19;
wire   [9:0] trunc_ln54_fu_924_p1;
reg   [9:0] trunc_ln54_reg_1815;
wire    ap_CS_fsm_state20;
wire   [31:0] ub_fu_937_p3;
reg   [31:0] ub_reg_1821;
wire   [0:0] cmp36262_fu_945_p2;
reg   [0:0] cmp36262_reg_1826;
wire   [30:0] trunc_ln86_fu_951_p1;
reg   [30:0] trunc_ln86_reg_1830;
wire   [30:0] trunc_ln65_fu_955_p1;
reg   [30:0] trunc_ln65_reg_1836;
wire   [30:0] add_ln86_fu_959_p2;
reg   [30:0] add_ln86_reg_1842;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln86_fu_965_p2;
wire   [30:0] grp_fu_970_p2;
reg   [30:0] empty_51_reg_1855;
wire    ap_CS_fsm_state22;
reg   [31:0] gmem_addr_2_reg_1860;
wire    ap_CS_fsm_state23;
wire   [5:0] trunc_ln88_fu_1020_p1;
reg   [5:0] trunc_ln88_reg_1866;
wire    ap_CS_fsm_state27;
wire   [15:0] grp_fu_1562_p2;
reg   [15:0] mul_ln88_reg_1876;
wire    ap_CS_fsm_state30;
wire   [30:0] add_ln87_fu_1027_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state31_pp1_stage0_iter0;
reg    ap_block_state32_pp1_stage0_iter1;
wire    ap_block_state33_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln87_fu_1037_p2;
reg   [0:0] icmp_ln87_reg_1886_pp1_iter1_reg;
(* use_dsp48 = "no" *) wire   [15:0] add_ln88_fu_1046_p2;
reg   [15:0] add_ln88_reg_1890;
reg   [15:0] add_ln88_reg_1890_pp1_iter1_reg;
reg   [15:0] gmem_addr_2_read_reg_1895;
wire   [62:0] grp_fu_978_p2;
reg   [62:0] mul_ln92_reg_1900;
wire    ap_CS_fsm_state35;
wire   [62:0] add_ln92_2_fu_1055_p2;
reg   [62:0] add_ln92_2_reg_1905;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln92_fu_1061_p2;
reg   [0:0] icmp_ln92_reg_1910_pp2_iter2_reg;
reg   [0:0] icmp_ln92_reg_1910_pp2_iter3_reg;
wire   [31:0] select_ln92_fu_1077_p3;
reg   [31:0] select_ln92_reg_1914;
wire   [9:0] select_ln92_2_fu_1093_p3;
reg   [9:0] select_ln92_2_reg_1919;
wire   [30:0] select_ln92_3_fu_1105_p3;
reg   [30:0] select_ln92_3_reg_1930;
wire   [15:0] trunc_ln1118_fu_1113_p1;
reg   [15:0] trunc_ln1118_reg_1935;
wire   [31:0] zext_ln1118_fu_1117_p1;
reg   [31:0] zext_ln1118_reg_1940;
reg   [31:0] zext_ln1118_reg_1940_pp2_iter1_reg;
reg   [31:0] zext_ln1118_reg_1940_pp2_iter2_reg;
reg   [31:0] zext_ln1118_reg_1940_pp2_iter3_reg;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state37_pp2_stage1_iter0;
wire    ap_block_state39_pp2_stage1_iter1;
wire    ap_block_state41_pp2_stage1_iter2;
wire    ap_block_state43_pp2_stage1_iter3;
wire    ap_block_pp2_stage1_11001;
wire   [31:0] add_ln93_fu_1131_p2;
reg   [31:0] add_ln93_reg_1955;
reg   [15:0] dwbuf_V_addr_1_reg_1975;
reg   [15:0] dwbuf_V_addr_1_reg_1975_pp2_iter2_reg;
wire   [30:0] add_ln99_fu_1189_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state45_pp3_stage0_iter0;
wire    ap_block_state46_pp3_stage0_iter1;
wire    ap_block_state47_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln99_fu_1199_p2;
reg   [0:0] icmp_ln99_reg_2005;
reg   [0:0] icmp_ln99_reg_2005_pp3_iter1_reg;
reg   [9:0] dbbuf_V_addr_reg_2009;
reg   [9:0] dbbuf_V_addr_reg_2009_pp3_iter1_reg;
wire   [15:0] dbbuf_V_q1;
reg   [15:0] dbbuf_V_load_reg_2020;
reg    ap_enable_reg_pp3_iter1;
wire   [30:0] trunc_ln103_fu_1220_p1;
reg   [30:0] trunc_ln103_reg_2025;
wire    ap_CS_fsm_state48;
wire   [30:0] add_ln103_fu_1223_p2;
reg   [30:0] add_ln103_reg_2030;
wire    ap_CS_fsm_state49;
wire   [30:0] grp_fu_1234_p2;
reg   [30:0] empty_58_reg_2038;
wire    ap_CS_fsm_state50;
reg   [31:0] gmem_addr_3_reg_2043;
wire    ap_CS_fsm_state51;
wire   [15:0] grp_fu_1592_p2;
reg   [15:0] mul_ln105_reg_2054;
wire    ap_CS_fsm_state54;
wire   [30:0] add_ln104_fu_1284_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln104_fu_1294_p2;
wire   [30:0] add_ln65_fu_1313_p2;
reg   [30:0] add_ln65_reg_2073;
wire    ap_CS_fsm_state63;
wire   [30:0] grp_fu_1324_p2;
reg   [30:0] empty_44_reg_2081;
wire    ap_CS_fsm_state64;
reg   [31:0] gmem_addr_1_reg_2086;
wire    ap_CS_fsm_state65;
wire   [5:0] trunc_ln67_fu_1366_p1;
reg   [5:0] trunc_ln67_reg_2092;
wire    ap_CS_fsm_state69;
wire   [15:0] grp_fu_1598_p2;
reg   [15:0] mul_ln67_reg_2102;
wire    ap_CS_fsm_state72;
wire   [30:0] add_ln66_fu_1373_p2;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state73_pp5_stage0_iter0;
reg    ap_block_state74_pp5_stage0_iter1;
wire    ap_block_state75_pp5_stage0_iter2;
reg    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln66_fu_1383_p2;
reg   [0:0] icmp_ln66_reg_2112_pp5_iter1_reg;
(* use_dsp48 = "no" *) wire   [15:0] add_ln67_fu_1392_p2;
reg   [15:0] add_ln67_reg_2116;
reg   [15:0] add_ln67_reg_2116_pp5_iter1_reg;
reg   [15:0] gmem_addr_1_read_reg_2121;
wire   [30:0] add_ln72_fu_1401_p2;
reg   [30:0] add_ln72_reg_2126;
wire    ap_CS_fsm_state77;
wire   [9:0] trunc_ln72_fu_1412_p1;
reg   [9:0] trunc_ln72_reg_2134;
wire   [0:0] icmp_ln72_fu_1407_p2;
wire    ap_CS_fsm_state79;
reg   [9:0] y_addr_reg_2149;
wire   [15:0] bbuf_V_q0;
wire    ap_CS_fsm_state80;
wire   [15:0] grp_fu_1604_p2;
reg   [15:0] mul_ln1116_reg_2159;
wire   [31:0] add_ln76_fu_1434_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state81_pp6_stage0_iter0;
wire    ap_block_state82_pp6_stage0_iter1;
wire    ap_block_state83_pp6_stage0_iter2;
wire    ap_block_state84_pp6_stage0_iter3;
wire    ap_block_state85_pp6_stage0_iter4;
wire    ap_block_state86_pp6_stage0_iter5;
wire    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln76_fu_1440_p2;
reg   [0:0] icmp_ln76_reg_2169;
reg   [0:0] icmp_ln76_reg_2169_pp6_iter1_reg;
reg   [0:0] icmp_ln76_reg_2169_pp6_iter2_reg;
reg   [0:0] icmp_ln76_reg_2169_pp6_iter3_reg;
reg   [0:0] icmp_ln76_reg_2169_pp6_iter4_reg;
(* use_dsp48 = "no" *) wire   [15:0] add_ln1116_fu_1454_p2;
reg   [15:0] add_ln1116_reg_2173;
reg    ap_enable_reg_pp6_iter5;
wire   [31:0] grp_fu_903_p2;
reg   [31:0] mul150_reg_2208;
wire    ap_CS_fsm_state88;
wire   [0:0] icmp_ln115_fu_1489_p2;
wire    ap_CS_fsm_state89;
wire   [30:0] trunc_ln115_fu_1494_p1;
reg   [30:0] trunc_ln115_reg_2218;
wire  signed [31:0] sext_ln115_fu_1506_p1;
reg  signed [31:0] sext_ln115_reg_2223;
wire  signed [31:0] sext_ln115_1_fu_1519_p1;
reg  signed [31:0] sext_ln115_1_reg_2228;
wire   [30:0] add_ln115_fu_1523_p2;
reg   [30:0] add_ln115_reg_2233;
reg    ap_enable_reg_pp7_iter0;
wire   [0:0] icmp_ln115_1_fu_1529_p2;
reg   [0:0] icmp_ln115_1_reg_2238_pp7_iter2_reg;
reg   [31:0] gmem2_addr_reg_2247;
reg   [31:0] gmem2_addr_1_reg_2258;
reg   [31:0] gmem2_addr_1_reg_2258_pp7_iter1_reg;
reg   [15:0] dx_load_reg_2264;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state31;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state36;
wire    ap_block_pp2_stage1_subdone;
reg    ap_enable_reg_pp2_iter3;
wire    ap_CS_fsm_state44;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state45;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state55;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state73;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_flush_enable;
reg    ap_enable_reg_pp6_iter1;
reg    ap_enable_reg_pp6_iter2;
reg    ap_enable_reg_pp6_iter3;
reg    ap_enable_reg_pp6_iter4;
reg    ap_condition_pp6_exit_iter4_state85;
reg    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state90;
wire    ap_block_state91_pp7_stage1_iter0;
wire    ap_block_state93_pp7_stage1_iter1;
reg    ap_block_state93_io;
wire    ap_block_state95_pp7_stage1_iter2;
wire    ap_block_state97_pp7_stage1_iter3;
reg    ap_block_state99_pp7_stage1_iter4;
reg    ap_block_pp7_stage1_subdone;
reg    ap_enable_reg_pp7_iter3;
reg   [15:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
wire  signed [15:0] wbuf_V_q0;
reg   [9:0] bbuf_V_address0;
reg    bbuf_V_ce0;
reg    bbuf_V_we0;
reg   [15:0] dwbuf_V_address0;
reg    dwbuf_V_ce0;
reg    dwbuf_V_we0;
reg   [15:0] dwbuf_V_d0;
reg    dbbuf_V_ce0;
reg    dbbuf_V_we0;
wire   [15:0] dbbuf_V_d0;
wire   [9:0] dbbuf_V_address1;
reg    dbbuf_V_ce1;
reg   [31:0] k_reg_554;
wire   [0:0] icmp_ln103_fu_1229_p2;
reg   [37:0] phi_mul_reg_565;
reg  signed [30:0] i_3_reg_577;
wire    ap_CS_fsm_state34;
reg   [62:0] ap_phi_mux_indvar_flatten_phi_fu_604_p4;
wire    ap_block_pp2_stage0;
reg   [30:0] ap_phi_mux_i_5_phi_fu_615_p4;
reg   [31:0] ap_phi_mux_j_3_phi_fu_626_p4;
reg  signed [30:0] i_7_reg_644;
reg    ap_block_state62;
reg  signed [30:0] i_2_reg_667;
wire    ap_CS_fsm_state76;
reg   [30:0] i_4_reg_690;
wire    ap_CS_fsm_state87;
wire   [0:0] icmp_ln65_fu_1319_p2;
reg   [15:0] ap_phi_mux_rhs_phi_fu_715_p4;
wire    ap_block_pp6_stage0;
reg   [30:0] ap_phi_mux_i_1_phi_fu_725_p4;
wire   [31:0] zext_ln44_fu_850_p1;
wire   [31:0] zext_ln88_1_fu_1051_p1;
wire   [31:0] zext_ln92_2_fu_1126_p1;
wire    ap_block_pp2_stage1;
wire   [31:0] zext_ln92_3_fu_1136_p1;
wire   [31:0] zext_ln1118_1_fu_1144_p1;
wire   [31:0] zext_ln703_fu_1208_p1;
wire    ap_block_pp3_stage0;
wire   [31:0] zext_ln105_1_fu_1308_p1;
wire   [31:0] zext_ln67_1_fu_1397_p1;
wire   [31:0] zext_ln74_fu_1428_p1;
wire   [31:0] zext_ln1116_1_fu_1449_p1;
wire   [31:0] zext_ln1116_2_fu_1459_p1;
wire   [31:0] zext_ln116_fu_1534_p1;
wire  signed [31:0] sext_ln43_fu_821_p1;
wire  signed [31:0] sext_ln87_fu_1010_p1;
wire  signed [31:0] sext_ln104_fu_1266_p1;
wire  signed [31:0] sext_ln66_fu_1356_p1;
wire   [31:0] add_ln116_fu_1540_p2;
wire   [31:0] add_ln117_fu_1551_p2;
reg    ap_block_state5_io;
wire    ap_block_pp4_stage0_01001;
reg    ap_block_pp7_stage1_11001;
reg    ap_block_pp7_stage1_01001;
reg    ap_block_pp7_stage0_01001;
reg   [31:0] x_Addr_A_orig;
reg   [31:0] dy_Addr_A_orig;
reg   [31:0] dx_Addr_A_orig;
wire   [31:0] y_Addr_A_orig;
wire  signed [31:0] tmp_fu_742_p1;
wire   [33:0] grp_fu_753_p1;
wire   [64:0] sub_ln41_fu_769_p2;
wire   [26:0] tmp_1_fu_774_p4;
wire   [26:0] select_ln41_fu_784_p3;
wire   [26:0] select_ln41_1_fu_801_p3;
wire   [30:0] trunc_ln_fu_812_p4;
wire  signed [30:0] grp_fu_857_p0;
wire   [6:0] grp_fu_857_p1;
wire  signed [30:0] grp_fu_898_p1;
wire   [31:0] grp_fu_910_p0;
wire   [6:0] grp_fu_910_p1;
wire   [38:0] zext_ln53_1_fu_916_p1;
wire   [31:0] trunc_ln54_1_fu_928_p1;
wire   [0:0] icmp_ln53_fu_919_p2;
wire   [31:0] sub_ln53_fu_932_p2;
wire   [30:0] grp_fu_978_p0;
wire   [31:0] grp_fu_978_p1;
wire   [30:0] empty_52_fu_983_p2;
wire   [31:0] tmp_5_fu_987_p3;
wire   [31:0] empty_53_fu_995_p2;
wire   [30:0] trunc_ln1_fu_1000_p4;
wire   [31:0] j_1_cast_fu_1033_p1;
wire   [15:0] trunc_ln88_1_fu_1042_p1;
wire   [0:0] icmp_ln93_fu_1072_p2;
wire   [30:0] add_ln92_fu_1066_p2;
wire   [9:0] trunc_ln92_fu_1085_p1;
wire   [9:0] trunc_ln92_1_fu_1089_p1;
wire   [9:0] add_ln92_1_fu_1122_p2;
wire   [15:0] grp_fu_1568_p3;
wire  signed [28:0] grp_fu_1576_p3;
wire  signed [28:0] grp_fu_1585_p2;
wire   [31:0] i_6_cast_fu_1195_p1;
wire   [9:0] trunc_ln703_fu_1204_p1;
wire   [30:0] empty_59_fu_1239_p2;
wire   [31:0] tmp_6_fu_1243_p3;
wire   [31:0] empty_60_fu_1251_p2;
wire   [30:0] trunc_ln3_fu_1256_p4;
wire   [5:0] trunc_ln105_fu_1276_p1;
wire   [31:0] j_4_cast_fu_1290_p1;
wire   [15:0] trunc_ln105_1_fu_1299_p1;
(* use_dsp48 = "no" *) wire   [15:0] add_ln105_fu_1303_p2;
wire   [30:0] empty_45_fu_1329_p2;
wire   [31:0] tmp_4_fu_1333_p3;
wire   [31:0] empty_46_fu_1341_p2;
wire   [30:0] trunc_ln7_fu_1346_p4;
wire   [31:0] j_cast_fu_1379_p1;
wire   [15:0] trunc_ln67_1_fu_1388_p1;
wire   [5:0] trunc_ln1116_fu_1416_p1;
wire   [9:0] add_ln74_fu_1424_p2;
wire   [15:0] trunc_ln1116_1_fu_1445_p1;
wire  signed [28:0] grp_fu_1610_p3;
wire   [30:0] trunc_ln4_fu_1497_p4;
wire   [30:0] trunc_ln115_1_fu_1510_p4;
wire   [5:0] grp_fu_1562_p0;
wire   [10:0] grp_fu_1562_p1;
wire   [9:0] grp_fu_1568_p0;
wire   [10:0] grp_fu_1568_p1;
wire   [28:0] grp_fu_1576_p2;
wire   [5:0] grp_fu_1592_p0;
wire   [10:0] grp_fu_1592_p1;
wire   [5:0] grp_fu_1598_p0;
wire   [10:0] grp_fu_1598_p1;
wire   [5:0] grp_fu_1604_p0;
wire   [10:0] grp_fu_1604_p1;
wire   [28:0] grp_fu_1610_p2;
reg    grp_fu_1592_ce;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state100;
reg   [70:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
wire   [15:0] grp_fu_1562_p00;
wire   [15:0] grp_fu_1568_p00;
wire   [15:0] grp_fu_1592_p00;
wire   [15:0] grp_fu_1598_p00;
wire   [15:0] grp_fu_1604_p00;
wire   [37:0] grp_fu_910_p00;
wire   [62:0] grp_fu_978_p00;
reg    ap_condition_2622;
reg    ap_condition_2626;
reg    ap_condition_1664;
reg    ap_condition_1676;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 71'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter4 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter5 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter3 = 1'b0;
#0 ap_enable_reg_pp6_iter4 = 1'b0;
#0 ap_enable_reg_pp7_iter3 = 1'b0;
end

fcc_combined_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .wt(wt),
    .dwt(dwt),
    .b(b),
    .db(db),
    .debug_x(debug_x),
    .debug_dx(debug_dx),
    .debugip(debugip),
    .xdim(xdim),
    .ydim(ydim),
    .fwprop(fwprop),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fcc_combined_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_3_reg_2043),
    .I_AWID(1'd0),
    .I_AWLEN(xdim_read_reg_1635),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(reg_737),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

fcc_combined_gmem2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(gmem2_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

fcc_combined_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50000 ),
    .AddressWidth( 16 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(gmem_addr_1_read_reg_2121),
    .q0(wbuf_V_q0)
);

fcc_combined_bbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
bbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_V_address0),
    .ce0(bbuf_V_ce0),
    .we0(bbuf_V_we0),
    .d0(gmem_addr_read_reg_1742),
    .q0(bbuf_V_q0)
);

fcc_combined_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50000 ),
    .AddressWidth( 16 ))
dwbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dwbuf_V_address0),
    .ce0(dwbuf_V_ce0),
    .we0(dwbuf_V_we0),
    .d0(dwbuf_V_d0),
    .q0(dwbuf_V_q0)
);

fcc_combined_dbbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
dbbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dbbuf_V_addr_reg_2009_pp3_iter1_reg),
    .ce0(dbbuf_V_ce0),
    .we0(dbbuf_V_we0),
    .d0(dbbuf_V_d0),
    .address1(dbbuf_V_address1),
    .ce1(dbbuf_V_ce1),
    .q1(dbbuf_V_q1)
);

fcc_combined_mul_32s_34ns_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydim_read_reg_1623),
    .din1(grp_fu_753_p1),
    .ce(1'b1),
    .dout(grp_fu_753_p2)
);

fcc_combined_mul_31s_7ns_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 31 ))
mul_31s_7ns_31_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_857_p0),
    .din1(grp_fu_857_p1),
    .ce(1'b1),
    .dout(grp_fu_857_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_ln53_reg_1769),
    .din1(grp_fu_898_p1),
    .ce(1'b1),
    .dout(grp_fu_898_p2)
);

fcc_combined_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydim_read_reg_1623),
    .din1(xdim_read_reg_1635),
    .ce(1'b1),
    .dout(grp_fu_903_p2)
);

fcc_combined_mul_32ns_7ns_38_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 38 ))
mul_32ns_7ns_38_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_910_p0),
    .din1(grp_fu_910_p1),
    .ce(1'b1),
    .dout(grp_fu_910_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_3_reg_577),
    .din1(trunc_ln49_reg_1747),
    .ce(1'b1),
    .dout(grp_fu_970_p2)
);

fcc_combined_mul_31ns_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32ns_63_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_978_p0),
    .din1(grp_fu_978_p1),
    .ce(1'b1),
    .dout(grp_fu_978_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_7_reg_644),
    .din1(trunc_ln49_reg_1747),
    .ce(1'b1),
    .dout(grp_fu_1234_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_2_reg_667),
    .din1(trunc_ln49_reg_1747),
    .ce(1'b1),
    .dout(grp_fu_1324_p2)
);

fcc_combined_mul_mul_6ns_11ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 16 ))
mul_mul_6ns_11ns_16_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1562_p0),
    .din1(grp_fu_1562_p1),
    .ce(1'b1),
    .dout(grp_fu_1562_p2)
);

fcc_combined_mac_muladd_10ns_11ns_16ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_10ns_11ns_16ns_16_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1568_p0),
    .din1(grp_fu_1568_p1),
    .din2(trunc_ln1118_reg_1935),
    .ce(1'b1),
    .dout(grp_fu_1568_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_732),
    .din1(dy_Dout_A),
    .din2(grp_fu_1576_p2),
    .ce(1'b1),
    .dout(grp_fu_1576_p3)
);

fcc_combined_mul_mul_16s_16s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
mul_mul_16s_16s_29_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wbuf_V_q0),
    .din1(dy_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_1585_p2)
);

fcc_combined_mul_mul_6ns_11ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 16 ))
mul_mul_6ns_11ns_16_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1592_p0),
    .din1(grp_fu_1592_p1),
    .ce(grp_fu_1592_ce),
    .dout(grp_fu_1592_p2)
);

fcc_combined_mul_mul_6ns_11ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 16 ))
mul_mul_6ns_11ns_16_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1598_p0),
    .din1(grp_fu_1598_p1),
    .ce(1'b1),
    .dout(grp_fu_1598_p2)
);

fcc_combined_mul_mul_6ns_11ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 16 ))
mul_mul_6ns_11ns_16_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1604_p0),
    .din1(grp_fu_1604_p1),
    .ce(1'b1),
    .dout(grp_fu_1604_p2)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_Dout_A),
    .din1(wbuf_V_q0),
    .din2(grp_fu_1610_p2),
    .ce(1'b1),
    .dout(grp_fu_1610_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state12))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state31))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state31)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state36))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            ap_enable_reg_pp2_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state45))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state45)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state45);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state55))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state55)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state55);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state54)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state73))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state73)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state73);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state72)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp6_flush_enable)) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state80)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
        end else if (((1'b1 == ap_CS_fsm_state80) | ((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_condition_pp6_exit_iter4_state85) & (ap_enable_reg_pp6_iter3 == 1'b0)))) begin
            ap_enable_reg_pp6_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_condition_pp6_exit_iter4_state85))) begin
            ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter3;
        end else if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
        end else if ((1'b1 == ap_CS_fsm_state80)) begin
            ap_enable_reg_pp6_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage0_subdone) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state90))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln115_fu_1489_p2 == 1'd1))) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage1_subdone) & (1'b1 == ap_CS_fsm_pp7_stage1))) begin
            ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage1_subdone) & (1'b1 == ap_CS_fsm_pp7_stage1))) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage1_subdone) & (1'b1 == ap_CS_fsm_pp7_stage1))) begin
            ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp7_stage1_subdone) & (1'b1 == ap_CS_fsm_pp7_stage1))) begin
            ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
        end else if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln115_fu_1489_p2 == 1'd1))) begin
            ap_enable_reg_pp7_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln115_fu_1489_p2 == 1'd1))) begin
        i_1_reg_721 <= 31'd0;
    end else if (((icmp_ln115_1_reg_2238 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        i_1_reg_721 <= add_ln115_reg_2233;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36262_fu_945_p2 == 1'd1) & (fwprop_read_reg_1619 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        i_2_reg_667 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        i_2_reg_667 <= add_ln65_reg_2073;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36262_fu_945_p2 == 1'd1) & (fwprop_read_reg_1619 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        i_3_reg_577 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        i_3_reg_577 <= add_ln86_reg_1842;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (icmp_ln65_fu_1319_p2 == 1'd1))) begin
        i_4_reg_690 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        i_4_reg_690 <= add_ln72_reg_2126;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_1910 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_5_reg_611 <= select_ln92_3_reg_1930;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        i_5_reg_611 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_1199_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_6_reg_633 <= add_ln99_fu_1189_p2;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        i_6_reg_633 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36262_reg_1826 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        i_7_reg_644 <= 31'd0;
    end else if ((~((gmem_BVALID == 1'b0) & (cmp37257_reg_1755 == 1'd1)) & (1'b1 == ap_CS_fsm_state62))) begin
        i_7_reg_644 <= add_ln103_reg_2030;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_543 <= 31'd0;
    end else if (((icmp_ln43_1_fu_841_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_543 <= add_ln43_fu_835_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_1910 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten_reg_600 <= add_ln92_2_reg_1905;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        indvar_flatten_reg_600 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        j_1_reg_589 <= 31'd0;
    end else if (((icmp_ln87_fu_1037_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_1_reg_589 <= add_ln87_fu_1027_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln76_fu_1440_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        j_2_reg_701 <= add_ln76_fu_1434_p2;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        j_2_reg_701 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_1910 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_3_reg_622 <= add_ln93_reg_1955;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        j_3_reg_622 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        j_4_reg_656 <= 31'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln104_fu_1294_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        j_4_reg_656 <= add_ln104_fu_1284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        j_reg_679 <= 31'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln66_fu_1383_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        j_reg_679 <= add_ln66_fu_1373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & ((fwprop_read_reg_1619 == 1'd1) | ((cmp36262_reg_1826 == 1'd0) | (icmp_ln103_fu_1229_p2 == 1'd1))))) begin
        k_reg_554 <= add_ln53_reg_1779;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        k_reg_554 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & ((fwprop_read_reg_1619 == 1'd1) | ((cmp36262_reg_1826 == 1'd0) | (icmp_ln103_fu_1229_p2 == 1'd1))))) begin
        phi_mul_reg_565 <= add_ln49_reg_1785;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        phi_mul_reg_565 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter5 == 1'b1) & (icmp_ln76_reg_2169_pp6_iter4_reg == 1'd0))) begin
        rhs_reg_712 <= {{grp_fu_1610_p3[28:13]}};
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        rhs_reg_712 <= bbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36262_reg_1826 == 1'd1) & (fwprop_read_reg_1619 == 1'd0) & (1'b1 == ap_CS_fsm_state49))) begin
        add_ln103_reg_2030 <= add_ln103_fu_1223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln76_fu_1440_p2 == 1'd0))) begin
        add_ln1116_reg_2173 <= add_ln1116_fu_1454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1))) begin
        add_ln115_reg_2233 <= add_ln115_fu_1523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln49_reg_1785 <= add_ln49_fu_883_p2;
        add_ln53_reg_1779 <= add_ln53_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        add_ln65_reg_2073 <= add_ln65_fu_1313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (icmp_ln66_fu_1383_p2 == 1'd0))) begin
        add_ln67_reg_2116 <= add_ln67_fu_1392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        add_ln67_reg_2116_pp5_iter1_reg <= add_ln67_reg_2116;
        icmp_ln66_reg_2112 <= icmp_ln66_fu_1383_p2;
        icmp_ln66_reg_2112_pp5_iter1_reg <= icmp_ln66_reg_2112;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        add_ln72_reg_2126 <= add_ln72_fu_1401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln86_reg_1842 <= add_ln86_fu_959_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_1037_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln88_reg_1890 <= add_ln88_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln88_reg_1890_pp1_iter1_reg <= add_ln88_reg_1890;
        icmp_ln87_reg_1886 <= icmp_ln87_fu_1037_p2;
        icmp_ln87_reg_1886_pp1_iter1_reg <= icmp_ln87_reg_1886;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln92_2_reg_1905 <= add_ln92_2_fu_1055_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln92_reg_1910 == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        add_ln93_reg_1955 <= add_ln93_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_1665 <= b;
        debug_dx_read_reg_1655 <= debug_dx;
        debug_x_read_reg_1660 <= debug_x;
        debugip_read_reg_1651 <= debugip;
        dwt_read_reg_1670 <= dwt;
        fwprop_read_reg_1619 <= fwprop;
        tmp_reg_1681 <= tmp_fu_742_p1[32'd31];
        wt_read_reg_1676 <= wt;
        xdim_read_reg_1635 <= xdim;
        ydim_read_reg_1623 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        cmp36262_reg_1826 <= cmp36262_fu_945_p2;
        trunc_ln54_reg_1815 <= trunc_ln54_fu_924_p1;
        ub_reg_1821 <= ub_fu_937_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        cmp37257_reg_1755 <= cmp37257_fu_863_p2;
        mul_ln53_reg_1769 <= grp_fu_857_p2;
        sext_ln49_1_reg_1764 <= sext_ln49_1_fu_871_p1;
        sext_ln49_reg_1759 <= sext_ln49_fu_868_p1;
        zext_ln92_reg_1774[31 : 0] <= zext_ln92_fu_874_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_1199_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dbbuf_V_addr_reg_2009 <= zext_ln703_fu_1208_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dbbuf_V_addr_reg_2009_pp3_iter1_reg <= dbbuf_V_addr_reg_2009;
        icmp_ln99_reg_2005 <= icmp_ln99_fu_1199_p2;
        icmp_ln99_reg_2005_pp3_iter1_reg <= icmp_ln99_reg_2005;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_reg_2005 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        dbbuf_V_load_reg_2020 <= dbbuf_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_1910_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dwbuf_V_addr_1_reg_1975 <= zext_ln1118_1_fu_1144_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dwbuf_V_addr_1_reg_1975_pp2_iter2_reg <= dwbuf_V_addr_1_reg_1975;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_1_reg_2238 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        dx_load_reg_2264 <= dx_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        empty_44_reg_2081 <= grp_fu_1324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        empty_51_reg_1855 <= grp_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        empty_58_reg_2038 <= grp_fu_1234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln115_1_fu_1529_p2 == 1'd0))) begin
        gmem2_addr_1_reg_2258 <= add_ln117_fu_1551_p2;
        gmem2_addr_reg_2247 <= add_ln116_fu_1540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        gmem2_addr_1_reg_2258_pp7_iter1_reg <= gmem2_addr_1_reg_2258;
        icmp_ln115_1_reg_2238 <= icmp_ln115_1_fu_1529_p2;
        icmp_ln115_1_reg_2238_pp7_iter1_reg <= icmp_ln115_1_reg_2238;
        icmp_ln115_1_reg_2238_pp7_iter2_reg <= icmp_ln115_1_reg_2238_pp7_iter1_reg;
        icmp_ln115_1_reg_2238_pp7_iter3_reg <= icmp_ln115_1_reg_2238_pp7_iter2_reg;
        icmp_ln115_1_reg_2238_pp7_iter4_reg <= icmp_ln115_1_reg_2238_pp7_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_reg_2112 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        gmem_addr_1_read_reg_2121 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp37257_reg_1755 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
        gmem_addr_1_reg_2086 <= sext_ln66_fu_1356_p1;
        trunc_ln67_reg_2092 <= trunc_ln67_fu_1366_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_reg_1886 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem_addr_2_read_reg_1895 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp37257_reg_1755 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        gmem_addr_2_reg_1860 <= sext_ln87_fu_1010_p1;
        trunc_ln88_reg_1866 <= trunc_ln88_fu_1020_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp37257_reg_1755 == 1'd1) & (1'b1 == ap_CS_fsm_state51))) begin
        gmem_addr_3_reg_2043 <= sext_ln104_fu_1266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_1_reg_1733 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_read_reg_1742 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln104_reg_2064 <= icmp_ln104_fu_1294_p2;
        icmp_ln104_reg_2064_pp4_iter1_reg <= icmp_ln104_reg_2064;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_1_reg_1733 <= icmp_ln43_1_fu_841_p2;
        icmp_ln43_1_reg_1733_pp0_iter1_reg <= icmp_ln43_1_reg_1733;
        trunc_ln44_reg_1737_pp0_iter1_reg <= trunc_ln44_reg_1737;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln43_reg_1708 <= icmp_ln43_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln76_reg_2169 <= icmp_ln76_fu_1440_p2;
        icmp_ln76_reg_2169_pp6_iter1_reg <= icmp_ln76_reg_2169;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp6_stage0_11001)) begin
        icmp_ln76_reg_2169_pp6_iter2_reg <= icmp_ln76_reg_2169_pp6_iter1_reg;
        icmp_ln76_reg_2169_pp6_iter3_reg <= icmp_ln76_reg_2169_pp6_iter2_reg;
        icmp_ln76_reg_2169_pp6_iter4_reg <= icmp_ln76_reg_2169_pp6_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln92_reg_1910 <= icmp_ln92_fu_1061_p2;
        icmp_ln92_reg_1910_pp2_iter1_reg <= icmp_ln92_reg_1910;
        icmp_ln92_reg_1910_pp2_iter2_reg <= icmp_ln92_reg_1910_pp2_iter1_reg;
        icmp_ln92_reg_1910_pp2_iter3_reg <= icmp_ln92_reg_1910_pp2_iter2_reg;
        zext_ln1118_reg_1940_pp2_iter1_reg[15 : 0] <= zext_ln1118_reg_1940[15 : 0];
        zext_ln1118_reg_1940_pp2_iter2_reg[15 : 0] <= zext_ln1118_reg_1940_pp2_iter1_reg[15 : 0];
        zext_ln1118_reg_1940_pp2_iter3_reg[15 : 0] <= zext_ln1118_reg_1940_pp2_iter2_reg[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        mul150_reg_2208 <= grp_fu_903_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        mul_ln105_reg_2054 <= grp_fu_1592_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        mul_ln1116_reg_2159 <= grp_fu_1604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln41_reg_1692 <= grp_fu_753_p2;
        tmp_2_reg_1697 <= {{grp_fu_753_p2[64:38]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mul_ln53_1_reg_1798 <= grp_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mul_ln53_2_reg_1810 <= grp_fu_910_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        mul_ln67_reg_2102 <= grp_fu_1598_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        mul_ln88_reg_1876 <= grp_fu_1562_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        mul_ln92_reg_1900 <= grp_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        num_iters_reg_1712 <= num_iters_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln92_reg_1910 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln115_1_reg_2238 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)))) begin
        reg_732 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln104_reg_2064 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((icmp_ln92_reg_1910_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        reg_737 <= dwbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_1061_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln92_2_reg_1919 <= select_ln92_2_fu_1093_p3;
        select_ln92_reg_1914 <= select_ln92_fu_1077_p3;
        trunc_ln1118_reg_1935 <= trunc_ln1118_fu_1113_p1;
        zext_ln1118_reg_1940[15 : 0] <= zext_ln1118_fu_1117_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_1061_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln92_3_reg_1930 <= select_ln92_3_fu_1105_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln115_fu_1489_p2 == 1'd1))) begin
        sext_ln115_1_reg_2228 <= sext_ln115_1_fu_1519_p1;
        sext_ln115_reg_2223 <= sext_ln115_fu_1506_p1;
        trunc_ln115_reg_2218 <= trunc_ln115_fu_1494_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_1681 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln41_1_reg_1703 <= sub_ln41_1_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36262_reg_1826 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        trunc_ln103_reg_2025 <= trunc_ln103_fu_1220_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln43_reg_1723 <= trunc_ln43_fu_832_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_1_fu_841_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln44_reg_1737 <= trunc_ln44_fu_846_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        trunc_ln49_reg_1747 <= trunc_ln49_fu_854_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36262_fu_945_p2 == 1'd1) & (fwprop_read_reg_1619 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        trunc_ln65_reg_1836 <= trunc_ln65_fu_955_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln72_fu_1407_p2 == 1'd0))) begin
        trunc_ln72_reg_2134 <= trunc_ln72_fu_1412_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp36262_fu_945_p2 == 1'd1) & (fwprop_read_reg_1619 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        trunc_ln86_reg_1830 <= trunc_ln86_fu_951_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        y_addr_reg_2149 <= zext_ln74_fu_1428_p1;
    end
end

always @ (*) begin
    if ((icmp_ln43_1_fu_841_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln87_fu_1037_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_1061_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln99_fu_1199_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state45 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state45 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln104_fu_1294_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state55 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state55 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln66_fu_1383_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state73 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state73 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter4 == 1'b1) & (ap_enable_reg_pp6_iter3 == 1'b0))) begin
        ap_condition_pp6_exit_iter4_state85 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter4_state85 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln76_fu_1440_p2 == 1'd1))) begin
        ap_condition_pp6_flush_enable = 1'b1;
    end else begin
        ap_condition_pp6_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln115_1_fu_1529_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state90 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state90 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter4 == 1'b0) & (ap_enable_reg_pp6_iter3 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter5 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter4 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter3 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_1_reg_2238 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        ap_phi_mux_i_1_phi_fu_725_p4 = add_ln115_reg_2233;
    end else begin
        ap_phi_mux_i_1_phi_fu_725_p4 = i_1_reg_721;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_1910 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_5_phi_fu_615_p4 = select_ln92_3_reg_1930;
    end else begin
        ap_phi_mux_i_5_phi_fu_615_p4 = i_5_reg_611;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_1910 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_604_p4 = add_ln92_2_reg_1905;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_604_p4 = indvar_flatten_reg_600;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_1910 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_j_3_phi_fu_626_p4 = add_ln93_reg_1955;
    end else begin
        ap_phi_mux_j_3_phi_fu_626_p4 = j_3_reg_622;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter5 == 1'b1) & (icmp_ln76_reg_2169_pp6_iter4_reg == 1'd0))) begin
        ap_phi_mux_rhs_phi_fu_715_p4 = {{grp_fu_1610_p3[28:13]}};
    end else begin
        ap_phi_mux_rhs_phi_fu_715_p4 = rhs_reg_712;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state100)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state79)) begin
        bbuf_V_address0 = zext_ln74_fu_1428_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bbuf_V_address0 = zext_ln44_fu_850_p1;
    end else begin
        bbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_1_reg_1733_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dbbuf_V_ce0 = 1'b1;
    end else begin
        dbbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dbbuf_V_ce1 = 1'b1;
    end else begin
        dbbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln99_reg_2005_pp3_iter1_reg == 1'd0))) begin
        dbbuf_V_we0 = 1'b1;
    end else begin
        dbbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        dwbuf_V_address0 = zext_ln105_1_fu_1308_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dwbuf_V_address0 = dwbuf_V_addr_1_reg_1975_pp2_iter2_reg;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dwbuf_V_address0 = zext_ln1118_1_fu_1144_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dwbuf_V_address0 = zext_ln88_1_fu_1051_p1;
    end else begin
        dwbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
        dwbuf_V_ce0 = 1'b1;
    end else begin
        dwbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dwbuf_V_d0 = {{grp_fu_1576_p3[28:13]}};
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dwbuf_V_d0 = gmem_addr_2_read_reg_1895;
    end else begin
        dwbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln92_reg_1910_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((icmp_ln87_reg_1886_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        dwbuf_V_we0 = 1'b1;
    end else begin
        dwbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1))) begin
        dx_Addr_A_orig = zext_ln116_fu_1534_p1;
    end else if (((1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dx_Addr_A_orig = zext_ln1118_reg_1940_pp2_iter3_reg;
    end else begin
        dx_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1)) | ((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1)) | ((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp7_stage1_11001) & (1'b1 == ap_CS_fsm_pp7_stage1) & (ap_enable_reg_pp7_iter0 == 1'b1)))) begin
        dx_EN_A = 1'b1;
    end else begin
        dx_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_1910_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        dx_WEN_A = 2'd3;
    end else begin
        dx_WEN_A = 2'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        dy_Addr_A_orig = zext_ln703_fu_1208_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        dy_Addr_A_orig = zext_ln92_3_fu_1136_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        dy_Addr_A_orig = zext_ln92_2_fu_1126_p1;
    end else begin
        dy_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        dy_EN_A = 1'b1;
    end else begin
        dy_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp7_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_2626)) begin
            gmem2_AWADDR = gmem2_addr_1_reg_2258_pp7_iter1_reg;
        end else if ((1'b1 == ap_condition_2622)) begin
            gmem2_AWADDR = gmem2_addr_reg_2247;
        end else begin
            gmem2_AWADDR = 'bx;
        end
    end else begin
        gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage1_11001) & (1'b1 == ap_CS_fsm_pp7_stage1)) | ((icmp_ln115_1_reg_2238 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln115_1_reg_2238_pp7_iter4_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage1_11001) & (1'b1 == ap_CS_fsm_pp7_stage1)) | ((icmp_ln115_1_reg_2238_pp7_iter3_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0)) begin
        if ((1'b1 == ap_condition_1676)) begin
            gmem2_WDATA = dx_load_reg_2264;
        end else if ((1'b1 == ap_condition_1664)) begin
            gmem2_WDATA = reg_732;
        end else begin
            gmem2_WDATA = 'bx;
        end
    end else begin
        gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp7_iter2 == 1'b1) & (icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage1_11001) & (1'b1 == ap_CS_fsm_pp7_stage1)))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage1) & (1'b1 == ap_CS_fsm_pp7_stage1)) | ((icmp_ln115_1_reg_2238 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0)))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln115_1_reg_2238_pp7_iter4_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage1) & (1'b1 == ap_CS_fsm_pp7_stage1)) | ((icmp_ln115_1_reg_2238_pp7_iter3_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0)))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp7_iter2 == 1'b1) & (icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage1) & (1'b1 == ap_CS_fsm_pp7_stage1)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
        gmem_ARADDR = gmem_addr_1_reg_2086;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        gmem_ARADDR = gmem_addr_2_reg_1860;
    end else if (((1'b0 == ap_block_state5_io) & (icmp_ln43_reg_1708 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_ARADDR = sext_ln43_fu_821_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66)))) begin
        gmem_ARLEN = xdim_read_reg_1635;
    end else if (((1'b0 == ap_block_state5_io) & (icmp_ln43_reg_1708 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_ARLEN = ydim_read_reg_1623;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66)) | ((1'b0 == ap_block_state5_io) & (icmp_ln43_reg_1708 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp37257_reg_1755 == 1'd1)) & (cmp37257_reg_1755 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln87_reg_1886 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln66_reg_2112 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((icmp_ln43_1_reg_1733 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_2064_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state66) | ((icmp_ln43_reg_1708 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((cmp37257_reg_1755 == 1'd1) & (1'b1 == ap_CS_fsm_state62))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln87_reg_1886 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln66_reg_2112 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((icmp_ln43_1_reg_1733 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_2064_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state51) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52)))) begin
        grp_fu_1592_ce = 1'b1;
    end else begin
        grp_fu_1592_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1))) begin
        wbuf_V_address0 = zext_ln1116_2_fu_1459_p1;
    end else if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        wbuf_V_address0 = zext_ln67_1_fu_1397_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        wbuf_V_address0 = zext_ln1118_1_fu_1144_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1) & (icmp_ln66_reg_2112_pp5_iter1_reg == 1'd0))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1))) begin
        x_Addr_A_orig = zext_ln116_fu_1534_p1;
    end else if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        x_Addr_A_orig = zext_ln1116_1_fu_1449_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        x_Addr_A_orig = zext_ln1118_fu_1117_p1;
    end else begin
        x_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage1_11001) & (1'b1 == ap_CS_fsm_pp2_stage1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp7_stage1_11001) & (1'b1 == ap_CS_fsm_pp7_stage1) & (ap_enable_reg_pp7_iter0 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter5 == 1'b1))) begin
        y_Din_A = {{grp_fu_1610_p3[28:13]}};
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        y_Din_A = bbuf_V_q0;
    end else begin
        y_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter5 == 1'b1)))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | ((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter5 == 1'b1) & (icmp_ln76_reg_2169_pp6_iter4_reg == 1'd0)))) begin
        y_WEN_A = 2'd3;
    end else begin
        y_WEN_A = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (icmp_ln43_reg_1708 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b0 == ap_block_state5_io) & (icmp_ln43_reg_1708 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln43_1_fu_841_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln43_1_fu_841_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln49_fu_889_p2 == 1'd1) & (debugip_read_reg_1651 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else if (((icmp_ln49_fu_889_p2 == 1'd1) & (debugip_read_reg_1651 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((cmp36262_fu_945_p2 == 1'd1) & (fwprop_read_reg_1619 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else if (((cmp36262_fu_945_p2 == 1'd0) & (fwprop_read_reg_1619 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else if (((cmp36262_fu_945_p2 == 1'd1) & (fwprop_read_reg_1619 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln86_fu_965_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((cmp37257_reg_1755 == 1'd0) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln87_fu_1037_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln87_fu_1037_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln92_fu_1061_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((icmp_ln92_fu_1061_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((~((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1)) & (1'b0 == ap_block_pp2_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter2 == 1'b0) & (1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln99_fu_1199_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln99_fu_1199_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & ((fwprop_read_reg_1619 == 1'd1) | ((cmp36262_reg_1826 == 1'd0) | (icmp_ln103_fu_1229_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((cmp37257_reg_1755 == 1'd0) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln104_fu_1294_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln104_fu_1294_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if ((~((gmem_BVALID == 1'b0) & (cmp37257_reg_1755 == 1'd1)) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (icmp_ln65_fu_1319_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((cmp37257_reg_1755 == 1'd0) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state66 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln66_fu_1383_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter2 == 1'b1)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln66_fu_1383_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state77 : begin
            if (((1'b1 == ap_CS_fsm_state77) & (icmp_ln72_fu_1407_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if (~((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter4 == 1'b1) & (ap_enable_reg_pp6_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if (((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter4 == 1'b1) & (ap_enable_reg_pp6_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln115_fu_1489_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone) & (icmp_ln115_1_fu_1529_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1)) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage1;
            end else if (((ap_enable_reg_pp7_iter1 == 1'b0) & (1'b0 == ap_block_pp7_stage0_subdone) & (icmp_ln115_1_fu_1529_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_pp7_stage1 : begin
            if ((~((ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage1_subdone) & (1'b1 == ap_CS_fsm_pp7_stage1) & (ap_enable_reg_pp7_iter3 == 1'b0)) & (1'b0 == ap_block_pp7_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if (((ap_enable_reg_pp7_iter4 == 1'b1) & (1'b0 == ap_block_pp7_stage1_subdone) & (1'b1 == ap_CS_fsm_pp7_stage1) & (ap_enable_reg_pp7_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage1;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_1223_p2 = ($signed(i_7_reg_644) + $signed(31'd1));

assign add_ln104_fu_1284_p2 = (j_4_reg_656 + 31'd1);

assign add_ln105_fu_1303_p2 = (mul_ln105_reg_2054 + trunc_ln105_1_fu_1299_p1);

assign add_ln1116_fu_1454_p2 = (mul_ln1116_reg_2159 + trunc_ln1116_1_fu_1445_p1);

assign add_ln115_fu_1523_p2 = (ap_phi_mux_i_1_phi_fu_725_p4 + 31'd1);

assign add_ln116_fu_1540_p2 = ($signed(zext_ln116_fu_1534_p1) + $signed(sext_ln115_reg_2223));

assign add_ln117_fu_1551_p2 = ($signed(zext_ln116_fu_1534_p1) + $signed(sext_ln115_1_reg_2228));

assign add_ln43_fu_835_p2 = (i_reg_543 + 31'd1);

assign add_ln49_fu_883_p2 = (phi_mul_reg_565 + 38'd50);

assign add_ln53_fu_877_p2 = (k_reg_554 + 32'd1);

assign add_ln65_fu_1313_p2 = ($signed(i_2_reg_667) + $signed(31'd1));

assign add_ln66_fu_1373_p2 = (j_reg_679 + 31'd1);

assign add_ln67_fu_1392_p2 = (mul_ln67_reg_2102 + trunc_ln67_1_fu_1388_p1);

assign add_ln72_fu_1401_p2 = (i_4_reg_690 + 31'd1);

assign add_ln74_fu_1424_p2 = (trunc_ln72_reg_2134 + trunc_ln54_reg_1815);

assign add_ln76_fu_1434_p2 = (j_2_reg_701 + 32'd1);

assign add_ln86_fu_959_p2 = ($signed(i_3_reg_577) + $signed(31'd1));

assign add_ln87_fu_1027_p2 = (j_1_reg_589 + 31'd1);

assign add_ln88_fu_1046_p2 = (mul_ln88_reg_1876 + trunc_ln88_1_fu_1042_p1);

assign add_ln92_1_fu_1122_p2 = (select_ln92_2_reg_1919 + trunc_ln54_reg_1815);

assign add_ln92_2_fu_1055_p2 = (ap_phi_mux_indvar_flatten_phi_fu_604_p4 + 63'd1);

assign add_ln92_fu_1066_p2 = (ap_phi_mux_i_5_phi_fu_615_p4 + 31'd1);

assign add_ln93_fu_1131_p2 = (select_ln92_reg_1914 + 32'd1);

assign add_ln99_fu_1189_p2 = (i_6_reg_633 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_pp7_stage1 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd67];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln43_1_reg_1733 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln43_1_reg_1733 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln87_reg_1886 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln87_reg_1886 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state57_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state57_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln66_reg_2112 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln66_reg_2112 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage0_01001 = ((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter3_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp7_stage0_11001 = (((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter3_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1)) | ((1'b1 == ap_block_state94_io) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b1 == ap_block_state92_io) & (ap_enable_reg_pp7_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp7_stage0_subdone = (((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter3_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1)) | ((1'b1 == ap_block_state94_io) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((1'b1 == ap_block_state92_io) & (ap_enable_reg_pp7_iter1 == 1'b1)));
end

assign ap_block_pp7_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage1_01001 = ((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter4_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp7_stage1_11001 = (((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter4_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1)) | ((1'b1 == ap_block_state93_io) & (ap_enable_reg_pp7_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp7_stage1_subdone = (((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter4_reg == 1'd0) & (ap_enable_reg_pp7_iter4 == 1'b1)) | ((1'b1 == ap_block_state93_io) & (ap_enable_reg_pp7_iter1 == 1'b1)));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln43_1_reg_1733 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln87_reg_1886 == 1'd0));
end

assign ap_block_state33_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state57_io = ((gmem_WREADY == 1'b0) & (icmp_ln104_reg_2064_pp4_iter1_reg == 1'd0));
end

assign ap_block_state57_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((gmem_ARREADY == 1'b0) & (icmp_ln43_reg_1708 == 1'd1));
end

always @ (*) begin
    ap_block_state62 = ((gmem_BVALID == 1'b0) & (cmp37257_reg_1755 == 1'd1));
end

assign ap_block_state73_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_pp5_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln66_reg_2112 == 1'd0));
end

assign ap_block_state75_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp6_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp6_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp6_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp7_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state92_io = ((gmem2_AWREADY == 1'b0) & (icmp_ln115_1_reg_2238 == 1'd0));
end

assign ap_block_state92_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state93_io = (((gmem2_WREADY == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0)) | ((gmem2_AWREADY == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0)));
end

assign ap_block_state93_pp7_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state94_io = ((gmem2_WREADY == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0));
end

assign ap_block_state94_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp7_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp7_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp7_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state98_pp7_stage0_iter4 = ((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state99_pp7_stage1_iter4 = ((gmem2_BVALID == 1'b0) & (icmp_ln115_1_reg_2238_pp7_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1664 = ((ap_enable_reg_pp7_iter1 == 1'b1) & (1'b0 == ap_block_pp7_stage1_01001) & (1'b1 == ap_CS_fsm_pp7_stage1));
end

always @ (*) begin
    ap_condition_1676 = ((ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_01001) & (1'b1 == ap_CS_fsm_pp7_stage0));
end

always @ (*) begin
    ap_condition_2622 = ((icmp_ln115_1_reg_2238 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0));
end

always @ (*) begin
    ap_condition_2626 = ((icmp_ln115_1_reg_2238_pp7_iter1_reg == 1'd0) & (1'b0 == ap_block_pp7_stage1_11001) & (1'b1 == ap_CS_fsm_pp7_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp36262_fu_945_p2 = (($signed(ub_fu_937_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign cmp37257_fu_863_p2 = (($signed(xdim_read_reg_1635) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign dbbuf_V_address1 = zext_ln703_fu_1208_p1;

assign dbbuf_V_d0 = (dy_Dout_A + dbbuf_V_load_reg_2020);

assign dx_Addr_A = dx_Addr_A_orig << 32'd1;

assign dx_Clk_A = ap_clk;

assign dx_Din_A = {{grp_fu_1585_p2[28:13]}};

assign dx_Rst_A = ap_rst_n_inv;

assign dy_Addr_A = dy_Addr_A_orig << 32'd1;

assign dy_Clk_A = ap_clk;

assign dy_Din_A = 16'd0;

assign dy_Rst_A = ap_rst_n_inv;

assign dy_WEN_A = 2'd0;

assign empty_45_fu_1329_p2 = (empty_44_reg_2081 + mul_ln53_1_reg_1798);

assign empty_46_fu_1341_p2 = (tmp_4_fu_1333_p3 + wt_read_reg_1676);

assign empty_52_fu_983_p2 = (empty_51_reg_1855 + mul_ln53_1_reg_1798);

assign empty_53_fu_995_p2 = (tmp_5_fu_987_p3 + dwt_read_reg_1670);

assign empty_59_fu_1239_p2 = (empty_58_reg_2038 + mul_ln53_1_reg_1798);

assign empty_60_fu_1251_p2 = (tmp_6_fu_1243_p3 + dwt_read_reg_1670);

assign grp_fu_1562_p0 = grp_fu_1562_p00;

assign grp_fu_1562_p00 = trunc_ln88_reg_1866;

assign grp_fu_1562_p1 = 16'd1000;

assign grp_fu_1568_p0 = grp_fu_1568_p00;

assign grp_fu_1568_p00 = select_ln92_2_fu_1093_p3;

assign grp_fu_1568_p1 = 16'd1000;

assign grp_fu_1576_p2 = {{reg_737}, {13'd0}};

assign grp_fu_1592_p0 = grp_fu_1592_p00;

assign grp_fu_1592_p00 = trunc_ln105_fu_1276_p1;

assign grp_fu_1592_p1 = 16'd1000;

assign grp_fu_1598_p0 = grp_fu_1598_p00;

assign grp_fu_1598_p00 = trunc_ln67_reg_2092;

assign grp_fu_1598_p1 = 16'd1000;

assign grp_fu_1604_p0 = grp_fu_1604_p00;

assign grp_fu_1604_p00 = trunc_ln1116_fu_1416_p1;

assign grp_fu_1604_p1 = 16'd1000;

assign grp_fu_1610_p2 = {{ap_phi_mux_rhs_phi_fu_715_p4}, {13'd0}};

assign grp_fu_753_p1 = 65'd5497558139;

assign grp_fu_857_p0 = xdim_read_reg_1635[30:0];

assign grp_fu_857_p1 = 31'd50;

assign grp_fu_898_p1 = k_reg_554[30:0];

assign grp_fu_910_p0 = grp_fu_910_p00;

assign grp_fu_910_p00 = add_ln53_reg_1779;

assign grp_fu_910_p1 = 38'd50;

assign grp_fu_978_p0 = grp_fu_978_p00;

assign grp_fu_978_p00 = trunc_ln86_reg_1830;

assign grp_fu_978_p1 = zext_ln92_reg_1774;

assign i_6_cast_fu_1195_p1 = i_6_reg_633;

assign icmp_ln103_fu_1229_p2 = ((i_7_reg_644 == trunc_ln103_reg_2025) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_1294_p2 = ((j_4_cast_fu_1290_p1 == xdim_read_reg_1635) ? 1'b1 : 1'b0);

assign icmp_ln115_1_fu_1529_p2 = ((ap_phi_mux_i_1_phi_fu_725_p4 == trunc_ln115_reg_2218) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_1489_p2 = (($signed(mul150_reg_2208) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_841_p2 = ((i_reg_543 == trunc_ln43_reg_1723) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_796_p2 = (($signed(ydim_read_reg_1623) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_889_p2 = ((k_reg_554 == sext_ln49_1_reg_1764) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_919_p2 = (($signed(sext_ln49_reg_1759) < $signed(zext_ln53_1_fu_916_p1)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_1319_p2 = ((i_2_reg_667 == trunc_ln65_reg_1836) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1383_p2 = ((j_cast_fu_1379_p1 == xdim_read_reg_1635) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_1407_p2 = ((i_4_reg_690 == trunc_ln65_reg_1836) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_1440_p2 = ((j_2_reg_701 == xdim_read_reg_1635) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_965_p2 = ((i_3_reg_577 == trunc_ln86_reg_1830) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_1037_p2 = ((j_1_cast_fu_1033_p1 == xdim_read_reg_1635) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_1061_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_604_p4 == mul_ln92_reg_1900) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_1072_p2 = ((ap_phi_mux_j_3_phi_fu_626_p4 == xdim_read_reg_1635) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_1199_p2 = ((i_6_cast_fu_1195_p1 == ydim_read_reg_1623) ? 1'b1 : 1'b0);

assign j_1_cast_fu_1033_p1 = j_1_reg_589;

assign j_4_cast_fu_1290_p1 = j_4_reg_656;

assign j_cast_fu_1379_p1 = j_reg_679;

assign num_iters_fu_806_p2 = (select_ln41_1_fu_801_p3 + 27'd1);

assign select_ln41_1_fu_801_p3 = ((tmp_reg_1681[0:0] == 1'b1) ? sub_ln41_1_reg_1703 : tmp_2_reg_1697);

assign select_ln41_fu_784_p3 = ((tmp_reg_1681[0:0] == 1'b1) ? tmp_1_fu_774_p4 : tmp_2_reg_1697);

assign select_ln92_2_fu_1093_p3 = ((icmp_ln93_fu_1072_p2[0:0] == 1'b1) ? trunc_ln92_fu_1085_p1 : trunc_ln92_1_fu_1089_p1);

assign select_ln92_3_fu_1105_p3 = ((icmp_ln93_fu_1072_p2[0:0] == 1'b1) ? add_ln92_fu_1066_p2 : ap_phi_mux_i_5_phi_fu_615_p4);

assign select_ln92_fu_1077_p3 = ((icmp_ln93_fu_1072_p2[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_j_3_phi_fu_626_p4);

assign sext_ln104_fu_1266_p1 = $signed(trunc_ln3_fu_1256_p4);

assign sext_ln115_1_fu_1519_p1 = $signed(trunc_ln115_1_fu_1510_p4);

assign sext_ln115_fu_1506_p1 = $signed(trunc_ln4_fu_1497_p4);

assign sext_ln43_fu_821_p1 = $signed(trunc_ln_fu_812_p4);

assign sext_ln49_1_fu_871_p1 = $signed(num_iters_reg_1712);

assign sext_ln49_fu_868_p1 = ydim_read_reg_1623;

assign sext_ln66_fu_1356_p1 = $signed(trunc_ln7_fu_1346_p4);

assign sext_ln87_fu_1010_p1 = $signed(trunc_ln1_fu_1000_p4);

assign sub_ln41_1_fu_790_p2 = (27'd0 - select_ln41_fu_784_p3);

assign sub_ln41_fu_769_p2 = (65'd0 - mul_ln41_reg_1692);

assign sub_ln53_fu_932_p2 = ($signed(ydim_read_reg_1623) - $signed(trunc_ln54_1_fu_928_p1));

assign tmp_1_fu_774_p4 = {{sub_ln41_fu_769_p2[64:38]}};

assign tmp_4_fu_1333_p3 = {{empty_45_fu_1329_p2}, {1'd0}};

assign tmp_5_fu_987_p3 = {{empty_52_fu_983_p2}, {1'd0}};

assign tmp_6_fu_1243_p3 = {{empty_59_fu_1239_p2}, {1'd0}};

assign tmp_fu_742_p1 = ydim;

assign trunc_ln103_fu_1220_p1 = ub_reg_1821[30:0];

assign trunc_ln105_1_fu_1299_p1 = j_4_reg_656[15:0];

assign trunc_ln105_fu_1276_p1 = i_7_reg_644[5:0];

assign trunc_ln1116_1_fu_1445_p1 = j_2_reg_701[15:0];

assign trunc_ln1116_fu_1416_p1 = i_4_reg_690[5:0];

assign trunc_ln1118_fu_1113_p1 = select_ln92_fu_1077_p3[15:0];

assign trunc_ln115_1_fu_1510_p4 = {{debug_dx_read_reg_1655[31:1]}};

assign trunc_ln115_fu_1494_p1 = mul150_reg_2208[30:0];

assign trunc_ln1_fu_1000_p4 = {{empty_53_fu_995_p2[31:1]}};

assign trunc_ln3_fu_1256_p4 = {{empty_60_fu_1251_p2[31:1]}};

assign trunc_ln43_fu_832_p1 = ydim_read_reg_1623[30:0];

assign trunc_ln44_fu_846_p1 = i_reg_543[9:0];

assign trunc_ln49_fu_854_p1 = xdim_read_reg_1635[30:0];

assign trunc_ln4_fu_1497_p4 = {{debug_x_read_reg_1660[31:1]}};

assign trunc_ln54_1_fu_928_p1 = phi_mul_reg_565[31:0];

assign trunc_ln54_fu_924_p1 = phi_mul_reg_565[9:0];

assign trunc_ln65_fu_955_p1 = ub_fu_937_p3[30:0];

assign trunc_ln67_1_fu_1388_p1 = j_reg_679[15:0];

assign trunc_ln67_fu_1366_p1 = i_2_reg_667[5:0];

assign trunc_ln703_fu_1204_p1 = i_6_reg_633[9:0];

assign trunc_ln72_fu_1412_p1 = i_4_reg_690[9:0];

assign trunc_ln7_fu_1346_p4 = {{empty_46_fu_1341_p2[31:1]}};

assign trunc_ln86_fu_951_p1 = ub_fu_937_p3[30:0];

assign trunc_ln88_1_fu_1042_p1 = j_1_reg_589[15:0];

assign trunc_ln88_fu_1020_p1 = i_3_reg_577[5:0];

assign trunc_ln92_1_fu_1089_p1 = ap_phi_mux_i_5_phi_fu_615_p4[9:0];

assign trunc_ln92_fu_1085_p1 = add_ln92_fu_1066_p2[9:0];

assign trunc_ln_fu_812_p4 = {{b_read_reg_1665[31:1]}};

assign ub_fu_937_p3 = ((icmp_ln53_fu_919_p2[0:0] == 1'b1) ? sub_ln53_fu_932_p2 : 32'd50);

assign x_Addr_A = x_Addr_A_orig << 32'd1;

assign x_Clk_A = ap_clk;

assign x_Din_A = 16'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 2'd0;

assign y_Addr_A = y_Addr_A_orig << 32'd1;

assign y_Addr_A_orig = y_addr_reg_2149;

assign y_Clk_A = ap_clk;

assign y_Rst_A = ap_rst_n_inv;

assign zext_ln105_1_fu_1308_p1 = add_ln105_fu_1303_p2;

assign zext_ln1116_1_fu_1449_p1 = trunc_ln1116_1_fu_1445_p1;

assign zext_ln1116_2_fu_1459_p1 = add_ln1116_reg_2173;

assign zext_ln1118_1_fu_1144_p1 = grp_fu_1568_p3;

assign zext_ln1118_fu_1117_p1 = trunc_ln1118_fu_1113_p1;

assign zext_ln116_fu_1534_p1 = ap_phi_mux_i_1_phi_fu_725_p4;

assign zext_ln44_fu_850_p1 = trunc_ln44_reg_1737_pp0_iter1_reg;

assign zext_ln53_1_fu_916_p1 = mul_ln53_2_reg_1810;

assign zext_ln67_1_fu_1397_p1 = add_ln67_reg_2116_pp5_iter1_reg;

assign zext_ln703_fu_1208_p1 = trunc_ln703_fu_1204_p1;

assign zext_ln74_fu_1428_p1 = add_ln74_fu_1424_p2;

assign zext_ln88_1_fu_1051_p1 = add_ln88_reg_1890_pp1_iter1_reg;

assign zext_ln92_2_fu_1126_p1 = add_ln92_1_fu_1122_p2;

assign zext_ln92_3_fu_1136_p1 = select_ln92_2_reg_1919;

assign zext_ln92_fu_874_p1 = xdim_read_reg_1635;

always @ (posedge ap_clk) begin
    zext_ln92_reg_1774[62:32] <= 31'b0000000000000000000000000000000;
    zext_ln1118_reg_1940[31:16] <= 16'b0000000000000000;
    zext_ln1118_reg_1940_pp2_iter1_reg[31:16] <= 16'b0000000000000000;
    zext_ln1118_reg_1940_pp2_iter2_reg[31:16] <= 16'b0000000000000000;
    zext_ln1118_reg_1940_pp2_iter3_reg[31:16] <= 16'b0000000000000000;
end

endmodule //fcc_combined
