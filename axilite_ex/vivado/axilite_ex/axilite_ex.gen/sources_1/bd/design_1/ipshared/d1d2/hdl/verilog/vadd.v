// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vadd_vadd,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.669000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=92,HLS_SYN_LUT=120,HLS_VERSION=2020_2}" *)

module vadd (
        s_axi_gen_AWVALID,
        s_axi_gen_AWREADY,
        s_axi_gen_AWADDR,
        s_axi_gen_WVALID,
        s_axi_gen_WREADY,
        s_axi_gen_WDATA,
        s_axi_gen_WSTRB,
        s_axi_gen_ARVALID,
        s_axi_gen_ARREADY,
        s_axi_gen_ARADDR,
        s_axi_gen_RVALID,
        s_axi_gen_RREADY,
        s_axi_gen_RDATA,
        s_axi_gen_RRESP,
        s_axi_gen_BVALID,
        s_axi_gen_BREADY,
        s_axi_gen_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    C_S_AXI_GEN_DATA_WIDTH = 32;
parameter    C_S_AXI_GEN_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_GEN_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_gen_AWVALID;
output   s_axi_gen_AWREADY;
input  [C_S_AXI_GEN_ADDR_WIDTH - 1:0] s_axi_gen_AWADDR;
input   s_axi_gen_WVALID;
output   s_axi_gen_WREADY;
input  [C_S_AXI_GEN_DATA_WIDTH - 1:0] s_axi_gen_WDATA;
input  [C_S_AXI_GEN_WSTRB_WIDTH - 1:0] s_axi_gen_WSTRB;
input   s_axi_gen_ARVALID;
output   s_axi_gen_ARREADY;
input  [C_S_AXI_GEN_ADDR_WIDTH - 1:0] s_axi_gen_ARADDR;
output   s_axi_gen_RVALID;
input   s_axi_gen_RREADY;
output  [C_S_AXI_GEN_DATA_WIDTH - 1:0] s_axi_gen_RDATA;
output  [1:0] s_axi_gen_RRESP;
output   s_axi_gen_BVALID;
input   s_axi_gen_BREADY;
output  [1:0] s_axi_gen_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

wire    ap_start;
wire    ap_done;
wire    ap_idle;
wire    ap_ready;
wire   [7:0] a;
wire   [7:0] b;
wire   [7:0] c_i;
wire   [7:0] c_o;
reg    c_o_ap_vld;
 reg    ap_rst_n_inv;
wire   [7:0] add_ln11_fu_57_p2;
wire    ap_ce_reg;

vadd_gen_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_GEN_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_GEN_DATA_WIDTH ))
gen_s_axi_U(
    .AWVALID(s_axi_gen_AWVALID),
    .AWREADY(s_axi_gen_AWREADY),
    .AWADDR(s_axi_gen_AWADDR),
    .WVALID(s_axi_gen_WVALID),
    .WREADY(s_axi_gen_WREADY),
    .WDATA(s_axi_gen_WDATA),
    .WSTRB(s_axi_gen_WSTRB),
    .ARVALID(s_axi_gen_ARVALID),
    .ARREADY(s_axi_gen_ARREADY),
    .ARADDR(s_axi_gen_ARADDR),
    .RVALID(s_axi_gen_RVALID),
    .RREADY(s_axi_gen_RREADY),
    .RDATA(s_axi_gen_RDATA),
    .RRESP(s_axi_gen_RRESP),
    .BVALID(s_axi_gen_BVALID),
    .BREADY(s_axi_gen_BREADY),
    .BRESP(s_axi_gen_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .b(b),
    .c_o(c_o),
    .c_o_ap_vld(c_o_ap_vld),
    .c_i(c_i),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        c_o_ap_vld = 1'b1;
    end else begin
        c_o_ap_vld = 1'b0;
    end
end

assign add_ln11_fu_57_p2 = (a + c_i);

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_o = (add_ln11_fu_57_p2 + b);

endmodule //vadd
