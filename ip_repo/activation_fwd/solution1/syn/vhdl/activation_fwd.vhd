-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity activation_fwd is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of activation_fwd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "activation_fwd_activation_fwd,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1632,HLS_SYN_LUT=2291,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_r : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal dimension : STD_LOGIC_VECTOR (31 downto 0);
    signal type_r : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond247_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln21_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond3_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_1259_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index14_reg_352 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_index14_reg_352_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_0_reg_364 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_376 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_index_reg_388 : STD_LOGIC_VECTOR (6 downto 0);
    signal type_read_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal dimension_read_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_read_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_982 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_21_fu_435_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_21_reg_988 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond247_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond247_reg_993_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal cmp11_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln42_fu_469_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln42_reg_1010 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln27_fu_472_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln27_reg_1019 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln42_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_0_cast6_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_0_cast6_reg_1032 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_reg_1042 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_1_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_1_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_2_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_reg_1056 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state14_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln42_2_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_2_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_4_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_4_reg_1070 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_3_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_3_reg_1075 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_3_fu_549_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_3_reg_1084 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln42_4_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_4_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln42_6_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_6_reg_1093 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state15_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal add_ln42_4_fu_568_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_4_reg_1103 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln27_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state18_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln27_reg_1108_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_cast5_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_cast5_reg_1112 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_cast5_reg_1112_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_reg_1122 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_reg_1122_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_1_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_reg_1127_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_t_load_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state19_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal in_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_t_load_5_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_2_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_2_reg_1150 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_2_reg_1150_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_2_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_2_reg_1155_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_4_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_4_reg_1164 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_4_reg_1164_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_3_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_3_reg_1169 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_3_reg_1169_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_3_fu_648_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_3_reg_1178 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln27_4_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_4_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_4_reg_1183_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_t_load_2_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state20_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal in_t_load_3_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_6_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_6_reg_1201 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_6_reg_1201_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln27_4_fu_667_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_4_reg_1211 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln29_fu_714_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_1216 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_reg_1221 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_t_load_4_reg_1226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal select_ln29_2_fu_810_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_reg_1233 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_3_fu_858_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_3_reg_1238 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_4_fu_906_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_4_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_27_fu_933_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state26_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal exitcond3_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_t_load_reg_1268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_predicate_tran15to17_state15 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state15 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_predicate_tran23to25_state20 : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal ap_condition_pp2_exit_iter1_state23 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state26 : STD_LOGIC;
    signal in_t_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_t_ce0 : STD_LOGIC;
    signal in_t_we0 : STD_LOGIC;
    signal in_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_t_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_t_ce1 : STD_LOGIC;
    signal out_t_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_t_ce0 : STD_LOGIC;
    signal out_t_we0 : STD_LOGIC;
    signal out_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_t_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_t_ce1 : STD_LOGIC;
    signal out_t_we1 : STD_LOGIC;
    signal out_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_loop_index14_phi_fu_356_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_i_1_0_phi_fu_368_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_380_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal loop_index14_cast4_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal loop_index_cast_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_cast_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state33 : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal grp_fu_399_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_404_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_415_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal loop_index14_cast16_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_0_cast_fu_475_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln42_fu_489_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_1_fu_500_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln42_1_fu_509_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_3_fu_520_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln42_2_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_5_fu_540_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln42_7_fu_555_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_cast_fu_574_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln27_fu_588_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_1_fu_599_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln27_1_fu_608_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_3_fu_619_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln27_2_fu_628_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_5_fu_639_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln27_7_fu_654_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bitcast_ln29_fu_673_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_676_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_686_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_1_fu_721_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_724_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_734_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_2_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_772_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_782_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_3_fu_817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_820_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_830_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_4_fu_865_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_868_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_4_fu_878_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_9_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_8_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_4_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast2_fu_913_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal loop_index_cast1_fu_939_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage2_00001 : BOOLEAN;
    signal ap_block_pp2_stage0_00001 : BOOLEAN;
    signal ap_block_pp2_stage1_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component activation_fwd_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component activation_fwd_in_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component activation_fwd_out_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component activation_fwd_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        in_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        dimension : OUT STD_LOGIC_VECTOR (31 downto 0);
        type_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component activation_fwd_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    CTRL_s_axi_U : component activation_fwd_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        in_r => in_r,
        out_r => out_r,
        dimension => dimension,
        type_r => type_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component activation_fwd_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_reg_982,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => dimension_read_reg_962,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => p_cast2_cast_fu_922_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => dimension_read_reg_962,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    in_t_U : component activation_fwd_in_t
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => in_t_address0,
        ce0 => in_t_ce0,
        we0 => in_t_we0,
        d0 => in_t_d0,
        q0 => in_t_q0,
        address1 => in_t_address1,
        ce1 => in_t_ce1,
        q1 => in_t_q1);

    out_t_U : component activation_fwd_out_t
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_t_address0,
        ce0 => out_t_ce0,
        we0 => out_t_we0,
        d0 => out_t_d0,
        q0 => out_t_q0,
        address1 => out_t_address1,
        ce1 => out_t_ce1,
        we1 => out_t_we1,
        d1 => out_t_d1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U1 : component activation_fwd_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_399_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_399_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U2 : component activation_fwd_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_404_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_404_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state15) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state15);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter1_state23) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone)) or ((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter1_state23) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln21_reg_978 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state25_io))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln21_reg_978 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state25_io))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln27_4_reg_1183 = ap_const_lv1_0) and (icmp_ln27_3_reg_1169 = ap_const_lv1_0) and (icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_0_reg_376 <= add_ln27_4_reg_1211;
            elsif (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_0_reg_376 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_0_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_1_0_reg_364 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln42_4_reg_1089 = ap_const_lv1_0) and (icmp_ln42_3_reg_1075 = ap_const_lv1_0) and (icmp_ln42_2_reg_1061 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_0_reg_364 <= add_ln42_4_reg_1103;
            end if; 
        end if;
    end process;

    loop_index14_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_index14_reg_352 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond247_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                loop_index14_reg_352 <= empty_21_reg_988;
            end if; 
        end if;
    end process;

    loop_index_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln21_reg_978 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state25_io))) then 
                loop_index_reg_388 <= ap_const_lv7_0;
            elsif (((exitcond3_fu_943_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                loop_index_reg_388 <= empty_27_fu_933_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_3_fu_643_p2 = ap_const_lv1_0) and (icmp_ln27_2_fu_623_p2 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                add_ln27_3_reg_1178 <= add_ln27_3_fu_648_p2;
                icmp_ln27_4_reg_1183 <= icmp_ln27_4_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_4_reg_1183 = ap_const_lv1_0) and (icmp_ln27_3_reg_1169 = ap_const_lv1_0) and (icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                add_ln27_4_reg_1211 <= add_ln27_4_fu_667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_3_fu_544_p2 = ap_const_lv1_0) and (icmp_ln42_2_fu_524_p2 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                add_ln42_3_reg_1084 <= add_ln42_3_fu_549_p2;
                icmp_ln42_4_reg_1089 <= icmp_ln42_4_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln42_4_reg_1089 = ap_const_lv1_0) and (icmp_ln42_3_reg_1075 = ap_const_lv1_0) and (icmp_ln42_2_reg_1061 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                add_ln42_4_reg_1103 <= add_ln42_4_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dimension_read_reg_962 <= dimension;
                icmp_ln21_reg_978 <= icmp_ln21_fu_409_p2;
                out_read_reg_973 <= out_r;
                type_read_reg_957 <= type_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_21_reg_988 <= empty_21_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond247_reg_993 <= exitcond247_fu_445_p2;
                exitcond247_reg_993_pp0_iter1_reg <= exitcond247_reg_993;
                loop_index14_reg_352_pp0_iter1_reg <= loop_index14_reg_352;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                exitcond3_reg_1259 <= exitcond3_fu_943_p2;
                exitcond3_reg_1259_pp3_iter1_reg <= exitcond3_reg_1259;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond247_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_997 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_reg_982 <= p_cast_cast_fu_425_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_578_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    i_0_cast5_reg_1112(6 downto 0) <= i_0_cast5_fu_583_p1(6 downto 0);
                icmp_ln27_1_reg_1127 <= icmp_ln27_1_fu_603_p2;
                    zext_ln27_reg_1122(6 downto 0) <= zext_ln27_fu_594_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    i_0_cast5_reg_1112_pp2_iter1_reg(6 downto 0) <= i_0_cast5_reg_1112(6 downto 0);
                icmp_ln27_1_reg_1127_pp2_iter1_reg <= icmp_ln27_1_reg_1127;
                icmp_ln27_reg_1108 <= icmp_ln27_fu_578_p2;
                icmp_ln27_reg_1108_pp2_iter1_reg <= icmp_ln27_reg_1108;
                    zext_ln27_reg_1122_pp2_iter1_reg(6 downto 0) <= zext_ln27_reg_1122(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_479_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    i_1_0_cast6_reg_1032(6 downto 0) <= i_1_0_cast6_fu_484_p1(6 downto 0);
                icmp_ln42_1_reg_1047 <= icmp_ln42_1_fu_504_p2;
                    zext_ln42_reg_1042(6 downto 0) <= zext_ln42_fu_495_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln27_2_reg_1155 <= icmp_ln27_2_fu_623_p2;
                    zext_ln27_2_reg_1150(6 downto 0) <= zext_ln27_2_fu_614_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln27_2_reg_1155_pp2_iter1_reg <= icmp_ln27_2_reg_1155;
                icmp_ln27_3_reg_1169_pp2_iter1_reg <= icmp_ln27_3_reg_1169;
                icmp_ln27_4_reg_1183_pp2_iter1_reg <= icmp_ln27_4_reg_1183;
                    zext_ln27_2_reg_1150_pp2_iter1_reg(6 downto 0) <= zext_ln27_2_reg_1150(6 downto 0);
                    zext_ln27_4_reg_1164_pp2_iter1_reg(6 downto 0) <= zext_ln27_4_reg_1164(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_2_fu_623_p2 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln27_3_reg_1169 <= icmp_ln27_3_fu_643_p2;
                    zext_ln27_4_reg_1164(6 downto 0) <= zext_ln27_4_fu_634_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                icmp_ln42_2_reg_1061 <= icmp_ln42_2_fu_524_p2;
                    zext_ln42_2_reg_1056(6 downto 0) <= zext_ln42_2_fu_515_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_2_fu_524_p2 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                icmp_ln42_3_reg_1075 <= icmp_ln42_3_fu_544_p2;
                    zext_ln42_4_reg_1070(6 downto 0) <= zext_ln42_4_fu_535_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln42_reg_1028 <= icmp_ln42_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                in_t_load_2_reg_1187 <= in_t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_3_reg_1169 = ap_const_lv1_0) and (icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                in_t_load_3_reg_1194 <= in_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln27_4_reg_1183 = ap_const_lv1_0) and (icmp_ln27_3_reg_1169 = ap_const_lv1_0) and (icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                in_t_load_4_reg_1226 <= in_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                in_t_load_5_reg_1143 <= in_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                in_t_load_reg_1136 <= in_t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond3_reg_1259 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                out_t_load_reg_1268 <= out_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln29_1_reg_1221 <= select_ln29_1_fu_762_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                select_ln29_2_reg_1233 <= select_ln29_2_fu_810_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_3_reg_1169 = ap_const_lv1_0) and (icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                select_ln29_3_reg_1238 <= select_ln29_3_fu_858_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_4_reg_1183_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_3_reg_1169_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_2_reg_1155_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_1_reg_1127_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                select_ln29_4_reg_1243 <= select_ln29_4_fu_906_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln29_reg_1216 <= select_ln29_fu_714_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                trunc_ln27_reg_1019 <= trunc_ln27_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                trunc_ln42_reg_1010 <= trunc_ln42_fu_469_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_3_reg_1169 = ap_const_lv1_0) and (icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                    zext_ln27_6_reg_1201(6 downto 0) <= zext_ln27_6_fu_663_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                    zext_ln27_6_reg_1201_pp2_iter1_reg(6 downto 0) <= zext_ln27_6_reg_1201(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_3_reg_1075 = ap_const_lv1_0) and (icmp_ln42_2_reg_1061 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                    zext_ln42_6_reg_1093(6 downto 0) <= zext_ln42_6_fu_564_p1(6 downto 0);
            end if;
        end if;
    end process;
    i_1_0_cast6_reg_1032(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln42_reg_1042(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln42_2_reg_1056(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln42_4_reg_1070(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln42_6_reg_1093(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_0_cast5_reg_1112(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_0_cast5_reg_1112_pp2_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_reg_1122(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_reg_1122_pp2_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_2_reg_1150(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_2_reg_1150_pp2_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_4_reg_1164(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_4_reg_1164_pp2_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_6_reg_1201(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln27_6_reg_1201_pp2_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state25, icmp_ln21_reg_978, ap_enable_reg_pp3_iter2, ap_CS_fsm_state33, gmem_ARREADY, gmem_BVALID, icmp_ln21_fu_409_p2, ap_enable_reg_pp0_iter0, exitcond247_fu_445_p2, icmp_ln24_fu_459_p2, ap_CS_fsm_state12, cmp11_fu_464_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter0, exitcond3_fu_943_p2, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage2_subdone, ap_predicate_tran15to17_state15, ap_block_pp2_stage2_subdone, ap_block_state25_io, ap_block_pp3_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln21_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln21_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond247_fu_445_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond247_fu_445_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((cmp11_fu_464_p2 = ap_const_lv1_1) and (icmp_ln24_fu_459_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((not(((ap_predicate_tran15to17_state15 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_predicate_tran15to17_state15 = ap_const_boolean_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_pp2_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln21_reg_978 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state25_io))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln21_reg_978 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state25_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond3_fu_943_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond3_fu_943_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln21_reg_978 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln27_1_fu_608_p2 <= std_logic_vector(unsigned(i_0_reg_376) + unsigned(ap_const_lv7_2));
    add_ln27_2_fu_628_p2 <= std_logic_vector(unsigned(i_0_reg_376) + unsigned(ap_const_lv7_3));
    add_ln27_3_fu_648_p2 <= std_logic_vector(unsigned(i_0_reg_376) + unsigned(ap_const_lv7_4));
    add_ln27_4_fu_667_p2 <= std_logic_vector(unsigned(i_0_reg_376) + unsigned(ap_const_lv7_5));
    add_ln27_fu_588_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_380_p4) + unsigned(ap_const_lv7_1));
    add_ln42_1_fu_509_p2 <= std_logic_vector(unsigned(i_1_0_reg_364) + unsigned(ap_const_lv7_2));
    add_ln42_2_fu_529_p2 <= std_logic_vector(unsigned(i_1_0_reg_364) + unsigned(ap_const_lv7_3));
    add_ln42_3_fu_549_p2 <= std_logic_vector(unsigned(i_1_0_reg_364) + unsigned(ap_const_lv7_4));
    add_ln42_4_fu_568_p2 <= std_logic_vector(unsigned(i_1_0_reg_364) + unsigned(ap_const_lv7_5));
    add_ln42_fu_489_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_0_phi_fu_368_p4) + unsigned(ap_const_lv7_1));
    and_ln29_1_fu_756_p2 <= (or_ln29_1_fu_750_p2 and grp_fu_404_p2);
    and_ln29_2_fu_804_p2 <= (or_ln29_2_fu_798_p2 and grp_fu_399_p2);
    and_ln29_3_fu_852_p2 <= (or_ln29_3_fu_846_p2 and grp_fu_404_p2);
    and_ln29_4_fu_900_p2 <= (or_ln29_4_fu_894_p2 and grp_fu_399_p2);
    and_ln29_fu_708_p2 <= (or_ln29_fu_702_p2 and grp_fu_399_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(16);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(17);
    ap_CS_fsm_state33 <= ap_CS_fsm(23);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond247_reg_993, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond247_reg_993 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond247_reg_993, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (exitcond247_reg_993 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state28_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state28_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond247_reg_993, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond247_reg_993 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_io_assign_proc : process(icmp_ln21_reg_978, gmem_AWREADY)
    begin
                ap_block_state25_io <= ((gmem_AWREADY = ap_const_logic_0) and (icmp_ln21_reg_978 = ap_const_lv1_1));
    end process;

        ap_block_state26_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_io_assign_proc : process(exitcond3_reg_1259_pp3_iter1_reg, gmem_WREADY)
    begin
                ap_block_state28_io <= ((gmem_WREADY = ap_const_logic_0) and (exitcond3_reg_1259_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state28_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_assign_proc : process(icmp_ln21_reg_978, gmem_BVALID)
    begin
                ap_block_state33 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln21_reg_978 = ap_const_lv1_1));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond247_fu_445_p2)
    begin
        if ((exitcond247_fu_445_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state15_assign_proc : process(ap_predicate_tran15to17_state15)
    begin
        if ((ap_predicate_tran15to17_state15 = ap_const_boolean_1)) then 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter1_state23_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_condition_pp2_exit_iter1_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter1_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_subdone, ap_predicate_tran23to25_state20)
    begin
        if (((ap_predicate_tran23to25_state20 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state26_assign_proc : process(exitcond3_fu_943_p2)
    begin
        if ((exitcond3_fu_943_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln21_reg_978, ap_CS_fsm_state33, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln21_reg_978 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_380_p4_assign_proc : process(i_0_reg_376, icmp_ln27_reg_1108, ap_CS_fsm_pp2_stage0, icmp_ln27_1_reg_1127, icmp_ln27_2_reg_1155, icmp_ln27_3_reg_1169, icmp_ln27_4_reg_1183, add_ln27_4_reg_1211, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln27_4_reg_1183 = ap_const_lv1_0) and (icmp_ln27_3_reg_1169 = ap_const_lv1_0) and (icmp_ln27_2_reg_1155 = ap_const_lv1_0) and (icmp_ln27_1_reg_1127 = ap_const_lv1_0) and (icmp_ln27_reg_1108 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i_0_phi_fu_380_p4 <= add_ln27_4_reg_1211;
        else 
            ap_phi_mux_i_0_phi_fu_380_p4 <= i_0_reg_376;
        end if; 
    end process;


    ap_phi_mux_i_1_0_phi_fu_368_p4_assign_proc : process(i_1_0_reg_364, icmp_ln42_reg_1028, ap_CS_fsm_pp1_stage0, icmp_ln42_1_reg_1047, icmp_ln42_2_reg_1061, icmp_ln42_3_reg_1075, icmp_ln42_4_reg_1089, add_ln42_4_reg_1103, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln42_4_reg_1089 = ap_const_lv1_0) and (icmp_ln42_3_reg_1075 = ap_const_lv1_0) and (icmp_ln42_2_reg_1061 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_0_phi_fu_368_p4 <= add_ln42_4_reg_1103;
        else 
            ap_phi_mux_i_1_0_phi_fu_368_p4 <= i_1_0_reg_364;
        end if; 
    end process;


    ap_phi_mux_loop_index14_phi_fu_356_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond247_reg_993, loop_index14_reg_352, empty_21_reg_988)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond247_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_loop_index14_phi_fu_356_p4 <= empty_21_reg_988;
        else 
            ap_phi_mux_loop_index14_phi_fu_356_p4 <= loop_index14_reg_352;
        end if; 
    end process;


    ap_predicate_tran15to17_state15_assign_proc : process(icmp_ln42_reg_1028, icmp_ln42_1_reg_1047, icmp_ln42_2_reg_1061, icmp_ln42_3_reg_1075, icmp_ln42_4_reg_1089)
    begin
                ap_predicate_tran15to17_state15 <= ((icmp_ln42_reg_1028 = ap_const_lv1_1) or ((icmp_ln42_1_reg_1047 = ap_const_lv1_1) or ((icmp_ln42_2_reg_1061 = ap_const_lv1_1) or ((icmp_ln42_4_reg_1089 = ap_const_lv1_1) or (icmp_ln42_3_reg_1075 = ap_const_lv1_1)))));
    end process;


    ap_predicate_tran23to25_state20_assign_proc : process(icmp_ln27_reg_1108, icmp_ln27_1_reg_1127, icmp_ln27_2_reg_1155, icmp_ln27_3_reg_1169, icmp_ln27_4_reg_1183)
    begin
                ap_predicate_tran23to25_state20 <= ((icmp_ln27_reg_1108 = ap_const_lv1_1) or ((icmp_ln27_1_reg_1127 = ap_const_lv1_1) or ((icmp_ln27_2_reg_1155 = ap_const_lv1_1) or ((icmp_ln27_4_reg_1183 = ap_const_lv1_1) or (icmp_ln27_3_reg_1169 = ap_const_lv1_1)))));
    end process;


    ap_ready_assign_proc : process(icmp_ln21_reg_978, ap_CS_fsm_state33, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln21_reg_978 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln29_1_fu_721_p1 <= in_t_load_5_reg_1143;
    bitcast_ln29_2_fu_769_p1 <= in_t_load_2_reg_1187;
    bitcast_ln29_3_fu_817_p1 <= in_t_load_3_reg_1194;
    bitcast_ln29_4_fu_865_p1 <= in_t_load_4_reg_1226;
    bitcast_ln29_fu_673_p1 <= in_t_load_reg_1136;
    cmp11_fu_464_p2 <= "1" when (signed(dimension_read_reg_962) > signed(ap_const_lv32_0)) else "0";
    empty_21_fu_435_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index14_phi_fu_356_p4) + unsigned(ap_const_lv7_1));
    empty_27_fu_933_p2 <= std_logic_vector(unsigned(loop_index_reg_388) + unsigned(ap_const_lv7_1));
    exitcond247_fu_445_p2 <= "1" when (loop_index14_cast16_fu_441_p1 = dimension_read_reg_962) else "0";
    exitcond3_fu_943_p2 <= "1" when (loop_index_cast1_fu_939_p1 = dimension_read_reg_962) else "0";

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state25, icmp_ln21_reg_978, ap_block_state25_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln21_reg_978 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state25_io))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(icmp_ln21_reg_978, ap_CS_fsm_state33, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln21_reg_978 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln21_reg_978 = ap_const_lv1_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond247_reg_993, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond247_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_WDATA <= out_t_load_reg_1268;

    gmem_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, exitcond3_reg_1259_pp3_iter1_reg, ap_block_pp3_stage0_11001)
    begin
        if (((exitcond3_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state25, icmp_ln21_reg_978)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln21_reg_978 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, icmp_ln21_reg_978, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln21_reg_978 = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond247_reg_993)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond247_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, exitcond3_reg_1259_pp3_iter1_reg)
    begin
        if (((exitcond3_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_399_p0_assign_proc : process(ap_CS_fsm_pp2_stage0, in_t_load_reg_1136, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, in_t_load_2_reg_1187, ap_CS_fsm_pp2_stage2, in_t_load_4_reg_1226, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            grp_fu_399_p0 <= in_t_load_4_reg_1226;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_399_p0 <= in_t_load_2_reg_1187;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            grp_fu_399_p0 <= in_t_load_reg_1136;
        else 
            grp_fu_399_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_404_p0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, in_t_load_5_reg_1143, ap_CS_fsm_pp2_stage2, in_t_load_3_reg_1194, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_404_p0 <= in_t_load_3_reg_1194;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            grp_fu_404_p0 <= in_t_load_5_reg_1143;
        else 
            grp_fu_404_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_0_cast5_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_380_p4),64));
    i_0_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_380_p4),31));
    i_1_0_cast6_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_0_phi_fu_368_p4),64));
    i_1_0_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_0_phi_fu_368_p4),31));
    icmp_ln21_fu_409_p2 <= "0" when (dimension = ap_const_lv32_0) else "1";
    icmp_ln24_fu_459_p2 <= "1" when (type_read_reg_957 = ap_const_lv32_0) else "0";
    icmp_ln27_1_fu_603_p2 <= "1" when (zext_ln27_1_fu_599_p1 = trunc_ln27_reg_1019) else "0";
    icmp_ln27_2_fu_623_p2 <= "1" when (zext_ln27_3_fu_619_p1 = trunc_ln27_reg_1019) else "0";
    icmp_ln27_3_fu_643_p2 <= "1" when (zext_ln27_5_fu_639_p1 = trunc_ln27_reg_1019) else "0";
    icmp_ln27_4_fu_658_p2 <= "1" when (zext_ln27_7_fu_654_p1 = trunc_ln27_reg_1019) else "0";
    icmp_ln27_fu_578_p2 <= "1" when (i_0_cast_fu_574_p1 = trunc_ln27_reg_1019) else "0";
    icmp_ln29_1_fu_696_p2 <= "1" when (trunc_ln29_fu_686_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_738_p2 <= "0" when (tmp_2_fu_724_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_744_p2 <= "1" when (trunc_ln29_1_fu_734_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_786_p2 <= "0" when (tmp_4_fu_772_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_792_p2 <= "1" when (trunc_ln29_2_fu_782_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_834_p2 <= "0" when (tmp_6_fu_820_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_840_p2 <= "1" when (trunc_ln29_3_fu_830_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_8_fu_882_p2 <= "0" when (tmp_8_fu_868_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_9_fu_888_p2 <= "1" when (trunc_ln29_4_fu_878_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_690_p2 <= "0" when (tmp_fu_676_p4 = ap_const_lv8_FF) else "1";
    icmp_ln42_1_fu_504_p2 <= "1" when (zext_ln42_1_fu_500_p1 = trunc_ln42_reg_1010) else "0";
    icmp_ln42_2_fu_524_p2 <= "1" when (zext_ln42_3_fu_520_p1 = trunc_ln42_reg_1010) else "0";
    icmp_ln42_3_fu_544_p2 <= "1" when (zext_ln42_5_fu_540_p1 = trunc_ln42_reg_1010) else "0";
    icmp_ln42_4_fu_559_p2 <= "1" when (zext_ln42_7_fu_555_p1 = trunc_ln42_reg_1010) else "0";
    icmp_ln42_fu_479_p2 <= "1" when (i_1_0_cast_fu_475_p1 = trunc_ln42_reg_1010) else "0";

    in_t_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, zext_ln42_fu_495_p1, ap_CS_fsm_pp1_stage1, zext_ln42_4_fu_535_p1, zext_ln42_6_fu_564_p1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, zext_ln27_fu_594_p1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, zext_ln27_4_fu_634_p1, ap_CS_fsm_pp2_stage2, zext_ln27_6_fu_663_p1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0, ap_block_pp2_stage0, loop_index14_cast4_fu_450_p1, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp2_stage1, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            in_t_address0 <= zext_ln27_6_fu_663_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            in_t_address0 <= zext_ln27_4_fu_634_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            in_t_address0 <= zext_ln27_fu_594_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            in_t_address0 <= zext_ln42_6_fu_564_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            in_t_address0 <= zext_ln42_4_fu_535_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            in_t_address0 <= zext_ln42_fu_495_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in_t_address0 <= loop_index14_cast4_fu_450_p1(7 - 1 downto 0);
        else 
            in_t_address0 <= "XXXXXXX";
        end if; 
    end process;


    in_t_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, i_1_0_cast6_fu_484_p1, zext_ln42_2_fu_515_p1, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, i_0_cast5_fu_583_p1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, zext_ln27_2_fu_614_p1, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp1_stage1, ap_block_pp2_stage1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            in_t_address1 <= zext_ln27_2_fu_614_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            in_t_address1 <= i_0_cast5_fu_583_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            in_t_address1 <= zext_ln42_2_fu_515_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            in_t_address1 <= i_1_0_cast6_fu_484_p1(7 - 1 downto 0);
        else 
            in_t_address1 <= "XXXXXXX";
        end if; 
    end process;


    in_t_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            in_t_ce0 <= ap_const_logic_1;
        else 
            in_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_t_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp2_stage1_11001)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            in_t_ce1 <= ap_const_logic_1;
        else 
            in_t_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_t_d0 <= gmem_addr_read_reg_997;

    in_t_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond247_reg_993_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond247_reg_993_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_t_we0 <= ap_const_logic_1;
        else 
            in_t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_index14_cast16_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_index14_phi_fu_356_p4),32));
    loop_index14_cast4_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index14_reg_352_pp0_iter1_reg),64));
    loop_index_cast1_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_388),32));
    loop_index_cast_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_388),64));
    or_ln29_1_fu_750_p2 <= (icmp_ln29_3_fu_744_p2 or icmp_ln29_2_fu_738_p2);
    or_ln29_2_fu_798_p2 <= (icmp_ln29_5_fu_792_p2 or icmp_ln29_4_fu_786_p2);
    or_ln29_3_fu_846_p2 <= (icmp_ln29_7_fu_840_p2 or icmp_ln29_6_fu_834_p2);
    or_ln29_4_fu_894_p2 <= (icmp_ln29_9_fu_888_p2 or icmp_ln29_8_fu_882_p2);
    or_ln29_fu_702_p2 <= (icmp_ln29_fu_690_p2 or icmp_ln29_1_fu_696_p2);

    out_t_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp1_stage0, zext_ln42_reg_1042, zext_ln42_2_reg_1056, ap_CS_fsm_pp1_stage1, zext_ln42_6_reg_1093, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, zext_ln27_reg_1122_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, zext_ln27_4_reg_1164_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp2_stage1, ap_block_pp2_stage2, loop_index_cast_fu_948_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            out_t_address0 <= loop_index_cast_fu_948_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            out_t_address0 <= zext_ln27_4_reg_1164_pp2_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            out_t_address0 <= zext_ln27_reg_1122_pp2_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            out_t_address0 <= zext_ln42_6_reg_1093(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            out_t_address0 <= zext_ln42_2_reg_1056(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            out_t_address0 <= zext_ln42_reg_1042(7 - 1 downto 0);
        else 
            out_t_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_t_address1_assign_proc : process(i_1_0_cast6_reg_1032, ap_CS_fsm_pp1_stage1, zext_ln42_4_reg_1070, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, i_0_cast5_reg_1112_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, zext_ln27_2_reg_1150_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, zext_ln27_6_reg_1201_pp2_iter1_reg, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp2_stage1, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            out_t_address1 <= zext_ln27_6_reg_1201_pp2_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            out_t_address1 <= zext_ln27_2_reg_1150_pp2_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            out_t_address1 <= i_0_cast5_reg_1112_pp2_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            out_t_address1 <= zext_ln42_4_reg_1070(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            out_t_address1 <= i_1_0_cast6_reg_1032(7 - 1 downto 0);
        else 
            out_t_address1 <= "XXXXXXX";
        end if; 
    end process;


    out_t_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            out_t_ce0 <= ap_const_logic_1;
        else 
            out_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_t_ce1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            out_t_ce1 <= ap_const_logic_1;
        else 
            out_t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_t_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, in_t_q1, ap_CS_fsm_pp2_stage1, in_t_q0, ap_CS_fsm_pp2_stage2, select_ln29_1_reg_1221, ap_enable_reg_pp2_iter1, select_ln29_3_reg_1238, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp2_stage1, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            out_t_d0 <= select_ln29_3_reg_1238;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            out_t_d0 <= select_ln29_1_reg_1221;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            out_t_d0 <= in_t_q1;
        elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1)))) then 
            out_t_d0 <= in_t_q0;
        else 
            out_t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_t_d1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, in_t_q1, ap_CS_fsm_pp2_stage1, in_t_q0, ap_CS_fsm_pp2_stage2, select_ln29_reg_1216, ap_enable_reg_pp2_iter1, select_ln29_2_reg_1233, select_ln29_4_reg_1243, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, ap_block_pp1_stage1, ap_block_pp1_stage2, ap_block_pp2_stage1, ap_block_pp2_stage2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            out_t_d1 <= select_ln29_4_reg_1243;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            out_t_d1 <= select_ln29_2_reg_1233;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            out_t_d1 <= select_ln29_reg_1216;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            out_t_d1 <= in_t_q0;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1))) then 
            out_t_d1 <= in_t_q1;
        else 
            out_t_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_t_we0_assign_proc : process(icmp_ln42_reg_1028, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln42_1_reg_1047, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, icmp_ln42_2_reg_1061, icmp_ln42_3_reg_1075, icmp_ln42_4_reg_1089, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter0, icmp_ln27_reg_1108_pp2_iter1_reg, icmp_ln27_1_reg_1127_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, icmp_ln27_2_reg_1155_pp2_iter1_reg, icmp_ln27_3_reg_1169_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln42_4_reg_1089 = ap_const_lv1_0) and (icmp_ln42_3_reg_1075 = ap_const_lv1_0) and (icmp_ln42_2_reg_1061 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln27_3_reg_1169_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_2_reg_1155_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_1_reg_1127_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln27_1_reg_1127_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln42_2_reg_1061 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            out_t_we0 <= ap_const_logic_1;
        else 
            out_t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_t_we1_assign_proc : process(icmp_ln42_reg_1028, icmp_ln42_1_reg_1047, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, icmp_ln42_2_reg_1061, icmp_ln42_3_reg_1075, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln27_reg_1108_pp2_iter1_reg, icmp_ln27_1_reg_1127_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, icmp_ln27_2_reg_1155_pp2_iter1_reg, icmp_ln27_3_reg_1169_pp2_iter1_reg, icmp_ln27_4_reg_1183_pp2_iter1_reg, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln27_4_reg_1183_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_3_reg_1169_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_2_reg_1155_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_1_reg_1127_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln27_2_reg_1155_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_1_reg_1127_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln27_reg_1108_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln42_3_reg_1075 = ap_const_lv1_0) and (icmp_ln42_2_reg_1061 = ap_const_lv1_0) and (icmp_ln42_1_reg_1047 = ap_const_lv1_0) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln42_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then 
            out_t_we1 <= ap_const_logic_1;
        else 
            out_t_we1 <= ap_const_logic_0;
        end if; 
    end process;

        p_cast2_cast_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_913_p4),64));

    p_cast2_fu_913_p4 <= out_read_reg_973(63 downto 2);
        p_cast_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_415_p4),64));

    p_cast_fu_415_p4 <= in_r(63 downto 2);
    select_ln29_1_fu_762_p3 <= 
        in_t_load_5_reg_1143 when (and_ln29_1_fu_756_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln29_2_fu_810_p3 <= 
        in_t_load_2_reg_1187 when (and_ln29_2_fu_804_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln29_3_fu_858_p3 <= 
        in_t_load_3_reg_1194 when (and_ln29_3_fu_852_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln29_4_fu_906_p3 <= 
        in_t_load_4_reg_1226 when (and_ln29_4_fu_900_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln29_fu_714_p3 <= 
        in_t_load_reg_1136 when (and_ln29_fu_708_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_2_fu_724_p4 <= bitcast_ln29_1_fu_721_p1(30 downto 23);
    tmp_4_fu_772_p4 <= bitcast_ln29_2_fu_769_p1(30 downto 23);
    tmp_6_fu_820_p4 <= bitcast_ln29_3_fu_817_p1(30 downto 23);
    tmp_8_fu_868_p4 <= bitcast_ln29_4_fu_865_p1(30 downto 23);
    tmp_fu_676_p4 <= bitcast_ln29_fu_673_p1(30 downto 23);
    trunc_ln27_fu_472_p1 <= dimension_read_reg_962(31 - 1 downto 0);
    trunc_ln29_1_fu_734_p1 <= bitcast_ln29_1_fu_721_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_782_p1 <= bitcast_ln29_2_fu_769_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_830_p1 <= bitcast_ln29_3_fu_817_p1(23 - 1 downto 0);
    trunc_ln29_4_fu_878_p1 <= bitcast_ln29_4_fu_865_p1(23 - 1 downto 0);
    trunc_ln29_fu_686_p1 <= bitcast_ln29_fu_673_p1(23 - 1 downto 0);
    trunc_ln42_fu_469_p1 <= dimension_read_reg_962(31 - 1 downto 0);
    zext_ln27_1_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_588_p2),31));
    zext_ln27_2_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_608_p2),64));
    zext_ln27_3_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_608_p2),31));
    zext_ln27_4_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_fu_628_p2),64));
    zext_ln27_5_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_fu_628_p2),31));
    zext_ln27_6_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_3_reg_1178),64));
    zext_ln27_7_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_3_fu_648_p2),31));
    zext_ln27_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_588_p2),64));
    zext_ln42_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_489_p2),31));
    zext_ln42_2_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_509_p2),64));
    zext_ln42_3_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_1_fu_509_p2),31));
    zext_ln42_4_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_2_fu_529_p2),64));
    zext_ln42_5_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_2_fu_529_p2),31));
    zext_ln42_6_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_3_reg_1084),64));
    zext_ln42_7_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_3_fu_549_p2),31));
    zext_ln42_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_489_p2),64));
end behav;
