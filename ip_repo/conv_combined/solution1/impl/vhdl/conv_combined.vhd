-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_combined is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    dx_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dx_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dx_o_ap_vld : OUT STD_LOGIC;
    wt : IN STD_LOGIC_VECTOR (15 downto 0);
    dwt_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dwt_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dwt_o_ap_vld : OUT STD_LOGIC;
    y : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_ap_vld : OUT STD_LOGIC;
    dy : IN STD_LOGIC_VECTOR (15 downto 0);
    b : IN STD_LOGIC_VECTOR (15 downto 0);
    db : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv_combined is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_combined_conv_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2470,HLS_SYN_LUT=1766,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv127_0 : STD_LOGIC_VECTOR (126 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv127_1 : STD_LOGIC_VECTOR (126 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal H : STD_LOGIC_VECTOR (31 downto 0);
    signal W : STD_LOGIC_VECTOR (31 downto 0);
    signal FH : STD_LOGIC_VECTOR (31 downto 0);
    signal FW : STD_LOGIC_VECTOR (31 downto 0);
    signal fwprop : STD_LOGIC;
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal fwprop_read_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal FW_read_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal FH_read_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_read_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal H_read_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal outH_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal outH_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp5270_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln42_1_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_19_fu_336_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_19_reg_613 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln42_2_reg_628 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln1118_1_fu_367_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_521_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln1118_reg_659 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln42_reg_664 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (126 downto 0);
    signal mul_ln42_3_reg_669 : STD_LOGIC_VECTOR (126 downto 0);
    signal add_ln42_1_fu_374_p2 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal cmp9258_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9258_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_515_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln28_reg_696 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal bound_reg_701 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln28_1_fu_455_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln28_1_reg_706 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln31_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln31_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_477_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln32_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten38_reg_207 : STD_LOGIC_VECTOR (126 downto 0);
    signal icmp_ln42_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_218 : STD_LOGIC_VECTOR (62 downto 0);
    signal empty_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln28_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fh_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal fw_1_reg_250 : STD_LOGIC_VECTOR (30 downto 0);
    signal lhs_4_reg_261 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_18_reg_273 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_358_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_358_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal lhs_1_fu_385_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_fu_393_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_fu_393_p2 : signal is "no";
    signal lhs_3_fu_409_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_1_fu_417_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 of ret_V_1_fu_417_p2 : signal is "no";
    signal trunc_ln1116_fu_433_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fw_1_cast_fu_483_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_5_fu_492_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_2_fu_500_p2 : STD_LOGIC_VECTOR (22 downto 0);
    attribute use_dsp48 of ret_V_2_fu_500_p2 : signal is "no";
    signal grp_fu_521_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_322_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_322_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_346_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_346_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_358_p00 : STD_LOGIC_VECTOR (126 downto 0);
    signal grp_fu_358_p10 : STD_LOGIC_VECTOR (126 downto 0);
    signal grp_fu_444_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_444_p10 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component conv_combined_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv_combined_mul_32ns_64ns_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component conv_combined_mul_31ns_96ns_127_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (126 downto 0) );
    end component;


    component conv_combined_mul_31ns_32ns_63_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component conv_combined_mul_mul_16s_16s_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component conv_combined_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        H : OUT STD_LOGIC_VECTOR (31 downto 0);
        W : OUT STD_LOGIC_VECTOR (31 downto 0);
        FH : OUT STD_LOGIC_VECTOR (31 downto 0);
        FW : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwprop : OUT STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CRTL_BUS_s_axi_U : component conv_combined_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        H => H,
        W => W,
        FH => FH,
        FW => FW,
        fwprop => fwprop,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_32ns_32ns_64_2_1_U1 : component conv_combined_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    mul_32ns_64ns_96_5_1_U2 : component conv_combined_mul_32ns_64ns_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    mul_31ns_96ns_127_5_1_U3 : component conv_combined_mul_31ns_96ns_127_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 31,
        din1_WIDTH => 96,
        dout_WIDTH => 127)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_358_p0,
        din1 => grp_fu_358_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_358_p2);

    mul_31ns_32ns_63_2_1_U4 : component conv_combined_mul_31ns_32ns_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_444_p0,
        din1 => grp_fu_444_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    mul_mul_16s_16s_23_4_1_U5 : component conv_combined_mul_mul_16s_16s_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => wt,
        din1 => x,
        ce => ap_const_logic_1,
        dout => grp_fu_515_p2);

    mul_mul_16s_16s_23_4_1_U6 : component conv_combined_mul_mul_16s_16s_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x,
        din1 => grp_fu_521_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_521_p2);

    mul_mul_16s_16s_23_4_1_U7 : component conv_combined_mul_mul_16s_16s_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => wt,
        din1 => grp_fu_527_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_527_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_18_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_472_p2 = ap_const_lv1_0) and (cmp9258_reg_692 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                empty_18_reg_273 <= empty_reg_229;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                empty_18_reg_273 <= lhs_4_reg_261;
            end if; 
        end if;
    end process;

    empty_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                empty_reg_229 <= b;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                empty_reg_229 <= empty_18_reg_273;
            end if; 
        end if;
    end process;

    fh_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                fh_reg_239 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                fh_reg_239 <= add_ln31_reg_714;
            end if; 
        end if;
    end process;

    fw_1_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_472_p2 = ap_const_lv1_0) and (cmp9258_reg_692 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                fw_1_reg_250 <= ap_const_lv31_0;
            elsif (((icmp_ln32_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                fw_1_reg_250 <= add_ln32_fu_477_p2;
            end if; 
        end if;
    end process;

    indvar_flatten38_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                indvar_flatten38_reg_207 <= add_ln42_1_fu_374_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten38_reg_207 <= ap_const_lv127_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                indvar_flatten_reg_218 <= add_ln28_1_reg_706;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                indvar_flatten_reg_218 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    lhs_4_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_472_p2 = ap_const_lv1_0) and (cmp9258_reg_692 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                lhs_4_reg_261 <= empty_reg_229;
            elsif (((icmp_ln32_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                lhs_4_reg_261 <= ret_V_2_fu_500_p2(22 downto 7);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                FH_read_reg_545 <= FH;
                FW_read_reg_537 <= FW;
                H_read_reg_557 <= H;
                W_read_reg_552 <= W;
                fwprop_read_reg_533 <= (0=>fwprop, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln28_1_reg_706 <= add_ln28_1_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln31_reg_714 <= add_ln31_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bound_reg_701 <= grp_fu_444_p2;
                cmp9258_reg_692 <= cmp9258_fu_450_p2;
                mul_ln28_reg_696 <= grp_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                empty_19_reg_613 <= empty_19_fu_336_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln1118_reg_659 <= grp_fu_521_p2;
                mul_ln42_3_reg_669 <= grp_fu_358_p2;
                mul_ln42_reg_664 <= grp_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln42_1_reg_608 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln42_2_reg_628 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                outH_reg_568 <= outH_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_296 <= grp_fu_291_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fwprop_read_reg_533, ap_CS_fsm_state2, cmp5270_fu_310_p2, ap_CS_fsm_state14, cmp9258_reg_692, ap_CS_fsm_state19, ap_CS_fsm_state20, icmp_ln31_fu_472_p2, ap_CS_fsm_state21, icmp_ln32_fu_487_p2, icmp_ln42_fu_380_p2, icmp_ln28_fu_461_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (cmp5270_fu_310_p2 = ap_const_lv1_1) and (fwprop_read_reg_533 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (cmp5270_fu_310_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln42_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln28_fu_461_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln31_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif (((icmp_ln31_fu_472_p2 = ap_const_lv1_0) and (cmp9258_reg_692 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln32_fu_487_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_fu_300_p2 <= std_logic_vector(unsigned(H_read_reg_557) + unsigned(ap_const_lv32_1));
    add_ln28_1_fu_455_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_218) + unsigned(ap_const_lv63_1));
    add_ln31_fu_466_p2 <= std_logic_vector(unsigned(fh_reg_239) + unsigned(ap_const_lv32_1));
    add_ln32_fu_477_p2 <= std_logic_vector(unsigned(fw_1_reg_250) + unsigned(ap_const_lv31_1));
    add_ln42_1_fu_374_p2 <= std_logic_vector(unsigned(indvar_flatten38_reg_207) + unsigned(ap_const_lv127_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp5270_fu_310_p2 <= "1" when (signed(outH_fu_305_p2) > signed(ap_const_lv32_0)) else "0";
    cmp9258_fu_450_p2 <= "1" when (signed(FW_read_reg_537) > signed(ap_const_lv32_0)) else "0";

    dwt_o_assign_proc : process(dwt_i, ap_CS_fsm_state14, icmp_ln42_fu_380_p2, ret_V_fu_393_p2)
    begin
        if (((icmp_ln42_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            dwt_o <= ret_V_fu_393_p2(22 downto 7);
        else 
            dwt_o <= dwt_i;
        end if; 
    end process;


    dwt_o_ap_vld_assign_proc : process(ap_CS_fsm_state14, icmp_ln42_fu_380_p2)
    begin
        if (((icmp_ln42_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            dwt_o_ap_vld <= ap_const_logic_1;
        else 
            dwt_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dx_o_assign_proc : process(dx_i, ap_CS_fsm_state14, icmp_ln42_fu_380_p2, ret_V_1_fu_417_p2)
    begin
        if (((icmp_ln42_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            dx_o <= ret_V_1_fu_417_p2(22 downto 7);
        else 
            dx_o <= dx_i;
        end if; 
    end process;


    dx_o_ap_vld_assign_proc : process(ap_CS_fsm_state14, icmp_ln42_fu_380_p2)
    begin
        if (((icmp_ln42_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            dx_o_ap_vld <= ap_const_logic_1;
        else 
            dx_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_19_fu_336_p1 <= outH_reg_568(31 - 1 downto 0);
    fw_1_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fw_1_reg_250),32));
    grp_fu_286_p2 <= std_logic_vector(unsigned(W_read_reg_552) + unsigned(ap_const_lv32_1));
    grp_fu_291_p2 <= std_logic_vector(unsigned(grp_fu_286_p2) - unsigned(FW_read_reg_537));
    grp_fu_322_p0 <= grp_fu_322_p00(32 - 1 downto 0);
    grp_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FH_read_reg_545),64));
    grp_fu_322_p1 <= grp_fu_322_p10(32 - 1 downto 0);
    grp_fu_322_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FW_read_reg_537),64));
    grp_fu_346_p0 <= grp_fu_346_p00(32 - 1 downto 0);
    grp_fu_346_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_296),96));
    grp_fu_346_p1 <= grp_fu_346_p10(64 - 1 downto 0);
    grp_fu_346_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln42_1_reg_608),96));
    grp_fu_358_p0 <= grp_fu_358_p00(31 - 1 downto 0);
    grp_fu_358_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_19_reg_613),127));
    grp_fu_358_p1 <= grp_fu_358_p10(96 - 1 downto 0);
    grp_fu_358_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln42_2_reg_628),127));
    grp_fu_444_p0 <= grp_fu_444_p00(31 - 1 downto 0);
    grp_fu_444_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1116_fu_433_p1),63));
    grp_fu_444_p1 <= grp_fu_444_p10(32 - 1 downto 0);
    grp_fu_444_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_296),63));
    grp_fu_521_p1 <= sext_ln1118_1_fu_367_p1(16 - 1 downto 0);
    grp_fu_527_p1 <= sext_ln1118_1_fu_367_p1(16 - 1 downto 0);
    icmp_ln28_fu_461_p2 <= "1" when (indvar_flatten_reg_218 = bound_reg_701) else "0";
    icmp_ln31_fu_472_p2 <= "1" when (fh_reg_239 = FH_read_reg_545) else "0";
    icmp_ln32_fu_487_p2 <= "1" when (fw_1_cast_fu_483_p1 = FW_read_reg_537) else "0";
    icmp_ln42_fu_380_p2 <= "1" when (indvar_flatten38_reg_207 = mul_ln42_3_reg_669) else "0";
    lhs_1_fu_385_p3 <= (dwt_i & ap_const_lv7_0);
    lhs_3_fu_409_p3 <= (dx_i & ap_const_lv7_0);
    lhs_5_fu_492_p3 <= (lhs_4_reg_261 & ap_const_lv7_0);
    outH_fu_305_p2 <= std_logic_vector(unsigned(add_ln23_fu_300_p2) - unsigned(FH_read_reg_545));
    ret_V_1_fu_417_p2 <= std_logic_vector(unsigned(lhs_3_fu_409_p3) + unsigned(mul_ln42_reg_664));
    ret_V_2_fu_500_p2 <= std_logic_vector(unsigned(lhs_5_fu_492_p3) + unsigned(mul_ln28_reg_696));
    ret_V_fu_393_p2 <= std_logic_vector(unsigned(lhs_1_fu_385_p3) + unsigned(mul_ln1118_reg_659));
        sext_ln1118_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dy),23));

    trunc_ln1116_fu_433_p1 <= outH_reg_568(31 - 1 downto 0);

    y_assign_proc : process(b, ap_CS_fsm_state19, icmp_ln28_fu_461_p2, lhs_4_reg_261, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            y <= lhs_4_reg_261;
        elsif (((icmp_ln28_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            y <= b;
        else 
            y <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_ap_vld_assign_proc : process(ap_CS_fsm_state19, icmp_ln28_fu_461_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln28_fu_461_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
