// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_combined_conv_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.978000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2470,HLS_SYN_LUT=1766,HLS_VERSION=2020_2}" *)

module conv_combined (
        ap_clk,
        ap_rst_n,
        x,
        dx_i,
        dx_o,
        dx_o_ap_vld,
        wt,
        dwt_i,
        dwt_o,
        dwt_o_ap_vld,
        y,
        y_ap_vld,
        dy,
        b,
        db,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] x;
input  [15:0] dx_i;
output  [15:0] dx_o;
output   dx_o_ap_vld;
input  [15:0] wt;
input  [15:0] dwt_i;
output  [15:0] dwt_o;
output   dwt_o_ap_vld;
output  [15:0] y;
output   y_ap_vld;
input  [15:0] dy;
input  [15:0] b;
input  [15:0] db;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg[15:0] dx_o;
reg dx_o_ap_vld;
reg[15:0] dwt_o;
reg dwt_o_ap_vld;
reg[15:0] y;
reg y_ap_vld;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] H;
wire   [31:0] W;
wire   [31:0] FH;
wire   [31:0] FW;
wire    fwprop;
wire   [31:0] grp_fu_291_p2;
reg   [31:0] reg_296;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state16;
reg   [0:0] fwprop_read_reg_533;
reg   [31:0] FW_read_reg_537;
reg   [31:0] FH_read_reg_545;
reg   [31:0] W_read_reg_552;
reg   [31:0] H_read_reg_557;
wire    ap_CS_fsm_state2;
wire   [31:0] outH_fu_305_p2;
reg   [31:0] outH_reg_568;
wire   [0:0] cmp5270_fu_310_p2;
wire   [63:0] grp_fu_322_p2;
reg   [63:0] mul_ln42_1_reg_608;
wire   [30:0] empty_19_fu_336_p1;
reg   [30:0] empty_19_reg_613;
wire    ap_CS_fsm_state4;
wire   [95:0] grp_fu_346_p2;
reg   [95:0] mul_ln42_2_reg_628;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire  signed [22:0] sext_ln1118_1_fu_367_p1;
wire  signed [22:0] grp_fu_521_p2;
reg  signed [22:0] mul_ln1118_reg_659;
wire    ap_CS_fsm_state13;
wire  signed [22:0] grp_fu_527_p2;
reg  signed [22:0] mul_ln42_reg_664;
wire   [126:0] grp_fu_358_p2;
reg   [126:0] mul_ln42_3_reg_669;
wire   [126:0] add_ln42_1_fu_374_p2;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state17;
wire   [0:0] cmp9258_fu_450_p2;
reg   [0:0] cmp9258_reg_692;
wire    ap_CS_fsm_state18;
wire  signed [22:0] grp_fu_515_p2;
reg  signed [22:0] mul_ln28_reg_696;
wire   [62:0] grp_fu_444_p2;
reg   [62:0] bound_reg_701;
wire   [62:0] add_ln28_1_fu_455_p2;
reg   [62:0] add_ln28_1_reg_706;
wire    ap_CS_fsm_state19;
wire   [31:0] add_ln31_fu_466_p2;
reg   [31:0] add_ln31_reg_714;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln31_fu_472_p2;
wire   [30:0] add_ln32_fu_477_p2;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln32_fu_487_p2;
reg   [126:0] indvar_flatten38_reg_207;
wire   [0:0] icmp_ln42_fu_380_p2;
reg   [62:0] indvar_flatten_reg_218;
reg   [15:0] empty_reg_229;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln28_fu_461_p2;
reg   [31:0] fh_reg_239;
reg   [30:0] fw_1_reg_250;
reg   [15:0] lhs_4_reg_261;
reg   [15:0] empty_18_reg_273;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_286_p2;
wire   [31:0] add_ln23_fu_300_p2;
wire   [31:0] grp_fu_322_p0;
wire   [31:0] grp_fu_322_p1;
wire   [31:0] grp_fu_346_p0;
wire   [63:0] grp_fu_346_p1;
wire   [30:0] grp_fu_358_p0;
wire   [95:0] grp_fu_358_p1;
wire   [22:0] lhs_1_fu_385_p3;
(* use_dsp48 = "no" *) wire   [22:0] ret_V_fu_393_p2;
wire   [22:0] lhs_3_fu_409_p3;
(* use_dsp48 = "no" *) wire   [22:0] ret_V_1_fu_417_p2;
wire   [30:0] trunc_ln1116_fu_433_p1;
wire   [30:0] grp_fu_444_p0;
wire   [31:0] grp_fu_444_p1;
wire   [31:0] fw_1_cast_fu_483_p1;
wire   [22:0] lhs_5_fu_492_p3;
(* use_dsp48 = "no" *) wire   [22:0] ret_V_2_fu_500_p2;
wire  signed [15:0] grp_fu_521_p1;
wire  signed [15:0] grp_fu_527_p1;
wire    ap_CS_fsm_state15;
reg   [22:0] ap_NS_fsm;
wire   [63:0] grp_fu_322_p00;
wire   [63:0] grp_fu_322_p10;
wire   [95:0] grp_fu_346_p00;
wire   [95:0] grp_fu_346_p10;
wire   [126:0] grp_fu_358_p00;
wire   [126:0] grp_fu_358_p10;
wire   [62:0] grp_fu_444_p00;
wire   [62:0] grp_fu_444_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

conv_combined_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .H(H),
    .W(W),
    .FH(FH),
    .FW(FW),
    .fwprop(fwprop),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

conv_combined_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_322_p0),
    .din1(grp_fu_322_p1),
    .ce(1'b1),
    .dout(grp_fu_322_p2)
);

conv_combined_mul_32ns_64ns_96_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 96 ))
mul_32ns_64ns_96_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_346_p0),
    .din1(grp_fu_346_p1),
    .ce(1'b1),
    .dout(grp_fu_346_p2)
);

conv_combined_mul_31ns_96ns_127_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 127 ))
mul_31ns_96ns_127_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_358_p0),
    .din1(grp_fu_358_p1),
    .ce(1'b1),
    .dout(grp_fu_358_p2)
);

conv_combined_mul_31ns_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32ns_63_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_444_p0),
    .din1(grp_fu_444_p1),
    .ce(1'b1),
    .dout(grp_fu_444_p2)
);

conv_combined_mul_mul_16s_16s_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
mul_mul_16s_16s_23_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wt),
    .din1(x),
    .ce(1'b1),
    .dout(grp_fu_515_p2)
);

conv_combined_mul_mul_16s_16s_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
mul_mul_16s_16s_23_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x),
    .din1(grp_fu_521_p1),
    .ce(1'b1),
    .dout(grp_fu_521_p2)
);

conv_combined_mul_mul_16s_16s_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 23 ))
mul_mul_16s_16s_23_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wt),
    .din1(grp_fu_527_p1),
    .ce(1'b1),
    .dout(grp_fu_527_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_472_p2 == 1'd0) & (cmp9258_reg_692 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        empty_18_reg_273 <= empty_reg_229;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        empty_18_reg_273 <= lhs_4_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        empty_reg_229 <= b;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        empty_reg_229 <= empty_18_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        fh_reg_239 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        fh_reg_239 <= add_ln31_reg_714;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_472_p2 == 1'd0) & (cmp9258_reg_692 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        fw_1_reg_250 <= 31'd0;
    end else if (((icmp_ln32_fu_487_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        fw_1_reg_250 <= add_ln32_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        indvar_flatten38_reg_207 <= add_ln42_1_fu_374_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten38_reg_207 <= 127'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        indvar_flatten_reg_218 <= add_ln28_1_reg_706;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvar_flatten_reg_218 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_472_p2 == 1'd0) & (cmp9258_reg_692 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        lhs_4_reg_261 <= empty_reg_229;
    end else if (((icmp_ln32_fu_487_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        lhs_4_reg_261 <= {{ret_V_2_fu_500_p2[22:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        FH_read_reg_545 <= FH;
        FW_read_reg_537 <= FW;
        H_read_reg_557 <= H;
        W_read_reg_552 <= W;
        fwprop_read_reg_533 <= fwprop;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln28_1_reg_706 <= add_ln28_1_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln31_reg_714 <= add_ln31_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bound_reg_701 <= grp_fu_444_p2;
        cmp9258_reg_692 <= cmp9258_fu_450_p2;
        mul_ln28_reg_696 <= grp_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_19_reg_613 <= empty_19_fu_336_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln1118_reg_659 <= grp_fu_521_p2;
        mul_ln42_3_reg_669 <= grp_fu_358_p2;
        mul_ln42_reg_664 <= grp_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln42_1_reg_608 <= grp_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln42_2_reg_628 <= grp_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        outH_reg_568 <= outH_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_296 <= grp_fu_291_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        dwt_o = {{ret_V_fu_393_p2[22:7]}};
    end else begin
        dwt_o = dwt_i;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        dwt_o_ap_vld = 1'b1;
    end else begin
        dwt_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        dx_o = {{ret_V_1_fu_417_p2[22:7]}};
    end else begin
        dx_o = dx_i;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        dx_o_ap_vld = 1'b1;
    end else begin
        dx_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        y = lhs_4_reg_261;
    end else if (((icmp_ln28_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        y = b;
    end else begin
        y = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((icmp_ln28_fu_461_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19)))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (cmp5270_fu_310_p2 == 1'd1) & (fwprop_read_reg_533 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((1'b1 == ap_CS_fsm_state2) & (cmp5270_fu_310_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln42_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln28_fu_461_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln31_fu_472_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if (((icmp_ln31_fu_472_p2 == 1'd0) & (cmp9258_reg_692 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln32_fu_487_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_300_p2 = (H_read_reg_557 + 32'd1);

assign add_ln28_1_fu_455_p2 = (indvar_flatten_reg_218 + 63'd1);

assign add_ln31_fu_466_p2 = (fh_reg_239 + 32'd1);

assign add_ln32_fu_477_p2 = (fw_1_reg_250 + 31'd1);

assign add_ln42_1_fu_374_p2 = (indvar_flatten38_reg_207 + 127'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp5270_fu_310_p2 = (($signed(outH_fu_305_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign cmp9258_fu_450_p2 = (($signed(FW_read_reg_537) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_19_fu_336_p1 = outH_reg_568[30:0];

assign fw_1_cast_fu_483_p1 = fw_1_reg_250;

assign grp_fu_286_p2 = (W_read_reg_552 + 32'd1);

assign grp_fu_291_p2 = (grp_fu_286_p2 - FW_read_reg_537);

assign grp_fu_322_p0 = grp_fu_322_p00;

assign grp_fu_322_p00 = FH_read_reg_545;

assign grp_fu_322_p1 = grp_fu_322_p10;

assign grp_fu_322_p10 = FW_read_reg_537;

assign grp_fu_346_p0 = grp_fu_346_p00;

assign grp_fu_346_p00 = reg_296;

assign grp_fu_346_p1 = grp_fu_346_p10;

assign grp_fu_346_p10 = mul_ln42_1_reg_608;

assign grp_fu_358_p0 = grp_fu_358_p00;

assign grp_fu_358_p00 = empty_19_reg_613;

assign grp_fu_358_p1 = grp_fu_358_p10;

assign grp_fu_358_p10 = mul_ln42_2_reg_628;

assign grp_fu_444_p0 = grp_fu_444_p00;

assign grp_fu_444_p00 = trunc_ln1116_fu_433_p1;

assign grp_fu_444_p1 = grp_fu_444_p10;

assign grp_fu_444_p10 = reg_296;

assign grp_fu_521_p1 = sext_ln1118_1_fu_367_p1;

assign grp_fu_527_p1 = sext_ln1118_1_fu_367_p1;

assign icmp_ln28_fu_461_p2 = ((indvar_flatten_reg_218 == bound_reg_701) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_472_p2 = ((fh_reg_239 == FH_read_reg_545) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_487_p2 = ((fw_1_cast_fu_483_p1 == FW_read_reg_537) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_380_p2 = ((indvar_flatten38_reg_207 == mul_ln42_3_reg_669) ? 1'b1 : 1'b0);

assign lhs_1_fu_385_p3 = {{dwt_i}, {7'd0}};

assign lhs_3_fu_409_p3 = {{dx_i}, {7'd0}};

assign lhs_5_fu_492_p3 = {{lhs_4_reg_261}, {7'd0}};

assign outH_fu_305_p2 = (add_ln23_fu_300_p2 - FH_read_reg_545);

assign ret_V_1_fu_417_p2 = ($signed(lhs_3_fu_409_p3) + $signed(mul_ln42_reg_664));

assign ret_V_2_fu_500_p2 = ($signed(lhs_5_fu_492_p3) + $signed(mul_ln28_reg_696));

assign ret_V_fu_393_p2 = ($signed(lhs_1_fu_385_p3) + $signed(mul_ln1118_reg_659));

assign sext_ln1118_1_fu_367_p1 = $signed(dy);

assign trunc_ln1116_fu_433_p1 = outH_reg_568[30:0];

endmodule //conv_combined
