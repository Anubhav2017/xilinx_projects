-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity activation_bckwd is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of activation_bckwd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "activation_bckwd_activation_bckwd,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1988,HLS_SYN_LUT=2582,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_pp3_stage1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_pp3_stage2 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (63 downto 0);
    signal dx : STD_LOGIC_VECTOR (63 downto 0);
    signal dy : STD_LOGIC_VECTOR (63 downto 0);
    signal dimension : STD_LOGIC_VECTOR (31 downto 0);
    signal type_r : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond319_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_ln24_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal exitcond4_reg_1500 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_1500_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond308_reg_1149 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index20_reg_428 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_index20_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal loop_index14_reg_440 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_index14_reg_440_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_0_reg_452 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_464 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_index_reg_476 : STD_LOGIC_VECTOR (6 downto 0);
    signal type_read_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal dimension_read_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_read_reg_1104 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_read_reg_1109 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_1118 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_22_fu_523_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_22_reg_1124 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond319_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond319_reg_1129_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_25_fu_567_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_25_reg_1144 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond308_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond308_reg_1149_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_read_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln28_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal cmp41_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln46_fu_601_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln46_reg_1166 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln31_fu_604_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln31_reg_1175 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln46_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1184 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state23_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_1_0_cast8_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_0_cast8_reg_1188 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_reg_1198 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln46_1_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_2_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_2_reg_1212 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state24_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal icmp_ln46_2_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_2_reg_1217 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_4_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_4_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln46_3_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_3_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_6_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_6_reg_1240 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state25_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal icmp_ln46_4_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_4_reg_1245 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_4_fu_701_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln46_4_reg_1254 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln31_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state28_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_1259_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_cast7_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_cast7_reg_1263 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_cast7_reg_1263_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_1278 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_1278_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_reg_1283_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_t_load_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage1 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state29_pp3_stage1_iter0 : BOOLEAN;
    signal ap_block_state32_pp3_stage1_iter1 : BOOLEAN;
    signal ap_block_pp3_stage1_11001 : BOOLEAN;
    signal dy_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_t_load_5_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_t_load_1_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_t_load_6_reg_1314 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_2_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_reg_1319 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_reg_1319_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_2_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_1324 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_1324_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_4_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_4_reg_1338 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_4_reg_1338_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_3_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_reg_1343 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_reg_1343_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1357 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage2 : signal is "none";
    signal ap_block_state30_pp3_stage2_iter0 : BOOLEAN;
    signal ap_block_state33_pp3_stage2_iter1 : BOOLEAN;
    signal ap_block_pp3_stage2_11001 : BOOLEAN;
    signal icmp_ln33_1_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_reg_1362 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_2_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_2_reg_1367 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_3_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_3_reg_1372 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_t_load_2_reg_1377 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_t_load_7_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_t_load_3_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_t_load_8_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_6_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_6_reg_1399 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_6_reg_1399_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_4_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_reg_1404_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_4_fu_864_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln31_4_reg_1418 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln33_fu_880_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_1_fu_897_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_1_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln33_4_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_4_reg_1433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_5_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_5_reg_1438 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_6_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_6_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_7_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_7_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_t_load_4_reg_1453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal dy_t_load_9_reg_1459 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_2_fu_972_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_2_reg_1464 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_3_fu_989_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_3_reg_1469 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln33_8_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_8_reg_1474 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_9_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_9_reg_1479 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_4_fu_1035_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln33_4_reg_1484 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_31_fu_1062_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state36_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state38_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state38_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal exitcond4_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dx_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_t_load_reg_1509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_predicate_tran25to27_state25 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state25 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage2_subdone : BOOLEAN;
    signal ap_predicate_tran33to35_state30 : BOOLEAN;
    signal ap_condition_pp3_flush_enable : STD_LOGIC;
    signal ap_condition_pp3_exit_iter1_state33 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state36 : STD_LOGIC;
    signal x_t_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_t_ce0 : STD_LOGIC;
    signal x_t_we0 : STD_LOGIC;
    signal x_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_t_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_t_ce1 : STD_LOGIC;
    signal dx_t_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dx_t_ce0 : STD_LOGIC;
    signal dx_t_we0 : STD_LOGIC;
    signal dx_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_t_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal dx_t_ce1 : STD_LOGIC;
    signal dx_t_we1 : STD_LOGIC;
    signal dx_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_t_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dy_t_ce0 : STD_LOGIC;
    signal dy_t_we0 : STD_LOGIC;
    signal dy_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_t_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal dy_t_ce1 : STD_LOGIC;
    signal ap_phi_mux_loop_index20_phi_fu_432_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_loop_index14_phi_fu_444_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_i_1_0_phi_fu_456_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_468_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal loop_index20_cast5_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index14_cast6_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal ap_block_pp3_stage1 : BOOLEAN;
    signal ap_block_pp3_stage2 : BOOLEAN;
    signal loop_index_cast_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast1_cast_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast3_cast_fu_1051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state43 : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal grp_fu_487_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_503_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal loop_index20_cast18_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_fu_547_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal loop_index14_cast22_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_0_cast_fu_607_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln46_fu_621_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_1_fu_632_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln46_1_fu_641_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_3_fu_652_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln46_2_fu_661_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_5_fu_672_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln46_3_fu_681_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln46_7_fu_692_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_cast_fu_707_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln31_fu_722_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_1_fu_734_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln31_1_fu_743_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_3_fu_755_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln31_2_fu_764_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_5_fu_776_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bitcast_ln33_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_788_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_fu_798_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln33_1_fu_814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_817_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_1_fu_827_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln31_3_fu_843_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_7_fu_855_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln33_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln33_2_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_907_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_2_fu_917_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln33_3_fu_933_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_936_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_3_fu_946_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln33_2_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_2_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_3_fu_979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_3_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln33_4_fu_996_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_999_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln33_4_fu_1009_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln33_4_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_4_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast3_fu_1042_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal loop_index_cast1_fu_1068_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage2_00001 : BOOLEAN;
    signal ap_block_pp3_stage0_00001 : BOOLEAN;
    signal ap_block_pp3_stage1_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_block_pp3_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component activation_bckwd_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component activation_bckwd_x_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component activation_bckwd_dx_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component activation_bckwd_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (63 downto 0);
        dx : OUT STD_LOGIC_VECTOR (63 downto 0);
        dy : OUT STD_LOGIC_VECTOR (63 downto 0);
        dimension : OUT STD_LOGIC_VECTOR (31 downto 0);
        type_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component activation_bckwd_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    CTRL_s_axi_U : component activation_bckwd_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        x => x,
        dx => dx,
        dy => dy,
        dimension => dimension,
        type_r => type_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component activation_bckwd_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => dimension_read_reg_1091,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => p_cast3_cast_fu_1051_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => dimension_read_reg_1091,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    x_t_U : component activation_bckwd_x_t
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_t_address0,
        ce0 => x_t_ce0,
        we0 => x_t_we0,
        d0 => x_t_d0,
        q0 => x_t_q0,
        address1 => x_t_address1,
        ce1 => x_t_ce1,
        q1 => x_t_q1);

    dx_t_U : component activation_bckwd_dx_t
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dx_t_address0,
        ce0 => dx_t_ce0,
        we0 => dx_t_we0,
        d0 => dx_t_d0,
        q0 => dx_t_q0,
        address1 => dx_t_address1,
        ce1 => dx_t_ce1,
        we1 => dx_t_we1,
        d1 => dx_t_d1);

    dy_t_U : component activation_bckwd_x_t
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dy_t_address0,
        ce0 => dy_t_ce0,
        we0 => dy_t_we0,
        d0 => dy_t_d0,
        q0 => dy_t_q0,
        address1 => dy_t_address1,
        ce1 => dy_t_ce1,
        q1 => dy_t_q1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U1 : component activation_bckwd_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_487_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_487_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U2 : component activation_bckwd_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_492_p0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_492_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state25);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp3_flush_enable)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter1_state33) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone)) or ((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter1_state33) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state36) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln24_reg_1114 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state35_io))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state36)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state36);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln24_reg_1114 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state35_io))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln31_4_reg_1404 = ap_const_lv1_0) and (icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_0_reg_464 <= add_ln31_4_reg_1418;
            elsif (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_0_reg_464 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_1_0_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_1_0_reg_452 <= ap_const_lv7_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln46_4_reg_1245 = ap_const_lv1_0) and (icmp_ln46_3_reg_1231 = ap_const_lv1_0) and (icmp_ln46_2_reg_1217 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_1_0_reg_452 <= add_ln46_4_reg_1254;
            end if; 
        end if;
    end process;

    loop_index14_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                loop_index14_reg_440 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond308_reg_1149 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                loop_index14_reg_440 <= empty_25_reg_1144;
            end if; 
        end if;
    end process;

    loop_index20_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_index20_reg_428 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond319_reg_1129 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                loop_index20_reg_428 <= empty_22_reg_1124;
            end if; 
        end if;
    end process;

    loop_index_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln24_reg_1114 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state35_io))) then 
                loop_index_reg_476 <= ap_const_lv7_0;
            elsif (((exitcond4_fu_1072_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                loop_index_reg_476 <= empty_31_fu_1062_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_4_fu_859_p2 = ap_const_lv1_0) and (icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                add_ln31_4_reg_1418 <= add_ln31_4_fu_864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln46_4_fu_696_p2 = ap_const_lv1_0) and (icmp_ln46_3_reg_1231 = ap_const_lv1_0) and (icmp_ln46_2_reg_1217 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                add_ln46_4_reg_1254 <= add_ln46_4_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dimension_read_reg_1091 <= dimension;
                dx_read_reg_1104 <= dx;
                icmp_ln24_reg_1114 <= icmp_ln24_fu_497_p2;
                type_read_reg_1086 <= type_r;
                x_read_reg_1109 <= x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond4_reg_1500 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                dx_t_load_reg_1509 <= dx_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                dy_t_load_5_reg_1303 <= dy_t_q1;
                x_t_load_reg_1297 <= x_t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                dy_t_load_6_reg_1314 <= dy_t_q0;
                x_t_load_1_reg_1308 <= x_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                dy_t_load_7_reg_1383 <= dy_t_q1;
                x_t_load_2_reg_1377 <= x_t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                dy_t_load_8_reg_1394 <= dy_t_q0;
                x_t_load_3_reg_1388 <= x_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln31_4_reg_1404 = ap_const_lv1_0) and (icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                dy_t_load_9_reg_1459 <= dy_t_q0;
                x_t_load_4_reg_1453 <= x_t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_22_reg_1124 <= empty_22_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                empty_25_reg_1144 <= empty_25_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                exitcond308_reg_1149 <= exitcond308_fu_577_p2;
                exitcond308_reg_1149_pp1_iter1_reg <= exitcond308_reg_1149;
                loop_index14_reg_440_pp1_iter1_reg <= loop_index14_reg_440;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond319_reg_1129 <= exitcond319_fu_533_p2;
                exitcond319_reg_1129_pp0_iter1_reg <= exitcond319_reg_1129;
                loop_index20_reg_428_pp0_iter1_reg <= loop_index20_reg_428;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                exitcond4_reg_1500 <= exitcond4_fu_1072_p2;
                exitcond4_reg_1500_pp4_iter1_reg <= exitcond4_reg_1500;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond308_reg_1149 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                gmem_addr_1_read_reg_1153 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond319_reg_1129 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_1133 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_reg_1118 <= p_cast_cast_fu_513_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_711_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    i_0_cast7_reg_1263(6 downto 0) <= i_0_cast7_fu_716_p1(6 downto 0);
                icmp_ln31_1_reg_1283 <= icmp_ln31_1_fu_738_p2;
                    zext_ln31_reg_1278(6 downto 0) <= zext_ln31_fu_728_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    i_0_cast7_reg_1263_pp3_iter1_reg(6 downto 0) <= i_0_cast7_reg_1263(6 downto 0);
                icmp_ln31_1_reg_1283_pp3_iter1_reg <= icmp_ln31_1_reg_1283;
                icmp_ln31_reg_1259 <= icmp_ln31_fu_711_p2;
                icmp_ln31_reg_1259_pp3_iter1_reg <= icmp_ln31_reg_1259;
                    zext_ln31_reg_1278_pp3_iter1_reg(6 downto 0) <= zext_ln31_reg_1278(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_611_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    i_1_0_cast8_reg_1188(6 downto 0) <= i_1_0_cast8_fu_616_p1(6 downto 0);
                icmp_ln46_1_reg_1203 <= icmp_ln46_1_fu_636_p2;
                    zext_ln46_reg_1198(6 downto 0) <= zext_ln46_fu_627_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                icmp_ln31_2_reg_1324 <= icmp_ln31_2_fu_759_p2;
                    zext_ln31_2_reg_1319(6 downto 0) <= zext_ln31_2_fu_749_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                icmp_ln31_2_reg_1324_pp3_iter1_reg <= icmp_ln31_2_reg_1324;
                icmp_ln31_3_reg_1343_pp3_iter1_reg <= icmp_ln31_3_reg_1343;
                    zext_ln31_2_reg_1319_pp3_iter1_reg(6 downto 0) <= zext_ln31_2_reg_1319(6 downto 0);
                    zext_ln31_4_reg_1338_pp3_iter1_reg(6 downto 0) <= zext_ln31_4_reg_1338(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_2_fu_759_p2 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                icmp_ln31_3_reg_1343 <= icmp_ln31_3_fu_780_p2;
                    zext_ln31_4_reg_1338(6 downto 0) <= zext_ln31_4_fu_770_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                icmp_ln31_4_reg_1404 <= icmp_ln31_4_fu_859_p2;
                    zext_ln31_6_reg_1399(6 downto 0) <= zext_ln31_6_fu_849_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                icmp_ln31_4_reg_1404_pp3_iter1_reg <= icmp_ln31_4_reg_1404;
                    zext_ln31_6_reg_1399_pp3_iter1_reg(6 downto 0) <= zext_ln31_6_reg_1399(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                icmp_ln33_1_reg_1362 <= icmp_ln33_1_fu_808_p2;
                icmp_ln33_reg_1357 <= icmp_ln33_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                icmp_ln33_2_reg_1367 <= icmp_ln33_2_fu_831_p2;
                icmp_ln33_3_reg_1372 <= icmp_ln33_3_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln33_4_reg_1433 <= icmp_ln33_4_fu_921_p2;
                icmp_ln33_5_reg_1438 <= icmp_ln33_5_fu_927_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln33_6_reg_1443 <= icmp_ln33_6_fu_950_p2;
                icmp_ln33_7_reg_1448 <= icmp_ln33_7_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_4_reg_1404 = ap_const_lv1_0) and (icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                icmp_ln33_8_reg_1474 <= icmp_ln33_8_fu_1013_p2;
                icmp_ln33_9_reg_1479 <= icmp_ln33_9_fu_1019_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln46_2_reg_1217 <= icmp_ln46_2_fu_656_p2;
                    zext_ln46_2_reg_1212(6 downto 0) <= zext_ln46_2_fu_647_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_2_fu_656_p2 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                icmp_ln46_3_reg_1231 <= icmp_ln46_3_fu_676_p2;
                    zext_ln46_4_reg_1226(6 downto 0) <= zext_ln46_4_fu_667_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_3_reg_1231 = ap_const_lv1_0) and (icmp_ln46_2_reg_1217 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001))) then
                icmp_ln46_4_reg_1245 <= icmp_ln46_4_fu_696_p2;
                    zext_ln46_6_reg_1240(6 downto 0) <= zext_ln46_6_fu_687_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln46_reg_1184 <= icmp_ln46_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln33_1_reg_1428 <= select_ln33_1_fu_897_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                select_ln33_2_reg_1464 <= select_ln33_2_fu_972_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001))) then
                select_ln33_3_reg_1469 <= select_ln33_3_fu_989_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_4_reg_1404 = ap_const_lv1_0) and (icmp_ln31_3_reg_1343_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_2_reg_1324_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001))) then
                select_ln33_4_reg_1484 <= select_ln33_4_fu_1035_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln33_reg_1423 <= select_ln33_fu_880_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                trunc_ln31_reg_1175 <= trunc_ln31_fu_604_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                trunc_ln46_reg_1166 <= trunc_ln46_fu_601_p1;
            end if;
        end if;
    end process;
    i_1_0_cast8_reg_1188(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1198(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln46_2_reg_1212(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln46_4_reg_1226(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln46_6_reg_1240(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_0_cast7_reg_1263(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_0_cast7_reg_1263_pp3_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_1278(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_1278_pp3_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_2_reg_1319(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_2_reg_1319_pp3_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_4_reg_1338(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_4_reg_1338_pp3_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_6_reg_1399(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln31_6_reg_1399_pp3_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state35, icmp_ln24_reg_1114, ap_enable_reg_pp4_iter2, ap_CS_fsm_state43, ap_enable_reg_pp1_iter1, ap_CS_fsm_state12, gmem_ARREADY, gmem_BVALID, icmp_ln24_fu_497_p2, ap_enable_reg_pp0_iter0, exitcond319_fu_533_p2, ap_enable_reg_pp1_iter0, exitcond308_fu_577_p2, icmp_ln28_fu_591_p2, ap_CS_fsm_state22, cmp41_fu_596_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, exitcond4_fu_1072_p2, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage2_subdone, ap_predicate_tran25to27_state25, ap_block_pp3_stage2_subdone, ap_block_state35_io, ap_block_pp4_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp3_stage0_subdone, ap_block_pp3_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln24_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln24_fu_497_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond319_fu_533_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond319_fu_533_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((exitcond308_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((exitcond308_fu_577_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                if (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((cmp41_fu_596_p2 = ap_const_lv1_1) and (icmp_ln28_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((not(((ap_predicate_tran25to27_state25 = ap_const_boolean_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_predicate_tran25to27_state25 = ap_const_boolean_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_pp3_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_pp3_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp3_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage1;
                end if;
            when ap_ST_fsm_pp3_stage2 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage2;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln24_reg_1114 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state35_io))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln24_reg_1114 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state35_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (exitcond4_fu_1072_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (exitcond4_fu_1072_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln24_reg_1114 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_1_fu_743_p2 <= std_logic_vector(unsigned(i_0_reg_464) + unsigned(ap_const_lv7_2));
    add_ln31_2_fu_764_p2 <= std_logic_vector(unsigned(i_0_reg_464) + unsigned(ap_const_lv7_3));
    add_ln31_3_fu_843_p2 <= std_logic_vector(unsigned(i_0_reg_464) + unsigned(ap_const_lv7_4));
    add_ln31_4_fu_864_p2 <= std_logic_vector(unsigned(i_0_reg_464) + unsigned(ap_const_lv7_5));
    add_ln31_fu_722_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_468_p4) + unsigned(ap_const_lv7_1));
    add_ln46_1_fu_641_p2 <= std_logic_vector(unsigned(i_1_0_reg_452) + unsigned(ap_const_lv7_2));
    add_ln46_2_fu_661_p2 <= std_logic_vector(unsigned(i_1_0_reg_452) + unsigned(ap_const_lv7_3));
    add_ln46_3_fu_681_p2 <= std_logic_vector(unsigned(i_1_0_reg_452) + unsigned(ap_const_lv7_4));
    add_ln46_4_fu_701_p2 <= std_logic_vector(unsigned(i_1_0_reg_452) + unsigned(ap_const_lv7_5));
    add_ln46_fu_621_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_0_phi_fu_456_p4) + unsigned(ap_const_lv7_1));
    and_ln33_1_fu_891_p2 <= (or_ln33_1_fu_887_p2 and grp_fu_492_p2);
    and_ln33_2_fu_966_p2 <= (or_ln33_2_fu_962_p2 and grp_fu_487_p2);
    and_ln33_3_fu_983_p2 <= (or_ln33_3_fu_979_p2 and grp_fu_492_p2);
    and_ln33_4_fu_1029_p2 <= (or_ln33_4_fu_1025_p2 and grp_fu_487_p2);
    and_ln33_fu_874_p2 <= (or_ln33_fu_870_p2 and grp_fu_487_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(19);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(20);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp3_stage1 <= ap_CS_fsm(23);
    ap_CS_fsm_pp3_stage2 <= ap_CS_fsm(24);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state35 <= ap_CS_fsm(25);
    ap_CS_fsm_state43 <= ap_CS_fsm(31);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond319_reg_1129, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond319_reg_1129 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond319_reg_1129, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (exitcond319_reg_1129 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond308_reg_1149, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond308_reg_1149 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond308_reg_1149, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (exitcond308_reg_1149 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state38_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state38_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state38_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond319_reg_1129, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond319_reg_1129 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(exitcond308_reg_1149, gmem_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond308_reg_1149 = ap_const_lv1_0));
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(icmp_ln24_reg_1114, gmem_AWREADY)
    begin
                ap_block_state35_io <= ((gmem_AWREADY = ap_const_logic_0) and (icmp_ln24_reg_1114 = ap_const_lv1_1));
    end process;

        ap_block_state36_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_io_assign_proc : process(exitcond4_reg_1500_pp4_iter1_reg, gmem_WREADY)
    begin
                ap_block_state38_io <= ((gmem_WREADY = ap_const_logic_0) and (exitcond4_reg_1500_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state38_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_assign_proc : process(icmp_ln24_reg_1114, gmem_BVALID)
    begin
                ap_block_state43 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln24_reg_1114 = ap_const_lv1_1));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond319_fu_533_p2)
    begin
        if ((exitcond319_fu_533_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(exitcond308_fu_577_p2)
    begin
        if ((exitcond308_fu_577_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state25_assign_proc : process(ap_predicate_tran25to27_state25)
    begin
        if ((ap_predicate_tran25to27_state25 = ap_const_boolean_1)) then 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter1_state33_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_condition_pp3_exit_iter1_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter1_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_flush_enable_assign_proc : process(ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_subdone, ap_predicate_tran33to35_state30)
    begin
        if (((ap_predicate_tran33to35_state30 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_subdone))) then 
            ap_condition_pp3_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp3_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state36_assign_proc : process(exitcond4_fu_1072_p2)
    begin
        if ((exitcond4_fu_1072_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln24_reg_1114, ap_CS_fsm_state43, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln24_reg_1114 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_468_p4_assign_proc : process(i_0_reg_464, icmp_ln31_reg_1259, ap_CS_fsm_pp3_stage0, icmp_ln31_1_reg_1283, icmp_ln31_2_reg_1324, icmp_ln31_3_reg_1343, icmp_ln31_4_reg_1404, add_ln31_4_reg_1418, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln31_4_reg_1404 = ap_const_lv1_0) and (icmp_ln31_3_reg_1343 = ap_const_lv1_0) and (icmp_ln31_2_reg_1324 = ap_const_lv1_0) and (icmp_ln31_1_reg_1283 = ap_const_lv1_0) and (icmp_ln31_reg_1259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_i_0_phi_fu_468_p4 <= add_ln31_4_reg_1418;
        else 
            ap_phi_mux_i_0_phi_fu_468_p4 <= i_0_reg_464;
        end if; 
    end process;


    ap_phi_mux_i_1_0_phi_fu_456_p4_assign_proc : process(i_1_0_reg_452, icmp_ln46_reg_1184, ap_CS_fsm_pp2_stage0, icmp_ln46_1_reg_1203, icmp_ln46_2_reg_1217, icmp_ln46_3_reg_1231, icmp_ln46_4_reg_1245, add_ln46_4_reg_1254, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln46_4_reg_1245 = ap_const_lv1_0) and (icmp_ln46_3_reg_1231 = ap_const_lv1_0) and (icmp_ln46_2_reg_1217 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i_1_0_phi_fu_456_p4 <= add_ln46_4_reg_1254;
        else 
            ap_phi_mux_i_1_0_phi_fu_456_p4 <= i_1_0_reg_452;
        end if; 
    end process;


    ap_phi_mux_loop_index14_phi_fu_444_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond308_reg_1149, loop_index14_reg_440, empty_25_reg_1144)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond308_reg_1149 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_loop_index14_phi_fu_444_p4 <= empty_25_reg_1144;
        else 
            ap_phi_mux_loop_index14_phi_fu_444_p4 <= loop_index14_reg_440;
        end if; 
    end process;


    ap_phi_mux_loop_index20_phi_fu_432_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond319_reg_1129, loop_index20_reg_428, empty_22_reg_1124)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond319_reg_1129 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_loop_index20_phi_fu_432_p4 <= empty_22_reg_1124;
        else 
            ap_phi_mux_loop_index20_phi_fu_432_p4 <= loop_index20_reg_428;
        end if; 
    end process;


    ap_predicate_tran25to27_state25_assign_proc : process(icmp_ln46_reg_1184, icmp_ln46_1_reg_1203, icmp_ln46_2_reg_1217, icmp_ln46_3_reg_1231, icmp_ln46_4_fu_696_p2)
    begin
                ap_predicate_tran25to27_state25 <= ((icmp_ln46_reg_1184 = ap_const_lv1_1) or ((icmp_ln46_1_reg_1203 = ap_const_lv1_1) or ((icmp_ln46_2_reg_1217 = ap_const_lv1_1) or ((icmp_ln46_4_fu_696_p2 = ap_const_lv1_1) or (icmp_ln46_3_reg_1231 = ap_const_lv1_1)))));
    end process;


    ap_predicate_tran33to35_state30_assign_proc : process(icmp_ln31_reg_1259, icmp_ln31_1_reg_1283, icmp_ln31_2_reg_1324, icmp_ln31_3_reg_1343, icmp_ln31_4_fu_859_p2)
    begin
                ap_predicate_tran33to35_state30 <= ((icmp_ln31_reg_1259 = ap_const_lv1_1) or ((icmp_ln31_1_reg_1283 = ap_const_lv1_1) or ((icmp_ln31_2_reg_1324 = ap_const_lv1_1) or ((icmp_ln31_4_fu_859_p2 = ap_const_lv1_1) or (icmp_ln31_3_reg_1343 = ap_const_lv1_1)))));
    end process;


    ap_ready_assign_proc : process(icmp_ln24_reg_1114, ap_CS_fsm_state43, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln24_reg_1114 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln33_1_fu_814_p1 <= x_t_load_1_reg_1308;
    bitcast_ln33_2_fu_904_p1 <= x_t_load_2_reg_1377;
    bitcast_ln33_3_fu_933_p1 <= x_t_load_3_reg_1388;
    bitcast_ln33_4_fu_996_p1 <= x_t_load_4_reg_1453;
    bitcast_ln33_fu_785_p1 <= x_t_load_reg_1297;
    cmp41_fu_596_p2 <= "1" when (signed(dimension_read_reg_1091) > signed(ap_const_lv32_0)) else "0";

    dx_t_address0_assign_proc : process(ap_block_pp4_stage0, ap_CS_fsm_pp2_stage0, zext_ln46_reg_1198, zext_ln46_2_reg_1212, ap_CS_fsm_pp2_stage1, zext_ln46_6_reg_1240, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, zext_ln31_reg_1278_pp3_iter1_reg, ap_CS_fsm_pp3_stage1, zext_ln31_4_reg_1338_pp3_iter1_reg, ap_CS_fsm_pp3_stage2, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp3_stage1, ap_block_pp3_stage2, loop_index_cast_fu_1077_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            dx_t_address0 <= loop_index_cast_fu_1077_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            dx_t_address0 <= zext_ln31_4_reg_1338_pp3_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            dx_t_address0 <= zext_ln31_reg_1278_pp3_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            dx_t_address0 <= zext_ln46_6_reg_1240(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            dx_t_address0 <= zext_ln46_2_reg_1212(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            dx_t_address0 <= zext_ln46_reg_1198(7 - 1 downto 0);
        else 
            dx_t_address0 <= "XXXXXXX";
        end if; 
    end process;


    dx_t_address1_assign_proc : process(i_1_0_cast8_reg_1188, ap_CS_fsm_pp2_stage1, zext_ln46_4_reg_1226, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, i_0_cast7_reg_1263_pp3_iter1_reg, ap_CS_fsm_pp3_stage1, zext_ln31_2_reg_1319_pp3_iter1_reg, ap_CS_fsm_pp3_stage2, zext_ln31_6_reg_1399_pp3_iter1_reg, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp3_stage1, ap_block_pp3_stage2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            dx_t_address1 <= zext_ln31_6_reg_1399_pp3_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            dx_t_address1 <= zext_ln31_2_reg_1319_pp3_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            dx_t_address1 <= i_0_cast7_reg_1263_pp3_iter1_reg(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            dx_t_address1 <= zext_ln46_4_reg_1226(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            dx_t_address1 <= i_1_0_cast8_reg_1188(7 - 1 downto 0);
        else 
            dx_t_address1 <= "XXXXXXX";
        end if; 
    end process;


    dx_t_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then 
            dx_t_ce0 <= ap_const_logic_1;
        else 
            dx_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dx_t_ce1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then 
            dx_t_ce1 <= ap_const_logic_1;
        else 
            dx_t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dx_t_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage1, dy_t_q1, dy_t_q0, ap_CS_fsm_pp3_stage2, select_ln33_1_reg_1428, ap_enable_reg_pp3_iter1, select_ln33_3_reg_1469, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp3_stage1, ap_block_pp3_stage2)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            dx_t_d0 <= select_ln33_3_reg_1469;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            dx_t_d0 <= select_ln33_1_reg_1428;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            dx_t_d0 <= dy_t_q1;
        elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1)))) then 
            dx_t_d0 <= dy_t_q0;
        else 
            dx_t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dx_t_d1_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp3_stage1, dy_t_q1, dy_t_q0, ap_CS_fsm_pp3_stage2, select_ln33_reg_1423, ap_enable_reg_pp3_iter1, select_ln33_2_reg_1464, select_ln33_4_reg_1484, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp3_stage1, ap_block_pp3_stage2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            dx_t_d1 <= select_ln33_4_reg_1484;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            dx_t_d1 <= select_ln33_2_reg_1464;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            dx_t_d1 <= select_ln33_reg_1423;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            dx_t_d1 <= dy_t_q0;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            dx_t_d1 <= dy_t_q1;
        else 
            dx_t_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dx_t_we0_assign_proc : process(icmp_ln46_reg_1184, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln46_1_reg_1203, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, icmp_ln46_2_reg_1217, icmp_ln46_3_reg_1231, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, icmp_ln46_4_reg_1245, ap_enable_reg_pp2_iter0, icmp_ln31_reg_1259_pp3_iter1_reg, icmp_ln31_1_reg_1283_pp3_iter1_reg, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, icmp_ln31_2_reg_1324_pp3_iter1_reg, icmp_ln31_3_reg_1343_pp3_iter1_reg, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln46_4_reg_1245 = ap_const_lv1_0) and (icmp_ln46_3_reg_1231 = ap_const_lv1_0) and (icmp_ln46_2_reg_1217 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln31_3_reg_1343_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_2_reg_1324_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln46_2_reg_1217 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then 
            dx_t_we0 <= ap_const_logic_1;
        else 
            dx_t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dx_t_we1_assign_proc : process(icmp_ln46_reg_1184, icmp_ln46_1_reg_1203, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, icmp_ln46_2_reg_1217, icmp_ln46_3_reg_1231, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, icmp_ln31_reg_1259_pp3_iter1_reg, icmp_ln31_1_reg_1283_pp3_iter1_reg, ap_CS_fsm_pp3_stage1, ap_block_pp3_stage1_11001, icmp_ln31_2_reg_1324_pp3_iter1_reg, icmp_ln31_3_reg_1343_pp3_iter1_reg, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, icmp_ln31_4_reg_1404_pp3_iter1_reg, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln31_4_reg_1404_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_3_reg_1343_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_2_reg_1324_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln31_2_reg_1324_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_1_reg_1283_pp3_iter1_reg = ap_const_lv1_0) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln31_reg_1259_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln46_3_reg_1231 = ap_const_lv1_0) and (icmp_ln46_2_reg_1217 = ap_const_lv1_0) and (icmp_ln46_1_reg_1203 = ap_const_lv1_0) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln46_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)))) then 
            dx_t_we1 <= ap_const_logic_1;
        else 
            dx_t_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dy_t_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, zext_ln46_fu_627_p1, ap_CS_fsm_pp2_stage1, zext_ln46_4_fu_667_p1, zext_ln46_6_fu_687_p1, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, zext_ln31_fu_728_p1, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, zext_ln31_4_fu_770_p1, ap_CS_fsm_pp3_stage2, zext_ln31_6_fu_849_p1, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, ap_block_pp3_stage0, loop_index20_cast5_fu_538_p1, ap_block_pp2_stage1, ap_block_pp2_stage2, ap_block_pp3_stage1, ap_block_pp3_stage2)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            dy_t_address0 <= zext_ln31_6_fu_849_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            dy_t_address0 <= zext_ln31_4_fu_770_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            dy_t_address0 <= zext_ln31_fu_728_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2))) then 
            dy_t_address0 <= zext_ln46_6_fu_687_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            dy_t_address0 <= zext_ln46_4_fu_667_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            dy_t_address0 <= zext_ln46_fu_627_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dy_t_address0 <= loop_index20_cast5_fu_538_p1(7 - 1 downto 0);
        else 
            dy_t_address0 <= "XXXXXXX";
        end if; 
    end process;


    dy_t_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, i_1_0_cast8_fu_616_p1, zext_ln46_2_fu_647_p1, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, i_0_cast7_fu_716_p1, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, zext_ln31_2_fu_749_p1, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp2_stage1, ap_block_pp3_stage1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            dy_t_address1 <= zext_ln31_2_fu_749_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            dy_t_address1 <= i_0_cast7_fu_716_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1))) then 
            dy_t_address1 <= zext_ln46_2_fu_647_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            dy_t_address1 <= i_1_0_cast8_fu_616_p1(7 - 1 downto 0);
        else 
            dy_t_address1 <= "XXXXXXX";
        end if; 
    end process;


    dy_t_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            dy_t_ce0 <= ap_const_logic_1;
        else 
            dy_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dy_t_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_11001)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            dy_t_ce1 <= ap_const_logic_1;
        else 
            dy_t_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dy_t_d0 <= gmem_addr_read_reg_1133;

    dy_t_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond319_reg_1129_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond319_reg_1129_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dy_t_we0 <= ap_const_logic_1;
        else 
            dy_t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_22_fu_523_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index20_phi_fu_432_p4) + unsigned(ap_const_lv7_1));
    empty_25_fu_567_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index14_phi_fu_444_p4) + unsigned(ap_const_lv7_1));
    empty_31_fu_1062_p2 <= std_logic_vector(unsigned(loop_index_reg_476) + unsigned(ap_const_lv7_1));
    exitcond308_fu_577_p2 <= "1" when (loop_index14_cast22_fu_573_p1 = dimension_read_reg_1091) else "0";
    exitcond319_fu_533_p2 <= "1" when (loop_index20_cast18_fu_529_p1 = dimension_read_reg_1091) else "0";
    exitcond4_fu_1072_p2 <= "1" when (loop_index_cast1_fu_1068_p1 = dimension_read_reg_1091) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY, gmem_addr_reg_1118, p_cast1_cast_fu_556_p1)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARADDR <= p_cast1_cast_fu_556_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARADDR <= gmem_addr_reg_1118;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state35, icmp_ln24_reg_1114, ap_block_state35_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln24_reg_1114 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state35_io))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(icmp_ln24_reg_1114, ap_CS_fsm_state43, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln24_reg_1114 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln24_reg_1114 = ap_const_lv1_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond319_reg_1129, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond308_reg_1149, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond308_reg_1149 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond319_reg_1129 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_WDATA <= dx_t_load_reg_1509;

    gmem_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, exitcond4_reg_1500_pp4_iter1_reg, ap_block_pp4_stage0_11001)
    begin
        if (((exitcond4_reg_1500_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state35, icmp_ln24_reg_1114)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln24_reg_1114 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, icmp_ln24_reg_1114, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln24_reg_1114 = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond319_reg_1129, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond308_reg_1149)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond308_reg_1149 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond319_reg_1129 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, exitcond4_reg_1500_pp4_iter1_reg)
    begin
        if (((exitcond4_reg_1500_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_487_p0_assign_proc : process(ap_CS_fsm_pp3_stage0, x_t_load_reg_1297, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp3_stage2, x_t_load_2_reg_1377, x_t_load_4_reg_1453, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp3_stage1, ap_block_pp3_stage2)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            grp_fu_487_p0 <= x_t_load_4_reg_1453;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_487_p0 <= x_t_load_2_reg_1377;
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            grp_fu_487_p0 <= x_t_load_reg_1297;
        else 
            grp_fu_487_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_492_p0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, x_t_load_1_reg_1308, ap_CS_fsm_pp3_stage2, x_t_load_3_reg_1388, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, ap_block_pp3_stage2)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            grp_fu_492_p0 <= x_t_load_3_reg_1388;
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            grp_fu_492_p0 <= x_t_load_1_reg_1308;
        else 
            grp_fu_492_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_0_cast7_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_468_p4),64));
    i_0_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_468_p4),31));
    i_1_0_cast8_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_0_phi_fu_456_p4),64));
    i_1_0_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_0_phi_fu_456_p4),31));
    icmp_ln24_fu_497_p2 <= "0" when (dimension = ap_const_lv32_0) else "1";
    icmp_ln28_fu_591_p2 <= "1" when (type_read_reg_1086 = ap_const_lv32_0) else "0";
    icmp_ln31_1_fu_738_p2 <= "1" when (zext_ln31_1_fu_734_p1 = trunc_ln31_reg_1175) else "0";
    icmp_ln31_2_fu_759_p2 <= "1" when (zext_ln31_3_fu_755_p1 = trunc_ln31_reg_1175) else "0";
    icmp_ln31_3_fu_780_p2 <= "1" when (zext_ln31_5_fu_776_p1 = trunc_ln31_reg_1175) else "0";
    icmp_ln31_4_fu_859_p2 <= "1" when (zext_ln31_7_fu_855_p1 = trunc_ln31_reg_1175) else "0";
    icmp_ln31_fu_711_p2 <= "1" when (i_0_cast_fu_707_p1 = trunc_ln31_reg_1175) else "0";
    icmp_ln33_1_fu_808_p2 <= "1" when (trunc_ln33_fu_798_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_2_fu_831_p2 <= "0" when (tmp_2_fu_817_p4 = ap_const_lv8_FF) else "1";
    icmp_ln33_3_fu_837_p2 <= "1" when (trunc_ln33_1_fu_827_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_4_fu_921_p2 <= "0" when (tmp_4_fu_907_p4 = ap_const_lv8_FF) else "1";
    icmp_ln33_5_fu_927_p2 <= "1" when (trunc_ln33_2_fu_917_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_6_fu_950_p2 <= "0" when (tmp_6_fu_936_p4 = ap_const_lv8_FF) else "1";
    icmp_ln33_7_fu_956_p2 <= "1" when (trunc_ln33_3_fu_946_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_8_fu_1013_p2 <= "0" when (tmp_8_fu_999_p4 = ap_const_lv8_FF) else "1";
    icmp_ln33_9_fu_1019_p2 <= "1" when (trunc_ln33_4_fu_1009_p1 = ap_const_lv23_0) else "0";
    icmp_ln33_fu_802_p2 <= "0" when (tmp_fu_788_p4 = ap_const_lv8_FF) else "1";
    icmp_ln46_1_fu_636_p2 <= "1" when (zext_ln46_1_fu_632_p1 = trunc_ln46_reg_1166) else "0";
    icmp_ln46_2_fu_656_p2 <= "1" when (zext_ln46_3_fu_652_p1 = trunc_ln46_reg_1166) else "0";
    icmp_ln46_3_fu_676_p2 <= "1" when (zext_ln46_5_fu_672_p1 = trunc_ln46_reg_1166) else "0";
    icmp_ln46_4_fu_696_p2 <= "1" when (zext_ln46_7_fu_692_p1 = trunc_ln46_reg_1166) else "0";
    icmp_ln46_fu_611_p2 <= "1" when (i_1_0_cast_fu_607_p1 = trunc_ln46_reg_1166) else "0";
    loop_index14_cast22_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_index14_phi_fu_444_p4),32));
    loop_index14_cast6_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index14_reg_440_pp1_iter1_reg),64));
    loop_index20_cast18_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_index20_phi_fu_432_p4),32));
    loop_index20_cast5_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index20_reg_428_pp0_iter1_reg),64));
    loop_index_cast1_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_476),32));
    loop_index_cast_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_476),64));
    or_ln33_1_fu_887_p2 <= (icmp_ln33_3_reg_1372 or icmp_ln33_2_reg_1367);
    or_ln33_2_fu_962_p2 <= (icmp_ln33_5_reg_1438 or icmp_ln33_4_reg_1433);
    or_ln33_3_fu_979_p2 <= (icmp_ln33_7_reg_1448 or icmp_ln33_6_reg_1443);
    or_ln33_4_fu_1025_p2 <= (icmp_ln33_9_reg_1479 or icmp_ln33_8_reg_1474);
    or_ln33_fu_870_p2 <= (icmp_ln33_reg_1357 or icmp_ln33_1_reg_1362);
        p_cast1_cast_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast1_fu_547_p4),64));

    p_cast1_fu_547_p4 <= x_read_reg_1109(63 downto 2);
        p_cast3_cast_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast3_fu_1042_p4),64));

    p_cast3_fu_1042_p4 <= dx_read_reg_1104(63 downto 2);
        p_cast_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_503_p4),64));

    p_cast_fu_503_p4 <= dy(63 downto 2);
    select_ln33_1_fu_897_p3 <= 
        dy_t_load_6_reg_1314 when (and_ln33_1_fu_891_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln33_2_fu_972_p3 <= 
        dy_t_load_7_reg_1383 when (and_ln33_2_fu_966_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln33_3_fu_989_p3 <= 
        dy_t_load_8_reg_1394 when (and_ln33_3_fu_983_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln33_4_fu_1035_p3 <= 
        dy_t_load_9_reg_1459 when (and_ln33_4_fu_1029_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln33_fu_880_p3 <= 
        dy_t_load_5_reg_1303 when (and_ln33_fu_874_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_2_fu_817_p4 <= bitcast_ln33_1_fu_814_p1(30 downto 23);
    tmp_4_fu_907_p4 <= bitcast_ln33_2_fu_904_p1(30 downto 23);
    tmp_6_fu_936_p4 <= bitcast_ln33_3_fu_933_p1(30 downto 23);
    tmp_8_fu_999_p4 <= bitcast_ln33_4_fu_996_p1(30 downto 23);
    tmp_fu_788_p4 <= bitcast_ln33_fu_785_p1(30 downto 23);
    trunc_ln31_fu_604_p1 <= dimension_read_reg_1091(31 - 1 downto 0);
    trunc_ln33_1_fu_827_p1 <= bitcast_ln33_1_fu_814_p1(23 - 1 downto 0);
    trunc_ln33_2_fu_917_p1 <= bitcast_ln33_2_fu_904_p1(23 - 1 downto 0);
    trunc_ln33_3_fu_946_p1 <= bitcast_ln33_3_fu_933_p1(23 - 1 downto 0);
    trunc_ln33_4_fu_1009_p1 <= bitcast_ln33_4_fu_996_p1(23 - 1 downto 0);
    trunc_ln33_fu_798_p1 <= bitcast_ln33_fu_785_p1(23 - 1 downto 0);
    trunc_ln46_fu_601_p1 <= dimension_read_reg_1091(31 - 1 downto 0);

    x_t_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp3_stage0, zext_ln31_fu_728_p1, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, zext_ln31_4_fu_770_p1, ap_CS_fsm_pp3_stage2, zext_ln31_6_fu_849_p1, ap_enable_reg_pp1_iter2, ap_block_pp3_stage0, loop_index14_cast6_fu_582_p1, ap_block_pp3_stage1, ap_block_pp3_stage2)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2))) then 
            x_t_address0 <= zext_ln31_6_fu_849_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
            x_t_address0 <= zext_ln31_4_fu_770_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            x_t_address0 <= zext_ln31_fu_728_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            x_t_address0 <= loop_index14_cast6_fu_582_p1(7 - 1 downto 0);
        else 
            x_t_address0 <= "XXXXXXX";
        end if; 
    end process;


    x_t_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, i_0_cast7_fu_716_p1, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, zext_ln31_2_fu_749_p1, ap_block_pp3_stage0, ap_block_pp3_stage1)
    begin
        if ((ap_enable_reg_pp3_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1))) then 
                x_t_address1 <= zext_ln31_2_fu_749_p1(7 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
                x_t_address1 <= i_0_cast7_fu_716_p1(7 - 1 downto 0);
            else 
                x_t_address1 <= "XXXXXXX";
            end if;
        else 
            x_t_address1 <= "XXXXXXX";
        end if; 
    end process;


    x_t_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_11001, ap_CS_fsm_pp3_stage2, ap_block_pp3_stage2_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage2) and (ap_const_boolean_0 = ap_block_pp3_stage2_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            x_t_ce0 <= ap_const_logic_1;
        else 
            x_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_t_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage1, ap_enable_reg_pp3_iter0, ap_block_pp3_stage1_11001)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage1) and (ap_const_boolean_0 = ap_block_pp3_stage1_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            x_t_ce1 <= ap_const_logic_1;
        else 
            x_t_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    x_t_d0 <= gmem_addr_1_read_reg_1153;

    x_t_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond308_reg_1149_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond308_reg_1149_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            x_t_we0 <= ap_const_logic_1;
        else 
            x_t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln31_1_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_722_p2),31));
    zext_ln31_2_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_fu_743_p2),64));
    zext_ln31_3_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_fu_743_p2),31));
    zext_ln31_4_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_2_fu_764_p2),64));
    zext_ln31_5_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_2_fu_764_p2),31));
    zext_ln31_6_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_3_fu_843_p2),64));
    zext_ln31_7_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_3_fu_843_p2),31));
    zext_ln31_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_722_p2),64));
    zext_ln46_1_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_fu_621_p2),31));
    zext_ln46_2_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_fu_641_p2),64));
    zext_ln46_3_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_fu_641_p2),31));
    zext_ln46_4_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_2_fu_661_p2),64));
    zext_ln46_5_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_2_fu_661_p2),31));
    zext_ln46_6_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_3_fu_681_p2),64));
    zext_ln46_7_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_3_fu_681_p2),31));
    zext_ln46_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_fu_621_p2),64));
end behav;
