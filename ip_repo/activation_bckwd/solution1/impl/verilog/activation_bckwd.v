// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="activation_bckwd_activation_bckwd,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1988,HLS_SYN_LUT=2582,HLS_VERSION=2020_2}" *)

module activation_bckwd (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_pp0_stage0 = 32'd256;
parameter    ap_ST_fsm_state12 = 32'd512;
parameter    ap_ST_fsm_state13 = 32'd1024;
parameter    ap_ST_fsm_state14 = 32'd2048;
parameter    ap_ST_fsm_state15 = 32'd4096;
parameter    ap_ST_fsm_state16 = 32'd8192;
parameter    ap_ST_fsm_state17 = 32'd16384;
parameter    ap_ST_fsm_state18 = 32'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 32'd65536;
parameter    ap_ST_fsm_state22 = 32'd131072;
parameter    ap_ST_fsm_pp2_stage0 = 32'd262144;
parameter    ap_ST_fsm_pp2_stage1 = 32'd524288;
parameter    ap_ST_fsm_pp2_stage2 = 32'd1048576;
parameter    ap_ST_fsm_state27 = 32'd2097152;
parameter    ap_ST_fsm_pp3_stage0 = 32'd4194304;
parameter    ap_ST_fsm_pp3_stage1 = 32'd8388608;
parameter    ap_ST_fsm_pp3_stage2 = 32'd16777216;
parameter    ap_ST_fsm_state35 = 32'd33554432;
parameter    ap_ST_fsm_pp4_stage0 = 32'd67108864;
parameter    ap_ST_fsm_state39 = 32'd134217728;
parameter    ap_ST_fsm_state40 = 32'd268435456;
parameter    ap_ST_fsm_state41 = 32'd536870912;
parameter    ap_ST_fsm_state42 = 32'd1073741824;
parameter    ap_ST_fsm_state43 = 32'd2147483648;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] x;
wire   [63:0] dx;
wire   [63:0] dy;
wire   [31:0] dimension;
wire   [31:0] type_r;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond319_reg_1129;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state35;
reg   [0:0] icmp_ln24_reg_1114;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond4_reg_1500;
reg   [0:0] exitcond4_reg_1500_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond308_reg_1149;
wire    ap_CS_fsm_state12;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [6:0] loop_index20_reg_428;
reg   [6:0] loop_index20_reg_428_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] loop_index14_reg_440;
reg   [6:0] loop_index14_reg_440_pp1_iter1_reg;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [6:0] i_1_0_reg_452;
reg   [6:0] i_0_reg_464;
reg   [6:0] loop_index_reg_476;
reg   [31:0] type_read_reg_1086;
reg   [31:0] dimension_read_reg_1091;
reg   [63:0] dx_read_reg_1104;
reg   [63:0] x_read_reg_1109;
wire   [0:0] icmp_ln24_fu_497_p2;
reg   [63:0] gmem_addr_reg_1118;
wire   [6:0] empty_22_fu_523_p2;
reg   [6:0] empty_22_reg_1124;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond319_fu_533_p2;
reg   [0:0] exitcond319_reg_1129_pp0_iter1_reg;
reg   [31:0] gmem_addr_read_reg_1133;
wire   [6:0] empty_25_fu_567_p2;
reg   [6:0] empty_25_reg_1144;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond308_fu_577_p2;
reg   [0:0] exitcond308_reg_1149_pp1_iter1_reg;
reg   [31:0] gmem_addr_1_read_reg_1153;
wire   [0:0] icmp_ln28_fu_591_p2;
wire    ap_CS_fsm_state22;
wire   [0:0] cmp41_fu_596_p2;
wire   [30:0] trunc_ln46_fu_601_p1;
reg   [30:0] trunc_ln46_reg_1166;
wire   [30:0] trunc_ln31_fu_604_p1;
reg   [30:0] trunc_ln31_reg_1175;
wire   [0:0] icmp_ln46_fu_611_p2;
reg   [0:0] icmp_ln46_reg_1184;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state23_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [63:0] i_1_0_cast8_fu_616_p1;
reg   [63:0] i_1_0_cast8_reg_1188;
wire   [63:0] zext_ln46_fu_627_p1;
reg   [63:0] zext_ln46_reg_1198;
wire   [0:0] icmp_ln46_1_fu_636_p2;
reg   [0:0] icmp_ln46_1_reg_1203;
wire   [63:0] zext_ln46_2_fu_647_p1;
reg   [63:0] zext_ln46_2_reg_1212;
wire    ap_CS_fsm_pp2_stage1;
wire    ap_block_state24_pp2_stage1_iter0;
wire    ap_block_pp2_stage1_11001;
wire   [0:0] icmp_ln46_2_fu_656_p2;
reg   [0:0] icmp_ln46_2_reg_1217;
wire   [63:0] zext_ln46_4_fu_667_p1;
reg   [63:0] zext_ln46_4_reg_1226;
wire   [0:0] icmp_ln46_3_fu_676_p2;
reg   [0:0] icmp_ln46_3_reg_1231;
wire   [63:0] zext_ln46_6_fu_687_p1;
reg   [63:0] zext_ln46_6_reg_1240;
wire    ap_CS_fsm_pp2_stage2;
wire    ap_block_state25_pp2_stage2_iter0;
wire    ap_block_pp2_stage2_11001;
wire   [0:0] icmp_ln46_4_fu_696_p2;
reg   [0:0] icmp_ln46_4_reg_1245;
wire   [6:0] add_ln46_4_fu_701_p2;
reg   [6:0] add_ln46_4_reg_1254;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln31_fu_711_p2;
reg   [0:0] icmp_ln31_reg_1259;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state28_pp3_stage0_iter0;
wire    ap_block_state31_pp3_stage0_iter1;
wire    ap_block_state34_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln31_reg_1259_pp3_iter1_reg;
wire   [63:0] i_0_cast7_fu_716_p1;
reg   [63:0] i_0_cast7_reg_1263;
reg   [63:0] i_0_cast7_reg_1263_pp3_iter1_reg;
wire   [63:0] zext_ln31_fu_728_p1;
reg   [63:0] zext_ln31_reg_1278;
reg   [63:0] zext_ln31_reg_1278_pp3_iter1_reg;
wire   [0:0] icmp_ln31_1_fu_738_p2;
reg   [0:0] icmp_ln31_1_reg_1283;
reg   [0:0] icmp_ln31_1_reg_1283_pp3_iter1_reg;
wire   [31:0] x_t_q1;
reg   [31:0] x_t_load_reg_1297;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state29_pp3_stage1_iter0;
wire    ap_block_state32_pp3_stage1_iter1;
wire    ap_block_pp3_stage1_11001;
wire   [31:0] dy_t_q1;
reg   [31:0] dy_t_load_5_reg_1303;
wire   [31:0] x_t_q0;
reg   [31:0] x_t_load_1_reg_1308;
wire   [31:0] dy_t_q0;
reg   [31:0] dy_t_load_6_reg_1314;
wire   [63:0] zext_ln31_2_fu_749_p1;
reg   [63:0] zext_ln31_2_reg_1319;
reg   [63:0] zext_ln31_2_reg_1319_pp3_iter1_reg;
wire   [0:0] icmp_ln31_2_fu_759_p2;
reg   [0:0] icmp_ln31_2_reg_1324;
reg   [0:0] icmp_ln31_2_reg_1324_pp3_iter1_reg;
wire   [63:0] zext_ln31_4_fu_770_p1;
reg   [63:0] zext_ln31_4_reg_1338;
reg   [63:0] zext_ln31_4_reg_1338_pp3_iter1_reg;
wire   [0:0] icmp_ln31_3_fu_780_p2;
reg   [0:0] icmp_ln31_3_reg_1343;
reg   [0:0] icmp_ln31_3_reg_1343_pp3_iter1_reg;
wire   [0:0] icmp_ln33_fu_802_p2;
reg   [0:0] icmp_ln33_reg_1357;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_state30_pp3_stage2_iter0;
wire    ap_block_state33_pp3_stage2_iter1;
wire    ap_block_pp3_stage2_11001;
wire   [0:0] icmp_ln33_1_fu_808_p2;
reg   [0:0] icmp_ln33_1_reg_1362;
wire   [0:0] icmp_ln33_2_fu_831_p2;
reg   [0:0] icmp_ln33_2_reg_1367;
wire   [0:0] icmp_ln33_3_fu_837_p2;
reg   [0:0] icmp_ln33_3_reg_1372;
reg   [31:0] x_t_load_2_reg_1377;
reg   [31:0] dy_t_load_7_reg_1383;
reg   [31:0] x_t_load_3_reg_1388;
reg   [31:0] dy_t_load_8_reg_1394;
wire   [63:0] zext_ln31_6_fu_849_p1;
reg   [63:0] zext_ln31_6_reg_1399;
reg   [63:0] zext_ln31_6_reg_1399_pp3_iter1_reg;
wire   [0:0] icmp_ln31_4_fu_859_p2;
reg   [0:0] icmp_ln31_4_reg_1404;
reg   [0:0] icmp_ln31_4_reg_1404_pp3_iter1_reg;
wire   [6:0] add_ln31_4_fu_864_p2;
reg   [6:0] add_ln31_4_reg_1418;
wire   [31:0] select_ln33_fu_880_p3;
reg   [31:0] select_ln33_reg_1423;
wire   [31:0] select_ln33_1_fu_897_p3;
reg   [31:0] select_ln33_1_reg_1428;
wire   [0:0] icmp_ln33_4_fu_921_p2;
reg   [0:0] icmp_ln33_4_reg_1433;
wire   [0:0] icmp_ln33_5_fu_927_p2;
reg   [0:0] icmp_ln33_5_reg_1438;
wire   [0:0] icmp_ln33_6_fu_950_p2;
reg   [0:0] icmp_ln33_6_reg_1443;
wire   [0:0] icmp_ln33_7_fu_956_p2;
reg   [0:0] icmp_ln33_7_reg_1448;
reg   [31:0] x_t_load_4_reg_1453;
reg    ap_enable_reg_pp3_iter1;
reg   [31:0] dy_t_load_9_reg_1459;
wire   [31:0] select_ln33_2_fu_972_p3;
reg   [31:0] select_ln33_2_reg_1464;
wire   [31:0] select_ln33_3_fu_989_p3;
reg   [31:0] select_ln33_3_reg_1469;
wire   [0:0] icmp_ln33_8_fu_1013_p2;
reg   [0:0] icmp_ln33_8_reg_1474;
wire   [0:0] icmp_ln33_9_fu_1019_p2;
reg   [0:0] icmp_ln33_9_reg_1479;
wire   [31:0] select_ln33_4_fu_1035_p3;
reg   [31:0] select_ln33_4_reg_1484;
wire   [6:0] empty_31_fu_1062_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state36_pp4_stage0_iter0;
wire    ap_block_state37_pp4_stage0_iter1;
wire    ap_block_state38_pp4_stage0_iter2;
reg    ap_block_state38_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] exitcond4_fu_1072_p2;
wire   [31:0] dx_t_q0;
reg   [31:0] dx_t_load_reg_1509;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage2_subdone;
reg    ap_predicate_tran25to27_state25;
reg    ap_condition_pp2_exit_iter0_state25;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp3_stage2_subdone;
reg    ap_predicate_tran33to35_state30;
reg    ap_condition_pp3_flush_enable;
reg    ap_condition_pp3_exit_iter1_state33;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_state35_io;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state36;
reg   [6:0] x_t_address0;
reg    x_t_ce0;
reg    x_t_we0;
wire   [31:0] x_t_d0;
reg   [6:0] x_t_address1;
reg    x_t_ce1;
reg   [6:0] dx_t_address0;
reg    dx_t_ce0;
reg    dx_t_we0;
reg   [31:0] dx_t_d0;
reg   [6:0] dx_t_address1;
reg    dx_t_ce1;
reg    dx_t_we1;
reg   [31:0] dx_t_d1;
reg   [6:0] dy_t_address0;
reg    dy_t_ce0;
reg    dy_t_we0;
wire   [31:0] dy_t_d0;
reg   [6:0] dy_t_address1;
reg    dy_t_ce1;
reg   [6:0] ap_phi_mux_loop_index20_phi_fu_432_p4;
reg   [6:0] ap_phi_mux_loop_index14_phi_fu_444_p4;
reg   [6:0] ap_phi_mux_i_1_0_phi_fu_456_p4;
wire    ap_block_pp2_stage0;
reg   [6:0] ap_phi_mux_i_0_phi_fu_468_p4;
wire    ap_block_pp3_stage0;
wire   [63:0] loop_index20_cast5_fu_538_p1;
wire   [63:0] loop_index14_cast6_fu_582_p1;
wire    ap_block_pp2_stage1;
wire    ap_block_pp2_stage2;
wire    ap_block_pp3_stage1;
wire    ap_block_pp3_stage2;
wire   [63:0] loop_index_cast_fu_1077_p1;
wire  signed [63:0] p_cast_cast_fu_513_p1;
wire  signed [63:0] p_cast1_cast_fu_556_p1;
wire   [63:0] p_cast3_cast_fu_1051_p1;
reg    ap_block_state43;
wire    ap_block_pp4_stage0_01001;
reg   [31:0] grp_fu_487_p0;
reg   [31:0] grp_fu_492_p0;
wire   [61:0] p_cast_fu_503_p4;
wire   [31:0] loop_index20_cast18_fu_529_p1;
wire   [61:0] p_cast1_fu_547_p4;
wire   [31:0] loop_index14_cast22_fu_573_p1;
wire   [30:0] i_1_0_cast_fu_607_p1;
wire   [6:0] add_ln46_fu_621_p2;
wire   [30:0] zext_ln46_1_fu_632_p1;
wire   [6:0] add_ln46_1_fu_641_p2;
wire   [30:0] zext_ln46_3_fu_652_p1;
wire   [6:0] add_ln46_2_fu_661_p2;
wire   [30:0] zext_ln46_5_fu_672_p1;
wire   [6:0] add_ln46_3_fu_681_p2;
wire   [30:0] zext_ln46_7_fu_692_p1;
wire   [30:0] i_0_cast_fu_707_p1;
wire   [6:0] add_ln31_fu_722_p2;
wire   [30:0] zext_ln31_1_fu_734_p1;
wire   [6:0] add_ln31_1_fu_743_p2;
wire   [30:0] zext_ln31_3_fu_755_p1;
wire   [6:0] add_ln31_2_fu_764_p2;
wire   [30:0] zext_ln31_5_fu_776_p1;
wire   [31:0] bitcast_ln33_fu_785_p1;
wire   [7:0] tmp_fu_788_p4;
wire   [22:0] trunc_ln33_fu_798_p1;
wire   [31:0] bitcast_ln33_1_fu_814_p1;
wire   [7:0] tmp_2_fu_817_p4;
wire   [22:0] trunc_ln33_1_fu_827_p1;
wire   [6:0] add_ln31_3_fu_843_p2;
wire   [30:0] zext_ln31_7_fu_855_p1;
wire   [0:0] or_ln33_fu_870_p2;
wire   [0:0] grp_fu_487_p2;
wire   [0:0] and_ln33_fu_874_p2;
wire   [0:0] or_ln33_1_fu_887_p2;
wire   [0:0] grp_fu_492_p2;
wire   [0:0] and_ln33_1_fu_891_p2;
wire   [31:0] bitcast_ln33_2_fu_904_p1;
wire   [7:0] tmp_4_fu_907_p4;
wire   [22:0] trunc_ln33_2_fu_917_p1;
wire   [31:0] bitcast_ln33_3_fu_933_p1;
wire   [7:0] tmp_6_fu_936_p4;
wire   [22:0] trunc_ln33_3_fu_946_p1;
wire   [0:0] or_ln33_2_fu_962_p2;
wire   [0:0] and_ln33_2_fu_966_p2;
wire   [0:0] or_ln33_3_fu_979_p2;
wire   [0:0] and_ln33_3_fu_983_p2;
wire   [31:0] bitcast_ln33_4_fu_996_p1;
wire   [7:0] tmp_8_fu_999_p4;
wire   [22:0] trunc_ln33_4_fu_1009_p1;
wire   [0:0] or_ln33_4_fu_1025_p2;
wire   [0:0] and_ln33_4_fu_1029_p2;
wire   [61:0] p_cast3_fu_1042_p4;
wire   [31:0] loop_index_cast1_fu_1068_p1;
wire    ap_block_pp3_stage2_00001;
wire    ap_block_pp3_stage0_00001;
wire    ap_block_pp3_stage1_00001;
reg   [31:0] ap_NS_fsm;
wire    ap_block_pp2_stage0_subdone;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp3_stage0_subdone;
wire    ap_block_pp3_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
end

activation_bckwd_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .dx(dx),
    .dy(dy),
    .dimension(dimension),
    .type_r(type_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

activation_bckwd_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(dimension_read_reg_1091),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(p_cast3_cast_fu_1051_p1),
    .I_AWID(1'd0),
    .I_AWLEN(dimension_read_reg_1091),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

activation_bckwd_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
x_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_t_address0),
    .ce0(x_t_ce0),
    .we0(x_t_we0),
    .d0(x_t_d0),
    .q0(x_t_q0),
    .address1(x_t_address1),
    .ce1(x_t_ce1),
    .q1(x_t_q1)
);

activation_bckwd_dx_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
dx_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dx_t_address0),
    .ce0(dx_t_ce0),
    .we0(dx_t_we0),
    .d0(dx_t_d0),
    .q0(dx_t_q0),
    .address1(dx_t_address1),
    .ce1(dx_t_ce1),
    .we1(dx_t_we1),
    .d1(dx_t_d1)
);

activation_bckwd_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
dy_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dy_t_address0),
    .ce0(dy_t_ce0),
    .we0(dy_t_we0),
    .d0(dy_t_d0),
    .q0(dy_t_q0),
    .address1(dy_t_address1),
    .ce1(dy_t_ce1),
    .q1(dy_t_q1)
);

activation_bckwd_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_487_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_487_p2)
);

activation_bckwd_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_492_p0),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_492_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state25);
        end else if (((1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if ((((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter1_state33) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone)) | ((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter1_state33) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state36) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln24_reg_1114 == 1'd1) & (1'b0 == ap_block_state35_io))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state36)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state36);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln24_reg_1114 == 1'd1) & (1'b0 == ap_block_state35_io))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln31_4_reg_1404 == 1'd0) & (icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_0_reg_464 <= add_ln31_4_reg_1418;
    end else if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        i_0_reg_464 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        i_1_0_reg_452 <= 7'd0;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln46_4_reg_1245 == 1'd0) & (icmp_ln46_3_reg_1231 == 1'd0) & (icmp_ln46_2_reg_1217 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_1_0_reg_452 <= add_ln46_4_reg_1254;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        loop_index14_reg_440 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond308_reg_1149 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index14_reg_440 <= empty_25_reg_1144;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_index20_reg_428 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond319_reg_1129 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        loop_index20_reg_428 <= empty_22_reg_1124;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln24_reg_1114 == 1'd1) & (1'b0 == ap_block_state35_io))) begin
        loop_index_reg_476 <= 7'd0;
    end else if (((exitcond4_fu_1072_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        loop_index_reg_476 <= empty_31_fu_1062_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_4_fu_859_p2 == 1'd0) & (icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        add_ln31_4_reg_1418 <= add_ln31_4_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln46_4_fu_696_p2 == 1'd0) & (icmp_ln46_3_reg_1231 == 1'd0) & (icmp_ln46_2_reg_1217 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001))) begin
        add_ln46_4_reg_1254 <= add_ln46_4_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dimension_read_reg_1091 <= dimension;
        dx_read_reg_1104 <= dx;
        icmp_ln24_reg_1114 <= icmp_ln24_fu_497_p2;
        type_read_reg_1086 <= type_r;
        x_read_reg_1109 <= x;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (exitcond4_reg_1500 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        dx_t_load_reg_1509 <= dx_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        dy_t_load_5_reg_1303 <= dy_t_q1;
        x_t_load_reg_1297 <= x_t_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        dy_t_load_6_reg_1314 <= dy_t_q0;
        x_t_load_1_reg_1308 <= x_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_2_reg_1324 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        dy_t_load_7_reg_1383 <= dy_t_q1;
        x_t_load_2_reg_1377 <= x_t_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        dy_t_load_8_reg_1394 <= dy_t_q0;
        x_t_load_3_reg_1388 <= x_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln31_4_reg_1404 == 1'd0) & (icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dy_t_load_9_reg_1459 <= dy_t_q0;
        x_t_load_4_reg_1453 <= x_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_22_reg_1124 <= empty_22_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_25_reg_1144 <= empty_25_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond308_reg_1149 <= exitcond308_fu_577_p2;
        exitcond308_reg_1149_pp1_iter1_reg <= exitcond308_reg_1149;
        loop_index14_reg_440_pp1_iter1_reg <= loop_index14_reg_440;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond319_reg_1129 <= exitcond319_fu_533_p2;
        exitcond319_reg_1129_pp0_iter1_reg <= exitcond319_reg_1129;
        loop_index20_reg_428_pp0_iter1_reg <= loop_index20_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        exitcond4_reg_1500 <= exitcond4_fu_1072_p2;
        exitcond4_reg_1500_pp4_iter1_reg <= exitcond4_reg_1500;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond308_reg_1149 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_read_reg_1153 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond319_reg_1129 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_1133 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_addr_reg_1118 <= p_cast_cast_fu_513_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_711_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_0_cast7_reg_1263[6 : 0] <= i_0_cast7_fu_716_p1[6 : 0];
        icmp_ln31_1_reg_1283 <= icmp_ln31_1_fu_738_p2;
        zext_ln31_reg_1278[6 : 0] <= zext_ln31_fu_728_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_0_cast7_reg_1263_pp3_iter1_reg[6 : 0] <= i_0_cast7_reg_1263[6 : 0];
        icmp_ln31_1_reg_1283_pp3_iter1_reg <= icmp_ln31_1_reg_1283;
        icmp_ln31_reg_1259 <= icmp_ln31_fu_711_p2;
        icmp_ln31_reg_1259_pp3_iter1_reg <= icmp_ln31_reg_1259;
        zext_ln31_reg_1278_pp3_iter1_reg[6 : 0] <= zext_ln31_reg_1278[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_611_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_1_0_cast8_reg_1188[6 : 0] <= i_1_0_cast8_fu_616_p1[6 : 0];
        icmp_ln46_1_reg_1203 <= icmp_ln46_1_fu_636_p2;
        zext_ln46_reg_1198[6 : 0] <= zext_ln46_fu_627_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        icmp_ln31_2_reg_1324 <= icmp_ln31_2_fu_759_p2;
        zext_ln31_2_reg_1319[6 : 0] <= zext_ln31_2_fu_749_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        icmp_ln31_2_reg_1324_pp3_iter1_reg <= icmp_ln31_2_reg_1324;
        icmp_ln31_3_reg_1343_pp3_iter1_reg <= icmp_ln31_3_reg_1343;
        zext_ln31_2_reg_1319_pp3_iter1_reg[6 : 0] <= zext_ln31_2_reg_1319[6 : 0];
        zext_ln31_4_reg_1338_pp3_iter1_reg[6 : 0] <= zext_ln31_4_reg_1338[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_2_fu_759_p2 == 1'd0) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        icmp_ln31_3_reg_1343 <= icmp_ln31_3_fu_780_p2;
        zext_ln31_4_reg_1338[6 : 0] <= zext_ln31_4_fu_770_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        icmp_ln31_4_reg_1404 <= icmp_ln31_4_fu_859_p2;
        zext_ln31_6_reg_1399[6 : 0] <= zext_ln31_6_fu_849_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        icmp_ln31_4_reg_1404_pp3_iter1_reg <= icmp_ln31_4_reg_1404;
        zext_ln31_6_reg_1399_pp3_iter1_reg[6 : 0] <= zext_ln31_6_reg_1399[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        icmp_ln33_1_reg_1362 <= icmp_ln33_1_fu_808_p2;
        icmp_ln33_reg_1357 <= icmp_ln33_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        icmp_ln33_2_reg_1367 <= icmp_ln33_2_fu_831_p2;
        icmp_ln33_3_reg_1372 <= icmp_ln33_3_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln33_4_reg_1433 <= icmp_ln33_4_fu_921_p2;
        icmp_ln33_5_reg_1438 <= icmp_ln33_5_fu_927_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln33_6_reg_1443 <= icmp_ln33_6_fu_950_p2;
        icmp_ln33_7_reg_1448 <= icmp_ln33_7_fu_956_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_4_reg_1404 == 1'd0) & (icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        icmp_ln33_8_reg_1474 <= icmp_ln33_8_fu_1013_p2;
        icmp_ln33_9_reg_1479 <= icmp_ln33_9_fu_1019_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln46_2_reg_1217 <= icmp_ln46_2_fu_656_p2;
        zext_ln46_2_reg_1212[6 : 0] <= zext_ln46_2_fu_647_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_2_fu_656_p2 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        icmp_ln46_3_reg_1231 <= icmp_ln46_3_fu_676_p2;
        zext_ln46_4_reg_1226[6 : 0] <= zext_ln46_4_fu_667_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_3_reg_1231 == 1'd0) & (icmp_ln46_2_reg_1217 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001))) begin
        icmp_ln46_4_reg_1245 <= icmp_ln46_4_fu_696_p2;
        zext_ln46_6_reg_1240[6 : 0] <= zext_ln46_6_fu_687_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln46_reg_1184 <= icmp_ln46_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        select_ln33_1_reg_1428 <= select_ln33_1_fu_897_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        select_ln33_2_reg_1464 <= select_ln33_2_fu_972_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        select_ln33_3_reg_1469 <= select_ln33_3_fu_989_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_4_reg_1404 == 1'd0) & (icmp_ln31_3_reg_1343_pp3_iter1_reg == 1'd0) & (icmp_ln31_2_reg_1324_pp3_iter1_reg == 1'd0) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        select_ln33_4_reg_1484 <= select_ln33_4_fu_1035_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        select_ln33_reg_1423 <= select_ln33_fu_880_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        trunc_ln31_reg_1175 <= trunc_ln31_fu_604_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        trunc_ln46_reg_1166 <= trunc_ln46_fu_601_p1;
    end
end

always @ (*) begin
    if ((exitcond319_fu_533_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond308_fu_577_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_predicate_tran25to27_state25 == 1'b1)) begin
        ap_condition_pp2_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_condition_pp3_exit_iter1_state33 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state33 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_tran33to35_state30 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4_fu_1072_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state36 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state36 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln24_reg_1114 == 1'd1)) & (1'b1 == ap_CS_fsm_state43))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln31_4_reg_1404 == 1'd0) & (icmp_ln31_3_reg_1343 == 1'd0) & (icmp_ln31_2_reg_1324 == 1'd0) & (icmp_ln31_1_reg_1283 == 1'd0) & (icmp_ln31_reg_1259 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_i_0_phi_fu_468_p4 = add_ln31_4_reg_1418;
    end else begin
        ap_phi_mux_i_0_phi_fu_468_p4 = i_0_reg_464;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln46_4_reg_1245 == 1'd0) & (icmp_ln46_3_reg_1231 == 1'd0) & (icmp_ln46_2_reg_1217 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_i_1_0_phi_fu_456_p4 = add_ln46_4_reg_1254;
    end else begin
        ap_phi_mux_i_1_0_phi_fu_456_p4 = i_1_0_reg_452;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond308_reg_1149 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_loop_index14_phi_fu_444_p4 = empty_25_reg_1144;
    end else begin
        ap_phi_mux_loop_index14_phi_fu_444_p4 = loop_index14_reg_440;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond319_reg_1129 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_loop_index20_phi_fu_432_p4 = empty_22_reg_1124;
    end else begin
        ap_phi_mux_loop_index20_phi_fu_432_p4 = loop_index20_reg_428;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln24_reg_1114 == 1'd1)) & (1'b1 == ap_CS_fsm_state43))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        dx_t_address0 = loop_index_cast_fu_1077_p1;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        dx_t_address0 = zext_ln31_4_reg_1338_pp3_iter1_reg;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        dx_t_address0 = zext_ln31_reg_1278_pp3_iter1_reg;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dx_t_address0 = zext_ln46_6_reg_1240;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        dx_t_address0 = zext_ln46_2_reg_1212;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dx_t_address0 = zext_ln46_reg_1198;
    end else begin
        dx_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        dx_t_address1 = zext_ln31_6_reg_1399_pp3_iter1_reg;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        dx_t_address1 = zext_ln31_2_reg_1319_pp3_iter1_reg;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        dx_t_address1 = i_0_cast7_reg_1263_pp3_iter1_reg;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        dx_t_address1 = zext_ln46_4_reg_1226;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dx_t_address1 = i_1_0_cast8_reg_1188;
    end else begin
        dx_t_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        dx_t_ce0 = 1'b1;
    end else begin
        dx_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        dx_t_ce1 = 1'b1;
    end else begin
        dx_t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        dx_t_d0 = select_ln33_3_reg_1469;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        dx_t_d0 = select_ln33_1_reg_1428;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        dx_t_d0 = dy_t_q1;
    end else if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1)))) begin
        dx_t_d0 = dy_t_q0;
    end else begin
        dx_t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        dx_t_d1 = select_ln33_4_reg_1484;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        dx_t_d1 = select_ln33_2_reg_1464;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        dx_t_d1 = select_ln33_reg_1423;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        dx_t_d1 = dy_t_q0;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dx_t_d1 = dy_t_q1;
    end else begin
        dx_t_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln46_4_reg_1245 == 1'd0) & (icmp_ln46_3_reg_1231 == 1'd0) & (icmp_ln46_2_reg_1217 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln31_3_reg_1343_pp3_iter1_reg == 1'd0) & (icmp_ln31_2_reg_1324_pp3_iter1_reg == 1'd0) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln46_2_reg_1217 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        dx_t_we0 = 1'b1;
    end else begin
        dx_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln31_4_reg_1404_pp3_iter1_reg == 1'd0) & (icmp_ln31_3_reg_1343_pp3_iter1_reg == 1'd0) & (icmp_ln31_2_reg_1324_pp3_iter1_reg == 1'd0) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln31_2_reg_1324_pp3_iter1_reg == 1'd0) & (icmp_ln31_1_reg_1283_pp3_iter1_reg == 1'd0) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln31_reg_1259_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln46_3_reg_1231 == 1'd0) & (icmp_ln46_2_reg_1217 == 1'd0) & (icmp_ln46_1_reg_1203 == 1'd0) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln46_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)))) begin
        dx_t_we1 = 1'b1;
    end else begin
        dx_t_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        dy_t_address0 = zext_ln31_6_fu_849_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        dy_t_address0 = zext_ln31_4_fu_770_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        dy_t_address0 = zext_ln31_fu_728_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2))) begin
        dy_t_address0 = zext_ln46_6_fu_687_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dy_t_address0 = zext_ln46_4_fu_667_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dy_t_address0 = zext_ln46_fu_627_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        dy_t_address0 = loop_index20_cast5_fu_538_p1;
    end else begin
        dy_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        dy_t_address1 = zext_ln31_2_fu_749_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        dy_t_address1 = i_0_cast7_fu_716_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1))) begin
        dy_t_address1 = zext_ln46_2_fu_647_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dy_t_address1 = i_1_0_cast8_fu_616_p1;
    end else begin
        dy_t_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage2) & (1'b0 == ap_block_pp2_stage2_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        dy_t_ce0 = 1'b1;
    end else begin
        dy_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        dy_t_ce1 = 1'b1;
    end else begin
        dy_t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond319_reg_1129_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dy_t_we0 = 1'b1;
    end else begin
        dy_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            gmem_ARADDR = p_cast1_cast_fu_556_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = gmem_addr_reg_1118;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln24_reg_1114 == 1'd1) & (1'b0 == ap_block_state35_io))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln24_reg_1114 == 1'd1)) & (1'b1 == ap_CS_fsm_state43) & (icmp_ln24_reg_1114 == 1'd1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond308_reg_1149 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond319_reg_1129 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1500_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln24_reg_1114 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln24_reg_1114 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond308_reg_1149 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond319_reg_1129 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond4_reg_1500_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        grp_fu_487_p0 = x_t_load_4_reg_1453;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_487_p0 = x_t_load_2_reg_1377;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        grp_fu_487_p0 = x_t_load_reg_1297;
    end else begin
        grp_fu_487_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        grp_fu_492_p0 = x_t_load_3_reg_1388;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        grp_fu_492_p0 = x_t_load_1_reg_1308;
    end else begin
        grp_fu_492_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        x_t_address0 = zext_ln31_6_fu_849_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
        x_t_address0 = zext_ln31_4_fu_770_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        x_t_address0 = zext_ln31_fu_728_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        x_t_address0 = loop_index14_cast6_fu_582_p1;
    end else begin
        x_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp3_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1))) begin
            x_t_address1 = zext_ln31_2_fu_749_p1;
        end else if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
            x_t_address1 = i_0_cast7_fu_716_p1;
        end else begin
            x_t_address1 = 'bx;
        end
    end else begin
        x_t_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        x_t_ce0 = 1'b1;
    end else begin
        x_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        x_t_ce1 = 1'b1;
    end else begin
        x_t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond308_reg_1149_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        x_t_we0 = 1'b1;
    end else begin
        x_t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln24_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if (((ap_start == 1'b1) & (icmp_ln24_fu_497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond319_fu_533_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond319_fu_533_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond308_fu_577_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((exitcond308_fu_577_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((cmp41_fu_596_p2 == 1'd1) & (icmp_ln28_fu_591_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((~((ap_predicate_tran25to27_state25 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_subdone)) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_predicate_tran25to27_state25 == 1'b1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone)) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln24_reg_1114 == 1'd1) & (1'b0 == ap_block_state35_io))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln24_reg_1114 == 1'd0) & (1'b0 == ap_block_state35_io))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond4_fu_1072_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond4_fu_1072_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln24_reg_1114 == 1'd1)) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_743_p2 = (i_0_reg_464 + 7'd2);

assign add_ln31_2_fu_764_p2 = (i_0_reg_464 + 7'd3);

assign add_ln31_3_fu_843_p2 = (i_0_reg_464 + 7'd4);

assign add_ln31_4_fu_864_p2 = (i_0_reg_464 + 7'd5);

assign add_ln31_fu_722_p2 = (ap_phi_mux_i_0_phi_fu_468_p4 + 7'd1);

assign add_ln46_1_fu_641_p2 = (i_1_0_reg_452 + 7'd2);

assign add_ln46_2_fu_661_p2 = (i_1_0_reg_452 + 7'd3);

assign add_ln46_3_fu_681_p2 = (i_1_0_reg_452 + 7'd4);

assign add_ln46_4_fu_701_p2 = (i_1_0_reg_452 + 7'd5);

assign add_ln46_fu_621_p2 = (ap_phi_mux_i_1_0_phi_fu_456_p4 + 7'd1);

assign and_ln33_1_fu_891_p2 = (or_ln33_1_fu_887_p2 & grp_fu_492_p2);

assign and_ln33_2_fu_966_p2 = (or_ln33_2_fu_962_p2 & grp_fu_487_p2);

assign and_ln33_3_fu_983_p2 = (or_ln33_3_fu_979_p2 & grp_fu_492_p2);

assign and_ln33_4_fu_1029_p2 = (or_ln33_4_fu_1025_p2 & grp_fu_487_p2);

assign and_ln33_fu_874_p2 = (or_ln33_fu_870_p2 & grp_fu_487_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp2_stage2 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond319_reg_1129 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond319_reg_1129 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond308_reg_1149 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond308_reg_1149 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state38_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond319_reg_1129 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond308_reg_1149 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((gmem_AWREADY == 1'b0) & (icmp_ln24_reg_1114 == 1'd1));
end

assign ap_block_state36_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state38_io = ((gmem_WREADY == 1'b0) & (exitcond4_reg_1500_pp4_iter1_reg == 1'd0));
end

assign ap_block_state38_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43 = ((gmem_BVALID == 1'b0) & (icmp_ln24_reg_1114 == 1'd1));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran25to27_state25 = ((icmp_ln46_reg_1184 == 1'd1) | ((icmp_ln46_1_reg_1203 == 1'd1) | ((icmp_ln46_2_reg_1217 == 1'd1) | ((icmp_ln46_4_fu_696_p2 == 1'd1) | (icmp_ln46_3_reg_1231 == 1'd1)))));
end

always @ (*) begin
    ap_predicate_tran33to35_state30 = ((icmp_ln31_reg_1259 == 1'd1) | ((icmp_ln31_1_reg_1283 == 1'd1) | ((icmp_ln31_2_reg_1324 == 1'd1) | ((icmp_ln31_4_fu_859_p2 == 1'd1) | (icmp_ln31_3_reg_1343 == 1'd1)))));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln33_1_fu_814_p1 = x_t_load_1_reg_1308;

assign bitcast_ln33_2_fu_904_p1 = x_t_load_2_reg_1377;

assign bitcast_ln33_3_fu_933_p1 = x_t_load_3_reg_1388;

assign bitcast_ln33_4_fu_996_p1 = x_t_load_4_reg_1453;

assign bitcast_ln33_fu_785_p1 = x_t_load_reg_1297;

assign cmp41_fu_596_p2 = (($signed(dimension_read_reg_1091) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign dy_t_d0 = gmem_addr_read_reg_1133;

assign empty_22_fu_523_p2 = (ap_phi_mux_loop_index20_phi_fu_432_p4 + 7'd1);

assign empty_25_fu_567_p2 = (ap_phi_mux_loop_index14_phi_fu_444_p4 + 7'd1);

assign empty_31_fu_1062_p2 = (loop_index_reg_476 + 7'd1);

assign exitcond308_fu_577_p2 = ((loop_index14_cast22_fu_573_p1 == dimension_read_reg_1091) ? 1'b1 : 1'b0);

assign exitcond319_fu_533_p2 = ((loop_index20_cast18_fu_529_p1 == dimension_read_reg_1091) ? 1'b1 : 1'b0);

assign exitcond4_fu_1072_p2 = ((loop_index_cast1_fu_1068_p1 == dimension_read_reg_1091) ? 1'b1 : 1'b0);

assign gmem_WDATA = dx_t_load_reg_1509;

assign i_0_cast7_fu_716_p1 = ap_phi_mux_i_0_phi_fu_468_p4;

assign i_0_cast_fu_707_p1 = ap_phi_mux_i_0_phi_fu_468_p4;

assign i_1_0_cast8_fu_616_p1 = ap_phi_mux_i_1_0_phi_fu_456_p4;

assign i_1_0_cast_fu_607_p1 = ap_phi_mux_i_1_0_phi_fu_456_p4;

assign icmp_ln24_fu_497_p2 = ((dimension != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_591_p2 = ((type_read_reg_1086 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_738_p2 = ((zext_ln31_1_fu_734_p1 == trunc_ln31_reg_1175) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_759_p2 = ((zext_ln31_3_fu_755_p1 == trunc_ln31_reg_1175) ? 1'b1 : 1'b0);

assign icmp_ln31_3_fu_780_p2 = ((zext_ln31_5_fu_776_p1 == trunc_ln31_reg_1175) ? 1'b1 : 1'b0);

assign icmp_ln31_4_fu_859_p2 = ((zext_ln31_7_fu_855_p1 == trunc_ln31_reg_1175) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_711_p2 = ((i_0_cast_fu_707_p1 == trunc_ln31_reg_1175) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_808_p2 = ((trunc_ln33_fu_798_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_831_p2 = ((tmp_2_fu_817_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln33_3_fu_837_p2 = ((trunc_ln33_1_fu_827_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_4_fu_921_p2 = ((tmp_4_fu_907_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln33_5_fu_927_p2 = ((trunc_ln33_2_fu_917_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_6_fu_950_p2 = ((tmp_6_fu_936_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln33_7_fu_956_p2 = ((trunc_ln33_3_fu_946_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_8_fu_1013_p2 = ((tmp_8_fu_999_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln33_9_fu_1019_p2 = ((trunc_ln33_4_fu_1009_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_802_p2 = ((tmp_fu_788_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_636_p2 = ((zext_ln46_1_fu_632_p1 == trunc_ln46_reg_1166) ? 1'b1 : 1'b0);

assign icmp_ln46_2_fu_656_p2 = ((zext_ln46_3_fu_652_p1 == trunc_ln46_reg_1166) ? 1'b1 : 1'b0);

assign icmp_ln46_3_fu_676_p2 = ((zext_ln46_5_fu_672_p1 == trunc_ln46_reg_1166) ? 1'b1 : 1'b0);

assign icmp_ln46_4_fu_696_p2 = ((zext_ln46_7_fu_692_p1 == trunc_ln46_reg_1166) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_611_p2 = ((i_1_0_cast_fu_607_p1 == trunc_ln46_reg_1166) ? 1'b1 : 1'b0);

assign loop_index14_cast22_fu_573_p1 = ap_phi_mux_loop_index14_phi_fu_444_p4;

assign loop_index14_cast6_fu_582_p1 = loop_index14_reg_440_pp1_iter1_reg;

assign loop_index20_cast18_fu_529_p1 = ap_phi_mux_loop_index20_phi_fu_432_p4;

assign loop_index20_cast5_fu_538_p1 = loop_index20_reg_428_pp0_iter1_reg;

assign loop_index_cast1_fu_1068_p1 = loop_index_reg_476;

assign loop_index_cast_fu_1077_p1 = loop_index_reg_476;

assign or_ln33_1_fu_887_p2 = (icmp_ln33_3_reg_1372 | icmp_ln33_2_reg_1367);

assign or_ln33_2_fu_962_p2 = (icmp_ln33_5_reg_1438 | icmp_ln33_4_reg_1433);

assign or_ln33_3_fu_979_p2 = (icmp_ln33_7_reg_1448 | icmp_ln33_6_reg_1443);

assign or_ln33_4_fu_1025_p2 = (icmp_ln33_9_reg_1479 | icmp_ln33_8_reg_1474);

assign or_ln33_fu_870_p2 = (icmp_ln33_reg_1357 | icmp_ln33_1_reg_1362);

assign p_cast1_cast_fu_556_p1 = $signed(p_cast1_fu_547_p4);

assign p_cast1_fu_547_p4 = {{x_read_reg_1109[63:2]}};

assign p_cast3_cast_fu_1051_p1 = $signed(p_cast3_fu_1042_p4);

assign p_cast3_fu_1042_p4 = {{dx_read_reg_1104[63:2]}};

assign p_cast_cast_fu_513_p1 = $signed(p_cast_fu_503_p4);

assign p_cast_fu_503_p4 = {{dy[63:2]}};

assign select_ln33_1_fu_897_p3 = ((and_ln33_1_fu_891_p2[0:0] == 1'b1) ? dy_t_load_6_reg_1314 : 32'd0);

assign select_ln33_2_fu_972_p3 = ((and_ln33_2_fu_966_p2[0:0] == 1'b1) ? dy_t_load_7_reg_1383 : 32'd0);

assign select_ln33_3_fu_989_p3 = ((and_ln33_3_fu_983_p2[0:0] == 1'b1) ? dy_t_load_8_reg_1394 : 32'd0);

assign select_ln33_4_fu_1035_p3 = ((and_ln33_4_fu_1029_p2[0:0] == 1'b1) ? dy_t_load_9_reg_1459 : 32'd0);

assign select_ln33_fu_880_p3 = ((and_ln33_fu_874_p2[0:0] == 1'b1) ? dy_t_load_5_reg_1303 : 32'd0);

assign tmp_2_fu_817_p4 = {{bitcast_ln33_1_fu_814_p1[30:23]}};

assign tmp_4_fu_907_p4 = {{bitcast_ln33_2_fu_904_p1[30:23]}};

assign tmp_6_fu_936_p4 = {{bitcast_ln33_3_fu_933_p1[30:23]}};

assign tmp_8_fu_999_p4 = {{bitcast_ln33_4_fu_996_p1[30:23]}};

assign tmp_fu_788_p4 = {{bitcast_ln33_fu_785_p1[30:23]}};

assign trunc_ln31_fu_604_p1 = dimension_read_reg_1091[30:0];

assign trunc_ln33_1_fu_827_p1 = bitcast_ln33_1_fu_814_p1[22:0];

assign trunc_ln33_2_fu_917_p1 = bitcast_ln33_2_fu_904_p1[22:0];

assign trunc_ln33_3_fu_946_p1 = bitcast_ln33_3_fu_933_p1[22:0];

assign trunc_ln33_4_fu_1009_p1 = bitcast_ln33_4_fu_996_p1[22:0];

assign trunc_ln33_fu_798_p1 = bitcast_ln33_fu_785_p1[22:0];

assign trunc_ln46_fu_601_p1 = dimension_read_reg_1091[30:0];

assign x_t_d0 = gmem_addr_1_read_reg_1153;

assign zext_ln31_1_fu_734_p1 = add_ln31_fu_722_p2;

assign zext_ln31_2_fu_749_p1 = add_ln31_1_fu_743_p2;

assign zext_ln31_3_fu_755_p1 = add_ln31_1_fu_743_p2;

assign zext_ln31_4_fu_770_p1 = add_ln31_2_fu_764_p2;

assign zext_ln31_5_fu_776_p1 = add_ln31_2_fu_764_p2;

assign zext_ln31_6_fu_849_p1 = add_ln31_3_fu_843_p2;

assign zext_ln31_7_fu_855_p1 = add_ln31_3_fu_843_p2;

assign zext_ln31_fu_728_p1 = add_ln31_fu_722_p2;

assign zext_ln46_1_fu_632_p1 = add_ln46_fu_621_p2;

assign zext_ln46_2_fu_647_p1 = add_ln46_1_fu_641_p2;

assign zext_ln46_3_fu_652_p1 = add_ln46_1_fu_641_p2;

assign zext_ln46_4_fu_667_p1 = add_ln46_2_fu_661_p2;

assign zext_ln46_5_fu_672_p1 = add_ln46_2_fu_661_p2;

assign zext_ln46_6_fu_687_p1 = add_ln46_3_fu_681_p2;

assign zext_ln46_7_fu_692_p1 = add_ln46_3_fu_681_p2;

assign zext_ln46_fu_627_p1 = add_ln46_fu_621_p2;

always @ (posedge ap_clk) begin
    i_1_0_cast8_reg_1188[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_1198[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln46_2_reg_1212[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln46_4_reg_1226[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln46_6_reg_1240[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_0_cast7_reg_1263[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_0_cast7_reg_1263_pp3_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_reg_1278[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_reg_1278_pp3_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_2_reg_1319[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_2_reg_1319_pp3_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_4_reg_1338[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_4_reg_1338_pp3_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_6_reg_1399[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln31_6_reg_1399_pp3_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //activation_bckwd
