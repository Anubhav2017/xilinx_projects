// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="forward_fcc_forward_fcc,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.512000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=36,HLS_SYN_DSP=0,HLS_SYN_FF=12200,HLS_SYN_LUT=10068,HLS_VERSION=2020_2}" *)

module forward_fcc (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_pp0_stage0 = 45'd8;
parameter    ap_ST_fsm_state82 = 45'd16;
parameter    ap_ST_fsm_state83 = 45'd32;
parameter    ap_ST_fsm_state84 = 45'd64;
parameter    ap_ST_fsm_state85 = 45'd128;
parameter    ap_ST_fsm_state86 = 45'd256;
parameter    ap_ST_fsm_state87 = 45'd512;
parameter    ap_ST_fsm_state88 = 45'd1024;
parameter    ap_ST_fsm_state89 = 45'd2048;
parameter    ap_ST_fsm_pp1_stage0 = 45'd4096;
parameter    ap_ST_fsm_state93 = 45'd8192;
parameter    ap_ST_fsm_state94 = 45'd16384;
parameter    ap_ST_fsm_state95 = 45'd32768;
parameter    ap_ST_fsm_state96 = 45'd65536;
parameter    ap_ST_fsm_state97 = 45'd131072;
parameter    ap_ST_fsm_state98 = 45'd262144;
parameter    ap_ST_fsm_state99 = 45'd524288;
parameter    ap_ST_fsm_state100 = 45'd1048576;
parameter    ap_ST_fsm_state101 = 45'd2097152;
parameter    ap_ST_fsm_state102 = 45'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 45'd8388608;
parameter    ap_ST_fsm_state106 = 45'd16777216;
parameter    ap_ST_fsm_state107 = 45'd33554432;
parameter    ap_ST_fsm_state108 = 45'd67108864;
parameter    ap_ST_fsm_state109 = 45'd134217728;
parameter    ap_ST_fsm_state110 = 45'd268435456;
parameter    ap_ST_fsm_state111 = 45'd536870912;
parameter    ap_ST_fsm_state112 = 45'd1073741824;
parameter    ap_ST_fsm_state113 = 45'd2147483648;
parameter    ap_ST_fsm_state114 = 45'd4294967296;
parameter    ap_ST_fsm_pp3_stage0 = 45'd8589934592;
parameter    ap_ST_fsm_pp3_stage1 = 45'd17179869184;
parameter    ap_ST_fsm_pp3_stage2 = 45'd34359738368;
parameter    ap_ST_fsm_pp3_stage3 = 45'd68719476736;
parameter    ap_ST_fsm_state126 = 45'd137438953472;
parameter    ap_ST_fsm_state127 = 45'd274877906944;
parameter    ap_ST_fsm_pp4_stage0 = 45'd549755813888;
parameter    ap_ST_fsm_state131 = 45'd1099511627776;
parameter    ap_ST_fsm_state132 = 45'd2199023255552;
parameter    ap_ST_fsm_state133 = 45'd4398046511104;
parameter    ap_ST_fsm_state134 = 45'd8796093022208;
parameter    ap_ST_fsm_state135 = 45'd17592186044416;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] w;
wire   [31:0] y;
wire   [31:0] b;
wire   [31:0] xdim;
wire   [31:0] ydim;
reg    gmem_blk_n_AR;
reg    ap_enable_reg_pp0_iter69;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln6_reg_881;
reg    gmem_blk_n_R;
reg    ap_enable_reg_pp0_iter76;
reg   [0:0] icmp_ln25_reg_832;
reg   [0:0] icmp_ln25_reg_832_pp0_iter75_reg;
wire    ap_CS_fsm_state83;
reg   [0:0] icmp_ln33_reg_896;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond388_reg_917;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state127;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond3_reg_1067;
reg   [0:0] exitcond3_reg_1067_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state135;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_pp3_stage1;
reg   [0:0] icmp_ln40_reg_1017;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond377_reg_958;
wire    ap_CS_fsm_state96;
reg   [0:0] icmp_ln34_reg_938;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [63:0] indvar_flatten_reg_286;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
wire    ap_block_state12_pp0_stage0_iter8;
wire    ap_block_state13_pp0_stage0_iter9;
wire    ap_block_state14_pp0_stage0_iter10;
wire    ap_block_state15_pp0_stage0_iter11;
wire    ap_block_state16_pp0_stage0_iter12;
wire    ap_block_state17_pp0_stage0_iter13;
wire    ap_block_state18_pp0_stage0_iter14;
wire    ap_block_state19_pp0_stage0_iter15;
wire    ap_block_state20_pp0_stage0_iter16;
wire    ap_block_state21_pp0_stage0_iter17;
wire    ap_block_state22_pp0_stage0_iter18;
wire    ap_block_state23_pp0_stage0_iter19;
wire    ap_block_state24_pp0_stage0_iter20;
wire    ap_block_state25_pp0_stage0_iter21;
wire    ap_block_state26_pp0_stage0_iter22;
wire    ap_block_state27_pp0_stage0_iter23;
wire    ap_block_state28_pp0_stage0_iter24;
wire    ap_block_state29_pp0_stage0_iter25;
wire    ap_block_state30_pp0_stage0_iter26;
wire    ap_block_state31_pp0_stage0_iter27;
wire    ap_block_state32_pp0_stage0_iter28;
wire    ap_block_state33_pp0_stage0_iter29;
wire    ap_block_state34_pp0_stage0_iter30;
wire    ap_block_state35_pp0_stage0_iter31;
wire    ap_block_state36_pp0_stage0_iter32;
wire    ap_block_state37_pp0_stage0_iter33;
wire    ap_block_state38_pp0_stage0_iter34;
wire    ap_block_state39_pp0_stage0_iter35;
wire    ap_block_state40_pp0_stage0_iter36;
wire    ap_block_state41_pp0_stage0_iter37;
wire    ap_block_state42_pp0_stage0_iter38;
wire    ap_block_state43_pp0_stage0_iter39;
wire    ap_block_state44_pp0_stage0_iter40;
wire    ap_block_state45_pp0_stage0_iter41;
wire    ap_block_state46_pp0_stage0_iter42;
wire    ap_block_state47_pp0_stage0_iter43;
wire    ap_block_state48_pp0_stage0_iter44;
wire    ap_block_state49_pp0_stage0_iter45;
wire    ap_block_state50_pp0_stage0_iter46;
wire    ap_block_state51_pp0_stage0_iter47;
wire    ap_block_state52_pp0_stage0_iter48;
wire    ap_block_state53_pp0_stage0_iter49;
wire    ap_block_state54_pp0_stage0_iter50;
wire    ap_block_state55_pp0_stage0_iter51;
wire    ap_block_state56_pp0_stage0_iter52;
wire    ap_block_state57_pp0_stage0_iter53;
wire    ap_block_state58_pp0_stage0_iter54;
wire    ap_block_state59_pp0_stage0_iter55;
wire    ap_block_state60_pp0_stage0_iter56;
wire    ap_block_state61_pp0_stage0_iter57;
wire    ap_block_state62_pp0_stage0_iter58;
wire    ap_block_state63_pp0_stage0_iter59;
wire    ap_block_state64_pp0_stage0_iter60;
wire    ap_block_state65_pp0_stage0_iter61;
wire    ap_block_state66_pp0_stage0_iter62;
wire    ap_block_state67_pp0_stage0_iter63;
wire    ap_block_state68_pp0_stage0_iter64;
wire    ap_block_state69_pp0_stage0_iter65;
wire    ap_block_state70_pp0_stage0_iter66;
wire    ap_block_state71_pp0_stage0_iter67;
wire    ap_block_state72_pp0_stage0_iter68;
wire    ap_block_state73_pp0_stage0_iter69;
reg    ap_block_state73_io;
wire    ap_block_state74_pp0_stage0_iter70;
wire    ap_block_state75_pp0_stage0_iter71;
wire    ap_block_state76_pp0_stage0_iter72;
wire    ap_block_state77_pp0_stage0_iter73;
wire    ap_block_state78_pp0_stage0_iter74;
wire    ap_block_state79_pp0_stage0_iter75;
reg    ap_block_state80_pp0_stage0_iter76;
wire    ap_block_state81_pp0_stage0_iter77;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] i_reg_298;
reg   [31:0] j_reg_310;
reg   [61:0] loop_index28_reg_322;
reg   [61:0] loop_index22_reg_333;
reg   [31:0] j_1_reg_355;
reg   [31:0] storemerge_reg_367;
reg   [61:0] loop_index_reg_378;
reg   [31:0] ydim_read_reg_764;
reg  signed [31:0] xdim_read_reg_775;
reg   [31:0] b_read_reg_785;
reg   [31:0] y_read_reg_790;
reg   [31:0] w_read_reg_795;
reg   [31:0] x_read_reg_801;
wire  signed [29:0] trunc_ln25_fu_398_p1;
reg  signed [29:0] trunc_ln25_reg_806;
wire    ap_CS_fsm_state2;
wire   [63:0] cast2_fu_405_p1;
reg   [63:0] cast2_reg_816;
wire   [63:0] grp_fu_408_p2;
reg   [63:0] bound_reg_822;
wire    ap_CS_fsm_state3;
wire   [63:0] add_ln25_2_fu_414_p2;
reg   [63:0] add_ln25_2_reg_827;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln25_fu_420_p2;
reg   [0:0] icmp_ln25_reg_832_pp0_iter1_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter2_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter3_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter4_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter5_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter6_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter7_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter8_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter9_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter10_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter11_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter12_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter13_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter14_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter15_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter16_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter17_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter18_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter19_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter20_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter21_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter22_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter23_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter24_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter25_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter26_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter27_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter28_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter29_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter30_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter31_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter32_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter33_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter34_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter35_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter36_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter37_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter38_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter39_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter40_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter41_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter42_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter43_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter44_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter45_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter46_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter47_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter48_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter49_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter50_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter51_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter52_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter53_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter54_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter55_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter56_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter57_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter58_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter59_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter60_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter61_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter62_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter63_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter64_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter65_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter66_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter67_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter68_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter69_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter70_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter71_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter72_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter73_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter74_reg;
reg   [0:0] icmp_ln25_reg_832_pp0_iter76_reg;
wire   [31:0] select_ln25_fu_441_p3;
reg   [31:0] select_ln25_reg_836;
wire   [31:0] select_ln25_1_fu_449_p3;
reg   [31:0] select_ln25_1_reg_841;
reg    ap_enable_reg_pp0_iter65;
wire  signed [29:0] trunc_ln25_1_fu_457_p1;
reg  signed [29:0] trunc_ln25_1_reg_846;
wire   [6:0] trunc_ln25_2_fu_461_p1;
reg   [6:0] trunc_ln25_2_reg_851;
wire   [31:0] add_ln26_fu_465_p2;
reg   [31:0] add_ln26_reg_856;
wire   [13:0] add_ln27_fu_487_p2;
reg   [13:0] add_ln27_reg_861;
reg   [13:0] add_ln27_reg_861_pp0_iter67_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter68_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter69_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter70_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter71_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter72_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter73_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter74_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter75_reg;
reg   [13:0] add_ln27_reg_861_pp0_iter76_reg;
wire   [29:0] grp_fu_471_p2;
reg   [29:0] mul_ln25_reg_866;
wire   [63:0] grp_fu_425_p2;
reg   [63:0] urem_ln6_reg_871;
reg   [29:0] sext_ln27_1_mid2_v_reg_876;
wire   [0:0] icmp_ln6_fu_515_p2;
reg   [31:0] gmem_addr_1_read_reg_891;
wire   [0:0] icmp_ln33_fu_538_p2;
wire    ap_CS_fsm_state82;
wire  signed [61:0] sext_ln33_fu_543_p1;
reg  signed [61:0] sext_ln33_reg_900;
wire   [61:0] empty_22_fu_566_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state90_pp1_stage0_iter0;
reg    ap_block_state91_pp1_stage0_iter1;
wire    ap_block_state92_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond388_fu_572_p2;
reg   [0:0] exitcond388_reg_917_pp1_iter1_reg;
wire   [6:0] empty_25_fu_577_p1;
reg   [6:0] empty_25_reg_921;
reg   [6:0] empty_25_reg_921_pp1_iter1_reg;
reg   [31:0] gmem_addr_read_reg_926;
wire  signed [31:0] grp_fu_589_p2;
reg  signed [31:0] mul_ln34_reg_931;
wire    ap_CS_fsm_state94;
wire   [0:0] icmp_ln34_fu_593_p2;
wire    ap_CS_fsm_state95;
wire  signed [61:0] sext_ln34_fu_598_p1;
reg  signed [61:0] sext_ln34_reg_942;
wire   [61:0] empty_26_fu_621_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state103_pp2_stage0_iter0;
reg    ap_block_state104_pp2_stage0_iter1;
wire    ap_block_state105_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] exitcond377_fu_627_p2;
reg   [0:0] exitcond377_reg_958_pp2_iter1_reg;
wire   [13:0] empty_29_fu_632_p1;
reg   [13:0] empty_29_reg_962;
reg   [13:0] empty_29_reg_962_pp2_iter1_reg;
reg   [31:0] gmem_addr_2_read_reg_967;
reg   [31:0] gmem_addr_4_reg_972;
wire    ap_CS_fsm_state106;
wire   [31:0] add_ln36_fu_663_p2;
reg   [31:0] add_ln36_reg_978;
wire    ap_CS_fsm_state107;
wire   [6:0] trunc_ln38_fu_674_p1;
reg   [6:0] trunc_ln38_reg_986;
wire   [0:0] icmp_ln36_fu_669_p2;
reg   [29:0] p_cast4_reg_992;
wire    ap_CS_fsm_state113;
reg   [6:0] ybuf_addr_reg_1002;
wire   [13:0] mul_ln41_fu_695_p2;
reg   [13:0] mul_ln41_reg_1007;
wire    ap_CS_fsm_state114;
wire   [31:0] bbuf_q0;
wire   [0:0] icmp_ln40_fu_701_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state115_pp3_stage0_iter0;
wire    ap_block_state119_pp3_stage0_iter1;
wire    ap_block_state123_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln40_reg_1017_pp3_iter1_reg;
reg   [0:0] icmp_ln40_reg_1017_pp3_iter2_reg;
wire   [31:0] wbuf_q0;
reg   [31:0] wbuf_load_reg_1026;
reg    ap_block_state116_pp3_stage1_iter0;
wire    ap_block_state120_pp3_stage1_iter1;
wire    ap_block_state124_pp3_stage1_iter2;
reg    ap_block_pp3_stage1_11001;
reg   [31:0] gmem_addr_4_read_reg_1031;
wire    ap_CS_fsm_pp3_stage2;
wire    ap_block_state117_pp3_stage2_iter0;
wire    ap_block_state121_pp3_stage2_iter1;
wire    ap_block_state125_pp3_stage2_iter2;
wire    ap_block_pp3_stage2_11001;
wire   [31:0] add_ln40_fu_724_p2;
reg   [31:0] add_ln40_reg_1041;
wire    ap_CS_fsm_pp3_stage3;
wire    ap_block_state118_pp3_stage3_iter0;
wire    ap_block_state122_pp3_stage3_iter1;
wire    ap_block_pp3_stage3_11001;
wire   [31:0] grp_fu_394_p2;
reg   [31:0] mul_reg_1046;
wire   [31:0] grp_fu_389_p2;
reg    ap_enable_reg_pp3_iter2;
wire   [61:0] empty_31_fu_740_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state128_pp4_stage0_iter0;
wire    ap_block_state129_pp4_stage0_iter1;
wire    ap_block_state130_pp4_stage0_iter2;
reg    ap_block_state130_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] exitcond3_fu_746_p2;
wire   [31:0] ybuf_q0;
reg   [31:0] ybuf_load_reg_1076;
reg    ap_enable_reg_pp4_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_condition_pp0_exit_iter37_state41;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg    ap_enable_reg_pp0_iter74;
reg    ap_enable_reg_pp0_iter75;
reg    ap_enable_reg_pp0_iter77;
wire    ap_CS_fsm_state89;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state90;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state102;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state103;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp3_stage3_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter1;
reg    ap_condition_pp3_exit_iter1_state122;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state128;
reg   [6:0] ybuf_address0;
reg    ybuf_ce0;
reg    ybuf_we0;
reg   [6:0] bbuf_address0;
reg    bbuf_ce0;
reg    bbuf_we0;
wire   [31:0] bbuf_d0;
reg   [13:0] wbuf_address0;
reg    wbuf_ce0;
reg    wbuf_we0;
reg   [31:0] wbuf_d0;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_290_p4;
reg   [31:0] ap_phi_mux_i_phi_fu_302_p4;
reg   [31:0] ap_phi_mux_j_phi_fu_314_p4;
reg   [31:0] i_1_reg_344;
wire    ap_CS_fsm_state126;
reg   [31:0] ap_phi_mux_j_1_phi_fu_359_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_371_p4;
wire    ap_block_pp3_stage2;
wire   [31:0] zext_ln27_1_fu_534_p1;
wire   [31:0] loop_index28_cast_cast_fu_585_p1;
wire   [31:0] loop_index22_cast_cast_fu_640_p1;
wire   [31:0] zext_ln38_fu_687_p1;
wire   [31:0] zext_ln41_1_fu_715_p1;
wire   [31:0] loop_index_cast_cast_fu_755_p1;
wire  signed [31:0] sext_ln25_fu_520_p1;
wire  signed [31:0] p_cast_cast_fu_555_p1;
wire  signed [31:0] p_cast2_cast_fu_610_p1;
wire  signed [31:0] sext_ln41_fu_653_p1;
wire   [31:0] p_cast4_cast_fu_730_p1;
reg    ap_block_state83_io;
reg    ap_block_state96_io;
reg    ap_block_state135;
wire    ap_block_pp4_stage0_01001;
wire   [31:0] bitcast_ln27_fu_530_p1;
wire   [31:0] empty_28_fu_636_p1;
wire    ap_block_pp3_stage3;
wire   [31:0] grp_fu_394_p1;
wire  signed [31:0] trunc_ln25_fu_398_p0;
wire   [31:0] grp_fu_408_p0;
wire   [31:0] grp_fu_408_p1;
wire   [31:0] grp_fu_425_p1;
wire   [0:0] icmp_ln26_fu_436_p2;
wire   [31:0] add_ln25_fu_430_p2;
wire   [6:0] mul_ln27_fu_478_p0;
wire   [7:0] mul_ln27_fu_478_p1;
wire   [13:0] mul_ln27_fu_478_p2;
wire   [13:0] trunc_ln27_fu_484_p1;
wire   [31:0] sext_ln27_1_mid2_v_v_v_v_fu_493_p3;
wire   [31:0] add_ln25_1_fu_500_p2;
wire   [29:0] p_cast_fu_546_p4;
wire    ap_CS_fsm_state93;
wire   [29:0] p_cast2_fu_601_p4;
wire   [29:0] trunc_ln41_3_fu_644_p4;
wire   [6:0] mul_ln41_fu_695_p0;
wire   [7:0] mul_ln41_fu_695_p1;
wire   [13:0] trunc_ln41_fu_706_p1;
wire   [13:0] add_ln41_fu_710_p2;
wire   [6:0] empty_33_fu_751_p1;
reg    grp_fu_389_ce;
reg    grp_fu_394_ce;
reg    grp_fu_425_ce;
reg    grp_fu_471_ce;
reg   [44:0] ap_NS_fsm;
wire    ap_block_pp3_stage0_subdone;
reg    ap_block_pp3_stage1_subdone;
wire    ap_block_pp3_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [63:0] grp_fu_408_p00;
wire   [63:0] grp_fu_408_p10;
wire   [13:0] mul_ln27_fu_478_p00;
wire   [13:0] mul_ln41_fu_695_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter76 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
#0 ap_enable_reg_pp0_iter75 = 1'b0;
#0 ap_enable_reg_pp0_iter77 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
end

forward_fcc_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .w(w),
    .y(y),
    .b(b),
    .xdim(xdim),
    .ydim(ydim),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

forward_fcc_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(p_cast4_cast_fu_730_p1),
    .I_AWID(1'd0),
    .I_AWLEN(ydim_read_reg_764),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

forward_fcc_ybuf #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
ybuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ybuf_address0),
    .ce0(ybuf_ce0),
    .we0(ybuf_we0),
    .d0(storemerge_reg_367),
    .q0(ybuf_q0)
);

forward_fcc_ybuf #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
bbuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_address0),
    .ce0(bbuf_ce0),
    .we0(bbuf_we0),
    .d0(bbuf_d0),
    .q0(bbuf_q0)
);

forward_fcc_wbuf #(
    .DataWidth( 32 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
wbuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_address0),
    .ce0(wbuf_ce0),
    .we0(wbuf_we0),
    .d0(wbuf_d0),
    .q0(wbuf_q0)
);

forward_fcc_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_mux_storemerge_phi_fu_371_p4),
    .din1(mul_reg_1046),
    .ce(grp_fu_389_ce),
    .dout(grp_fu_389_p2)
);

forward_fcc_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wbuf_load_reg_1026),
    .din1(grp_fu_394_p1),
    .ce(grp_fu_394_ce),
    .dout(grp_fu_394_p2)
);

forward_fcc_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_408_p0),
    .din1(grp_fu_408_p1),
    .ce(1'b1),
    .dout(grp_fu_408_p2)
);

forward_fcc_urem_64ns_32ns_64_68_1 #(
    .ID( 1 ),
    .NUM_STAGE( 68 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
urem_64ns_32ns_64_68_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_290_p4),
    .din1(grp_fu_425_p1),
    .ce(grp_fu_425_ce),
    .dout(grp_fu_425_p2)
);

forward_fcc_mul_30s_30s_30_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
mul_30s_30s_30_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln25_1_reg_846),
    .din1(trunc_ln25_reg_806),
    .ce(grp_fu_471_ce),
    .dout(grp_fu_471_p2)
);

forward_fcc_mul_7ns_8ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_7ns_8ns_14_1_1_U6(
    .din0(mul_ln27_fu_478_p0),
    .din1(mul_ln27_fu_478_p1),
    .dout(mul_ln27_fu_478_p2)
);

forward_fcc_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydim_read_reg_764),
    .din1(xdim_read_reg_775),
    .ce(1'b1),
    .dout(grp_fu_589_p2)
);

forward_fcc_mul_7ns_8ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_7ns_8ns_14_1_1_U8(
    .din0(mul_ln41_fu_695_p0),
    .din1(mul_ln41_fu_695_p1),
    .dout(mul_ln41_fu_695_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter37_state41)) begin
                ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter36;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter75 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter76 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter76 <= ap_enable_reg_pp0_iter75;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter77 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter77 <= ap_enable_reg_pp0_iter76;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter77 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state90) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state89)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state90)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state90);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state89)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state103) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state102)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state103)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state103);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state102)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state114)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_state114) | ((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_condition_pp3_exit_iter1_state122) & (1'b0 == ap_block_pp3_stage3_subdone)))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b1 == ap_condition_pp3_exit_iter1_state122) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if (((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state114)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state128) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state128)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state128);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        i_1_reg_344 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        i_1_reg_344 <= add_ln36_reg_978;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_832_pp0_iter65_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter66 == 1'b1))) begin
        i_reg_298 <= select_ln25_1_reg_841;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_298 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_286 <= add_ln25_2_reg_827;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_286 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        j_1_reg_355 <= add_ln40_reg_1041;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        j_1_reg_355 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_832_pp0_iter65_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter66 == 1'b1))) begin
        j_reg_310 <= add_ln26_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_310 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        loop_index22_reg_333 <= 62'd0;
    end else if (((exitcond377_fu_627_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        loop_index22_reg_333 <= empty_26_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        loop_index28_reg_322 <= 62'd0;
    end else if (((exitcond388_fu_572_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index28_reg_322 <= empty_22_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
        loop_index_reg_378 <= 62'd0;
    end else if (((exitcond3_fu_746_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        loop_index_reg_378 <= empty_31_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln40_reg_1017_pp3_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        storemerge_reg_367 <= grp_fu_389_p2;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        storemerge_reg_367 <= bbuf_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln25_2_reg_827 <= add_ln25_2_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter65 == 1'b1) & (icmp_ln25_reg_832_pp0_iter64_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln26_reg_856 <= add_ln26_fu_465_p2;
        select_ln25_1_reg_841 <= select_ln25_1_fu_449_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_832_pp0_iter65_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln27_reg_861 <= add_ln27_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln27_reg_861_pp0_iter67_reg <= add_ln27_reg_861;
        add_ln27_reg_861_pp0_iter68_reg <= add_ln27_reg_861_pp0_iter67_reg;
        add_ln27_reg_861_pp0_iter69_reg <= add_ln27_reg_861_pp0_iter68_reg;
        add_ln27_reg_861_pp0_iter70_reg <= add_ln27_reg_861_pp0_iter69_reg;
        add_ln27_reg_861_pp0_iter71_reg <= add_ln27_reg_861_pp0_iter70_reg;
        add_ln27_reg_861_pp0_iter72_reg <= add_ln27_reg_861_pp0_iter71_reg;
        add_ln27_reg_861_pp0_iter73_reg <= add_ln27_reg_861_pp0_iter72_reg;
        add_ln27_reg_861_pp0_iter74_reg <= add_ln27_reg_861_pp0_iter73_reg;
        add_ln27_reg_861_pp0_iter75_reg <= add_ln27_reg_861_pp0_iter74_reg;
        add_ln27_reg_861_pp0_iter76_reg <= add_ln27_reg_861_pp0_iter75_reg;
        icmp_ln25_reg_832_pp0_iter10_reg <= icmp_ln25_reg_832_pp0_iter9_reg;
        icmp_ln25_reg_832_pp0_iter11_reg <= icmp_ln25_reg_832_pp0_iter10_reg;
        icmp_ln25_reg_832_pp0_iter12_reg <= icmp_ln25_reg_832_pp0_iter11_reg;
        icmp_ln25_reg_832_pp0_iter13_reg <= icmp_ln25_reg_832_pp0_iter12_reg;
        icmp_ln25_reg_832_pp0_iter14_reg <= icmp_ln25_reg_832_pp0_iter13_reg;
        icmp_ln25_reg_832_pp0_iter15_reg <= icmp_ln25_reg_832_pp0_iter14_reg;
        icmp_ln25_reg_832_pp0_iter16_reg <= icmp_ln25_reg_832_pp0_iter15_reg;
        icmp_ln25_reg_832_pp0_iter17_reg <= icmp_ln25_reg_832_pp0_iter16_reg;
        icmp_ln25_reg_832_pp0_iter18_reg <= icmp_ln25_reg_832_pp0_iter17_reg;
        icmp_ln25_reg_832_pp0_iter19_reg <= icmp_ln25_reg_832_pp0_iter18_reg;
        icmp_ln25_reg_832_pp0_iter20_reg <= icmp_ln25_reg_832_pp0_iter19_reg;
        icmp_ln25_reg_832_pp0_iter21_reg <= icmp_ln25_reg_832_pp0_iter20_reg;
        icmp_ln25_reg_832_pp0_iter22_reg <= icmp_ln25_reg_832_pp0_iter21_reg;
        icmp_ln25_reg_832_pp0_iter23_reg <= icmp_ln25_reg_832_pp0_iter22_reg;
        icmp_ln25_reg_832_pp0_iter24_reg <= icmp_ln25_reg_832_pp0_iter23_reg;
        icmp_ln25_reg_832_pp0_iter25_reg <= icmp_ln25_reg_832_pp0_iter24_reg;
        icmp_ln25_reg_832_pp0_iter26_reg <= icmp_ln25_reg_832_pp0_iter25_reg;
        icmp_ln25_reg_832_pp0_iter27_reg <= icmp_ln25_reg_832_pp0_iter26_reg;
        icmp_ln25_reg_832_pp0_iter28_reg <= icmp_ln25_reg_832_pp0_iter27_reg;
        icmp_ln25_reg_832_pp0_iter29_reg <= icmp_ln25_reg_832_pp0_iter28_reg;
        icmp_ln25_reg_832_pp0_iter2_reg <= icmp_ln25_reg_832_pp0_iter1_reg;
        icmp_ln25_reg_832_pp0_iter30_reg <= icmp_ln25_reg_832_pp0_iter29_reg;
        icmp_ln25_reg_832_pp0_iter31_reg <= icmp_ln25_reg_832_pp0_iter30_reg;
        icmp_ln25_reg_832_pp0_iter32_reg <= icmp_ln25_reg_832_pp0_iter31_reg;
        icmp_ln25_reg_832_pp0_iter33_reg <= icmp_ln25_reg_832_pp0_iter32_reg;
        icmp_ln25_reg_832_pp0_iter34_reg <= icmp_ln25_reg_832_pp0_iter33_reg;
        icmp_ln25_reg_832_pp0_iter35_reg <= icmp_ln25_reg_832_pp0_iter34_reg;
        icmp_ln25_reg_832_pp0_iter36_reg <= icmp_ln25_reg_832_pp0_iter35_reg;
        icmp_ln25_reg_832_pp0_iter37_reg <= icmp_ln25_reg_832_pp0_iter36_reg;
        icmp_ln25_reg_832_pp0_iter38_reg <= icmp_ln25_reg_832_pp0_iter37_reg;
        icmp_ln25_reg_832_pp0_iter39_reg <= icmp_ln25_reg_832_pp0_iter38_reg;
        icmp_ln25_reg_832_pp0_iter3_reg <= icmp_ln25_reg_832_pp0_iter2_reg;
        icmp_ln25_reg_832_pp0_iter40_reg <= icmp_ln25_reg_832_pp0_iter39_reg;
        icmp_ln25_reg_832_pp0_iter41_reg <= icmp_ln25_reg_832_pp0_iter40_reg;
        icmp_ln25_reg_832_pp0_iter42_reg <= icmp_ln25_reg_832_pp0_iter41_reg;
        icmp_ln25_reg_832_pp0_iter43_reg <= icmp_ln25_reg_832_pp0_iter42_reg;
        icmp_ln25_reg_832_pp0_iter44_reg <= icmp_ln25_reg_832_pp0_iter43_reg;
        icmp_ln25_reg_832_pp0_iter45_reg <= icmp_ln25_reg_832_pp0_iter44_reg;
        icmp_ln25_reg_832_pp0_iter46_reg <= icmp_ln25_reg_832_pp0_iter45_reg;
        icmp_ln25_reg_832_pp0_iter47_reg <= icmp_ln25_reg_832_pp0_iter46_reg;
        icmp_ln25_reg_832_pp0_iter48_reg <= icmp_ln25_reg_832_pp0_iter47_reg;
        icmp_ln25_reg_832_pp0_iter49_reg <= icmp_ln25_reg_832_pp0_iter48_reg;
        icmp_ln25_reg_832_pp0_iter4_reg <= icmp_ln25_reg_832_pp0_iter3_reg;
        icmp_ln25_reg_832_pp0_iter50_reg <= icmp_ln25_reg_832_pp0_iter49_reg;
        icmp_ln25_reg_832_pp0_iter51_reg <= icmp_ln25_reg_832_pp0_iter50_reg;
        icmp_ln25_reg_832_pp0_iter52_reg <= icmp_ln25_reg_832_pp0_iter51_reg;
        icmp_ln25_reg_832_pp0_iter53_reg <= icmp_ln25_reg_832_pp0_iter52_reg;
        icmp_ln25_reg_832_pp0_iter54_reg <= icmp_ln25_reg_832_pp0_iter53_reg;
        icmp_ln25_reg_832_pp0_iter55_reg <= icmp_ln25_reg_832_pp0_iter54_reg;
        icmp_ln25_reg_832_pp0_iter56_reg <= icmp_ln25_reg_832_pp0_iter55_reg;
        icmp_ln25_reg_832_pp0_iter57_reg <= icmp_ln25_reg_832_pp0_iter56_reg;
        icmp_ln25_reg_832_pp0_iter58_reg <= icmp_ln25_reg_832_pp0_iter57_reg;
        icmp_ln25_reg_832_pp0_iter59_reg <= icmp_ln25_reg_832_pp0_iter58_reg;
        icmp_ln25_reg_832_pp0_iter5_reg <= icmp_ln25_reg_832_pp0_iter4_reg;
        icmp_ln25_reg_832_pp0_iter60_reg <= icmp_ln25_reg_832_pp0_iter59_reg;
        icmp_ln25_reg_832_pp0_iter61_reg <= icmp_ln25_reg_832_pp0_iter60_reg;
        icmp_ln25_reg_832_pp0_iter62_reg <= icmp_ln25_reg_832_pp0_iter61_reg;
        icmp_ln25_reg_832_pp0_iter63_reg <= icmp_ln25_reg_832_pp0_iter62_reg;
        icmp_ln25_reg_832_pp0_iter64_reg <= icmp_ln25_reg_832_pp0_iter63_reg;
        icmp_ln25_reg_832_pp0_iter65_reg <= icmp_ln25_reg_832_pp0_iter64_reg;
        icmp_ln25_reg_832_pp0_iter66_reg <= icmp_ln25_reg_832_pp0_iter65_reg;
        icmp_ln25_reg_832_pp0_iter67_reg <= icmp_ln25_reg_832_pp0_iter66_reg;
        icmp_ln25_reg_832_pp0_iter68_reg <= icmp_ln25_reg_832_pp0_iter67_reg;
        icmp_ln25_reg_832_pp0_iter69_reg <= icmp_ln25_reg_832_pp0_iter68_reg;
        icmp_ln25_reg_832_pp0_iter6_reg <= icmp_ln25_reg_832_pp0_iter5_reg;
        icmp_ln25_reg_832_pp0_iter70_reg <= icmp_ln25_reg_832_pp0_iter69_reg;
        icmp_ln25_reg_832_pp0_iter71_reg <= icmp_ln25_reg_832_pp0_iter70_reg;
        icmp_ln25_reg_832_pp0_iter72_reg <= icmp_ln25_reg_832_pp0_iter71_reg;
        icmp_ln25_reg_832_pp0_iter73_reg <= icmp_ln25_reg_832_pp0_iter72_reg;
        icmp_ln25_reg_832_pp0_iter74_reg <= icmp_ln25_reg_832_pp0_iter73_reg;
        icmp_ln25_reg_832_pp0_iter75_reg <= icmp_ln25_reg_832_pp0_iter74_reg;
        icmp_ln25_reg_832_pp0_iter76_reg <= icmp_ln25_reg_832_pp0_iter75_reg;
        icmp_ln25_reg_832_pp0_iter7_reg <= icmp_ln25_reg_832_pp0_iter6_reg;
        icmp_ln25_reg_832_pp0_iter8_reg <= icmp_ln25_reg_832_pp0_iter7_reg;
        icmp_ln25_reg_832_pp0_iter9_reg <= icmp_ln25_reg_832_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        add_ln36_reg_978 <= add_ln36_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001))) begin
        add_ln40_reg_1041 <= add_ln40_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_785 <= b;
        trunc_ln25_reg_806 <= trunc_ln25_fu_398_p1;
        w_read_reg_795 <= w;
        x_read_reg_801 <= x;
        xdim_read_reg_775 <= xdim;
        y_read_reg_790 <= y;
        ydim_read_reg_764 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound_reg_822 <= grp_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cast2_reg_816[31 : 0] <= cast2_fu_405_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond388_fu_572_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_25_reg_921 <= empty_25_fu_577_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_25_reg_921_pp1_iter1_reg <= empty_25_reg_921;
        exitcond388_reg_917 <= exitcond388_fu_572_p2;
        exitcond388_reg_917_pp1_iter1_reg <= exitcond388_reg_917;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond377_fu_627_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_29_reg_962 <= empty_29_fu_632_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_29_reg_962_pp2_iter1_reg <= empty_29_reg_962;
        exitcond377_reg_958 <= exitcond377_fu_627_p2;
        exitcond377_reg_958_pp2_iter1_reg <= exitcond377_reg_958;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        exitcond3_reg_1067 <= exitcond3_fu_746_p2;
        exitcond3_reg_1067_pp4_iter1_reg <= exitcond3_reg_1067;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_832_pp0_iter75_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_1_read_reg_891 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond377_reg_958 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        gmem_addr_2_read_reg_967 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        gmem_addr_4_read_reg_1031 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state106)) begin
        gmem_addr_4_reg_972 <= sext_ln41_fu_653_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond388_reg_917 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_read_reg_926 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln25_reg_832 <= icmp_ln25_fu_420_p2;
        icmp_ln25_reg_832_pp0_iter1_reg <= icmp_ln25_reg_832;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        icmp_ln33_reg_896 <= icmp_ln33_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        icmp_ln34_reg_938 <= icmp_ln34_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln40_reg_1017 <= icmp_ln40_fu_701_p2;
        icmp_ln40_reg_1017_pp3_iter1_reg <= icmp_ln40_reg_1017;
        icmp_ln40_reg_1017_pp3_iter2_reg <= icmp_ln40_reg_1017_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_832_pp0_iter67_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln6_reg_881 <= icmp_ln6_fu_515_p2;
        sext_ln27_1_mid2_v_reg_876 <= {{add_ln25_1_fu_500_p2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_832_pp0_iter66_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln25_reg_866 <= grp_fu_471_p2;
        urem_ln6_reg_871 <= grp_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        mul_ln34_reg_931 <= grp_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state114)) begin
        mul_ln41_reg_1007 <= mul_ln41_fu_695_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        mul_reg_1046 <= grp_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_669_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state107) & (icmp_ln33_reg_896 == 1'd1))) begin
        p_cast4_reg_992 <= {{y_read_reg_790[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_832_pp0_iter64_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln25_reg_836 <= select_ln25_fu_441_p3;
        trunc_ln25_1_reg_846 <= trunc_ln25_1_fu_457_p1;
        trunc_ln25_2_reg_851 <= trunc_ln25_2_fu_461_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        sext_ln33_reg_900 <= sext_ln33_fu_543_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        sext_ln34_reg_942 <= sext_ln34_fu_598_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_669_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state107))) begin
        trunc_ln38_reg_986 <= trunc_ln38_fu_674_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        wbuf_load_reg_1026 <= wbuf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        ybuf_addr_reg_1002 <= zext_ln38_fu_687_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (exitcond3_reg_1067 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        ybuf_load_reg_1076 <= ybuf_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter37 == 1'b1) & (ap_enable_reg_pp0_iter36 == 1'b0))) begin
        ap_condition_pp0_exit_iter37_state41 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter37_state41 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_420_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond388_fu_572_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state90 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state90 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond377_fu_627_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state103 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state103 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_condition_pp3_exit_iter1_state122 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state122 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_reg_1017 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_746_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state128 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state128 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln33_reg_896 == 1'd1)) & (1'b1 == ap_CS_fsm_state135))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter76 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter77 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b0) & (ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_832_pp0_iter65_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter66 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_302_p4 = select_ln25_1_reg_841;
    end else begin
        ap_phi_mux_i_phi_fu_302_p4 = i_reg_298;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_832 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_290_p4 = add_ln25_2_reg_827;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_290_p4 = indvar_flatten_reg_286;
    end
end

always @ (*) begin
    if (((icmp_ln40_reg_1017 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ap_phi_mux_j_1_phi_fu_359_p4 = add_ln40_reg_1041;
    end else begin
        ap_phi_mux_j_1_phi_fu_359_p4 = j_1_reg_355;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_832_pp0_iter65_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter66 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_314_p4 = add_ln26_reg_856;
    end else begin
        ap_phi_mux_j_phi_fu_314_p4 = j_reg_310;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln40_reg_1017_pp3_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        ap_phi_mux_storemerge_phi_fu_371_p4 = grp_fu_389_p2;
    end else begin
        ap_phi_mux_storemerge_phi_fu_371_p4 = storemerge_reg_367;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln33_reg_896 == 1'd1)) & (1'b1 == ap_CS_fsm_state135))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        bbuf_address0 = zext_ln38_fu_687_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bbuf_address0 = loop_index28_cast_cast_fu_585_p1;
    end else begin
        bbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state113) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        bbuf_ce0 = 1'b1;
    end else begin
        bbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond388_reg_917_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        bbuf_we0 = 1'b1;
    end else begin
        bbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
        gmem_ARADDR = gmem_addr_4_reg_972;
    end else if (((icmp_ln34_reg_938 == 1'd0) & (1'b1 == ap_CS_fsm_state96) & (1'b0 == ap_block_state96_io))) begin
        gmem_ARADDR = p_cast2_cast_fu_610_p1;
    end else if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln33_reg_896 == 1'd1) & (1'b0 == ap_block_state83_io))) begin
        gmem_ARADDR = p_cast_cast_fu_555_p1;
    end else if (((icmp_ln6_reg_881 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter69 == 1'b1))) begin
        gmem_ARADDR = sext_ln25_fu_520_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln34_reg_938 == 1'd0) & (1'b1 == ap_CS_fsm_state96) & (1'b0 == ap_block_state96_io))) begin
        gmem_ARLEN = mul_ln34_reg_931;
    end else if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln33_reg_896 == 1'd1) & (1'b0 == ap_block_state83_io))) begin
        gmem_ARLEN = ydim_read_reg_764;
    end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state108)) | ((icmp_ln6_reg_881 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter69 == 1'b1)))) begin
        gmem_ARLEN = xdim_read_reg_775;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln34_reg_938 == 1'd0) & (1'b1 == ap_CS_fsm_state96) & (1'b0 == ap_block_state96_io)) | ((1'b1 == ap_CS_fsm_state83) & (icmp_ln33_reg_896 == 1'd1) & (1'b0 == ap_block_state83_io)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state108)) | ((icmp_ln6_reg_881 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter69 == 1'b1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln33_reg_896 == 1'd1)) & (1'b1 == ap_CS_fsm_state135) & (icmp_ln33_reg_896 == 1'd1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond377_reg_958 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln40_reg_1017 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond388_reg_917 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln25_reg_832_pp0_iter75_reg == 1'd0) & (ap_enable_reg_pp0_iter76 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_1067_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) | ((icmp_ln34_reg_938 == 1'd0) & (1'b1 == ap_CS_fsm_state96)) | ((1'b1 == ap_CS_fsm_state83) & (icmp_ln33_reg_896 == 1'd1)) | ((icmp_ln6_reg_881 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter69 == 1'b1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state135) & (icmp_ln33_reg_896 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond377_reg_958 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln40_reg_1017 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond388_reg_917 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln25_reg_832_pp0_iter75_reg == 1'd0) & (ap_enable_reg_pp0_iter76 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond3_reg_1067_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)))) begin
        grp_fu_389_ce = 1'b1;
    end else begin
        grp_fu_389_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001)))) begin
        grp_fu_394_ce = 1'b1;
    end else begin
        grp_fu_394_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_425_ce = 1'b1;
    end else begin
        grp_fu_425_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_471_ce = 1'b1;
    end else begin
        grp_fu_471_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        wbuf_address0 = zext_ln41_1_fu_715_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        wbuf_address0 = loop_index22_cast_cast_fu_640_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter77 == 1'b1))) begin
        wbuf_address0 = zext_ln27_1_fu_534_p1;
    end else begin
        wbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter77 == 1'b1)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        wbuf_ce0 = 1'b1;
    end else begin
        wbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        wbuf_d0 = empty_28_fu_636_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter77 == 1'b1))) begin
        wbuf_d0 = bitcast_ln27_fu_530_p1;
    end else begin
        wbuf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond377_reg_958_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((icmp_ln25_reg_832_pp0_iter76_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter77 == 1'b1)))) begin
        wbuf_we0 = 1'b1;
    end else begin
        wbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ybuf_address0 = loop_index_cast_cast_fu_755_p1;
    end else if (((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ybuf_address0 = ybuf_addr_reg_1002;
    end else begin
        ybuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001) & (ap_enable_reg_pp3_iter1 == 1'b1)))) begin
        ybuf_ce0 = 1'b1;
    end else begin
        ybuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
        ybuf_we0 = 1'b1;
    end else begin
        ybuf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b1) & (ap_enable_reg_pp0_iter36 == 1'b0)) & ~((ap_enable_reg_pp0_iter76 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter77 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b1) & (ap_enable_reg_pp0_iter36 == 1'b0)) | ((ap_enable_reg_pp0_iter76 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter77 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln33_reg_896 == 1'd0) & (1'b0 == ap_block_state83_io))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else if (((1'b1 == ap_CS_fsm_state83) & (icmp_ln33_reg_896 == 1'd1) & (1'b0 == ap_block_state83_io))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond388_fu_572_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((exitcond388_fu_572_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((icmp_ln34_reg_938 == 1'd1) & (1'b1 == ap_CS_fsm_state96) & (1'b0 == ap_block_state96_io))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else if (((icmp_ln34_reg_938 == 1'd0) & (1'b1 == ap_CS_fsm_state96) & (1'b0 == ap_block_state96_io))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond377_fu_627_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((exitcond377_fu_627_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state106;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if (((icmp_ln36_fu_669_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state107) & (icmp_ln33_reg_896 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else if (((icmp_ln36_fu_669_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state107) & (icmp_ln33_reg_896 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        ap_ST_fsm_state108 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((1'b0 == ap_block_pp3_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((1'b0 == ap_block_pp3_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1)) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone) & (ap_enable_reg_pp3_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state127 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond3_fu_746_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond3_fu_746_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state131;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln33_reg_896 == 1'd1)) & (1'b1 == ap_CS_fsm_state135))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_500_p2 = (sext_ln27_1_mid2_v_v_v_v_fu_493_p3 + w_read_reg_795);

assign add_ln25_2_fu_414_p2 = (ap_phi_mux_indvar_flatten_phi_fu_290_p4 + 64'd1);

assign add_ln25_fu_430_p2 = (ap_phi_mux_i_phi_fu_302_p4 + 32'd1);

assign add_ln26_fu_465_p2 = (select_ln25_fu_441_p3 + 32'd1);

assign add_ln27_fu_487_p2 = (mul_ln27_fu_478_p2 + trunc_ln27_fu_484_p1);

assign add_ln36_fu_663_p2 = (i_1_reg_344 + 32'd1);

assign add_ln40_fu_724_p2 = (j_1_reg_355 + 32'd1);

assign add_ln41_fu_710_p2 = (mul_ln41_reg_1007 + trunc_ln41_fu_706_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd16];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_RVALID == 1'b0) & (icmp_ln25_reg_832_pp0_iter75_reg == 1'd0) & (ap_enable_reg_pp0_iter76 == 1'b1)) | ((1'b1 == ap_block_state73_io) & (ap_enable_reg_pp0_iter69 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_RVALID == 1'b0) & (icmp_ln25_reg_832_pp0_iter75_reg == 1'd0) & (ap_enable_reg_pp0_iter76 == 1'b1)) | ((1'b1 == ap_block_state73_io) & (ap_enable_reg_pp0_iter69 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond388_reg_917 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond388_reg_917 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond377_reg_958 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond377_reg_958 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage1_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln40_reg_1017 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage1_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln40_reg_1017 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1));
end

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state130_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state130_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_state103_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state104_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond377_reg_958 == 1'd0));
end

assign ap_block_state105_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state116_pp3_stage1_iter0 = ((gmem_RVALID == 1'b0) & (icmp_ln40_reg_1017 == 1'd0));
end

assign ap_block_state117_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp3_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp3_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp3_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state130_io = ((gmem_WREADY == 1'b0) & (exitcond3_reg_1067_pp4_iter1_reg == 1'd0));
end

assign ap_block_state130_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state135 = ((gmem_BVALID == 1'b0) & (icmp_ln33_reg_896 == 1'd1));
end

assign ap_block_state13_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_io = ((gmem_ARREADY == 1'b0) & (icmp_ln6_reg_881 == 1'd1));
end

assign ap_block_state73_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter72 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter73 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter74 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage0_iter75 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80_pp0_stage0_iter76 = ((gmem_RVALID == 1'b0) & (icmp_ln25_reg_832_pp0_iter75_reg == 1'd0));
end

assign ap_block_state81_pp0_stage0_iter77 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state83_io = ((gmem_ARREADY == 1'b0) & (icmp_ln33_reg_896 == 1'd1));
end

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state91_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond388_reg_917 == 1'd0));
end

assign ap_block_state92_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state96_io = ((gmem_ARREADY == 1'b0) & (icmp_ln34_reg_938 == 1'd0));
end

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bbuf_d0 = gmem_addr_read_reg_926;

assign bitcast_ln27_fu_530_p1 = gmem_addr_1_read_reg_891;

assign cast2_fu_405_p1 = $unsigned(xdim_read_reg_775);

assign empty_22_fu_566_p2 = (loop_index28_reg_322 + 62'd1);

assign empty_25_fu_577_p1 = loop_index28_reg_322[6:0];

assign empty_26_fu_621_p2 = (loop_index22_reg_333 + 62'd1);

assign empty_28_fu_636_p1 = gmem_addr_2_read_reg_967;

assign empty_29_fu_632_p1 = loop_index22_reg_333[13:0];

assign empty_31_fu_740_p2 = (loop_index_reg_378 + 62'd1);

assign empty_33_fu_751_p1 = loop_index_reg_378[6:0];

assign exitcond377_fu_627_p2 = ((loop_index22_reg_333 == sext_ln34_reg_942) ? 1'b1 : 1'b0);

assign exitcond388_fu_572_p2 = ((loop_index28_reg_322 == sext_ln33_reg_900) ? 1'b1 : 1'b0);

assign exitcond3_fu_746_p2 = ((loop_index_reg_378 == sext_ln33_reg_900) ? 1'b1 : 1'b0);

assign gmem_WDATA = ybuf_load_reg_1076;

assign grp_fu_394_p1 = gmem_addr_4_read_reg_1031;

assign grp_fu_408_p0 = grp_fu_408_p00;

assign grp_fu_408_p00 = ydim_read_reg_764;

assign grp_fu_408_p1 = grp_fu_408_p10;

assign grp_fu_408_p10 = $unsigned(xdim_read_reg_775);

assign grp_fu_425_p1 = cast2_reg_816;

assign icmp_ln25_fu_420_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_290_p4 == bound_reg_822) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_436_p2 = ((ap_phi_mux_j_phi_fu_314_p4 == xdim_read_reg_775) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_538_p2 = ((ydim_read_reg_764 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_593_p2 = ((mul_ln34_reg_931 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_669_p2 = ((i_1_reg_344 == ydim_read_reg_764) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_701_p2 = ((ap_phi_mux_j_1_phi_fu_359_p4 == xdim_read_reg_775) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_515_p2 = ((urem_ln6_reg_871 == 64'd0) ? 1'b1 : 1'b0);

assign loop_index22_cast_cast_fu_640_p1 = empty_29_reg_962_pp2_iter1_reg;

assign loop_index28_cast_cast_fu_585_p1 = empty_25_reg_921_pp1_iter1_reg;

assign loop_index_cast_cast_fu_755_p1 = empty_33_fu_751_p1;

assign mul_ln27_fu_478_p0 = mul_ln27_fu_478_p00;

assign mul_ln27_fu_478_p00 = trunc_ln25_2_reg_851;

assign mul_ln27_fu_478_p1 = 14'd100;

assign mul_ln41_fu_695_p0 = mul_ln41_fu_695_p00;

assign mul_ln41_fu_695_p00 = trunc_ln38_reg_986;

assign mul_ln41_fu_695_p1 = 14'd100;

assign p_cast2_cast_fu_610_p1 = $signed(p_cast2_fu_601_p4);

assign p_cast2_fu_601_p4 = {{w_read_reg_795[31:2]}};

assign p_cast4_cast_fu_730_p1 = $signed(p_cast4_reg_992);

assign p_cast_cast_fu_555_p1 = $signed(p_cast_fu_546_p4);

assign p_cast_fu_546_p4 = {{b_read_reg_785[31:2]}};

assign select_ln25_1_fu_449_p3 = ((icmp_ln26_fu_436_p2[0:0] == 1'b1) ? add_ln25_fu_430_p2 : ap_phi_mux_i_phi_fu_302_p4);

assign select_ln25_fu_441_p3 = ((icmp_ln26_fu_436_p2[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_j_phi_fu_314_p4);

assign sext_ln25_fu_520_p1 = $signed(sext_ln27_1_mid2_v_reg_876);

assign sext_ln27_1_mid2_v_v_v_v_fu_493_p3 = {{mul_ln25_reg_866}, {2'd0}};

assign sext_ln33_fu_543_p1 = $signed(ydim_read_reg_764);

assign sext_ln34_fu_598_p1 = mul_ln34_reg_931;

assign sext_ln41_fu_653_p1 = $signed(trunc_ln41_3_fu_644_p4);

assign trunc_ln25_1_fu_457_p1 = select_ln25_1_fu_449_p3[29:0];

assign trunc_ln25_2_fu_461_p1 = select_ln25_1_fu_449_p3[6:0];

assign trunc_ln25_fu_398_p0 = xdim;

assign trunc_ln25_fu_398_p1 = trunc_ln25_fu_398_p0[29:0];

assign trunc_ln27_fu_484_p1 = select_ln25_reg_836[13:0];

assign trunc_ln38_fu_674_p1 = i_1_reg_344[6:0];

assign trunc_ln41_3_fu_644_p4 = {{x_read_reg_801[31:2]}};

assign trunc_ln41_fu_706_p1 = ap_phi_mux_j_1_phi_fu_359_p4[13:0];

assign zext_ln27_1_fu_534_p1 = add_ln27_reg_861_pp0_iter76_reg;

assign zext_ln38_fu_687_p1 = trunc_ln38_reg_986;

assign zext_ln41_1_fu_715_p1 = add_ln41_fu_710_p2;

always @ (posedge ap_clk) begin
    cast2_reg_816[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //forward_fcc
