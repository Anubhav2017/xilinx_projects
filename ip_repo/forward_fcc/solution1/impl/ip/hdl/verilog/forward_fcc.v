// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="forward_fcc_forward_fcc,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.512000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=2796,HLS_SYN_LUT=3209,HLS_VERSION=2020_2}" *)

module forward_fcc (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 44'd1;
parameter    ap_ST_fsm_state2 = 44'd2;
parameter    ap_ST_fsm_state3 = 44'd4;
parameter    ap_ST_fsm_state4 = 44'd8;
parameter    ap_ST_fsm_state5 = 44'd16;
parameter    ap_ST_fsm_state6 = 44'd32;
parameter    ap_ST_fsm_state7 = 44'd64;
parameter    ap_ST_fsm_state8 = 44'd128;
parameter    ap_ST_fsm_pp0_stage0 = 44'd256;
parameter    ap_ST_fsm_state12 = 44'd512;
parameter    ap_ST_fsm_state13 = 44'd1024;
parameter    ap_ST_fsm_state14 = 44'd2048;
parameter    ap_ST_fsm_state15 = 44'd4096;
parameter    ap_ST_fsm_state16 = 44'd8192;
parameter    ap_ST_fsm_state17 = 44'd16384;
parameter    ap_ST_fsm_state18 = 44'd32768;
parameter    ap_ST_fsm_state19 = 44'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 44'd131072;
parameter    ap_ST_fsm_state23 = 44'd262144;
parameter    ap_ST_fsm_state24 = 44'd524288;
parameter    ap_ST_fsm_state25 = 44'd1048576;
parameter    ap_ST_fsm_state26 = 44'd2097152;
parameter    ap_ST_fsm_state27 = 44'd4194304;
parameter    ap_ST_fsm_state28 = 44'd8388608;
parameter    ap_ST_fsm_state29 = 44'd16777216;
parameter    ap_ST_fsm_state30 = 44'd33554432;
parameter    ap_ST_fsm_state31 = 44'd67108864;
parameter    ap_ST_fsm_state32 = 44'd134217728;
parameter    ap_ST_fsm_pp2_stage0 = 44'd268435456;
parameter    ap_ST_fsm_state36 = 44'd536870912;
parameter    ap_ST_fsm_state37 = 44'd1073741824;
parameter    ap_ST_fsm_pp3_stage0 = 44'd2147483648;
parameter    ap_ST_fsm_pp3_stage1 = 44'd4294967296;
parameter    ap_ST_fsm_pp3_stage2 = 44'd8589934592;
parameter    ap_ST_fsm_pp3_stage3 = 44'd17179869184;
parameter    ap_ST_fsm_state49 = 44'd34359738368;
parameter    ap_ST_fsm_pp4_stage0 = 44'd68719476736;
parameter    ap_ST_fsm_state58 = 44'd137438953472;
parameter    ap_ST_fsm_pp5_stage0 = 44'd274877906944;
parameter    ap_ST_fsm_state62 = 44'd549755813888;
parameter    ap_ST_fsm_state63 = 44'd1099511627776;
parameter    ap_ST_fsm_state64 = 44'd2199023255552;
parameter    ap_ST_fsm_state65 = 44'd4398046511104;
parameter    ap_ST_fsm_state66 = 44'd8796093022208;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [43:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] w;
wire   [31:0] y;
wire   [31:0] b;
wire   [31:0] xdimension;
wire   [31:0] ydimension;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln29_reg_754;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond4612_reg_774;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state58;
reg   [0:0] icmp_ln30_reg_788;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_pp5_stage0;
reg   [0:0] exitcond4_reg_967;
reg   [0:0] exitcond4_reg_967_pp5_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond4410_reg_850;
wire    ap_CS_fsm_state26;
reg   [0:0] icmp_ln31_reg_830;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond4511_reg_809;
wire    ap_CS_fsm_state13;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
wire   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [61:0] loop_index29_reg_298;
reg   [61:0] loop_index23_reg_309;
reg   [61:0] loop_index17_reg_320;
reg   [30:0] j_reg_342;
reg   [31:0] add1714_reg_354;
reg   [30:0] i_1_reg_367;
reg   [61:0] loop_index_reg_378;
wire   [31:0] grp_fu_389_p2;
reg   [31:0] reg_398;
wire    ap_CS_fsm_pp3_stage2;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_state40_pp3_stage2_iter0;
wire    ap_block_state44_pp3_stage2_iter1;
wire    ap_block_state48_pp3_stage2_iter2;
wire    ap_block_pp3_stage2_11001;
reg   [0:0] icmp_ln38_reg_897;
reg   [0:0] icmp_ln38_reg_897_pp3_iter2_reg;
reg    ap_enable_reg_pp4_iter6;
wire    ap_block_state50_pp4_stage0_iter0;
wire    ap_block_state51_pp4_stage0_iter1;
wire    ap_block_state52_pp4_stage0_iter2;
wire    ap_block_state53_pp4_stage0_iter3;
wire    ap_block_state54_pp4_stage0_iter4;
wire    ap_block_state55_pp4_stage0_iter5;
wire    ap_block_state56_pp4_stage0_iter6;
wire    ap_block_state57_pp4_stage0_iter7;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] icmp_ln42_reg_936;
reg   [0:0] icmp_ln42_reg_936_pp4_iter5_reg;
wire   [31:0] y_t_q1;
reg   [31:0] reg_404;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_state59_pp5_stage0_iter0;
wire    ap_block_state60_pp5_stage0_iter1;
wire    ap_block_state61_pp5_stage0_iter2;
reg    ap_block_state61_io;
reg    ap_block_pp5_stage0_11001;
reg   [31:0] ydimension_read_reg_709;
reg  signed [31:0] xdimension_read_reg_720;
reg   [31:0] b_read_reg_729;
reg   [31:0] y_read_reg_734;
reg   [31:0] w_read_reg_739;
reg   [31:0] x_read_reg_744;
wire  signed [6:0] trunc_ln29_fu_409_p1;
reg  signed [6:0] trunc_ln29_reg_749;
wire   [0:0] icmp_ln29_fu_413_p2;
wire  signed [61:0] sext_ln29_fu_419_p1;
reg  signed [61:0] sext_ln29_reg_758;
wire   [61:0] empty_22_fu_442_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond4612_fu_448_p2;
reg   [0:0] exitcond4612_reg_774_pp0_iter1_reg;
wire   [6:0] empty_25_fu_453_p1;
reg   [6:0] empty_25_reg_778;
reg   [6:0] empty_25_reg_778_pp0_iter1_reg;
reg   [31:0] gmem_addr_read_reg_783;
wire   [0:0] icmp_ln30_fu_465_p2;
wire    ap_CS_fsm_state12;
wire  signed [61:0] sext_ln30_fu_470_p1;
reg  signed [61:0] sext_ln30_reg_792;
wire   [61:0] empty_26_fu_493_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state20_pp1_stage0_iter0;
reg    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond4511_fu_499_p2;
reg   [0:0] exitcond4511_reg_809_pp1_iter1_reg;
wire   [6:0] empty_29_fu_504_p1;
reg   [6:0] empty_29_reg_813;
reg   [6:0] empty_29_reg_813_pp1_iter1_reg;
reg   [31:0] gmem_addr_1_read_reg_818;
wire  signed [31:0] grp_fu_516_p2;
reg  signed [31:0] mul_ln31_reg_823;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln31_fu_520_p2;
wire    ap_CS_fsm_state25;
wire  signed [61:0] sext_ln31_fu_525_p1;
reg  signed [61:0] sext_ln31_reg_834;
wire   [61:0] empty_30_fu_548_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state33_pp2_stage0_iter0;
reg    ap_block_state34_pp2_stage0_iter1;
wire    ap_block_state35_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] exitcond4410_fu_554_p2;
reg   [0:0] exitcond4410_reg_850_pp2_iter1_reg;
wire   [6:0] empty_33_fu_559_p1;
reg   [6:0] empty_33_reg_854;
reg   [6:0] empty_33_reg_854_pp2_iter1_reg;
reg   [31:0] gmem_addr_2_read_reg_859;
wire   [0:0] icmp_ln33_fu_571_p2;
wire    ap_CS_fsm_state36;
wire   [0:0] cmp83_fu_576_p2;
reg   [0:0] cmp83_reg_868;
wire   [30:0] trunc_ln33_fu_581_p1;
reg   [30:0] trunc_ln33_reg_872;
wire   [30:0] add_ln33_fu_584_p2;
reg   [30:0] add_ln33_reg_878;
wire    ap_CS_fsm_state37;
wire   [0:0] icmp_ln33_1_fu_590_p2;
reg   [6:0] y_t_addr_reg_887;
wire   [6:0] empty_35_fu_604_p2;
reg   [6:0] empty_35_reg_892;
wire   [0:0] icmp_ln38_fu_613_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state38_pp3_stage0_iter0;
wire    ap_block_state42_pp3_stage0_iter1;
wire    ap_block_state46_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln38_reg_897_pp3_iter1_reg;
wire   [31:0] w_t_q0;
reg   [31:0] w_t_load_reg_911;
wire    ap_CS_fsm_pp3_stage1;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state39_pp3_stage1_iter0;
wire    ap_block_state43_pp3_stage1_iter1;
wire    ap_block_state47_pp3_stage1_iter2;
wire    ap_block_pp3_stage1_11001;
wire   [31:0] x_t_q0;
reg   [31:0] x_t_load_reg_916;
wire   [30:0] add_ln38_fu_637_p2;
reg   [30:0] add_ln38_reg_921;
wire    ap_CS_fsm_pp3_stage3;
wire    ap_block_state41_pp3_stage3_iter0;
wire    ap_block_state45_pp3_stage3_iter1;
wire    ap_block_pp3_stage3_11001;
wire   [31:0] grp_fu_394_p2;
reg   [31:0] mul_reg_926;
wire   [30:0] add_ln42_fu_643_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln42_fu_649_p2;
reg   [0:0] icmp_ln42_reg_936_pp4_iter1_reg;
reg   [0:0] icmp_ln42_reg_936_pp4_iter2_reg;
reg   [0:0] icmp_ln42_reg_936_pp4_iter3_reg;
reg   [0:0] icmp_ln42_reg_936_pp4_iter4_reg;
reg   [0:0] icmp_ln42_reg_936_pp4_iter6_reg;
reg   [6:0] y_t_addr_1_reg_945;
reg   [6:0] y_t_addr_1_reg_945_pp4_iter1_reg;
reg   [6:0] y_t_addr_1_reg_945_pp4_iter2_reg;
reg   [6:0] y_t_addr_1_reg_945_pp4_iter3_reg;
reg   [6:0] y_t_addr_1_reg_945_pp4_iter4_reg;
reg   [6:0] y_t_addr_1_reg_945_pp4_iter5_reg;
reg   [6:0] y_t_addr_1_reg_945_pp4_iter6_reg;
wire   [31:0] b_t_q0;
reg   [31:0] b_t_load_reg_951;
wire   [61:0] empty_40_fu_684_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [0:0] exitcond4_fu_690_p2;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state19;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state32;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state33;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp3_stage3_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage2_subdone;
reg    ap_condition_pp3_exit_iter1_state43;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state50;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter7;
reg    ap_block_state58_io;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state59;
reg   [6:0] x_t_address0;
reg    x_t_ce0;
reg    x_t_we0;
wire   [31:0] x_t_d0;
reg   [6:0] y_t_address0;
reg    y_t_ce0;
reg    y_t_we0;
reg   [31:0] y_t_d0;
reg   [6:0] y_t_address1;
reg    y_t_ce1;
reg   [6:0] b_t_address0;
reg    b_t_ce0;
reg    b_t_we0;
wire   [31:0] b_t_d0;
reg   [6:0] w_t_address0;
reg    w_t_ce0;
reg    w_t_we0;
wire   [31:0] w_t_d0;
reg   [30:0] i_reg_331;
wire    ap_CS_fsm_state49;
reg   [30:0] ap_phi_mux_j_phi_fu_346_p4;
wire    ap_block_pp3_stage0;
reg   [31:0] ap_phi_mux_add1714_phi_fu_359_p4;
wire    ap_block_pp3_stage2;
wire   [31:0] loop_index29_cast_cast_fu_461_p1;
wire   [31:0] loop_index23_cast_cast_fu_512_p1;
wire   [31:0] loop_index17_cast_cast_fu_567_p1;
wire   [31:0] zext_ln35_fu_599_p1;
wire   [31:0] zext_ln39_fu_627_p1;
wire   [31:0] zext_ln39_1_fu_632_p1;
wire   [31:0] zext_ln43_fu_658_p1;
wire    ap_block_pp4_stage0;
wire   [31:0] loop_index_cast_cast_fu_699_p1;
wire  signed [31:0] p_cast_cast_fu_431_p1;
wire  signed [31:0] p_cast1_cast_fu_482_p1;
wire  signed [31:0] p_cast2_cast_fu_537_p1;
wire   [31:0] p_cast4_cast_fu_673_p1;
reg    ap_block_state2_io;
reg    ap_block_state13_io;
reg    ap_block_state26_io;
reg    ap_block_state66;
wire    ap_block_pp5_stage0_01001;
reg   [31:0] grp_fu_389_p0;
reg   [31:0] grp_fu_389_p1;
wire  signed [31:0] trunc_ln29_fu_409_p0;
wire  signed [31:0] icmp_ln29_fu_413_p0;
wire   [29:0] p_cast_fu_422_p4;
wire   [29:0] p_cast1_fu_473_p4;
wire    ap_CS_fsm_state23;
wire   [29:0] p_cast2_fu_528_p4;
wire  signed [6:0] trunc_ln33_1_fu_595_p1;
wire   [31:0] j_cast_fu_609_p1;
wire   [6:0] empty_37_fu_618_p1;
wire   [6:0] add_ln39_fu_622_p2;
wire    ap_block_pp3_stage3;
wire   [6:0] trunc_ln43_fu_654_p1;
wire   [29:0] p_cast4_fu_664_p4;
wire   [6:0] empty_42_fu_695_p1;
reg   [43:0] ap_NS_fsm;
wire    ap_block_pp3_stage0_subdone;
wire    ap_block_pp3_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 44'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
end

forward_fcc_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .w(w),
    .y(y),
    .b(b),
    .xdimension(xdimension),
    .ydimension(ydimension),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

forward_fcc_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(p_cast4_cast_fu_673_p1),
    .I_AWID(1'd0),
    .I_AWLEN(ydimension_read_reg_709),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

forward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
x_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x_t_address0),
    .ce0(x_t_ce0),
    .we0(x_t_we0),
    .d0(x_t_d0),
    .q0(x_t_q0)
);

forward_fcc_y_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
y_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y_t_address0),
    .ce0(y_t_ce0),
    .we0(y_t_we0),
    .d0(y_t_d0),
    .address1(y_t_address1),
    .ce1(y_t_ce1),
    .q1(y_t_q1)
);

forward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
b_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b_t_address0),
    .ce0(b_t_ce0),
    .we0(b_t_we0),
    .d0(b_t_d0),
    .q0(b_t_q0)
);

forward_fcc_x_t #(
    .DataWidth( 32 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
w_t_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_t_address0),
    .ce0(w_t_ce0),
    .we0(w_t_we0),
    .d0(w_t_d0),
    .q0(w_t_q0)
);

forward_fcc_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_389_p0),
    .din1(grp_fu_389_p1),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

forward_fcc_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(w_t_load_reg_911),
    .din1(x_t_load_reg_916),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

forward_fcc_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ydimension_read_reg_709),
    .din1(xdimension_read_reg_720),
    .ce(1'b1),
    .dout(grp_fu_516_p2)
);

forward_fcc_mul_7s_7s_7_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 7 ))
mul_7s_7s_7_1_1_U4(
    .din0(trunc_ln33_1_fu_595_p1),
    .din1(trunc_ln29_reg_749),
    .dout(empty_35_fu_604_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state33) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state33)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state33);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((icmp_ln33_1_fu_590_p2 == 1'd0) & (cmp83_reg_868 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp3_iter0 == 1'b0) & (1'b1 == ap_condition_pp3_exit_iter1_state43) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter1_state43) & (((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone))))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter0;
        end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone)) | ((1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone)))) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((icmp_ln33_1_fu_590_p2 == 1'd0) & (cmp83_reg_868 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state50) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((icmp_ln33_1_fu_590_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state50)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state50);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end else if (((icmp_ln33_1_fu_590_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
            ap_enable_reg_pp4_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state59) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state58_io))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state59)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state59);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state58_io))) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_1_fu_590_p2 == 1'd0) & (cmp83_reg_868 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        add1714_reg_354 <= 32'd0;
    end else if (((icmp_ln38_reg_897_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001))) begin
        add1714_reg_354 <= grp_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_1_fu_590_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_1_reg_367 <= 31'd0;
    end else if (((icmp_ln42_fu_649_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_1_reg_367 <= add_ln42_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_571_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        i_reg_331 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        i_reg_331 <= add_ln33_reg_878;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_1_fu_590_p2 == 1'd0) & (cmp83_reg_868 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        j_reg_342 <= 31'd0;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln38_reg_897 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        j_reg_342 <= add_ln38_reg_921;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        loop_index17_reg_320 <= 62'd0;
    end else if (((exitcond4410_fu_554_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        loop_index17_reg_320 <= empty_30_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        loop_index23_reg_309 <= 62'd0;
    end else if (((exitcond4511_fu_499_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index23_reg_309 <= empty_26_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_index29_reg_298 <= 62'd0;
    end else if (((exitcond4612_fu_448_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_index29_reg_298 <= empty_22_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state58_io))) begin
        loop_index_reg_378 <= 62'd0;
    end else if (((exitcond4_fu_690_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        loop_index_reg_378 <= empty_40_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        add_ln33_reg_878 <= add_ln33_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_11001))) begin
        add_ln38_reg_921 <= add_ln38_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_729 <= b;
        icmp_ln29_reg_754 <= icmp_ln29_fu_413_p2;
        trunc_ln29_reg_749 <= trunc_ln29_fu_409_p1;
        w_read_reg_739 <= w;
        x_read_reg_744 <= x;
        xdimension_read_reg_720 <= xdimension;
        y_read_reg_734 <= y;
        ydimension_read_reg_709 <= ydimension;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln42_reg_936 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        b_t_load_reg_951 <= b_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_571_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        cmp83_reg_868 <= cmp83_fu_576_p2;
        trunc_ln33_reg_872 <= trunc_ln33_fu_581_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4612_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_25_reg_778 <= empty_25_fu_453_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_25_reg_778_pp0_iter1_reg <= empty_25_reg_778;
        exitcond4612_reg_774 <= exitcond4612_fu_448_p2;
        exitcond4612_reg_774_pp0_iter1_reg <= exitcond4612_reg_774;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4511_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_29_reg_813 <= empty_29_fu_504_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_29_reg_813_pp1_iter1_reg <= empty_29_reg_813;
        exitcond4511_reg_809 <= exitcond4511_fu_499_p2;
        exitcond4511_reg_809_pp1_iter1_reg <= exitcond4511_reg_809;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4410_fu_554_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_33_reg_854 <= empty_33_fu_559_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_33_reg_854_pp2_iter1_reg <= empty_33_reg_854;
        exitcond4410_reg_850 <= exitcond4410_fu_554_p2;
        exitcond4410_reg_850_pp2_iter1_reg <= exitcond4410_reg_850;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_1_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        empty_35_reg_892 <= empty_35_fu_604_p2;
        y_t_addr_reg_887 <= zext_ln35_fu_599_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        exitcond4_reg_967 <= exitcond4_fu_690_p2;
        exitcond4_reg_967_pp5_iter1_reg <= exitcond4_reg_967;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4511_reg_809 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_read_reg_818 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond4410_reg_850 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        gmem_addr_2_read_reg_859 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4612_reg_774 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_783 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln30_reg_788 <= icmp_ln30_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        icmp_ln31_reg_830 <= icmp_ln31_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln38_reg_897 <= icmp_ln38_fu_613_p2;
        icmp_ln38_reg_897_pp3_iter1_reg <= icmp_ln38_reg_897;
        icmp_ln38_reg_897_pp3_iter2_reg <= icmp_ln38_reg_897_pp3_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln42_reg_936 <= icmp_ln42_fu_649_p2;
        icmp_ln42_reg_936_pp4_iter1_reg <= icmp_ln42_reg_936;
        y_t_addr_1_reg_945_pp4_iter1_reg <= y_t_addr_1_reg_945;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln42_reg_936_pp4_iter2_reg <= icmp_ln42_reg_936_pp4_iter1_reg;
        icmp_ln42_reg_936_pp4_iter3_reg <= icmp_ln42_reg_936_pp4_iter2_reg;
        icmp_ln42_reg_936_pp4_iter4_reg <= icmp_ln42_reg_936_pp4_iter3_reg;
        icmp_ln42_reg_936_pp4_iter5_reg <= icmp_ln42_reg_936_pp4_iter4_reg;
        icmp_ln42_reg_936_pp4_iter6_reg <= icmp_ln42_reg_936_pp4_iter5_reg;
        y_t_addr_1_reg_945_pp4_iter2_reg <= y_t_addr_1_reg_945_pp4_iter1_reg;
        y_t_addr_1_reg_945_pp4_iter3_reg <= y_t_addr_1_reg_945_pp4_iter2_reg;
        y_t_addr_1_reg_945_pp4_iter4_reg <= y_t_addr_1_reg_945_pp4_iter3_reg;
        y_t_addr_1_reg_945_pp4_iter5_reg <= y_t_addr_1_reg_945_pp4_iter4_reg;
        y_t_addr_1_reg_945_pp4_iter6_reg <= y_t_addr_1_reg_945_pp4_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln31_reg_823 <= grp_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_897_pp3_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        mul_reg_926 <= grp_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln42_reg_936_pp4_iter5_reg == 1'd0) & (ap_enable_reg_pp4_iter6 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln38_reg_897_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_11001)))) begin
        reg_398 <= grp_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (exitcond4_reg_967 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln42_reg_936 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        reg_404 <= y_t_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln29_reg_758 <= sext_ln29_fu_419_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sext_ln30_reg_792 <= sext_ln30_fu_470_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        sext_ln31_reg_834 <= sext_ln31_fu_525_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln38_reg_897 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_11001))) begin
        w_t_load_reg_911 <= w_t_q0;
        x_t_load_reg_916 <= x_t_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_649_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        y_t_addr_1_reg_945 <= zext_ln43_fu_658_p1;
    end
end

always @ (*) begin
    if ((exitcond4612_fu_448_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4511_fu_499_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4410_fu_554_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_condition_pp3_exit_iter1_state43 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter1_state43 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_897 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage3) & (1'b0 == ap_block_pp3_stage3_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_649_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond4_fu_690_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state59 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state59 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln30_reg_788 == 1'd1)) & (1'b1 == ap_CS_fsm_state66))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_897_pp3_iter2_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        ap_phi_mux_add1714_phi_fu_359_p4 = grp_fu_389_p2;
    end else begin
        ap_phi_mux_add1714_phi_fu_359_p4 = add1714_reg_354;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (icmp_ln38_reg_897 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_j_phi_fu_346_p4 = add_ln38_reg_921;
    end else begin
        ap_phi_mux_j_phi_fu_346_p4 = j_reg_342;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln30_reg_788 == 1'd1)) & (1'b1 == ap_CS_fsm_state66))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        b_t_address0 = zext_ln43_fu_658_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        b_t_address0 = loop_index23_cast_cast_fu_512_p1;
    end else begin
        b_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        b_t_ce0 = 1'b1;
    end else begin
        b_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond4511_reg_809_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        b_t_we0 = 1'b1;
    end else begin
        b_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln31_reg_830 == 1'd0) & (1'b0 == ap_block_state26_io))) begin
        gmem_ARADDR = p_cast2_cast_fu_537_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state13_io))) begin
        gmem_ARADDR = p_cast1_cast_fu_482_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln29_reg_754 == 1'd0))) begin
        gmem_ARADDR = p_cast_cast_fu_431_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln31_reg_830 == 1'd0) & (1'b0 == ap_block_state26_io))) begin
        gmem_ARLEN = mul_ln31_reg_823;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state13_io))) begin
        gmem_ARLEN = ydimension_read_reg_709;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln29_reg_754 == 1'd0))) begin
        gmem_ARLEN = xdimension_read_reg_720;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state13_io)) | ((1'b1 == ap_CS_fsm_state26) & (icmp_ln31_reg_830 == 1'd0) & (1'b0 == ap_block_state26_io)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln29_reg_754 == 1'd0)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state58_io))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln30_reg_788 == 1'd1)) & (1'b1 == ap_CS_fsm_state66) & (icmp_ln30_reg_788 == 1'd1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond4511_reg_809 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond4410_reg_850 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4612_reg_774 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_reg_967_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (icmp_ln30_reg_788 == 1'd1)) | ((1'b1 == ap_CS_fsm_state26) & (icmp_ln31_reg_830 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln29_reg_754 == 1'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln30_reg_788 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state66) & (icmp_ln30_reg_788 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond4511_reg_809 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond4410_reg_850 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4612_reg_774 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond4_reg_967_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_389_p0 = reg_404;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        grp_fu_389_p0 = ap_phi_mux_add1714_phi_fu_359_p4;
    end else begin
        grp_fu_389_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_389_p1 = b_t_load_reg_951;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2))) begin
        grp_fu_389_p1 = mul_reg_926;
    end else begin
        grp_fu_389_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        w_t_address0 = zext_ln39_fu_627_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        w_t_address0 = loop_index17_cast_cast_fu_567_p1;
    end else begin
        w_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        w_t_ce0 = 1'b1;
    end else begin
        w_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (exitcond4410_reg_850_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        w_t_we0 = 1'b1;
    end else begin
        w_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        x_t_address0 = zext_ln39_1_fu_632_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        x_t_address0 = loop_index29_cast_cast_fu_461_p1;
    end else begin
        x_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        x_t_ce0 = 1'b1;
    end else begin
        x_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond4612_reg_774_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_t_we0 = 1'b1;
    end else begin
        x_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        y_t_address0 = y_t_addr_1_reg_945_pp4_iter6_reg;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        y_t_address0 = y_t_addr_reg_887;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        y_t_address0 = zext_ln35_fu_599_p1;
    end else begin
        y_t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        y_t_address1 = loop_index_cast_cast_fu_699_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        y_t_address1 = zext_ln43_fu_658_p1;
    end else begin
        y_t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state37) | ((ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        y_t_ce0 = 1'b1;
    end else begin
        y_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        y_t_ce1 = 1'b1;
    end else begin
        y_t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        y_t_d0 = reg_398;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        y_t_d0 = add1714_reg_354;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        y_t_d0 = 32'd0;
    end else begin
        y_t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((cmp83_reg_868 == 1'd1) & (1'b1 == ap_CS_fsm_state49)) | ((icmp_ln33_1_fu_590_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37)) | ((ap_enable_reg_pp4_iter7 == 1'b1) & (icmp_ln42_reg_936_pp4_iter6_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        y_t_we0 = 1'b1;
    end else begin
        y_t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln29_reg_754 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln29_reg_754 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond4612_fu_448_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond4612_fu_448_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln30_reg_788 == 1'd0) & (1'b0 == ap_block_state13_io))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state13_io))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond4511_fu_499_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((exitcond4511_fu_499_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln31_reg_830 == 1'd1) & (1'b0 == ap_block_state26_io))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if (((1'b1 == ap_CS_fsm_state26) & (icmp_ln31_reg_830 == 1'd0) & (1'b0 == ap_block_state26_io))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((exitcond4410_fu_554_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((exitcond4410_fu_554_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln33_fu_571_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln33_1_fu_590_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((icmp_ln33_1_fu_590_p2 == 1'd0) & (cmp83_reg_868 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_pp3_stage1 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_subdone)) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp3_stage1) & (1'b0 == ap_block_pp3_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage1;
            end
        end
        ap_ST_fsm_pp3_stage2 : begin
            if ((~((1'b1 == ap_condition_pp3_exit_iter1_state43) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone)) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end else if (((1'b1 == ap_condition_pp3_exit_iter1_state43) & (1'b1 == ap_CS_fsm_pp3_stage2) & (1'b0 == ap_block_pp3_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage2;
            end
        end
        ap_ST_fsm_pp3_stage3 : begin
            if ((1'b0 == ap_block_pp3_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage3;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln42_fu_649_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter7 == 1'b1) & (ap_enable_reg_pp4_iter6 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln42_fu_649_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter7 == 1'b1) & (ap_enable_reg_pp4_iter6 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln30_reg_788 == 1'd1) & (1'b0 == ap_block_state58_io))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln30_reg_788 == 1'd0) & (1'b0 == ap_block_state58_io))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((exitcond4_fu_690_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((exitcond4_fu_690_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln30_reg_788 == 1'd1)) & (1'b1 == ap_CS_fsm_state66))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln33_fu_584_p2 = (i_reg_331 + 31'd1);

assign add_ln38_fu_637_p2 = (j_reg_342 + 31'd1);

assign add_ln39_fu_622_p2 = (empty_37_fu_618_p1 + empty_35_reg_892);

assign add_ln42_fu_643_p2 = (i_1_reg_367 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp3_stage1 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp3_stage2 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp3_stage3 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond4612_reg_774 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond4612_reg_774 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond4511_reg_809 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond4511_reg_809 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond4410_reg_850 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond4410_reg_850 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((1'b1 == ap_block_state61_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((1'b1 == ap_block_state61_io) & (ap_enable_reg_pp5_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond4612_reg_774 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((gmem_ARREADY == 1'b0) & (icmp_ln30_reg_788 == 1'd1));
end

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond4511_reg_809 == 1'd0));
end

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = ((gmem_ARREADY == 1'b0) & (icmp_ln31_reg_830 == 1'd0));
end

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (icmp_ln29_reg_754 == 1'd0));
end

assign ap_block_state33_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond4410_reg_850 == 1'd0));
end

assign ap_block_state35_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp3_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp3_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp3_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp3_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp3_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state58_io = ((gmem_AWREADY == 1'b0) & (icmp_ln30_reg_788 == 1'd1));
end

assign ap_block_state59_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state61_io = ((gmem_WREADY == 1'b0) & (exitcond4_reg_967_pp5_iter1_reg == 1'd0));
end

assign ap_block_state61_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state66 = ((gmem_BVALID == 1'b0) & (icmp_ln30_reg_788 == 1'd1));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_t_d0 = gmem_addr_1_read_reg_818;

assign cmp83_fu_576_p2 = (($signed(xdimension_read_reg_720) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_22_fu_442_p2 = (loop_index29_reg_298 + 62'd1);

assign empty_25_fu_453_p1 = loop_index29_reg_298[6:0];

assign empty_26_fu_493_p2 = (loop_index23_reg_309 + 62'd1);

assign empty_29_fu_504_p1 = loop_index23_reg_309[6:0];

assign empty_30_fu_548_p2 = (loop_index17_reg_320 + 62'd1);

assign empty_33_fu_559_p1 = loop_index17_reg_320[6:0];

assign empty_37_fu_618_p1 = ap_phi_mux_j_phi_fu_346_p4[6:0];

assign empty_40_fu_684_p2 = (loop_index_reg_378 + 62'd1);

assign empty_42_fu_695_p1 = loop_index_reg_378[6:0];

assign exitcond4410_fu_554_p2 = ((loop_index17_reg_320 == sext_ln31_reg_834) ? 1'b1 : 1'b0);

assign exitcond4511_fu_499_p2 = ((loop_index23_reg_309 == sext_ln30_reg_792) ? 1'b1 : 1'b0);

assign exitcond4612_fu_448_p2 = ((loop_index29_reg_298 == sext_ln29_reg_758) ? 1'b1 : 1'b0);

assign exitcond4_fu_690_p2 = ((loop_index_reg_378 == sext_ln30_reg_792) ? 1'b1 : 1'b0);

assign gmem_WDATA = reg_404;

assign icmp_ln29_fu_413_p0 = xdimension;

assign icmp_ln29_fu_413_p2 = ((icmp_ln29_fu_413_p0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_465_p2 = ((ydimension_read_reg_709 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_520_p2 = ((mul_ln31_reg_823 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_590_p2 = ((i_reg_331 == trunc_ln33_reg_872) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_571_p2 = (($signed(ydimension_read_reg_709) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_613_p2 = ((j_cast_fu_609_p1 == xdimension_read_reg_720) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_649_p2 = ((i_1_reg_367 == trunc_ln33_reg_872) ? 1'b1 : 1'b0);

assign j_cast_fu_609_p1 = ap_phi_mux_j_phi_fu_346_p4;

assign loop_index17_cast_cast_fu_567_p1 = empty_33_reg_854_pp2_iter1_reg;

assign loop_index23_cast_cast_fu_512_p1 = empty_29_reg_813_pp1_iter1_reg;

assign loop_index29_cast_cast_fu_461_p1 = empty_25_reg_778_pp0_iter1_reg;

assign loop_index_cast_cast_fu_699_p1 = empty_42_fu_695_p1;

assign p_cast1_cast_fu_482_p1 = $signed(p_cast1_fu_473_p4);

assign p_cast1_fu_473_p4 = {{b_read_reg_729[31:2]}};

assign p_cast2_cast_fu_537_p1 = $signed(p_cast2_fu_528_p4);

assign p_cast2_fu_528_p4 = {{w_read_reg_739[31:2]}};

assign p_cast4_cast_fu_673_p1 = $signed(p_cast4_fu_664_p4);

assign p_cast4_fu_664_p4 = {{y_read_reg_734[31:2]}};

assign p_cast_cast_fu_431_p1 = $signed(p_cast_fu_422_p4);

assign p_cast_fu_422_p4 = {{x_read_reg_744[31:2]}};

assign sext_ln29_fu_419_p1 = xdimension_read_reg_720;

assign sext_ln30_fu_470_p1 = $signed(ydimension_read_reg_709);

assign sext_ln31_fu_525_p1 = mul_ln31_reg_823;

assign trunc_ln29_fu_409_p0 = xdimension;

assign trunc_ln29_fu_409_p1 = trunc_ln29_fu_409_p0[6:0];

assign trunc_ln33_1_fu_595_p1 = i_reg_331[6:0];

assign trunc_ln33_fu_581_p1 = ydimension_read_reg_709[30:0];

assign trunc_ln43_fu_654_p1 = i_1_reg_367[6:0];

assign w_t_d0 = gmem_addr_2_read_reg_859;

assign x_t_d0 = gmem_addr_read_reg_783;

assign zext_ln35_fu_599_p1 = $unsigned(trunc_ln33_1_fu_595_p1);

assign zext_ln39_1_fu_632_p1 = empty_37_fu_618_p1;

assign zext_ln39_fu_627_p1 = add_ln39_fu_622_p2;

assign zext_ln43_fu_658_p1 = trunc_ln43_fu_654_p1;

endmodule //forward_fcc
