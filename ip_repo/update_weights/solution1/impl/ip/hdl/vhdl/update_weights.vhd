-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_weights is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of update_weights is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "update_weights_update_weights,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1864,HLS_SYN_LUT=2742,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_FFFFFBFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111101111111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_FFFFFC00 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal w : STD_LOGIC_VECTOR (31 downto 0);
    signal dw : STD_LOGIC_VECTOR (31 downto 0);
    signal lr : STD_LOGIC_VECTOR (15 downto 0);
    signal dim : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln37_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond5_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal exitcond998_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond998_reg_930_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal exitcond1019_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1019_reg_955_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond956_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index88_reg_293 : STD_LOGIC_VECTOR (62 downto 0);
    signal loop_index82_reg_304 : STD_LOGIC_VECTOR (62 downto 0);
    signal i_reg_315 : STD_LOGIC_VECTOR (30 downto 0);
    signal loop_index76_reg_326 : STD_LOGIC_VECTOR (62 downto 0);
    signal loop_index_reg_337 : STD_LOGIC_VECTOR (62 downto 0);
    signal dim_read_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal lr_read_reg_751 : STD_LOGIC_VECTOR (15 downto 0);
    signal dw_read_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_read_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1193_fu_429_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1193_reg_766 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xor_ln25_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln25_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln25_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln25_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln29_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln29_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln29_2_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_2_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_470_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_1_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_1_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ub_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ub_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_3_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_3_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln37_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln29_fu_548_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln29_reg_831 : STD_LOGIC_VECTOR (62 downto 0);
    signal empty_21_fu_563_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond5_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_850_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_fu_574_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_22_reg_854 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_22_reg_854_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_addr_read_reg_859 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_23_fu_593_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state22_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal exitcond956_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond956_reg_875_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_604_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_24_reg_879 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_24_reg_879_pp1_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_addr_1_read_reg_884 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_fu_612_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state26_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln40_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_894_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_894_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_894_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal wbuf_V_addr_1_reg_903 : STD_LOGIC_VECTOR (9 downto 0);
    signal wbuf_V_addr_1_reg_903_pp2_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal wbuf_V_addr_1_reg_903_pp2_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal wbuf_V_addr_1_reg_903_pp2_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_26_fu_670_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state32_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state34_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal exitcond998_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wbuf_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal wbuf_V_load_reg_939 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal empty_28_fu_701_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state40_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state41_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state42_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state42_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal exitcond1019_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dwbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dwbuf_V_load_1_reg_964 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal add_ln25_1_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_2_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_block_state31_io : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state32 : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state40 : STD_LOGIC;
    signal wbuf_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal wbuf_V_ce0 : STD_LOGIC;
    signal wbuf_V_we0 : STD_LOGIC;
    signal wbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal wbuf_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal wbuf_V_ce1 : STD_LOGIC;
    signal dwbuf_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal dwbuf_V_ce0 : STD_LOGIC;
    signal dwbuf_V_we0 : STD_LOGIC;
    signal dwbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state47 : BOOLEAN;
    signal indvars_iv92_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index88_cast_cast_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index82_cast_cast_fu_608_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal loop_index76_cast_cast_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index_cast_cast_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_cast_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast1_cast_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast3_cast_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast4_cast_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal sub_ln23_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_1_fu_378_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln23_fu_388_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln23_2_fu_398_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln23_1_fu_392_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln23_1_fu_407_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln23_fu_411_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln23_fu_419_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal num_iters_fu_423_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln29_1_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_2_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_2_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln29_1_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_fu_508_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_1_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln29_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_357_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1118_fu_627_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_733_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal empty_27_fu_681_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_29_fu_712_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_733_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_733_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component update_weights_mac_mulsub_16s_16s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component update_weights_wbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component update_weights_dwbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component update_weights_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        w : OUT STD_LOGIC_VECTOR (31 downto 0);
        dw : OUT STD_LOGIC_VECTOR (31 downto 0);
        lr : OUT STD_LOGIC_VECTOR (15 downto 0);
        dim : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component update_weights_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component update_weights_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        w => w,
        dw => dw,
        lr => lr,
        dim => dim,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component update_weights_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => sub_ln29_3_reg_819,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => sub_ln29_3_reg_819,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    wbuf_V_U : component update_weights_wbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wbuf_V_address0,
        ce0 => wbuf_V_ce0,
        we0 => wbuf_V_we0,
        d0 => wbuf_V_d0,
        address1 => wbuf_V_address1,
        ce1 => wbuf_V_ce1,
        q1 => wbuf_V_q1);

    dwbuf_V_U : component update_weights_dwbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dwbuf_V_address0,
        ce0 => dwbuf_V_ce0,
        we0 => dwbuf_V_we0,
        d0 => dwbuf_V_d0,
        q0 => dwbuf_V_q0);

    mac_mulsub_16s_16s_29ns_29_4_1_U1 : component update_weights_mac_mulsub_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => dwbuf_V_q0,
        din1 => grp_fu_733_p1,
        din2 => grp_fu_733_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_733_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state22)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state26)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state32) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_io) and (icmp_ln37_reg_827 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state32)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state32);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_io) and (icmp_ln37_reg_827 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state40) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state40)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state40);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_622_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_reg_315 <= add_ln40_fu_612_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_reg_315 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvars_iv92_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                indvars_iv92_reg_269 <= add_ln25_2_fu_727_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv92_reg_269 <= ap_const_lv32_FFFFFBFF;
            end if; 
        end if;
    end process;

    indvars_iv_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                indvars_iv_reg_281 <= add_ln25_1_fu_721_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv_reg_281 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    k_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                k_reg_258 <= add_ln25_reg_784;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                k_reg_258 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    loop_index76_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_io) and (icmp_ln37_reg_827 = ap_const_lv1_1))) then 
                loop_index76_reg_326 <= ap_const_lv63_0;
            elsif (((exitcond998_fu_676_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                loop_index76_reg_326 <= empty_26_fu_670_p2;
            end if; 
        end if;
    end process;

    loop_index82_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                loop_index82_reg_304 <= ap_const_lv63_0;
            elsif (((exitcond956_fu_599_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                loop_index82_reg_304 <= empty_23_fu_593_p2;
            end if; 
        end if;
    end process;

    loop_index88_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                loop_index88_reg_293 <= ap_const_lv63_0;
            elsif (((exitcond5_fu_569_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                loop_index88_reg_293 <= empty_21_fu_563_p2;
            end if; 
        end if;
    end process;

    loop_index_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                loop_index_reg_337 <= ap_const_lv63_0;
            elsif (((exitcond1019_fu_707_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                loop_index_reg_337 <= empty_28_fu_701_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln25_reg_784 <= add_ln25_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_447_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln29_1_reg_808 <= add_ln29_1_fu_475_p2;
                add_ln29_reg_803 <= add_ln29_fu_470_p2;
                    shl_ln29_reg_792(31 downto 10) <= shl_ln29_fu_452_p2(31 downto 10);
                    sub_ln29_2_reg_797(31 downto 10) <= sub_ln29_2_fu_458_p2(31 downto 10);
                ub_reg_813 <= ub_fu_496_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dim_read_reg_741 <= dim;
                dw_read_reg_756 <= dw;
                lr_read_reg_751 <= lr;
                w_read_reg_761 <= w;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (exitcond1019_reg_955 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                dwbuf_V_load_1_reg_964 <= dwbuf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_569_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_22_reg_854 <= empty_22_fu_574_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_22_reg_854_pp0_iter1_reg <= empty_22_reg_854;
                exitcond5_reg_850 <= exitcond5_fu_569_p2;
                exitcond5_reg_850_pp0_iter1_reg <= exitcond5_reg_850;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond956_fu_599_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                empty_24_reg_879 <= empty_24_fu_604_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                empty_24_reg_879_pp1_iter1_reg <= empty_24_reg_879;
                exitcond956_reg_875 <= exitcond956_fu_599_p2;
                exitcond956_reg_875_pp1_iter1_reg <= exitcond956_reg_875;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                exitcond1019_reg_955 <= exitcond1019_fu_707_p2;
                exitcond1019_reg_955_pp4_iter1_reg <= exitcond1019_reg_955;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                exitcond998_reg_930 <= exitcond998_fu_676_p2;
                exitcond998_reg_930_pp3_iter1_reg <= exitcond998_reg_930;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond956_reg_875 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                gmem_addr_1_read_reg_884 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond5_reg_850 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_859 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln37_reg_827 <= icmp_ln37_fu_525_p2;
                sub_ln29_3_reg_819 <= sub_ln29_3_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln40_reg_894 <= icmp_ln40_fu_622_p2;
                icmp_ln40_reg_894_pp2_iter1_reg <= icmp_ln40_reg_894;
                wbuf_V_addr_1_reg_903_pp2_iter1_reg <= wbuf_V_addr_1_reg_903;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln40_reg_894_pp2_iter2_reg <= icmp_ln40_reg_894_pp2_iter1_reg;
                icmp_ln40_reg_894_pp2_iter3_reg <= icmp_ln40_reg_894_pp2_iter2_reg;
                wbuf_V_addr_1_reg_903_pp2_iter2_reg <= wbuf_V_addr_1_reg_903_pp2_iter1_reg;
                wbuf_V_addr_1_reg_903_pp2_iter3_reg <= wbuf_V_addr_1_reg_903_pp2_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln1193_reg_766 <= sext_ln1193_fu_429_p1;
                sext_ln25_reg_779 <= sext_ln25_fu_437_p1;
                xor_ln25_reg_771 <= xor_ln25_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln29_reg_831 <= sext_ln29_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_622_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                wbuf_V_addr_1_reg_903 <= zext_ln1118_fu_631_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (exitcond998_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                wbuf_V_load_reg_939 <= wbuf_V_q1;
            end if;
        end if;
    end process;
    shl_ln29_reg_792(9 downto 0) <= "0000000000";
    sub_ln29_2_reg_797(9 downto 0) <= "1111111111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln37_reg_827, ap_enable_reg_pp0_iter1, ap_CS_fsm_state31, ap_enable_reg_pp3_iter2, ap_CS_fsm_state39, ap_enable_reg_pp4_iter2, ap_CS_fsm_state47, ap_CS_fsm_state35, ap_enable_reg_pp1_iter1, ap_CS_fsm_state15, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_CS_fsm_state3, icmp_ln25_fu_447_p2, ap_enable_reg_pp0_iter0, exitcond5_fu_569_p2, ap_enable_reg_pp1_iter0, exitcond956_fu_599_p2, ap_enable_reg_pp2_iter0, icmp_ln40_fu_622_p2, ap_enable_reg_pp3_iter0, exitcond998_fu_676_p2, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter0, exitcond1019_fu_707_p2, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_block_state31_io, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln25_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln37_reg_827 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln37_reg_827 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond5_fu_569_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((exitcond5_fu_569_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((exitcond956_fu_599_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((exitcond956_fu_599_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln40_fu_622_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln40_fu_622_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_io) and (icmp_ln37_reg_827 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_io) and (icmp_ln37_reg_827 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond998_fu_676_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (exitcond998_fu_676_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (exitcond1019_fu_707_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (exitcond1019_fu_707_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln25_1_fu_721_p2 <= std_logic_vector(unsigned(indvars_iv_reg_281) + unsigned(ap_const_lv32_FFFFFC00));
    add_ln25_2_fu_727_p2 <= std_logic_vector(unsigned(indvars_iv92_reg_269) + unsigned(ap_const_lv32_FFFFFC00));
    add_ln25_fu_441_p2 <= std_logic_vector(unsigned(k_reg_258) + unsigned(ap_const_lv32_1));
    add_ln29_1_fu_475_p2 <= std_logic_vector(unsigned(shl_ln29_1_fu_464_p2) + unsigned(w_read_reg_761));
    add_ln29_2_fu_480_p2 <= std_logic_vector(unsigned(shl_ln29_fu_452_p2) + unsigned(ap_const_lv32_400));
    add_ln29_fu_470_p2 <= std_logic_vector(unsigned(shl_ln29_1_fu_464_p2) + unsigned(dw_read_reg_756));
    add_ln40_fu_612_p2 <= std_logic_vector(unsigned(i_reg_315) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(29);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(22);
    ap_CS_fsm_state35 <= ap_CS_fsm(24);
    ap_CS_fsm_state39 <= ap_CS_fsm(28);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state47 <= ap_CS_fsm(34);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond5_reg_850, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond5_reg_850 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond5_reg_850, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (exitcond5_reg_850 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond956_reg_875, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond956_reg_875 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, exitcond956_reg_875, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (exitcond956_reg_875 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state34_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state34_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state34_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state34_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state42_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state42_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state42_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state42_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;

        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter1_assign_proc : process(exitcond5_reg_850, gmem_RVALID)
    begin
                ap_block_state13_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond5_reg_850 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_pp1_stage0_iter1_assign_proc : process(exitcond956_reg_875, gmem_RVALID)
    begin
                ap_block_state23_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond956_reg_875 = ap_const_lv1_0));
    end process;

        ap_block_state24_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_io_assign_proc : process(icmp_ln37_reg_827, gmem_AWREADY)
    begin
                ap_block_state31_io <= ((gmem_AWREADY = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1));
    end process;

        ap_block_state32_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_io_assign_proc : process(exitcond998_reg_930_pp3_iter1_reg, gmem_WREADY)
    begin
                ap_block_state34_io <= ((gmem_WREADY = ap_const_logic_0) and (exitcond998_reg_930_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state34_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state42_io_assign_proc : process(exitcond1019_reg_955_pp4_iter1_reg, gmem_WREADY)
    begin
                ap_block_state42_io <= ((gmem_WREADY = ap_const_logic_0) and (exitcond1019_reg_955_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state42_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state47_assign_proc : process(icmp_ln37_reg_827, gmem_BVALID)
    begin
                ap_block_state47 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1));
    end process;


    ap_block_state5_io_assign_proc : process(icmp_ln37_reg_827, gmem_ARREADY)
    begin
                ap_block_state5_io <= ((gmem_ARREADY = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state12_assign_proc : process(exitcond5_fu_569_p2)
    begin
        if ((exitcond5_fu_569_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state22_assign_proc : process(exitcond956_fu_599_p2)
    begin
        if ((exitcond956_fu_599_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state26_assign_proc : process(icmp_ln40_fu_622_p2)
    begin
        if ((icmp_ln40_fu_622_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state32_assign_proc : process(exitcond998_fu_676_p2)
    begin
        if ((exitcond998_fu_676_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state32 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state40_assign_proc : process(exitcond1019_fu_707_p2)
    begin
        if ((exitcond1019_fu_707_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state40 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln25_fu_447_p2)
    begin
        if (((icmp_ln25_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln25_fu_447_p2)
    begin
        if (((icmp_ln25_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dwbuf_V_address0_assign_proc : process(ap_block_pp4_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln40_fu_622_p2, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2, loop_index82_cast_cast_fu_608_p1, zext_ln1118_fu_631_p1, ap_block_pp2_stage0, loop_index_cast_cast_fu_716_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            dwbuf_V_address0 <= loop_index_cast_cast_fu_716_p1(10 - 1 downto 0);
        elsif (((icmp_ln40_fu_622_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            dwbuf_V_address0 <= zext_ln1118_fu_631_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            dwbuf_V_address0 <= loop_index82_cast_cast_fu_608_p1(10 - 1 downto 0);
        else 
            dwbuf_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, icmp_ln40_fu_622_p2, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp4_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln40_fu_622_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            dwbuf_V_ce0 <= ap_const_logic_1;
        else 
            dwbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dwbuf_V_d0_assign_proc : process(ap_block_pp1_stage0, gmem_addr_1_read_reg_884, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln40_fu_622_p2, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0)
    begin
        if (((icmp_ln40_fu_622_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            dwbuf_V_d0 <= ap_const_lv16_0;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            dwbuf_V_d0 <= gmem_addr_1_read_reg_884;
        else 
            dwbuf_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, exitcond956_reg_875_pp1_iter1_reg, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, icmp_ln40_fu_622_p2, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond956_reg_875_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((icmp_ln40_fu_622_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            dwbuf_V_we0 <= ap_const_logic_1;
        else 
            dwbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_21_fu_563_p2 <= std_logic_vector(unsigned(loop_index88_reg_293) + unsigned(ap_const_lv63_1));
    empty_22_fu_574_p1 <= loop_index88_reg_293(10 - 1 downto 0);
    empty_23_fu_593_p2 <= std_logic_vector(unsigned(loop_index82_reg_304) + unsigned(ap_const_lv63_1));
    empty_24_fu_604_p1 <= loop_index82_reg_304(10 - 1 downto 0);
    empty_26_fu_670_p2 <= std_logic_vector(unsigned(loop_index76_reg_326) + unsigned(ap_const_lv63_1));
    empty_27_fu_681_p1 <= loop_index76_reg_326(10 - 1 downto 0);
    empty_28_fu_701_p2 <= std_logic_vector(unsigned(loop_index_reg_337) + unsigned(ap_const_lv63_1));
    empty_29_fu_712_p1 <= loop_index_reg_337(10 - 1 downto 0);
    exitcond1019_fu_707_p2 <= "1" when (loop_index_reg_337 = sext_ln29_reg_831) else "0";
    exitcond5_fu_569_p2 <= "1" when (loop_index88_reg_293 = sext_ln29_reg_831) else "0";
    exitcond956_fu_599_p2 <= "1" when (loop_index82_reg_304 = sext_ln29_reg_831) else "0";
    exitcond998_fu_676_p2 <= "1" when (loop_index76_reg_326 = sext_ln29_reg_831) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state5, icmp_ln37_reg_827, ap_CS_fsm_state15, gmem_ARREADY, p_cast_cast_fu_552_p1, p_cast1_cast_fu_582_p1, ap_block_state5_io)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            gmem_ARADDR <= p_cast1_cast_fu_582_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln37_reg_827 = ap_const_lv1_1))) then 
            gmem_ARADDR <= p_cast_cast_fu_552_p1;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state5, icmp_ln37_reg_827, ap_CS_fsm_state15, gmem_ARREADY, ap_block_state5_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln37_reg_827 = ap_const_lv1_1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(icmp_ln37_reg_827, ap_CS_fsm_state31, ap_CS_fsm_state35, gmem_AWREADY, ap_block_state31_io, p_cast3_cast_fu_659_p1, p_cast4_cast_fu_690_p1)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            gmem_AWADDR <= p_cast4_cast_fu_690_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_io) and (icmp_ln37_reg_827 = ap_const_lv1_1))) then 
            gmem_AWADDR <= p_cast3_cast_fu_659_p1;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(icmp_ln37_reg_827, ap_CS_fsm_state31, ap_CS_fsm_state35, gmem_AWREADY, ap_block_state31_io)
    begin
        if ((((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_io) and (icmp_ln37_reg_827 = ap_const_lv1_1)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(icmp_ln37_reg_827, ap_CS_fsm_state39, ap_CS_fsm_state47, gmem_BVALID)
    begin
        if (((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln37_reg_827 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln37_reg_827 = ap_const_lv1_1)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond5_reg_850, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond956_reg_875, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((exitcond956_reg_875 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond5_reg_850 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_enable_reg_pp3_iter2, exitcond998_reg_930_pp3_iter1_reg, ap_enable_reg_pp4_iter2, exitcond1019_reg_955_pp4_iter1_reg, wbuf_V_load_reg_939, dwbuf_V_load_1_reg_964, ap_block_pp3_stage0_01001, ap_block_pp4_stage0_01001)
    begin
        if (((exitcond1019_reg_955_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001))) then 
            gmem_WDATA <= dwbuf_V_load_1_reg_964;
        elsif (((exitcond998_reg_930_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
            gmem_WDATA <= wbuf_V_load_reg_939;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, exitcond998_reg_930_pp3_iter1_reg, ap_enable_reg_pp4_iter2, exitcond1019_reg_955_pp4_iter1_reg, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((exitcond1019_reg_955_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((exitcond998_reg_930_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state5, icmp_ln37_reg_827, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln37_reg_827 = ap_const_lv1_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln37_reg_827, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln37_reg_827 = ap_const_lv1_1)))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, icmp_ln37_reg_827, ap_CS_fsm_state39, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (icmp_ln37_reg_827 = ap_const_lv1_1)))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond5_reg_850, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond956_reg_875)
    begin
        if ((((exitcond956_reg_875 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond5_reg_850 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, exitcond998_reg_930_pp3_iter1_reg, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, exitcond1019_reg_955_pp4_iter1_reg)
    begin
        if ((((exitcond1019_reg_955_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0)) or ((exitcond998_reg_930_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_348_p4 <= add_ln29_1_reg_808(31 downto 1);
    grp_fu_357_p4 <= add_ln29_reg_803(31 downto 1);
    grp_fu_733_p1 <= sext_ln1193_reg_766(16 - 1 downto 0);
    grp_fu_733_p2 <= (wbuf_V_q1 & ap_const_lv13_0);
    i_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_315),32));
    icmp_ln25_fu_447_p2 <= "1" when (k_reg_258 = sext_ln25_reg_779) else "0";
    icmp_ln29_1_fu_530_p2 <= "1" when (signed(indvars_iv92_reg_269) > signed(xor_ln25_reg_771)) else "0";
    icmp_ln29_2_fu_486_p2 <= "1" when (signed(add_ln29_2_fu_480_p2) > signed(dim_read_reg_741)) else "0";
    icmp_ln29_fu_504_p2 <= "1" when (signed(sub_ln29_2_reg_797) > signed(xor_ln25_reg_771)) else "0";
    icmp_ln37_fu_525_p2 <= "0" when (ub_reg_813 = ap_const_lv32_0) else "1";
    icmp_ln40_fu_622_p2 <= "1" when (signed(i_cast_fu_618_p1) < signed(ub_reg_813)) else "0";
    loop_index76_cast_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_27_fu_681_p1),32));
    loop_index82_cast_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_24_reg_879_pp1_iter1_reg),32));
    loop_index88_cast_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_22_reg_854_pp0_iter1_reg),32));
    loop_index_cast_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_29_fu_712_p1),32));
    num_iters_fu_423_p2 <= std_logic_vector(signed(sext_ln23_fu_419_p1) + signed(ap_const_lv24_1));
        p_cast1_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_357_p4),32));

        p_cast3_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_348_p4),32));

        p_cast4_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_357_p4),32));

        p_cast_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_348_p4),32));

    select_ln23_fu_411_p3 <= 
        sub_ln23_1_fu_392_p2 when (tmp_fu_366_p3(0) = '1') else 
        zext_ln23_1_fu_407_p1;
    select_ln29_1_fu_535_p3 <= 
        indvars_iv92_reg_269 when (icmp_ln29_1_fu_530_p2(0) = '1') else 
        xor_ln25_reg_771;
    select_ln29_fu_508_p3 <= 
        sub_ln29_2_reg_797 when (icmp_ln29_fu_504_p2(0) = '1') else 
        xor_ln25_reg_771;
        sext_ln1193_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lr_read_reg_751),29));

        sext_ln23_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln23_fu_411_p3),24));

        sext_ln25_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_iters_fu_423_p2),32));

        sext_ln29_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln29_fu_542_p2),63));

    shl_ln29_1_fu_464_p2 <= std_logic_vector(shift_left(unsigned(k_reg_258),to_integer(unsigned('0' & ap_const_lv32_B(31-1 downto 0)))));
    shl_ln29_fu_452_p2 <= std_logic_vector(shift_left(unsigned(k_reg_258),to_integer(unsigned('0' & ap_const_lv32_A(31-1 downto 0)))));
    sub_ln23_1_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(zext_ln23_fu_388_p1));
    sub_ln23_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(dim_read_reg_741));
    sub_ln29_1_fu_491_p2 <= std_logic_vector(unsigned(dim_read_reg_741) - unsigned(shl_ln29_fu_452_p2));
    sub_ln29_2_fu_458_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFBFF) - signed(shl_ln29_fu_452_p2));
    sub_ln29_3_fu_519_p2 <= std_logic_vector(unsigned(xor_ln29_fu_514_p2) - unsigned(select_ln29_fu_508_p3));
    sub_ln29_fu_542_p2 <= std_logic_vector(unsigned(indvars_iv_reg_281) - unsigned(select_ln29_1_fu_535_p3));
    tmp_fu_366_p3 <= dim_read_reg_741(31 downto 31);
    trunc_ln1118_fu_627_p1 <= i_reg_315(10 - 1 downto 0);
    trunc_ln23_1_fu_378_p4 <= sub_ln23_fu_373_p2(31 downto 10);
    trunc_ln23_2_fu_398_p4 <= dim_read_reg_741(31 downto 10);
    ub_fu_496_p3 <= 
        sub_ln29_1_fu_491_p2 when (icmp_ln29_2_fu_486_p2(0) = '1') else 
        ap_const_lv32_400;

    wbuf_V_address0_assign_proc : process(ap_block_pp0_stage0, wbuf_V_addr_1_reg_903_pp2_iter3_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter4, loop_index88_cast_cast_fu_578_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wbuf_V_address0 <= wbuf_V_addr_1_reg_903_pp2_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            wbuf_V_address0 <= loop_index88_cast_cast_fu_578_p1(10 - 1 downto 0);
        else 
            wbuf_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    wbuf_V_address1_assign_proc : process(ap_block_pp3_stage0, wbuf_V_addr_1_reg_903_pp2_iter1_reg, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, loop_index76_cast_cast_fu_685_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            wbuf_V_address1 <= loop_index76_cast_cast_fu_685_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wbuf_V_address1 <= wbuf_V_addr_1_reg_903_pp2_iter1_reg;
        else 
            wbuf_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    wbuf_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter4)
    begin
        if ((((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            wbuf_V_ce0 <= ap_const_logic_1;
        else 
            wbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wbuf_V_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            wbuf_V_ce1 <= ap_const_logic_1;
        else 
            wbuf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    wbuf_V_d0_assign_proc : process(ap_block_pp0_stage0, gmem_addr_read_reg_859, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter4, ap_block_pp2_stage0, grp_fu_733_p3)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            wbuf_V_d0 <= grp_fu_733_p3(28 downto 13);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            wbuf_V_d0 <= gmem_addr_read_reg_859;
        else 
            wbuf_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wbuf_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond5_reg_850_pp0_iter1_reg, ap_block_pp2_stage0_11001, icmp_ln40_reg_894_pp2_iter3_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter4)
    begin
        if ((((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (icmp_ln40_reg_894_pp2_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond5_reg_850_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            wbuf_V_we0 <= ap_const_logic_1;
        else 
            wbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln25_fu_432_p2 <= (dim_read_reg_741 xor ap_const_lv32_FFFFFFFF);
    xor_ln29_fu_514_p2 <= (shl_ln29_reg_792 xor ap_const_lv32_FFFFFFFF);
    zext_ln1118_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1118_fu_627_p1),32));
    zext_ln23_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_2_fu_398_p4),23));
    zext_ln23_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_1_fu_378_p4),23));
end behav;
