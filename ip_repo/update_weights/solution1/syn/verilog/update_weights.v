// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="update_weights_update_weights,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1864,HLS_SYN_LUT=2742,HLS_VERSION=2020_2}" *)

module update_weights (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 35'd2048;
parameter    ap_ST_fsm_state15 = 35'd4096;
parameter    ap_ST_fsm_state16 = 35'd8192;
parameter    ap_ST_fsm_state17 = 35'd16384;
parameter    ap_ST_fsm_state18 = 35'd32768;
parameter    ap_ST_fsm_state19 = 35'd65536;
parameter    ap_ST_fsm_state20 = 35'd131072;
parameter    ap_ST_fsm_state21 = 35'd262144;
parameter    ap_ST_fsm_pp1_stage0 = 35'd524288;
parameter    ap_ST_fsm_state25 = 35'd1048576;
parameter    ap_ST_fsm_pp2_stage0 = 35'd2097152;
parameter    ap_ST_fsm_state31 = 35'd4194304;
parameter    ap_ST_fsm_pp3_stage0 = 35'd8388608;
parameter    ap_ST_fsm_state35 = 35'd16777216;
parameter    ap_ST_fsm_state36 = 35'd33554432;
parameter    ap_ST_fsm_state37 = 35'd67108864;
parameter    ap_ST_fsm_state38 = 35'd134217728;
parameter    ap_ST_fsm_state39 = 35'd268435456;
parameter    ap_ST_fsm_pp4_stage0 = 35'd536870912;
parameter    ap_ST_fsm_state43 = 35'd1073741824;
parameter    ap_ST_fsm_state44 = 35'd2147483648;
parameter    ap_ST_fsm_state45 = 35'd4294967296;
parameter    ap_ST_fsm_state46 = 35'd8589934592;
parameter    ap_ST_fsm_state47 = 35'd17179869184;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] w;
wire   [31:0] dw;
wire   [15:0] lr;
wire   [31:0] dim;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg   [0:0] icmp_ln37_reg_827;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond5_reg_850;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state31;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond998_reg_930;
reg   [0:0] exitcond998_reg_930_pp3_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state39;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] exitcond1019_reg_955;
reg   [0:0] exitcond1019_reg_955_pp4_iter1_reg;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond956_reg_875;
wire    ap_CS_fsm_state15;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [31:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [15:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [62:0] loop_index88_reg_293;
reg   [62:0] loop_index82_reg_304;
reg   [30:0] i_reg_315;
reg   [62:0] loop_index76_reg_326;
reg   [62:0] loop_index_reg_337;
reg   [31:0] dim_read_reg_741;
reg   [15:0] lr_read_reg_751;
reg   [31:0] dw_read_reg_756;
reg   [31:0] w_read_reg_761;
wire  signed [28:0] sext_ln1193_fu_429_p1;
reg  signed [28:0] sext_ln1193_reg_766;
wire    ap_CS_fsm_state2;
wire   [31:0] xor_ln25_fu_432_p2;
reg   [31:0] xor_ln25_reg_771;
wire  signed [31:0] sext_ln25_fu_437_p1;
reg  signed [31:0] sext_ln25_reg_779;
wire   [31:0] add_ln25_fu_441_p2;
reg   [31:0] add_ln25_reg_784;
wire    ap_CS_fsm_state3;
wire   [31:0] shl_ln29_fu_452_p2;
reg   [31:0] shl_ln29_reg_792;
wire   [0:0] icmp_ln25_fu_447_p2;
wire   [31:0] sub_ln29_2_fu_458_p2;
reg   [31:0] sub_ln29_2_reg_797;
wire   [31:0] add_ln29_fu_470_p2;
reg   [31:0] add_ln29_reg_803;
wire   [31:0] add_ln29_1_fu_475_p2;
reg   [31:0] add_ln29_1_reg_808;
wire   [31:0] ub_fu_496_p3;
reg   [31:0] ub_reg_813;
wire   [31:0] sub_ln29_3_fu_519_p2;
reg   [31:0] sub_ln29_3_reg_819;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln37_fu_525_p2;
wire  signed [62:0] sext_ln29_fu_548_p1;
reg  signed [62:0] sext_ln29_reg_831;
wire   [62:0] empty_21_fu_563_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond5_fu_569_p2;
reg   [0:0] exitcond5_reg_850_pp0_iter1_reg;
wire   [9:0] empty_22_fu_574_p1;
reg   [9:0] empty_22_reg_854;
reg   [9:0] empty_22_reg_854_pp0_iter1_reg;
reg   [15:0] gmem_addr_read_reg_859;
wire   [62:0] empty_23_fu_593_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state22_pp1_stage0_iter0;
reg    ap_block_state23_pp1_stage0_iter1;
wire    ap_block_state24_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] exitcond956_fu_599_p2;
reg   [0:0] exitcond956_reg_875_pp1_iter1_reg;
wire   [9:0] empty_24_fu_604_p1;
reg   [9:0] empty_24_reg_879;
reg   [9:0] empty_24_reg_879_pp1_iter1_reg;
reg   [15:0] gmem_addr_1_read_reg_884;
wire   [30:0] add_ln40_fu_612_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state26_pp2_stage0_iter0;
wire    ap_block_state27_pp2_stage0_iter1;
wire    ap_block_state28_pp2_stage0_iter2;
wire    ap_block_state29_pp2_stage0_iter3;
wire    ap_block_state30_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln40_fu_622_p2;
reg   [0:0] icmp_ln40_reg_894;
reg   [0:0] icmp_ln40_reg_894_pp2_iter1_reg;
reg   [0:0] icmp_ln40_reg_894_pp2_iter2_reg;
reg   [0:0] icmp_ln40_reg_894_pp2_iter3_reg;
reg   [9:0] wbuf_V_addr_1_reg_903;
reg   [9:0] wbuf_V_addr_1_reg_903_pp2_iter1_reg;
reg   [9:0] wbuf_V_addr_1_reg_903_pp2_iter2_reg;
reg   [9:0] wbuf_V_addr_1_reg_903_pp2_iter3_reg;
wire   [62:0] empty_26_fu_670_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state32_pp3_stage0_iter0;
wire    ap_block_state33_pp3_stage0_iter1;
wire    ap_block_state34_pp3_stage0_iter2;
reg    ap_block_state34_io;
reg    ap_block_pp3_stage0_11001;
wire   [0:0] exitcond998_fu_676_p2;
wire   [15:0] wbuf_V_q1;
reg   [15:0] wbuf_V_load_reg_939;
reg    ap_enable_reg_pp3_iter1;
wire   [62:0] empty_28_fu_701_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state40_pp4_stage0_iter0;
wire    ap_block_state41_pp4_stage0_iter1;
wire    ap_block_state42_pp4_stage0_iter2;
reg    ap_block_state42_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] exitcond1019_fu_707_p2;
wire  signed [15:0] dwbuf_V_q0;
reg   [15:0] dwbuf_V_load_1_reg_964;
reg    ap_enable_reg_pp4_iter1;
wire   [31:0] add_ln25_1_fu_721_p2;
wire   [31:0] add_ln25_2_fu_727_p2;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state21;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state22;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state25;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state26;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_block_state31_io;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state32;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state40;
reg   [9:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
reg   [15:0] wbuf_V_d0;
reg   [9:0] wbuf_V_address1;
reg    wbuf_V_ce1;
reg   [9:0] dwbuf_V_address0;
reg    dwbuf_V_ce0;
reg    dwbuf_V_we0;
reg   [15:0] dwbuf_V_d0;
reg   [31:0] k_reg_258;
reg    ap_block_state47;
reg   [31:0] indvars_iv92_reg_269;
reg   [31:0] indvars_iv_reg_281;
wire   [31:0] loop_index88_cast_cast_fu_578_p1;
wire   [31:0] loop_index82_cast_cast_fu_608_p1;
wire   [31:0] zext_ln1118_fu_631_p1;
wire    ap_block_pp2_stage0;
wire   [31:0] loop_index76_cast_cast_fu_685_p1;
wire   [31:0] loop_index_cast_cast_fu_716_p1;
wire  signed [31:0] p_cast_cast_fu_552_p1;
wire  signed [31:0] p_cast1_cast_fu_582_p1;
wire  signed [31:0] p_cast3_cast_fu_659_p1;
wire  signed [31:0] p_cast4_cast_fu_690_p1;
reg    ap_block_state5_io;
wire    ap_block_pp3_stage0_01001;
wire    ap_block_pp4_stage0_01001;
wire   [31:0] sub_ln23_fu_373_p2;
wire   [21:0] trunc_ln23_1_fu_378_p4;
wire   [22:0] zext_ln23_fu_388_p1;
wire   [21:0] trunc_ln23_2_fu_398_p4;
wire   [0:0] tmp_fu_366_p3;
wire   [22:0] sub_ln23_1_fu_392_p2;
wire   [22:0] zext_ln23_1_fu_407_p1;
wire   [22:0] select_ln23_fu_411_p3;
wire  signed [23:0] sext_ln23_fu_419_p1;
wire   [23:0] num_iters_fu_423_p2;
wire   [31:0] shl_ln29_1_fu_464_p2;
wire   [31:0] add_ln29_2_fu_480_p2;
wire   [0:0] icmp_ln29_2_fu_486_p2;
wire   [31:0] sub_ln29_1_fu_491_p2;
wire   [0:0] icmp_ln29_fu_504_p2;
wire   [31:0] xor_ln29_fu_514_p2;
wire   [31:0] select_ln29_fu_508_p3;
wire   [0:0] icmp_ln29_1_fu_530_p2;
wire   [31:0] select_ln29_1_fu_535_p3;
wire   [31:0] sub_ln29_fu_542_p2;
wire   [30:0] grp_fu_348_p4;
wire   [30:0] grp_fu_357_p4;
wire   [31:0] i_cast_fu_618_p1;
wire   [9:0] trunc_ln1118_fu_627_p1;
wire  signed [28:0] grp_fu_733_p3;
wire   [9:0] empty_27_fu_681_p1;
wire   [9:0] empty_29_fu_712_p1;
wire  signed [15:0] grp_fu_733_p1;
wire   [28:0] grp_fu_733_p2;
reg   [34:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
end

update_weights_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .w(w),
    .dw(dw),
    .lr(lr),
    .dim(dim),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

update_weights_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(sub_ln29_3_reg_819),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(sub_ln29_3_reg_819),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

update_weights_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(wbuf_V_d0),
    .address1(wbuf_V_address1),
    .ce1(wbuf_V_ce1),
    .q1(wbuf_V_q1)
);

update_weights_dwbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
dwbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dwbuf_V_address0),
    .ce0(dwbuf_V_ce0),
    .we0(dwbuf_V_we0),
    .d0(dwbuf_V_d0),
    .q0(dwbuf_V_q0)
);

update_weights_mac_mulsub_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_mulsub_16s_16s_29ns_29_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(dwbuf_V_q0),
    .din1(grp_fu_733_p1),
    .din2(grp_fu_733_p2),
    .ce(1'b1),
    .dout(grp_fu_733_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state22) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state22)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state22);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state26)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io) & (icmp_ln37_reg_827 == 1'd1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state32)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io) & (icmp_ln37_reg_827 == 1'd1))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state40) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state40)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state40);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_622_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_reg_315 <= add_ln40_fu_612_p2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        i_reg_315 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln37_reg_827 == 1'd1)) & (1'b1 == ap_CS_fsm_state47))) begin
        indvars_iv92_reg_269 <= add_ln25_2_fu_727_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv92_reg_269 <= 32'd4294966271;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln37_reg_827 == 1'd1)) & (1'b1 == ap_CS_fsm_state47))) begin
        indvars_iv_reg_281 <= add_ln25_1_fu_721_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_281 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln37_reg_827 == 1'd1)) & (1'b1 == ap_CS_fsm_state47))) begin
        k_reg_258 <= add_ln25_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_258 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io) & (icmp_ln37_reg_827 == 1'd1))) begin
        loop_index76_reg_326 <= 63'd0;
    end else if (((exitcond998_fu_676_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        loop_index76_reg_326 <= empty_26_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        loop_index82_reg_304 <= 63'd0;
    end else if (((exitcond956_fu_599_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        loop_index82_reg_304 <= empty_23_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        loop_index88_reg_293 <= 63'd0;
    end else if (((exitcond5_fu_569_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_index88_reg_293 <= empty_21_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        loop_index_reg_337 <= 63'd0;
    end else if (((exitcond1019_fu_707_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        loop_index_reg_337 <= empty_28_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln25_reg_784 <= add_ln25_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_447_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln29_1_reg_808 <= add_ln29_1_fu_475_p2;
        add_ln29_reg_803 <= add_ln29_fu_470_p2;
        shl_ln29_reg_792[31 : 10] <= shl_ln29_fu_452_p2[31 : 10];
        sub_ln29_2_reg_797[31 : 10] <= sub_ln29_2_fu_458_p2[31 : 10];
        ub_reg_813 <= ub_fu_496_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dim_read_reg_741 <= dim;
        dw_read_reg_756 <= dw;
        lr_read_reg_751 <= lr;
        w_read_reg_761 <= w;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (exitcond1019_reg_955 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        dwbuf_V_load_1_reg_964 <= dwbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_569_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_22_reg_854 <= empty_22_fu_574_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_22_reg_854_pp0_iter1_reg <= empty_22_reg_854;
        exitcond5_reg_850 <= exitcond5_fu_569_p2;
        exitcond5_reg_850_pp0_iter1_reg <= exitcond5_reg_850;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond956_fu_599_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_24_reg_879 <= empty_24_fu_604_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_24_reg_879_pp1_iter1_reg <= empty_24_reg_879;
        exitcond956_reg_875 <= exitcond956_fu_599_p2;
        exitcond956_reg_875_pp1_iter1_reg <= exitcond956_reg_875;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        exitcond1019_reg_955 <= exitcond1019_fu_707_p2;
        exitcond1019_reg_955_pp4_iter1_reg <= exitcond1019_reg_955;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        exitcond998_reg_930 <= exitcond998_fu_676_p2;
        exitcond998_reg_930_pp3_iter1_reg <= exitcond998_reg_930;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond956_reg_875 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_read_reg_884 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond5_reg_850 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_859 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln37_reg_827 <= icmp_ln37_fu_525_p2;
        sub_ln29_3_reg_819 <= sub_ln29_3_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln40_reg_894 <= icmp_ln40_fu_622_p2;
        icmp_ln40_reg_894_pp2_iter1_reg <= icmp_ln40_reg_894;
        wbuf_V_addr_1_reg_903_pp2_iter1_reg <= wbuf_V_addr_1_reg_903;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln40_reg_894_pp2_iter2_reg <= icmp_ln40_reg_894_pp2_iter1_reg;
        icmp_ln40_reg_894_pp2_iter3_reg <= icmp_ln40_reg_894_pp2_iter2_reg;
        wbuf_V_addr_1_reg_903_pp2_iter2_reg <= wbuf_V_addr_1_reg_903_pp2_iter1_reg;
        wbuf_V_addr_1_reg_903_pp2_iter3_reg <= wbuf_V_addr_1_reg_903_pp2_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln1193_reg_766 <= sext_ln1193_fu_429_p1;
        sext_ln25_reg_779 <= sext_ln25_fu_437_p1;
        xor_ln25_reg_771 <= xor_ln25_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_ln29_reg_831 <= sext_ln29_fu_548_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_622_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        wbuf_V_addr_1_reg_903 <= zext_ln1118_fu_631_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond998_reg_930 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        wbuf_V_load_reg_939 <= wbuf_V_q1;
    end
end

always @ (*) begin
    if ((exitcond5_fu_569_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond956_fu_599_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state22 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state22 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_622_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond998_fu_676_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1019_fu_707_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state40 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state40 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        dwbuf_V_address0 = loop_index_cast_cast_fu_716_p1;
    end else if (((icmp_ln40_fu_622_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dwbuf_V_address0 = zext_ln1118_fu_631_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        dwbuf_V_address0 = loop_index82_cast_cast_fu_608_p1;
    end else begin
        dwbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln40_fu_622_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        dwbuf_V_ce0 = 1'b1;
    end else begin
        dwbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln40_fu_622_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dwbuf_V_d0 = 16'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        dwbuf_V_d0 = gmem_addr_1_read_reg_884;
    end else begin
        dwbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond956_reg_875_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln40_fu_622_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        dwbuf_V_we0 = 1'b1;
    end else begin
        dwbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        gmem_ARADDR = p_cast1_cast_fu_582_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (icmp_ln37_reg_827 == 1'd1))) begin
        gmem_ARADDR = p_cast_cast_fu_552_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (icmp_ln37_reg_827 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        gmem_AWADDR = p_cast4_cast_fu_690_p1;
    end else if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io) & (icmp_ln37_reg_827 == 1'd1))) begin
        gmem_AWADDR = p_cast3_cast_fu_659_p1;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io) & (icmp_ln37_reg_827 == 1'd1)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_BVALID == 1'b0) & (icmp_ln37_reg_827 == 1'd1)) & (1'b1 == ap_CS_fsm_state47) & (icmp_ln37_reg_827 == 1'd1)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond956_reg_875 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond5_reg_850 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1019_reg_955_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_01001))) begin
        gmem_WDATA = dwbuf_V_load_1_reg_964;
    end else if (((exitcond998_reg_930_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_01001))) begin
        gmem_WDATA = wbuf_V_load_reg_939;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond1019_reg_955_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((exitcond998_reg_930_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln37_reg_827 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_state31) & (icmp_ln37_reg_827 == 1'd1)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state47) & (icmp_ln37_reg_827 == 1'd1)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond956_reg_875 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond5_reg_850 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((exitcond1019_reg_955_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0)) | ((exitcond998_reg_930_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        wbuf_V_address0 = wbuf_V_addr_1_reg_903_pp2_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        wbuf_V_address0 = loop_index88_cast_cast_fu_578_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        wbuf_V_address1 = loop_index76_cast_cast_fu_685_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        wbuf_V_address1 = wbuf_V_addr_1_reg_903_pp2_iter1_reg;
    end else begin
        wbuf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        wbuf_V_ce1 = 1'b1;
    end else begin
        wbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        wbuf_V_d0 = {{grp_fu_733_p3[28:13]}};
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        wbuf_V_d0 = gmem_addr_read_reg_859;
    end else begin
        wbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter4 == 1'b1) & (icmp_ln40_reg_894_pp2_iter3_reg == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond5_reg_850_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln25_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (icmp_ln37_reg_827 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (icmp_ln37_reg_827 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond5_fu_569_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((exitcond5_fu_569_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond956_fu_599_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((exitcond956_fu_599_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln40_fu_622_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter4 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter4 == 1'b1) & (ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln40_fu_622_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io) & (icmp_ln37_reg_827 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b1 == ap_CS_fsm_state31) & (1'b0 == ap_block_state31_io) & (icmp_ln37_reg_827 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond998_fu_676_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (exitcond998_fu_676_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond1019_fu_707_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (exitcond1019_fu_707_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln37_reg_827 == 1'd1)) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_721_p2 = ($signed(indvars_iv_reg_281) + $signed(32'd4294966272));

assign add_ln25_2_fu_727_p2 = ($signed(indvars_iv92_reg_269) + $signed(32'd4294966272));

assign add_ln25_fu_441_p2 = (k_reg_258 + 32'd1);

assign add_ln29_1_fu_475_p2 = (shl_ln29_1_fu_464_p2 + w_read_reg_761);

assign add_ln29_2_fu_480_p2 = (shl_ln29_fu_452_p2 + 32'd1024);

assign add_ln29_fu_470_p2 = (shl_ln29_1_fu_464_p2 + dw_read_reg_756);

assign add_ln40_fu_612_p2 = (i_reg_315 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond5_reg_850 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond5_reg_850 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond956_reg_875 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond956_reg_875 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b1 == ap_block_state42_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b1 == ap_block_state42_io) & (ap_enable_reg_pp4_iter2 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond5_reg_850 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond956_reg_875 == 1'd0));
end

assign ap_block_state24_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_io = ((gmem_AWREADY == 1'b0) & (icmp_ln37_reg_827 == 1'd1));
end

assign ap_block_state32_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_io = ((gmem_WREADY == 1'b0) & (exitcond998_reg_930_pp3_iter1_reg == 1'd0));
end

assign ap_block_state34_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_io = ((gmem_WREADY == 1'b0) & (exitcond1019_reg_955_pp4_iter1_reg == 1'd0));
end

assign ap_block_state42_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state47 = ((gmem_BVALID == 1'b0) & (icmp_ln37_reg_827 == 1'd1));
end

always @ (*) begin
    ap_block_state5_io = ((gmem_ARREADY == 1'b0) & (icmp_ln37_reg_827 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_21_fu_563_p2 = (loop_index88_reg_293 + 63'd1);

assign empty_22_fu_574_p1 = loop_index88_reg_293[9:0];

assign empty_23_fu_593_p2 = (loop_index82_reg_304 + 63'd1);

assign empty_24_fu_604_p1 = loop_index82_reg_304[9:0];

assign empty_26_fu_670_p2 = (loop_index76_reg_326 + 63'd1);

assign empty_27_fu_681_p1 = loop_index76_reg_326[9:0];

assign empty_28_fu_701_p2 = (loop_index_reg_337 + 63'd1);

assign empty_29_fu_712_p1 = loop_index_reg_337[9:0];

assign exitcond1019_fu_707_p2 = ((loop_index_reg_337 == sext_ln29_reg_831) ? 1'b1 : 1'b0);

assign exitcond5_fu_569_p2 = ((loop_index88_reg_293 == sext_ln29_reg_831) ? 1'b1 : 1'b0);

assign exitcond956_fu_599_p2 = ((loop_index82_reg_304 == sext_ln29_reg_831) ? 1'b1 : 1'b0);

assign exitcond998_fu_676_p2 = ((loop_index76_reg_326 == sext_ln29_reg_831) ? 1'b1 : 1'b0);

assign grp_fu_348_p4 = {{add_ln29_1_reg_808[31:1]}};

assign grp_fu_357_p4 = {{add_ln29_reg_803[31:1]}};

assign grp_fu_733_p1 = sext_ln1193_reg_766;

assign grp_fu_733_p2 = {{wbuf_V_q1}, {13'd0}};

assign i_cast_fu_618_p1 = i_reg_315;

assign icmp_ln25_fu_447_p2 = ((k_reg_258 == sext_ln25_reg_779) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_530_p2 = (($signed(indvars_iv92_reg_269) > $signed(xor_ln25_reg_771)) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_486_p2 = (($signed(add_ln29_2_fu_480_p2) > $signed(dim_read_reg_741)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_504_p2 = (($signed(sub_ln29_2_reg_797) > $signed(xor_ln25_reg_771)) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_525_p2 = ((ub_reg_813 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_622_p2 = (($signed(i_cast_fu_618_p1) < $signed(ub_reg_813)) ? 1'b1 : 1'b0);

assign loop_index76_cast_cast_fu_685_p1 = empty_27_fu_681_p1;

assign loop_index82_cast_cast_fu_608_p1 = empty_24_reg_879_pp1_iter1_reg;

assign loop_index88_cast_cast_fu_578_p1 = empty_22_reg_854_pp0_iter1_reg;

assign loop_index_cast_cast_fu_716_p1 = empty_29_fu_712_p1;

assign num_iters_fu_423_p2 = ($signed(sext_ln23_fu_419_p1) + $signed(24'd1));

assign p_cast1_cast_fu_582_p1 = $signed(grp_fu_357_p4);

assign p_cast3_cast_fu_659_p1 = $signed(grp_fu_348_p4);

assign p_cast4_cast_fu_690_p1 = $signed(grp_fu_357_p4);

assign p_cast_cast_fu_552_p1 = $signed(grp_fu_348_p4);

assign select_ln23_fu_411_p3 = ((tmp_fu_366_p3[0:0] == 1'b1) ? sub_ln23_1_fu_392_p2 : zext_ln23_1_fu_407_p1);

assign select_ln29_1_fu_535_p3 = ((icmp_ln29_1_fu_530_p2[0:0] == 1'b1) ? indvars_iv92_reg_269 : xor_ln25_reg_771);

assign select_ln29_fu_508_p3 = ((icmp_ln29_fu_504_p2[0:0] == 1'b1) ? sub_ln29_2_reg_797 : xor_ln25_reg_771);

assign sext_ln1193_fu_429_p1 = $signed(lr_read_reg_751);

assign sext_ln23_fu_419_p1 = $signed(select_ln23_fu_411_p3);

assign sext_ln25_fu_437_p1 = $signed(num_iters_fu_423_p2);

assign sext_ln29_fu_548_p1 = $signed(sub_ln29_fu_542_p2);

assign shl_ln29_1_fu_464_p2 = k_reg_258 << 32'd11;

assign shl_ln29_fu_452_p2 = k_reg_258 << 32'd10;

assign sub_ln23_1_fu_392_p2 = (23'd0 - zext_ln23_fu_388_p1);

assign sub_ln23_fu_373_p2 = (32'd0 - dim_read_reg_741);

assign sub_ln29_1_fu_491_p2 = (dim_read_reg_741 - shl_ln29_fu_452_p2);

assign sub_ln29_2_fu_458_p2 = ($signed(32'd4294966271) - $signed(shl_ln29_fu_452_p2));

assign sub_ln29_3_fu_519_p2 = (xor_ln29_fu_514_p2 - select_ln29_fu_508_p3);

assign sub_ln29_fu_542_p2 = (indvars_iv_reg_281 - select_ln29_1_fu_535_p3);

assign tmp_fu_366_p3 = dim_read_reg_741[32'd31];

assign trunc_ln1118_fu_627_p1 = i_reg_315[9:0];

assign trunc_ln23_1_fu_378_p4 = {{sub_ln23_fu_373_p2[31:10]}};

assign trunc_ln23_2_fu_398_p4 = {{dim_read_reg_741[31:10]}};

assign ub_fu_496_p3 = ((icmp_ln29_2_fu_486_p2[0:0] == 1'b1) ? sub_ln29_1_fu_491_p2 : 32'd1024);

assign xor_ln25_fu_432_p2 = (dim_read_reg_741 ^ 32'd4294967295);

assign xor_ln29_fu_514_p2 = (shl_ln29_reg_792 ^ 32'd4294967295);

assign zext_ln1118_fu_631_p1 = trunc_ln1118_fu_627_p1;

assign zext_ln23_1_fu_407_p1 = trunc_ln23_2_fu_398_p4;

assign zext_ln23_fu_388_p1 = trunc_ln23_1_fu_378_p4;

always @ (posedge ap_clk) begin
    shl_ln29_reg_792[9:0] <= 10'b0000000000;
    sub_ln29_2_reg_797[9:0] <= 10'b1111111111;
end

endmodule //update_weights
