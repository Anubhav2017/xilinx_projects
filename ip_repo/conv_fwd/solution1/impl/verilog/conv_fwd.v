// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_fwd_conv_fwd,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=262,HLS_SYN_DSP=0,HLS_SYN_FF=8415,HLS_SYN_LUT=7376,HLS_VERSION=2020_2}" *)

module conv_fwd (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 95'd1;
parameter    ap_ST_fsm_state2 = 95'd2;
parameter    ap_ST_fsm_state3 = 95'd4;
parameter    ap_ST_fsm_state4 = 95'd8;
parameter    ap_ST_fsm_state5 = 95'd16;
parameter    ap_ST_fsm_state6 = 95'd32;
parameter    ap_ST_fsm_state7 = 95'd64;
parameter    ap_ST_fsm_state8 = 95'd128;
parameter    ap_ST_fsm_state9 = 95'd256;
parameter    ap_ST_fsm_state10 = 95'd512;
parameter    ap_ST_fsm_state11 = 95'd1024;
parameter    ap_ST_fsm_state12 = 95'd2048;
parameter    ap_ST_fsm_state13 = 95'd4096;
parameter    ap_ST_fsm_state14 = 95'd8192;
parameter    ap_ST_fsm_state15 = 95'd16384;
parameter    ap_ST_fsm_state16 = 95'd32768;
parameter    ap_ST_fsm_state17 = 95'd65536;
parameter    ap_ST_fsm_pp0_stage0 = 95'd131072;
parameter    ap_ST_fsm_state21 = 95'd262144;
parameter    ap_ST_fsm_state22 = 95'd524288;
parameter    ap_ST_fsm_state23 = 95'd1048576;
parameter    ap_ST_fsm_state24 = 95'd2097152;
parameter    ap_ST_fsm_state25 = 95'd4194304;
parameter    ap_ST_fsm_state26 = 95'd8388608;
parameter    ap_ST_fsm_state27 = 95'd16777216;
parameter    ap_ST_fsm_state28 = 95'd33554432;
parameter    ap_ST_fsm_state29 = 95'd67108864;
parameter    ap_ST_fsm_state30 = 95'd134217728;
parameter    ap_ST_fsm_state31 = 95'd268435456;
parameter    ap_ST_fsm_state32 = 95'd536870912;
parameter    ap_ST_fsm_state33 = 95'd1073741824;
parameter    ap_ST_fsm_state34 = 95'd2147483648;
parameter    ap_ST_fsm_state35 = 95'd4294967296;
parameter    ap_ST_fsm_state36 = 95'd8589934592;
parameter    ap_ST_fsm_state37 = 95'd17179869184;
parameter    ap_ST_fsm_state38 = 95'd34359738368;
parameter    ap_ST_fsm_state39 = 95'd68719476736;
parameter    ap_ST_fsm_state40 = 95'd137438953472;
parameter    ap_ST_fsm_state41 = 95'd274877906944;
parameter    ap_ST_fsm_state42 = 95'd549755813888;
parameter    ap_ST_fsm_state43 = 95'd1099511627776;
parameter    ap_ST_fsm_state44 = 95'd2199023255552;
parameter    ap_ST_fsm_state45 = 95'd4398046511104;
parameter    ap_ST_fsm_state46 = 95'd8796093022208;
parameter    ap_ST_fsm_pp1_stage0 = 95'd17592186044416;
parameter    ap_ST_fsm_state50 = 95'd35184372088832;
parameter    ap_ST_fsm_state51 = 95'd70368744177664;
parameter    ap_ST_fsm_state52 = 95'd140737488355328;
parameter    ap_ST_fsm_state53 = 95'd281474976710656;
parameter    ap_ST_fsm_state54 = 95'd562949953421312;
parameter    ap_ST_fsm_state55 = 95'd1125899906842624;
parameter    ap_ST_fsm_state56 = 95'd2251799813685248;
parameter    ap_ST_fsm_pp2_stage0 = 95'd4503599627370496;
parameter    ap_ST_fsm_state60 = 95'd9007199254740992;
parameter    ap_ST_fsm_state61 = 95'd18014398509481984;
parameter    ap_ST_fsm_state62 = 95'd36028797018963968;
parameter    ap_ST_fsm_state63 = 95'd72057594037927936;
parameter    ap_ST_fsm_state64 = 95'd144115188075855872;
parameter    ap_ST_fsm_state65 = 95'd288230376151711744;
parameter    ap_ST_fsm_state66 = 95'd576460752303423488;
parameter    ap_ST_fsm_state67 = 95'd1152921504606846976;
parameter    ap_ST_fsm_state68 = 95'd2305843009213693952;
parameter    ap_ST_fsm_state69 = 95'd4611686018427387904;
parameter    ap_ST_fsm_state70 = 95'd9223372036854775808;
parameter    ap_ST_fsm_state71 = 95'd18446744073709551616;
parameter    ap_ST_fsm_state72 = 95'd36893488147419103232;
parameter    ap_ST_fsm_state73 = 95'd73786976294838206464;
parameter    ap_ST_fsm_state74 = 95'd147573952589676412928;
parameter    ap_ST_fsm_state75 = 95'd295147905179352825856;
parameter    ap_ST_fsm_state76 = 95'd590295810358705651712;
parameter    ap_ST_fsm_state77 = 95'd1180591620717411303424;
parameter    ap_ST_fsm_state78 = 95'd2361183241434822606848;
parameter    ap_ST_fsm_state79 = 95'd4722366482869645213696;
parameter    ap_ST_fsm_state80 = 95'd9444732965739290427392;
parameter    ap_ST_fsm_state81 = 95'd18889465931478580854784;
parameter    ap_ST_fsm_pp3_stage0 = 95'd37778931862957161709568;
parameter    ap_ST_fsm_state87 = 95'd75557863725914323419136;
parameter    ap_ST_fsm_state88 = 95'd151115727451828646838272;
parameter    ap_ST_fsm_state89 = 95'd302231454903657293676544;
parameter    ap_ST_fsm_state90 = 95'd604462909807314587353088;
parameter    ap_ST_fsm_state91 = 95'd1208925819614629174706176;
parameter    ap_ST_fsm_state92 = 95'd2417851639229258349412352;
parameter    ap_ST_fsm_state93 = 95'd4835703278458516698824704;
parameter    ap_ST_fsm_state94 = 95'd9671406556917033397649408;
parameter    ap_ST_fsm_state95 = 95'd19342813113834066795298816;
parameter    ap_ST_fsm_state96 = 95'd38685626227668133590597632;
parameter    ap_ST_fsm_state97 = 95'd77371252455336267181195264;
parameter    ap_ST_fsm_state98 = 95'd154742504910672534362390528;
parameter    ap_ST_fsm_state99 = 95'd309485009821345068724781056;
parameter    ap_ST_fsm_pp4_stage0 = 95'd618970019642690137449562112;
parameter    ap_ST_fsm_state103 = 95'd1237940039285380274899124224;
parameter    ap_ST_fsm_state104 = 95'd2475880078570760549798248448;
parameter    ap_ST_fsm_state105 = 95'd4951760157141521099596496896;
parameter    ap_ST_fsm_state106 = 95'd9903520314283042199192993792;
parameter    ap_ST_fsm_state107 = 95'd19807040628566084398385987584;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [94:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] w;
wire   [31:0] y;
wire   [31:0] b;
wire   [31:0] F;
wire   [31:0] C;
wire   [31:0] H;
wire   [31:0] W_r;
wire   [31:0] FH;
wire   [31:0] FW;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state11;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln32_reg_2210;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln43_reg_2398;
wire    ap_CS_fsm_state30;
reg   [0:0] icmp_ln40_1_reg_2281;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln50_reg_2427;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state97;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp4_iter2;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln72_reg_2796;
reg   [0:0] icmp_ln72_reg_2796_pp4_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state107;
reg   [0:0] cmp115114_reg_2716;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] k_reg_427;
reg   [30:0] l_reg_497;
reg   [30:0] i_2_reg_508;
reg   [30:0] fw_reg_622;
reg   [15:0] lhs_reg_633;
reg   [30:0] k_2_reg_692;
reg   [31:0] FW_read_reg_2011;
reg   [31:0] FH_read_reg_2022;
reg   [31:0] W_read_reg_2032;
reg   [31:0] H_read_reg_2040;
reg   [31:0] C_read_reg_2047;
reg   [31:0] F_read_reg_2053;
reg   [31:0] b_read_reg_2060;
reg   [31:0] y_read_reg_2065;
reg   [31:0] w_read_reg_2070;
reg   [31:0] x_read_reg_2075;
wire  signed [30:0] trunc_ln30_fu_703_p1;
reg  signed [30:0] trunc_ln30_reg_2080;
wire  signed [30:0] empty_fu_707_p1;
reg  signed [30:0] empty_reg_2085;
wire  signed [30:0] empty_32_fu_711_p1;
reg  signed [30:0] empty_32_reg_2091;
wire   [63:0] cast_fu_715_p1;
reg   [63:0] cast_reg_2096;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln25_fu_727_p2;
reg   [31:0] add_ln25_reg_2107;
wire    ap_CS_fsm_state3;
wire   [31:0] outW_fu_732_p2;
reg   [31:0] outW_reg_2112;
wire   [0:0] cmp61159_fu_737_p2;
reg   [0:0] cmp61159_reg_2122;
wire   [63:0] grp_fu_721_p2;
reg   [63:0] bound_reg_2126;
wire   [63:0] add_ln30_1_fu_742_p2;
reg   [63:0] add_ln30_1_reg_2131;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln31_fu_759_p2;
reg   [0:0] icmp_ln31_reg_2139;
wire   [0:0] icmp_ln30_fu_748_p2;
wire   [31:0] select_ln30_1_fu_764_p3;
reg   [31:0] select_ln30_1_reg_2144;
wire  signed [30:0] trunc_ln30_1_fu_772_p1;
reg  signed [30:0] trunc_ln30_1_reg_2149;
wire   [3:0] trunc_ln30_2_fu_776_p1;
reg   [3:0] trunc_ln30_2_reg_2154;
wire   [0:0] icmp_ln40_fu_780_p2;
reg   [0:0] icmp_ln40_reg_2159;
wire   [30:0] grp_fu_793_p2;
reg   [30:0] mul_ln30_reg_2168;
wire    ap_CS_fsm_state6;
wire   [31:0] select_ln30_fu_797_p3;
reg   [31:0] select_ln30_reg_2173;
wire    ap_CS_fsm_state7;
wire  signed [30:0] tmp_fu_808_p2;
reg  signed [30:0] tmp_reg_2179;
wire   [30:0] grp_fu_813_p2;
reg   [30:0] empty_35_reg_2184;
wire    ap_CS_fsm_state9;
wire   [11:0] zext_ln31_fu_826_p1;
reg   [11:0] zext_ln31_reg_2189;
wire    ap_CS_fsm_state10;
reg   [31:0] gmem_addr_1_reg_2194;
wire   [16:0] grp_fu_1970_p3;
reg   [16:0] mul_ln32_reg_2200;
wire    ap_CS_fsm_state17;
wire   [30:0] add_ln32_fu_869_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state18_pp0_stage0_iter0;
reg    ap_block_state19_pp0_stage0_iter1;
wire    ap_block_state20_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln32_fu_879_p2;
reg   [0:0] icmp_ln32_reg_2210_pp0_iter1_reg;
(* use_dsp48 = "no" *) wire   [16:0] add_ln33_1_fu_888_p2;
reg   [16:0] add_ln33_1_reg_2214;
reg   [16:0] add_ln33_1_reg_2214_pp0_iter1_reg;
reg   [15:0] gmem_addr_1_read_reg_2219;
wire   [31:0] add_ln31_fu_897_p2;
wire    ap_CS_fsm_state21;
wire   [63:0] grp_fu_788_p2;
reg   [63:0] bound4_reg_2229;
wire    ap_CS_fsm_state22;
wire   [30:0] empty_37_fu_902_p1;
reg   [30:0] empty_37_reg_2235;
wire    ap_CS_fsm_state23;
wire   [0:0] cmp80139_fu_918_p2;
reg   [0:0] cmp80139_reg_2252;
wire    ap_CS_fsm_state27;
wire  signed [30:0] trunc_ln40_fu_923_p1;
reg  signed [30:0] trunc_ln40_reg_2256;
wire  signed [30:0] empty_38_fu_926_p1;
reg  signed [30:0] empty_38_reg_2261;
wire   [94:0] grp_fu_912_p2;
reg   [94:0] bound12_reg_2266;
wire   [0:0] icmp_ln42_fu_929_p2;
reg   [0:0] icmp_ln42_reg_2271;
wire   [94:0] add_ln40_1_fu_934_p2;
reg   [94:0] add_ln40_1_reg_2276;
wire    ap_CS_fsm_state28;
wire   [0:0] icmp_ln40_1_fu_945_p2;
wire   [30:0] grp_fu_940_p2;
reg   [30:0] empty_39_reg_2285;
wire    ap_CS_fsm_state29;
wire   [30:0] tmp4_fu_954_p2;
reg   [30:0] tmp4_reg_2291;
wire   [6:0] trunc_ln44_fu_959_p1;
reg   [6:0] trunc_ln44_reg_2296;
wire  signed [30:0] add_ln40_fu_963_p2;
reg  signed [30:0] add_ln40_reg_2301;
wire   [0:0] icmp_ln41_fu_969_p2;
reg   [0:0] icmp_ln41_reg_2306;
wire   [30:0] select_ln40_2_fu_974_p3;
reg   [30:0] select_ln40_2_reg_2317;
wire   [3:0] trunc_ln44_1_fu_982_p1;
reg   [3:0] trunc_ln44_1_reg_2322;
wire   [30:0] grp_fu_1006_p2;
reg   [30:0] p_mid118_reg_2334;
wire    ap_CS_fsm_state32;
wire   [0:0] select_ln40_5_fu_1070_p3;
reg   [0:0] select_ln40_5_reg_2340;
wire    ap_CS_fsm_state33;
wire  signed [30:0] select_ln41_1_fu_1092_p3;
reg  signed [30:0] select_ln41_1_reg_2345;
wire   [8:0] add_ln44_1_fu_1116_p2;
reg   [8:0] add_ln44_1_reg_2350;
wire   [31:0] select_ln41_3_fu_1122_p3;
reg   [31:0] select_ln41_3_reg_2356;
wire   [30:0] grp_fu_1130_p2;
reg   [30:0] mul_ln41_reg_2361;
wire    ap_CS_fsm_state35;
wire   [31:0] select_ln41_fu_1138_p3;
reg   [31:0] select_ln41_reg_2366;
wire    ap_CS_fsm_state36;
wire  signed [30:0] tmp6_fu_1150_p2;
reg  signed [30:0] tmp6_reg_2372;
wire   [30:0] grp_fu_1155_p2;
reg   [30:0] empty_42_reg_2377;
wire    ap_CS_fsm_state38;
reg   [31:0] gmem_addr_2_reg_2382;
wire    ap_CS_fsm_state39;
wire   [11:0] add_ln44_4_fu_1240_p2;
reg   [11:0] add_ln44_4_reg_2388;
wire   [30:0] add_ln43_fu_1246_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state47_pp1_stage0_iter0;
reg    ap_block_state48_pp1_stage0_iter1;
wire    ap_block_state49_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln43_fu_1256_p2;
reg   [0:0] icmp_ln43_reg_2398_pp1_iter1_reg;
wire   [11:0] add_ln44_5_fu_1265_p2;
reg   [11:0] add_ln44_5_reg_2402;
reg   [11:0] add_ln44_5_reg_2402_pp1_iter1_reg;
reg   [15:0] gmem_addr_2_read_reg_2407;
wire   [31:0] add_ln42_fu_1274_p2;
wire    ap_CS_fsm_state50;
wire   [63:0] select_ln41_4_fu_1285_p3;
wire   [30:0] add_ln50_fu_1292_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state57_pp2_stage0_iter0;
reg    ap_block_state58_pp2_stage0_iter1;
wire    ap_block_state59_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln50_fu_1298_p2;
reg   [0:0] icmp_ln50_reg_2427_pp2_iter1_reg;
wire   [3:0] trunc_ln51_fu_1303_p1;
reg   [3:0] trunc_ln51_reg_2431;
reg   [3:0] trunc_ln51_reg_2431_pp2_iter1_reg;
reg   [15:0] gmem_addr_read_reg_2436;
wire   [31:0] sub_ln54_fu_1316_p2;
reg   [31:0] sub_ln54_reg_2441;
wire    ap_CS_fsm_state60;
wire  signed [30:0] trunc_ln54_fu_1321_p1;
reg  signed [30:0] trunc_ln54_reg_2448;
wire   [0:0] icmp_ln57_fu_1325_p2;
reg   [0:0] icmp_ln57_reg_2453;
wire    ap_CS_fsm_state61;
wire   [63:0] grp_fu_1335_p2;
reg   [63:0] mul_ln54_reg_2469;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire   [95:0] grp_fu_1347_p2;
reg   [95:0] mul_ln54_1_reg_2486;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire   [126:0] grp_fu_1359_p2;
reg   [126:0] mul_ln54_2_reg_2502;
wire    ap_CS_fsm_state72;
wire   [0:0] icmp_ln56_fu_1365_p2;
reg   [0:0] icmp_ln56_reg_2507;
wire   [126:0] add_ln54_2_fu_1370_p2;
reg   [126:0] add_ln54_2_reg_2512;
wire    ap_CS_fsm_state73;
wire   [6:0] trunc_ln1116_fu_1376_p1;
reg   [6:0] trunc_ln1116_reg_2517;
wire   [9:0] trunc_ln58_fu_1380_p1;
reg   [9:0] trunc_ln58_reg_2522;
wire   [0:0] icmp_ln55_fu_1395_p2;
reg   [0:0] icmp_ln55_reg_2530;
wire   [0:0] icmp_ln54_fu_1384_p2;
wire   [3:0] select_ln54_1_fu_1408_p3;
reg   [3:0] select_ln54_1_reg_2539;
wire   [0:0] select_ln54_4_fu_1421_p3;
reg   [0:0] select_ln54_4_reg_2547;
wire   [30:0] select_ln54_5_fu_1428_p3;
reg   [30:0] select_ln54_5_reg_2555;
wire   [0:0] or_ln55_fu_1436_p2;
reg   [0:0] or_ln55_reg_2560;
wire   [6:0] select_ln55_1_fu_1508_p3;
reg   [6:0] select_ln55_1_reg_2577;
wire    ap_CS_fsm_state74;
wire   [0:0] select_ln55_3_fu_1521_p3;
reg   [0:0] select_ln55_3_reg_2583;
wire   [31:0] select_ln55_4_fu_1527_p3;
reg   [31:0] select_ln55_4_reg_2588;
wire   [9:0] select_ln56_1_fu_1544_p3;
reg   [9:0] select_ln56_1_reg_2593;
wire   [31:0] select_ln56_2_fu_1556_p3;
reg   [31:0] select_ln56_2_reg_2598;
wire    ap_CS_fsm_state76;
wire   [31:0] select_ln56_fu_1577_p3;
reg   [31:0] select_ln56_reg_2608;
wire   [16:0] trunc_ln58_2_fu_1585_p1;
reg   [16:0] trunc_ln58_2_reg_2613;
wire   [15:0] bbuf_V_q0;
wire    ap_CS_fsm_state77;
wire   [13:0] mul_ln1116_fu_1623_p2;
reg   [13:0] mul_ln1116_reg_2624;
wire   [29:0] add_ln1118_2_fu_1641_p2;
reg   [29:0] add_ln1118_2_reg_2629;
reg   [16:0] ybuf_V_addr_reg_2634;
wire   [31:0] add_ln59_fu_1651_p2;
reg   [31:0] add_ln59_reg_2639;
wire    ap_CS_fsm_state78;
wire   [11:0] add_ln1118_4_fu_1691_p2;
reg   [11:0] add_ln1118_4_reg_2647;
wire   [0:0] icmp_ln59_fu_1657_p2;
wire   [31:0] add_ln57_fu_1715_p2;
wire   [63:0] select_ln56_3_fu_1726_p3;
wire   [95:0] select_ln55_5_fu_1739_p3;
wire   [16:0] grp_fu_1988_p2;
reg   [16:0] mul_ln60_reg_2672;
wire    ap_CS_fsm_state81;
wire   [30:0] add_ln60_fu_1746_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state82_pp3_stage0_iter0;
wire    ap_block_state83_pp3_stage0_iter1;
wire    ap_block_state84_pp3_stage0_iter2;
wire    ap_block_state85_pp3_stage0_iter3;
wire    ap_block_state86_pp3_stage0_iter4;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln60_fu_1756_p2;
reg   [0:0] icmp_ln60_reg_2682;
reg   [0:0] icmp_ln60_reg_2682_pp3_iter1_reg;
reg   [0:0] icmp_ln60_reg_2682_pp3_iter2_reg;
reg   [0:0] icmp_ln60_reg_2682_pp3_iter3_reg;
reg    ap_enable_reg_pp3_iter4;
wire   [0:0] cmp115114_fu_1819_p2;
wire    ap_CS_fsm_state89;
wire  signed [30:0] empty_48_fu_1824_p1;
reg  signed [30:0] empty_48_reg_2720;
wire   [62:0] grp_fu_1448_p2;
reg   [62:0] bound90_reg_2725;
wire   [62:0] add_ln70_1_fu_1827_p2;
reg   [62:0] add_ln70_1_reg_2730;
wire    ap_CS_fsm_state90;
wire   [0:0] icmp_ln71_fu_1844_p2;
reg   [0:0] icmp_ln71_reg_2738;
wire   [0:0] icmp_ln70_fu_1833_p2;
wire  signed [30:0] select_ln70_1_fu_1849_p3;
reg  signed [30:0] select_ln70_1_reg_2743;
wire   [3:0] trunc_ln70_fu_1857_p1;
reg   [3:0] trunc_ln70_reg_2749;
wire   [30:0] grp_fu_1861_p2;
reg   [30:0] mul_ln70_reg_2754;
wire    ap_CS_fsm_state92;
wire   [31:0] select_ln70_fu_1865_p3;
reg   [31:0] select_ln70_reg_2759;
wire    ap_CS_fsm_state93;
wire  signed [30:0] tmp8_fu_1876_p2;
reg  signed [30:0] tmp8_reg_2765;
wire   [10:0] mul_ln73_fu_1888_p2;
reg   [10:0] mul_ln73_reg_2770;
wire    ap_CS_fsm_state95;
wire   [30:0] grp_fu_1881_p2;
reg   [30:0] empty_52_reg_2775;
reg   [31:0] gmem_addr_3_reg_2780;
wire    ap_CS_fsm_state96;
wire   [16:0] grp_fu_2003_p3;
reg   [16:0] mul_ln72_reg_2786;
wire    ap_CS_fsm_state99;
wire   [30:0] add_ln72_fu_1936_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state100_pp4_stage0_iter0;
wire    ap_block_state101_pp4_stage0_iter1;
wire    ap_block_state102_pp4_stage0_iter2;
reg    ap_block_state102_io;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln72_fu_1946_p2;
wire   [15:0] ybuf_V_q0;
reg   [15:0] ybuf_V_load_reg_2805;
reg    ap_enable_reg_pp4_iter1;
wire   [31:0] add_ln71_fu_1965_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state18;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state46;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state47;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state56;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state57;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_flush_enable;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_condition_pp3_exit_iter3_state85;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state100;
reg   [16:0] xbuf_V_address0;
reg    xbuf_V_ce0;
reg    xbuf_V_we0;
wire  signed [15:0] xbuf_V_q0;
reg   [11:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
wire  signed [15:0] wbuf_V_q0;
reg   [16:0] ybuf_V_address0;
reg    ybuf_V_ce0;
reg    ybuf_V_we0;
reg   [15:0] ybuf_V_d0;
reg   [3:0] bbuf_V_address0;
reg    bbuf_V_ce0;
reg    bbuf_V_we0;
reg   [63:0] indvar_flatten_reg_393;
reg   [31:0] i_reg_404;
reg   [31:0] j_reg_415;
reg   [94:0] indvar_flatten32_reg_438;
reg  signed [30:0] i_1_reg_449;
reg   [63:0] indvar_flatten7_reg_461;
reg   [31:0] j_1_reg_473;
reg   [31:0] k_1_reg_485;
reg   [126:0] indvar_flatten85_reg_519;
reg   [30:0] f_reg_530;
reg   [95:0] indvar_flatten56_reg_541;
reg   [31:0] c_reg_553;
reg   [63:0] indvar_flatten40_reg_565;
reg   [31:0] h_reg_577;
reg   [31:0] w_1_reg_589;
reg   [31:0] fh_reg_601;
wire    ap_CS_fsm_state88;
reg   [15:0] V1_i_i_i_i_i23_promoted_reg_612;
reg   [15:0] ap_phi_mux_lhs_phi_fu_637_p4;
wire    ap_block_pp3_stage0;
reg   [15:0] V1_i_i_i_i_i23_promoted175_reg_645;
wire    ap_CS_fsm_state87;
reg   [62:0] indvar_flatten96_reg_658;
reg    ap_block_state107;
reg   [30:0] i_3_reg_669;
reg   [31:0] j_2_reg_680;
wire   [31:0] zext_ln33_2_fu_893_p1;
wire   [31:0] zext_ln44_6_fu_1270_p1;
wire   [31:0] zext_ln51_fu_1307_p1;
wire   [31:0] zext_ln54_6_fu_1564_p1;
wire   [31:0] zext_ln58_1_fu_1647_p1;
wire   [31:0] zext_ln1118_4_fu_1774_p1;
wire   [31:0] zext_ln1116_3_fu_1789_p1;
wire   [31:0] zext_ln73_2_fu_1960_p1;
wire  signed [31:0] sext_ln32_fu_852_p1;
wire  signed [31:0] sext_ln50_fu_995_p1;
wire  signed [31:0] sext_ln43_fu_1201_p1;
wire  signed [31:0] sext_ln72_fu_1919_p1;
reg    ap_block_state30_io;
wire    ap_block_pp4_stage0_01001;
wire   [31:0] grp_fu_721_p0;
wire   [31:0] grp_fu_721_p1;
wire   [31:0] add_ln30_fu_753_p2;
wire   [31:0] grp_fu_788_p0;
wire   [31:0] grp_fu_788_p1;
wire    ap_CS_fsm_state5;
wire   [30:0] trunc_ln31_fu_804_p1;
wire    ap_CS_fsm_state8;
wire   [3:0] mul_ln33_fu_820_p0;
wire   [7:0] mul_ln33_fu_820_p1;
wire   [10:0] mul_ln33_fu_820_p2;
wire   [31:0] tmp_1_fu_830_p3;
wire   [31:0] empty_36_fu_837_p2;
wire   [30:0] trunc_ln3_fu_842_p4;
wire    ap_CS_fsm_state14;
wire   [9:0] trunc_ln33_fu_862_p1;
wire   [31:0] k_cast_fu_875_p1;
wire   [16:0] trunc_ln33_1_fu_884_p1;
wire   [30:0] grp_fu_912_p0;
wire   [63:0] grp_fu_912_p1;
wire   [30:0] trunc_ln41_fu_950_p1;
wire   [30:0] trunc_ln5_fu_986_p4;
wire    ap_CS_fsm_state31;
wire   [6:0] tmp_3_fu_1022_p3;
wire   [4:0] tmp_5_fu_1033_p3;
wire   [7:0] zext_ln44_fu_1029_p1;
wire   [7:0] zext_ln44_1_fu_1040_p1;
wire   [7:0] add_ln44_fu_1044_p2;
wire   [0:0] icmp_ln42_1_fu_1065_p2;
wire   [31:0] select_ln40_fu_1010_p3;
wire   [31:0] add_ln41_fu_1076_p2;
wire   [30:0] trunc_ln41_1_fu_1082_p1;
wire   [30:0] select_ln40_1_fu_1017_p3;
wire   [30:0] tmp4_mid1_fu_1086_p2;
wire   [30:0] select_ln40_3_fu_1054_p3;
wire   [6:0] trunc_ln44_2_fu_1100_p1;
wire   [6:0] select_ln40_4_fu_1059_p3;
wire   [6:0] select_ln41_2_fu_1104_p3;
wire   [8:0] zext_ln41_fu_1050_p1;
wire   [8:0] zext_ln44_2_fu_1112_p1;
wire    ap_CS_fsm_state34;
wire   [0:0] or_ln41_fu_1134_p2;
wire   [30:0] trunc_ln42_fu_1146_p1;
wire    ap_CS_fsm_state37;
wire   [10:0] tmp_2_fu_1162_p3;
wire   [29:0] zext_ln44_4_fu_1169_p1;
wire   [29:0] zext_ln44_3_fu_1159_p1;
wire   [31:0] tmp_7_fu_1179_p3;
wire   [31:0] empty_43_fu_1186_p2;
wire   [30:0] trunc_ln7_fu_1191_p4;
wire   [8:0] trunc_ln44_3_fu_1211_p1;
wire   [29:0] add_ln44_2_fu_1173_p2;
wire   [29:0] zext_ln44_5_fu_1214_p1;
wire   [29:0] add_ln44_3_fu_1218_p2;
wire   [9:0] trunc_ln44_5_fu_1228_p1;
wire   [11:0] p_shl1_cast_fu_1232_p3;
wire   [11:0] trunc_ln44_4_fu_1224_p1;
wire   [31:0] l_cast_fu_1252_p1;
wire   [11:0] trunc_ln44_6_fu_1261_p1;
wire   [63:0] add_ln41_1_fu_1279_p2;
wire   [31:0] add_ln54_fu_1311_p2;
wire   [31:0] grp_fu_1335_p0;
wire   [31:0] grp_fu_1335_p1;
wire   [31:0] grp_fu_1347_p0;
wire   [63:0] grp_fu_1347_p1;
wire   [30:0] grp_fu_1359_p0;
wire   [95:0] grp_fu_1359_p1;
wire   [30:0] add_ln54_1_fu_1389_p2;
wire   [3:0] trunc_ln54_1_fu_1400_p1;
wire   [3:0] trunc_ln54_2_fu_1404_p1;
wire   [0:0] icmp_ln56_1_fu_1416_p2;
wire   [30:0] grp_fu_1448_p0;
wire   [31:0] grp_fu_1448_p1;
wire   [3:0] mul_ln58_fu_1464_p0;
wire   [7:0] mul_ln58_fu_1464_p1;
wire   [10:0] mul_ln58_fu_1464_p2;
wire   [0:0] icmp_ln57_1_fu_1480_p2;
wire   [31:0] select_ln54_fu_1454_p3;
wire   [31:0] add_ln55_fu_1491_p2;
wire   [6:0] trunc_ln1116_1_fu_1504_p1;
wire   [6:0] select_ln54_2_fu_1474_p3;
wire   [0:0] select_ln54_3_fu_1485_p3;
wire   [31:0] select_ln55_fu_1497_p3;
wire   [31:0] add_ln56_fu_1534_p2;
wire   [9:0] trunc_ln58_1_fu_1540_p1;
wire   [9:0] select_ln55_2_fu_1515_p3;
wire   [0:0] or_ln56_fu_1568_p2;
wire   [0:0] or_ln56_1_fu_1572_p2;
wire   [6:0] tmp_4_fu_1589_p3;
wire   [4:0] tmp_6_fu_1600_p3;
wire   [29:0] zext_ln1118_1_fu_1596_p1;
wire   [29:0] zext_ln1118_2_fu_1607_p1;
wire   [6:0] mul_ln1116_fu_1623_p0;
wire   [7:0] mul_ln1116_fu_1623_p1;
wire   [29:0] add_ln1118_fu_1611_p2;
wire   [29:0] zext_ln1116_fu_1617_p1;
wire   [29:0] add_ln1118_1_fu_1629_p2;
wire   [29:0] shl_ln1118_fu_1635_p2;
wire   [16:0] grp_fu_1977_p4;
wire   [9:0] empty_46_fu_1662_p1;
wire   [29:0] zext_ln1118_3_fu_1666_p1;
wire   [29:0] add_ln1118_3_fu_1670_p2;
wire   [9:0] trunc_ln1118_1_fu_1679_p1;
wire   [11:0] p_shl5_cast_fu_1683_p3;
wire   [11:0] trunc_ln1118_fu_1675_p1;
wire   [9:0] add_ln1116_fu_1697_p2;
wire   [13:0] zext_ln1116_2_fu_1702_p1;
wire   [13:0] add_ln1116_2_fu_1706_p2;
wire   [63:0] add_ln56_1_fu_1720_p2;
wire   [95:0] add_ln55_1_fu_1733_p2;
wire   [31:0] fw_cast_fu_1752_p1;
wire   [11:0] trunc_ln1118_2_fu_1765_p1;
wire   [11:0] add_ln1118_5_fu_1769_p2;
wire   [16:0] trunc_ln61_fu_1761_p1;
wire   [16:0] add_ln1116_1_fu_1779_p2;
(* use_dsp48 = "no" *) wire   [16:0] add_ln1116_3_fu_1784_p2;
wire  signed [22:0] grp_fu_1994_p3;
wire   [30:0] add_ln70_fu_1838_p2;
wire    ap_CS_fsm_state91;
wire   [30:0] trunc_ln71_fu_1872_p1;
wire    ap_CS_fsm_state94;
wire   [3:0] mul_ln73_fu_1888_p0;
wire   [7:0] mul_ln73_fu_1888_p1;
wire   [31:0] tmp_s_fu_1897_p3;
wire   [31:0] empty_53_fu_1904_p2;
wire   [30:0] trunc_ln_fu_1909_p4;
wire   [9:0] trunc_ln73_fu_1929_p1;
wire   [31:0] k_2_cast_fu_1942_p1;
wire   [16:0] trunc_ln73_1_fu_1951_p1;
(* use_dsp48 = "no" *) wire   [16:0] add_ln73_1_fu_1955_p2;
wire   [10:0] grp_fu_1970_p0;
wire   [9:0] grp_fu_1970_p1;
wire   [7:0] grp_fu_1970_p2;
wire   [10:0] grp_fu_1977_p0;
wire   [9:0] grp_fu_1977_p1;
wire   [7:0] grp_fu_1977_p2;
wire   [16:0] grp_fu_1977_p3;
wire   [13:0] grp_fu_1988_p0;
wire   [7:0] grp_fu_1988_p1;
wire   [22:0] grp_fu_1994_p2;
wire   [10:0] grp_fu_2003_p0;
wire   [9:0] grp_fu_2003_p1;
wire   [7:0] grp_fu_2003_p2;
reg    grp_fu_2003_ce;
wire    ap_CS_fsm_state98;
reg   [94:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [63:0] grp_fu_1335_p00;
wire   [63:0] grp_fu_1335_p10;
wire   [95:0] grp_fu_1347_p00;
wire   [95:0] grp_fu_1347_p10;
wire   [126:0] grp_fu_1359_p00;
wire   [126:0] grp_fu_1359_p10;
wire   [62:0] grp_fu_1448_p00;
wire   [62:0] grp_fu_1448_p10;
wire   [11:0] grp_fu_1970_p10;
wire   [11:0] grp_fu_1977_p00;
wire   [11:0] grp_fu_1977_p10;
wire   [16:0] grp_fu_1988_p00;
wire   [11:0] grp_fu_2003_p00;
wire   [11:0] grp_fu_2003_p10;
wire   [63:0] grp_fu_721_p00;
wire   [63:0] grp_fu_721_p10;
wire   [63:0] grp_fu_788_p10;
wire   [94:0] grp_fu_912_p00;
wire   [94:0] grp_fu_912_p10;
wire   [13:0] mul_ln1116_fu_1623_p00;
wire   [10:0] mul_ln33_fu_820_p00;
wire   [10:0] mul_ln58_fu_1464_p00;
wire   [10:0] mul_ln73_fu_1888_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 95'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
end

conv_fwd_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .F(F),
    .C(C),
    .H(H),
    .W_r(W_r),
    .FH(FH),
    .FW(FW),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

conv_fwd_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .w(w),
    .y(y),
    .b(b)
);

conv_fwd_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_3_reg_2780),
    .I_AWID(1'd0),
    .I_AWLEN(outW_reg_2112),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(ybuf_V_load_reg_2805),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

conv_fwd_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 100000 ),
    .AddressWidth( 17 ))
xbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xbuf_V_address0),
    .ce0(xbuf_V_ce0),
    .we0(xbuf_V_we0),
    .d0(gmem_addr_1_read_reg_2219),
    .q0(xbuf_V_q0)
);

conv_fwd_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(gmem_addr_2_read_reg_2407),
    .q0(wbuf_V_q0)
);

conv_fwd_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 100000 ),
    .AddressWidth( 17 ))
ybuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ybuf_V_address0),
    .ce0(ybuf_V_ce0),
    .we0(ybuf_V_we0),
    .d0(ybuf_V_d0),
    .q0(ybuf_V_q0)
);

conv_fwd_bbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
bbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_V_address0),
    .ce0(bbuf_V_ce0),
    .we0(bbuf_V_we0),
    .d0(gmem_addr_read_reg_2436),
    .q0(bbuf_V_q0)
);

conv_fwd_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_721_p0),
    .din1(grp_fu_721_p1),
    .ce(1'b1),
    .dout(grp_fu_721_p2)
);

conv_fwd_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_788_p0),
    .din1(grp_fu_788_p1),
    .ce(1'b1),
    .dout(grp_fu_788_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln30_1_reg_2149),
    .din1(trunc_ln30_reg_2080),
    .ce(1'b1),
    .dout(grp_fu_793_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_reg_2179),
    .din1(empty_32_reg_2091),
    .ce(1'b1),
    .dout(grp_fu_813_p2)
);

conv_fwd_mul_4ns_8ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mul_4ns_8ns_11_1_1_U5(
    .din0(mul_ln33_fu_820_p0),
    .din1(mul_ln33_fu_820_p1),
    .dout(mul_ln33_fu_820_p2)
);

conv_fwd_mul_31ns_64ns_95_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 95 ))
mul_31ns_64ns_95_5_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_912_p0),
    .din1(grp_fu_912_p1),
    .ce(1'b1),
    .dout(grp_fu_912_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_1_reg_449),
    .din1(empty_reg_2085),
    .ce(1'b1),
    .dout(grp_fu_940_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(add_ln40_reg_2301),
    .din1(empty_reg_2085),
    .ce(1'b1),
    .dout(grp_fu_1006_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln41_1_reg_2345),
    .din1(trunc_ln40_reg_2256),
    .ce(1'b1),
    .dout(grp_fu_1130_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp6_reg_2372),
    .din1(empty_38_reg_2261),
    .ce(1'b1),
    .dout(grp_fu_1155_p2)
);

conv_fwd_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1335_p0),
    .din1(grp_fu_1335_p1),
    .ce(1'b1),
    .dout(grp_fu_1335_p2)
);

conv_fwd_mul_32ns_64ns_96_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 96 ))
mul_32ns_64ns_96_5_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1347_p0),
    .din1(grp_fu_1347_p1),
    .ce(1'b1),
    .dout(grp_fu_1347_p2)
);

conv_fwd_mul_31ns_96ns_127_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 127 ))
mul_31ns_96ns_127_5_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1359_p0),
    .din1(grp_fu_1359_p1),
    .ce(1'b1),
    .dout(grp_fu_1359_p2)
);

conv_fwd_mul_31ns_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32ns_63_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1448_p0),
    .din1(grp_fu_1448_p1),
    .ce(1'b1),
    .dout(grp_fu_1448_p2)
);

conv_fwd_mul_4ns_8ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mul_4ns_8ns_11_1_1_U15(
    .din0(mul_ln58_fu_1464_p0),
    .din1(mul_ln58_fu_1464_p1),
    .dout(mul_ln58_fu_1464_p2)
);

conv_fwd_mul_7ns_8ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 14 ))
mul_7ns_8ns_14_1_1_U16(
    .din0(mul_ln1116_fu_1623_p0),
    .din1(mul_ln1116_fu_1623_p1),
    .dout(mul_ln1116_fu_1623_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln70_1_reg_2743),
    .din1(trunc_ln54_reg_2448),
    .ce(1'b1),
    .dout(grp_fu_1861_p2)
);

conv_fwd_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(empty_48_reg_2720),
    .din1(tmp8_reg_2765),
    .ce(1'b1),
    .dout(grp_fu_1881_p2)
);

conv_fwd_mul_4ns_8ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mul_4ns_8ns_11_1_1_U19(
    .din0(mul_ln73_fu_1888_p0),
    .din1(mul_ln73_fu_1888_p1),
    .dout(mul_ln73_fu_1888_p2)
);

conv_fwd_am_addmul_11ns_10ns_8ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
am_addmul_11ns_10ns_8ns_17_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1970_p0),
    .din1(grp_fu_1970_p1),
    .din2(grp_fu_1970_p2),
    .ce(1'b1),
    .dout(grp_fu_1970_p3)
);

conv_fwd_ama_addmuladd_11ns_10ns_8ns_17ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
ama_addmuladd_11ns_10ns_8ns_17ns_17_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1977_p0),
    .din1(grp_fu_1977_p1),
    .din2(grp_fu_1977_p2),
    .din3(grp_fu_1977_p3),
    .ce(1'b1),
    .dout(grp_fu_1977_p4)
);

conv_fwd_mul_mul_14ns_8ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
mul_mul_14ns_8ns_17_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1988_p0),
    .din1(grp_fu_1988_p1),
    .ce(1'b1),
    .dout(grp_fu_1988_p2)
);

conv_fwd_mac_muladd_16s_16s_23ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 23 ))
mac_muladd_16s_16s_23ns_23_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wbuf_V_q0),
    .din1(xbuf_V_q0),
    .din2(grp_fu_1994_p2),
    .ce(1'b1),
    .dout(grp_fu_1994_p3)
);

conv_fwd_am_addmul_11ns_10ns_8ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
am_addmul_11ns_10ns_8ns_17_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_2003_p0),
    .din1(grp_fu_2003_p1),
    .din2(grp_fu_2003_p2),
    .ce(grp_fu_2003_ce),
    .dout(grp_fu_2003_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state18) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state18)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state47) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state47)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state47);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state57) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state56)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state57)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state57);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state56)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp3_flush_enable)) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state81)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end else if (((1'b1 == ap_CS_fsm_state81) | ((1'b1 == ap_condition_pp3_exit_iter3_state85) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b0)))) begin
            ap_enable_reg_pp3_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter3_state85) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter2;
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end else if ((1'b1 == ap_CS_fsm_state81)) begin
            ap_enable_reg_pp3_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state100) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state99)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state100)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state100);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state99)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd0) & (cmp80139_reg_2252 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        V1_i_i_i_i_i23_promoted175_reg_645 <= V1_i_i_i_i_i23_promoted_reg_612;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        V1_i_i_i_i_i23_promoted175_reg_645 <= lhs_reg_633;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        V1_i_i_i_i_i23_promoted_reg_612 <= bbuf_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        V1_i_i_i_i_i23_promoted_reg_612 <= V1_i_i_i_i_i23_promoted175_reg_645;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        c_reg_553 <= select_ln55_4_reg_2588;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        c_reg_553 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        f_reg_530 <= select_ln54_5_reg_2555;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        f_reg_530 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        fh_reg_601 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        fh_reg_601 <= add_ln59_reg_2639;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        fw_reg_622 <= 31'd0;
    end else if (((icmp_ln60_fu_1756_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        fw_reg_622 <= add_ln60_fu_1746_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        h_reg_577 <= select_ln56_2_reg_2598;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        h_reg_577 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        i_1_reg_449 <= select_ln40_2_reg_2317;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_1_reg_449 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        i_2_reg_508 <= 31'd0;
    end else if (((icmp_ln50_fu_1298_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_508 <= add_ln50_fu_1292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp115114_reg_2716 == 1'd1)) & (1'b1 == ap_CS_fsm_state107))) begin
        i_3_reg_669 <= select_ln70_1_reg_2743;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        i_3_reg_669 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        i_reg_404 <= select_ln30_1_reg_2144;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_404 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        indvar_flatten32_reg_438 <= add_ln40_1_reg_2276;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        indvar_flatten32_reg_438 <= 95'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        indvar_flatten40_reg_565 <= select_ln56_3_fu_1726_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        indvar_flatten40_reg_565 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        indvar_flatten56_reg_541 <= select_ln55_5_fu_1739_p3;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        indvar_flatten56_reg_541 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        indvar_flatten7_reg_461 <= select_ln41_4_fu_1285_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        indvar_flatten7_reg_461 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        indvar_flatten85_reg_519 <= add_ln54_2_reg_2512;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        indvar_flatten85_reg_519 <= 127'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp115114_reg_2716 == 1'd1)) & (1'b1 == ap_CS_fsm_state107))) begin
        indvar_flatten96_reg_658 <= add_ln70_1_reg_2730;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        indvar_flatten96_reg_658 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        indvar_flatten_reg_393 <= add_ln30_1_reg_2131;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_393 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        j_1_reg_473 <= select_ln41_3_reg_2356;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j_1_reg_473 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp115114_reg_2716 == 1'd1)) & (1'b1 == ap_CS_fsm_state107))) begin
        j_2_reg_680 <= add_ln71_fu_1965_p2;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        j_2_reg_680 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        j_reg_415 <= add_ln31_fu_897_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_415 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        k_1_reg_485 <= add_ln42_fu_1274_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        k_1_reg_485 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        k_2_reg_692 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln72_fu_1946_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        k_2_reg_692 <= add_ln72_fu_1936_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k_reg_427 <= 31'd0;
    end else if (((icmp_ln32_fu_879_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_427 <= add_ln32_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        l_reg_497 <= 31'd0;
    end else if (((icmp_ln43_fu_1256_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        l_reg_497 <= add_ln43_fu_1246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        lhs_reg_633 <= V1_i_i_i_i_i23_promoted_reg_612;
    end else if (((ap_enable_reg_pp3_iter4 == 1'b1) & (icmp_ln60_reg_2682_pp3_iter3_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        lhs_reg_633 <= {{grp_fu_1994_p3[22:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        w_1_reg_589 <= add_ln57_fu_1715_p2;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        w_1_reg_589 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        C_read_reg_2047 <= C;
        FH_read_reg_2022 <= FH;
        FW_read_reg_2011 <= FW;
        F_read_reg_2053 <= F;
        H_read_reg_2040 <= H;
        W_read_reg_2032 <= W_r;
        b_read_reg_2060 <= b;
        empty_32_reg_2091 <= empty_32_fu_711_p1;
        empty_reg_2085 <= empty_fu_707_p1;
        trunc_ln30_reg_2080 <= trunc_ln30_fu_703_p1;
        w_read_reg_2070 <= w;
        x_read_reg_2075 <= x;
        y_read_reg_2065 <= y;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        add_ln1118_2_reg_2629 <= add_ln1118_2_fu_1641_p2;
        mul_ln1116_reg_2624 <= mul_ln1116_fu_1623_p2;
        ybuf_V_addr_reg_2634 <= zext_ln58_1_fu_1647_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_1657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        add_ln1118_4_reg_2647 <= add_ln1118_4_fu_1691_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln25_reg_2107 <= add_ln25_fu_727_p2;
        bound_reg_2126 <= grp_fu_721_p2;
        cmp61159_reg_2122 <= cmp61159_fu_737_p2;
        outW_reg_2112 <= outW_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln30_1_reg_2131 <= add_ln30_1_fu_742_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_879_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln33_1_reg_2214 <= add_ln33_1_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln33_1_reg_2214_pp0_iter1_reg <= add_ln33_1_reg_2214;
        icmp_ln32_reg_2210 <= icmp_ln32_fu_879_p2;
        icmp_ln32_reg_2210_pp0_iter1_reg <= icmp_ln32_reg_2210;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln40_1_reg_2276 <= add_ln40_1_fu_934_p2;
        icmp_ln40_1_reg_2281 <= icmp_ln40_1_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_1_reg_2281 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        add_ln40_reg_2301 <= add_ln40_fu_963_p2;
        icmp_ln41_reg_2306 <= icmp_ln41_fu_969_p2;
        select_ln40_2_reg_2317 <= select_ln40_2_fu_974_p3;
        trunc_ln44_1_reg_2322 <= trunc_ln44_1_fu_982_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_ln44_1_reg_2350 <= add_ln44_1_fu_1116_p2;
        select_ln40_5_reg_2340 <= select_ln40_5_fu_1070_p3;
        select_ln41_1_reg_2345 <= select_ln41_1_fu_1092_p3;
        select_ln41_3_reg_2356 <= select_ln41_3_fu_1122_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp80139_reg_2252 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        add_ln44_4_reg_2388 <= add_ln44_4_fu_1240_p2;
        gmem_addr_2_reg_2382 <= sext_ln43_fu_1201_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_1256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln44_5_reg_2402 <= add_ln44_5_fu_1265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln44_5_reg_2402_pp1_iter1_reg <= add_ln44_5_reg_2402;
        icmp_ln43_reg_2398 <= icmp_ln43_fu_1256_p2;
        icmp_ln43_reg_2398_pp1_iter1_reg <= icmp_ln43_reg_2398;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        add_ln54_2_reg_2512 <= add_ln54_2_fu_1370_p2;
        trunc_ln1116_reg_2517 <= trunc_ln1116_fu_1376_p1;
        trunc_ln58_reg_2522 <= trunc_ln58_fu_1380_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        add_ln59_reg_2639 <= add_ln59_fu_1651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_2159 == 1'd1) & (1'b1 == ap_CS_fsm_state90))) begin
        add_ln70_1_reg_2730 <= add_ln70_1_fu_1827_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        bound12_reg_2266 <= grp_fu_912_p2;
        cmp80139_reg_2252 <= cmp80139_fu_918_p2;
        empty_38_reg_2261 <= empty_38_fu_926_p1;
        icmp_ln42_reg_2271 <= icmp_ln42_fu_929_p2;
        trunc_ln40_reg_2256 <= trunc_ln40_fu_923_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        bound4_reg_2229 <= grp_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        bound90_reg_2725 <= grp_fu_1448_p2;
        cmp115114_reg_2716 <= cmp115114_fu_1819_p2;
        empty_48_reg_2720 <= empty_48_fu_1824_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cast_reg_2096[31 : 0] <= cast_fu_715_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        empty_35_reg_2184 <= grp_fu_813_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        empty_37_reg_2235 <= empty_37_fu_902_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        empty_39_reg_2285 <= grp_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        empty_42_reg_2377 <= grp_fu_1155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        empty_52_reg_2775 <= grp_fu_1881_p2;
        mul_ln73_reg_2770 <= mul_ln73_fu_1888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_2210 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_1_read_reg_2219 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp61159_reg_2122 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem_addr_1_reg_2194 <= sext_ln32_fu_852_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_2398 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_2_read_reg_2407 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp115114_reg_2716 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        gmem_addr_3_reg_2780 <= sext_ln72_fu_1919_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_2427 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        gmem_addr_read_reg_2436 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_748_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln31_reg_2139 <= icmp_ln31_fu_759_p2;
        select_ln30_1_reg_2144 <= select_ln30_1_fu_764_p3;
        trunc_ln30_1_reg_2149 <= trunc_ln30_1_fu_772_p1;
        trunc_ln30_2_reg_2154 <= trunc_ln30_2_fu_776_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_748_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln40_reg_2159 <= icmp_ln40_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln50_reg_2427 <= icmp_ln50_fu_1298_p2;
        icmp_ln50_reg_2427_pp2_iter1_reg <= icmp_ln50_reg_2427;
        trunc_ln51_reg_2431_pp2_iter1_reg <= trunc_ln51_reg_2431;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_1384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        icmp_ln55_reg_2530 <= icmp_ln55_fu_1395_p2;
        or_ln55_reg_2560 <= or_ln55_fu_1436_p2;
        select_ln54_1_reg_2539 <= select_ln54_1_fu_1408_p3;
        select_ln54_4_reg_2547 <= select_ln54_4_fu_1421_p3;
        select_ln54_5_reg_2555 <= select_ln54_5_fu_1428_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        icmp_ln56_reg_2507 <= icmp_ln56_fu_1365_p2;
        mul_ln54_2_reg_2502 <= grp_fu_1359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        icmp_ln57_reg_2453 <= icmp_ln57_fu_1325_p2;
        sub_ln54_reg_2441 <= sub_ln54_fu_1316_p2;
        trunc_ln54_reg_2448 <= trunc_ln54_fu_1321_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln60_reg_2682 <= icmp_ln60_fu_1756_p2;
        icmp_ln60_reg_2682_pp3_iter1_reg <= icmp_ln60_reg_2682;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln60_reg_2682_pp3_iter2_reg <= icmp_ln60_reg_2682_pp3_iter1_reg;
        icmp_ln60_reg_2682_pp3_iter3_reg <= icmp_ln60_reg_2682_pp3_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_1833_p2 == 1'd0) & (icmp_ln40_reg_2159 == 1'd1) & (1'b1 == ap_CS_fsm_state90))) begin
        icmp_ln71_reg_2738 <= icmp_ln71_fu_1844_p2;
        select_ln70_1_reg_2743 <= select_ln70_1_fu_1849_p3;
        trunc_ln70_reg_2749 <= trunc_ln70_fu_1857_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln72_reg_2796 <= icmp_ln72_fu_1946_p2;
        icmp_ln72_reg_2796_pp4_iter1_reg <= icmp_ln72_reg_2796;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul_ln30_reg_2168 <= grp_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        mul_ln32_reg_2200 <= grp_fu_1970_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        mul_ln41_reg_2361 <= grp_fu_1130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        mul_ln54_1_reg_2486 <= grp_fu_1347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        mul_ln54_reg_2469 <= grp_fu_1335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        mul_ln60_reg_2672 <= grp_fu_1988_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        mul_ln70_reg_2754 <= grp_fu_1861_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        mul_ln72_reg_2786 <= grp_fu_2003_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        p_mid118_reg_2334 <= grp_fu_1006_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        select_ln30_reg_2173 <= select_ln30_fu_797_p3;
        tmp_reg_2179 <= tmp_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        select_ln41_reg_2366 <= select_ln41_fu_1138_p3;
        tmp6_reg_2372 <= tmp6_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        select_ln55_1_reg_2577 <= select_ln55_1_fu_1508_p3;
        select_ln55_3_reg_2583 <= select_ln55_3_fu_1521_p3;
        select_ln55_4_reg_2588 <= select_ln55_4_fu_1527_p3;
        select_ln56_1_reg_2593 <= select_ln56_1_fu_1544_p3;
        select_ln56_2_reg_2598 <= select_ln56_2_fu_1556_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        select_ln56_reg_2608 <= select_ln56_fu_1577_p3;
        trunc_ln58_2_reg_2613 <= trunc_ln58_2_fu_1585_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        select_ln70_reg_2759 <= select_ln70_fu_1865_p3;
        tmp8_reg_2765 <= tmp8_fu_1876_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        tmp4_reg_2291 <= tmp4_fu_954_p2;
        trunc_ln44_reg_2296 <= trunc_ln44_fu_959_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_1298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        trunc_ln51_reg_2431 <= trunc_ln51_fu_1303_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_2796 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        ybuf_V_load_reg_2805 <= ybuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln31_reg_2189[10 : 0] <= zext_ln31_fu_826_p1[10 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_879_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_1256_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state47 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state47 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln50_fu_1298_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state57 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state57 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_condition_pp3_exit_iter3_state85 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter3_state85 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_1756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
        ap_condition_pp3_flush_enable = 1'b1;
    end else begin
        ap_condition_pp3_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_1946_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state100 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state100 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) & ((icmp_ln70_fu_1833_p2 == 1'd1) | (icmp_ln40_reg_2159 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter4 == 1'b1) & (icmp_ln60_reg_2682_pp3_iter3_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_lhs_phi_fu_637_p4 = {{grp_fu_1994_p3[22:7]}};
    end else begin
        ap_phi_mux_lhs_phi_fu_637_p4 = lhs_reg_633;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) & ((icmp_ln70_fu_1833_p2 == 1'd1) | (icmp_ln40_reg_2159 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        bbuf_V_address0 = zext_ln54_6_fu_1564_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bbuf_V_address0 = zext_ln51_fu_1307_p1;
    end else begin
        bbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_2427_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        gmem_ARADDR = gmem_addr_2_reg_2382;
    end else if (((icmp_ln40_1_reg_2281 == 1'd1) & (1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
        gmem_ARADDR = sext_ln50_fu_995_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_ARADDR = gmem_addr_1_reg_2194;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        gmem_ARLEN = FW_read_reg_2011;
    end else if (((icmp_ln40_1_reg_2281 == 1'd1) & (1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
        gmem_ARLEN = F_read_reg_2053;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_ARLEN = W_read_reg_2032;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln40_1_reg_2281 == 1'd1) & (1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (cmp115114_reg_2716 == 1'd1)) & (cmp115114_reg_2716 == 1'd1) & (1'b1 == ap_CS_fsm_state107))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln50_reg_2427 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln43_reg_2398 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_2210 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_2796_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state11) | ((icmp_ln40_1_reg_2281 == 1'd1) & (1'b1 == ap_CS_fsm_state30)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((cmp115114_reg_2716 == 1'd1) & (1'b1 == ap_CS_fsm_state107))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln50_reg_2427 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln43_reg_2398 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_2210 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_2796_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state96) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97)))) begin
        grp_fu_2003_ce = 1'b1;
    end else begin
        grp_fu_2003_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        wbuf_V_address0 = zext_ln1118_4_fu_1774_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        wbuf_V_address0 = zext_ln44_6_fu_1270_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_2398_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        xbuf_V_address0 = zext_ln1116_3_fu_1789_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        xbuf_V_address0 = zext_ln33_2_fu_893_p1;
    end else begin
        xbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        xbuf_V_ce0 = 1'b1;
    end else begin
        xbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_2210_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        xbuf_V_we0 = 1'b1;
    end else begin
        xbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1))) begin
        ybuf_V_address0 = zext_ln73_2_fu_1960_p1;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        ybuf_V_address0 = ybuf_V_addr_reg_2634;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        ybuf_V_address0 = zext_ln58_1_fu_1647_p1;
    end else begin
        ybuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
        ybuf_V_ce0 = 1'b1;
    end else begin
        ybuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        ybuf_V_d0 = lhs_reg_633;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        ybuf_V_d0 = bbuf_V_q0;
    end else begin
        ybuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state87))) begin
        ybuf_V_we0 = 1'b1;
    end else begin
        ybuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln40_fu_780_p2 == 1'd0) & (icmp_ln30_fu_748_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else if (((icmp_ln40_fu_780_p2 == 1'd1) & (icmp_ln30_fu_748_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((cmp61159_reg_2122 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln32_fu_879_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln32_fu_879_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln40_1_reg_2281 == 1'd1) & (1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else if (((icmp_ln40_1_reg_2281 == 1'd0) & (1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_block_state30_io))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((cmp80139_reg_2252 == 1'd0) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln43_fu_1256_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln43_fu_1256_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln50_fu_1298_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((icmp_ln50_fu_1298_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln54_fu_1384_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((icmp_ln59_fu_1657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else if (((icmp_ln59_fu_1657_p2 == 1'd0) & (cmp80139_reg_2252 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter3 == 1'b1) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            if (((1'b1 == ap_CS_fsm_state90) & ((icmp_ln70_fu_1833_p2 == 1'd1) | (icmp_ln40_reg_2159 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            if (((cmp115114_reg_2716 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state97 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln72_fu_1946_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)) & ~((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln72_fu_1946_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if ((~((gmem_BVALID == 1'b0) & (cmp115114_reg_2716 == 1'd1)) & (1'b1 == ap_CS_fsm_state107))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_1_fu_1779_p2 = (trunc_ln61_fu_1761_p1 + trunc_ln58_2_reg_2613);

assign add_ln1116_2_fu_1706_p2 = (mul_ln1116_reg_2624 + zext_ln1116_2_fu_1702_p1);

assign add_ln1116_3_fu_1784_p2 = (mul_ln60_reg_2672 + add_ln1116_1_fu_1779_p2);

assign add_ln1116_fu_1697_p2 = (empty_46_fu_1662_p1 + select_ln56_1_reg_2593);

assign add_ln1118_1_fu_1629_p2 = (add_ln1118_fu_1611_p2 + zext_ln1116_fu_1617_p1);

assign add_ln1118_2_fu_1641_p2 = (shl_ln1118_fu_1635_p2 + add_ln1118_1_fu_1629_p2);

assign add_ln1118_3_fu_1670_p2 = (add_ln1118_2_reg_2629 + zext_ln1118_3_fu_1666_p1);

assign add_ln1118_4_fu_1691_p2 = (p_shl5_cast_fu_1683_p3 + trunc_ln1118_fu_1675_p1);

assign add_ln1118_5_fu_1769_p2 = (add_ln1118_4_reg_2647 + trunc_ln1118_2_fu_1765_p1);

assign add_ln1118_fu_1611_p2 = (zext_ln1118_1_fu_1596_p1 + zext_ln1118_2_fu_1607_p1);

assign add_ln25_fu_727_p2 = (W_read_reg_2032 + 32'd1);

assign add_ln30_1_fu_742_p2 = (indvar_flatten_reg_393 + 64'd1);

assign add_ln30_fu_753_p2 = (i_reg_404 + 32'd1);

assign add_ln31_fu_897_p2 = (select_ln30_reg_2173 + 32'd1);

assign add_ln32_fu_869_p2 = (k_reg_427 + 31'd1);

assign add_ln33_1_fu_888_p2 = (mul_ln32_reg_2200 + trunc_ln33_1_fu_884_p1);

assign add_ln40_1_fu_934_p2 = (indvar_flatten32_reg_438 + 95'd1);

assign add_ln40_fu_963_p2 = ($signed(i_1_reg_449) + $signed(31'd1));

assign add_ln41_1_fu_1279_p2 = (indvar_flatten7_reg_461 + 64'd1);

assign add_ln41_fu_1076_p2 = (select_ln40_fu_1010_p3 + 32'd1);

assign add_ln42_fu_1274_p2 = (select_ln41_reg_2366 + 32'd1);

assign add_ln43_fu_1246_p2 = (l_reg_497 + 31'd1);

assign add_ln44_1_fu_1116_p2 = (zext_ln41_fu_1050_p1 + zext_ln44_2_fu_1112_p1);

assign add_ln44_2_fu_1173_p2 = (zext_ln44_4_fu_1169_p1 + zext_ln44_3_fu_1159_p1);

assign add_ln44_3_fu_1218_p2 = (add_ln44_2_fu_1173_p2 + zext_ln44_5_fu_1214_p1);

assign add_ln44_4_fu_1240_p2 = (p_shl1_cast_fu_1232_p3 + trunc_ln44_4_fu_1224_p1);

assign add_ln44_5_fu_1265_p2 = (add_ln44_4_reg_2388 + trunc_ln44_6_fu_1261_p1);

assign add_ln44_fu_1044_p2 = (zext_ln44_fu_1029_p1 + zext_ln44_1_fu_1040_p1);

assign add_ln50_fu_1292_p2 = (i_2_reg_508 + 31'd1);

assign add_ln54_1_fu_1389_p2 = (f_reg_530 + 31'd1);

assign add_ln54_2_fu_1370_p2 = (indvar_flatten85_reg_519 + 127'd1);

assign add_ln54_fu_1311_p2 = (H_read_reg_2040 + 32'd1);

assign add_ln55_1_fu_1733_p2 = (indvar_flatten56_reg_541 + 96'd1);

assign add_ln55_fu_1491_p2 = (select_ln54_fu_1454_p3 + 32'd1);

assign add_ln56_1_fu_1720_p2 = (indvar_flatten40_reg_565 + 64'd1);

assign add_ln56_fu_1534_p2 = (select_ln55_fu_1497_p3 + 32'd1);

assign add_ln57_fu_1715_p2 = (select_ln56_reg_2608 + 32'd1);

assign add_ln59_fu_1651_p2 = (fh_reg_601 + 32'd1);

assign add_ln60_fu_1746_p2 = (fw_reg_622 + 31'd1);

assign add_ln70_1_fu_1827_p2 = (indvar_flatten96_reg_658 + 63'd1);

assign add_ln70_fu_1838_p2 = (i_3_reg_669 + 31'd1);

assign add_ln71_fu_1965_p2 = (select_ln70_reg_2759 + 32'd1);

assign add_ln72_fu_1936_p2 = (k_2_reg_692 + 31'd1);

assign add_ln73_1_fu_1955_p2 = (mul_ln72_reg_2786 + trunc_ln73_1_fu_1951_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd88];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln32_reg_2210 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln32_reg_2210 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln43_reg_2398 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln43_reg_2398 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln50_reg_2427 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln50_reg_2427 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state102_io));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state102_io));
end

assign ap_block_state100_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state102_io = ((gmem_WREADY == 1'b0) & (icmp_ln72_reg_2796_pp4_iter1_reg == 1'd0));
end

assign ap_block_state102_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state107 = ((gmem_BVALID == 1'b0) & (cmp115114_reg_2716 == 1'd1));
end

assign ap_block_state18_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln32_reg_2210 == 1'd0));
end

assign ap_block_state20_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_io = ((gmem_ARREADY == 1'b0) & (icmp_ln40_1_reg_2281 == 1'd1));
end

assign ap_block_state47_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state48_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln43_reg_2398 == 1'd0));
end

assign ap_block_state49_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state58_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln50_reg_2427 == 1'd0));
end

assign ap_block_state59_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cast_fu_715_p1 = C_read_reg_2047;

assign cmp115114_fu_1819_p2 = (($signed(outW_reg_2112) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign cmp61159_fu_737_p2 = (($signed(W_read_reg_2032) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign cmp80139_fu_918_p2 = (($signed(FW_read_reg_2011) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_32_fu_711_p1 = W_r[30:0];

assign empty_36_fu_837_p2 = (tmp_1_fu_830_p3 + x_read_reg_2075);

assign empty_37_fu_902_p1 = F_read_reg_2053[30:0];

assign empty_38_fu_926_p1 = FW_read_reg_2011[30:0];

assign empty_43_fu_1186_p2 = (tmp_7_fu_1179_p3 + w_read_reg_2070);

assign empty_46_fu_1662_p1 = fh_reg_601[9:0];

assign empty_48_fu_1824_p1 = outW_reg_2112[30:0];

assign empty_53_fu_1904_p2 = (tmp_s_fu_1897_p3 + y_read_reg_2065);

assign empty_fu_707_p1 = C[30:0];

assign fw_cast_fu_1752_p1 = fw_reg_622;

assign grp_fu_1335_p0 = grp_fu_1335_p00;

assign grp_fu_1335_p00 = sub_ln54_reg_2441;

assign grp_fu_1335_p1 = grp_fu_1335_p10;

assign grp_fu_1335_p10 = outW_reg_2112;

assign grp_fu_1347_p0 = grp_fu_1347_p00;

assign grp_fu_1347_p00 = C_read_reg_2047;

assign grp_fu_1347_p1 = grp_fu_1347_p10;

assign grp_fu_1347_p10 = mul_ln54_reg_2469;

assign grp_fu_1359_p0 = grp_fu_1359_p00;

assign grp_fu_1359_p00 = empty_37_reg_2235;

assign grp_fu_1359_p1 = grp_fu_1359_p10;

assign grp_fu_1359_p10 = mul_ln54_1_reg_2486;

assign grp_fu_1448_p0 = grp_fu_1448_p00;

assign grp_fu_1448_p00 = empty_37_reg_2235;

assign grp_fu_1448_p1 = grp_fu_1448_p10;

assign grp_fu_1448_p10 = sub_ln54_reg_2441;

assign grp_fu_1970_p0 = zext_ln31_reg_2189;

assign grp_fu_1970_p1 = grp_fu_1970_p10;

assign grp_fu_1970_p10 = trunc_ln33_fu_862_p1;

assign grp_fu_1970_p2 = 17'd100;

assign grp_fu_1977_p0 = grp_fu_1977_p00;

assign grp_fu_1977_p00 = mul_ln58_fu_1464_p2;

assign grp_fu_1977_p1 = grp_fu_1977_p10;

assign grp_fu_1977_p10 = select_ln56_1_fu_1544_p3;

assign grp_fu_1977_p2 = 17'd100;

assign grp_fu_1977_p3 = select_ln56_fu_1577_p3[16:0];

assign grp_fu_1988_p0 = grp_fu_1988_p00;

assign grp_fu_1988_p00 = add_ln1116_2_fu_1706_p2;

assign grp_fu_1988_p1 = 17'd100;

assign grp_fu_1994_p2 = {{ap_phi_mux_lhs_phi_fu_637_p4}, {7'd0}};

assign grp_fu_2003_p0 = grp_fu_2003_p00;

assign grp_fu_2003_p00 = mul_ln73_reg_2770;

assign grp_fu_2003_p1 = grp_fu_2003_p10;

assign grp_fu_2003_p10 = trunc_ln73_fu_1929_p1;

assign grp_fu_2003_p2 = 17'd100;

assign grp_fu_721_p0 = grp_fu_721_p00;

assign grp_fu_721_p00 = C_read_reg_2047;

assign grp_fu_721_p1 = grp_fu_721_p10;

assign grp_fu_721_p10 = H_read_reg_2040;

assign grp_fu_788_p0 = cast_reg_2096;

assign grp_fu_788_p1 = grp_fu_788_p10;

assign grp_fu_788_p10 = FH_read_reg_2022;

assign grp_fu_912_p0 = grp_fu_912_p00;

assign grp_fu_912_p00 = empty_37_fu_902_p1;

assign grp_fu_912_p1 = grp_fu_912_p10;

assign grp_fu_912_p10 = bound4_reg_2229;

assign icmp_ln30_fu_748_p2 = ((indvar_flatten_reg_393 == bound_reg_2126) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_759_p2 = ((j_reg_415 == H_read_reg_2040) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_879_p2 = ((k_cast_fu_875_p1 == W_read_reg_2032) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_945_p2 = ((indvar_flatten32_reg_438 == bound12_reg_2266) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_780_p2 = (($signed(F_read_reg_2053) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_969_p2 = ((indvar_flatten7_reg_461 == bound4_reg_2229) ? 1'b1 : 1'b0);

assign icmp_ln42_1_fu_1065_p2 = ((k_1_reg_485 == FH_read_reg_2022) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_929_p2 = ((FH_read_reg_2022 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_1256_p2 = ((l_cast_fu_1252_p1 == FW_read_reg_2011) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_1298_p2 = ((i_2_reg_508 == empty_37_reg_2235) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_1384_p2 = ((indvar_flatten85_reg_519 == mul_ln54_2_reg_2502) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_1395_p2 = ((indvar_flatten56_reg_541 == mul_ln54_1_reg_2486) ? 1'b1 : 1'b0);

assign icmp_ln56_1_fu_1416_p2 = ((indvar_flatten40_reg_565 == mul_ln54_reg_2469) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_1365_p2 = ((mul_ln54_reg_2469 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_1_fu_1480_p2 = ((w_1_reg_589 == outW_reg_2112) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_1325_p2 = ((add_ln25_reg_2107 == FW_read_reg_2011) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_1657_p2 = ((fh_reg_601 == FH_read_reg_2022) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_1756_p2 = ((fw_cast_fu_1752_p1 == FW_read_reg_2011) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_1833_p2 = ((indvar_flatten96_reg_658 == bound90_reg_2725) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_1844_p2 = ((j_2_reg_680 == sub_ln54_reg_2441) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_1946_p2 = ((k_2_cast_fu_1942_p1 == outW_reg_2112) ? 1'b1 : 1'b0);

assign k_2_cast_fu_1942_p1 = k_2_reg_692;

assign k_cast_fu_875_p1 = k_reg_427;

assign l_cast_fu_1252_p1 = l_reg_497;

assign mul_ln1116_fu_1623_p0 = mul_ln1116_fu_1623_p00;

assign mul_ln1116_fu_1623_p00 = select_ln55_1_reg_2577;

assign mul_ln1116_fu_1623_p1 = 14'd100;

assign mul_ln33_fu_820_p0 = mul_ln33_fu_820_p00;

assign mul_ln33_fu_820_p00 = trunc_ln30_2_reg_2154;

assign mul_ln33_fu_820_p1 = 11'd100;

assign mul_ln58_fu_1464_p0 = mul_ln58_fu_1464_p00;

assign mul_ln58_fu_1464_p00 = select_ln54_1_reg_2539;

assign mul_ln58_fu_1464_p1 = 11'd100;

assign mul_ln73_fu_1888_p0 = mul_ln73_fu_1888_p00;

assign mul_ln73_fu_1888_p00 = trunc_ln70_reg_2749;

assign mul_ln73_fu_1888_p1 = 11'd100;

assign or_ln41_fu_1134_p2 = (select_ln40_5_reg_2340 | icmp_ln41_reg_2306);

assign or_ln55_fu_1436_p2 = (select_ln54_4_fu_1421_p3 | icmp_ln55_fu_1395_p2);

assign or_ln56_1_fu_1572_p2 = (or_ln56_fu_1568_p2 | icmp_ln55_reg_2530);

assign or_ln56_fu_1568_p2 = (select_ln55_3_reg_2583 | select_ln54_4_reg_2547);

assign outW_fu_732_p2 = (add_ln25_fu_727_p2 - FW_read_reg_2011);

assign p_shl1_cast_fu_1232_p3 = {{trunc_ln44_5_fu_1228_p1}, {2'd0}};

assign p_shl5_cast_fu_1683_p3 = {{trunc_ln1118_1_fu_1679_p1}, {2'd0}};

assign select_ln30_1_fu_764_p3 = ((icmp_ln31_fu_759_p2[0:0] == 1'b1) ? add_ln30_fu_753_p2 : i_reg_404);

assign select_ln30_fu_797_p3 = ((icmp_ln31_reg_2139[0:0] == 1'b1) ? 32'd0 : j_reg_415);

assign select_ln40_1_fu_1017_p3 = ((icmp_ln41_reg_2306[0:0] == 1'b1) ? p_mid118_reg_2334 : empty_39_reg_2285);

assign select_ln40_2_fu_974_p3 = ((icmp_ln41_fu_969_p2[0:0] == 1'b1) ? add_ln40_fu_963_p2 : i_1_reg_449);

assign select_ln40_3_fu_1054_p3 = ((icmp_ln41_reg_2306[0:0] == 1'b1) ? p_mid118_reg_2334 : tmp4_reg_2291);

assign select_ln40_4_fu_1059_p3 = ((icmp_ln41_reg_2306[0:0] == 1'b1) ? 7'd0 : trunc_ln44_reg_2296);

assign select_ln40_5_fu_1070_p3 = ((icmp_ln41_reg_2306[0:0] == 1'b1) ? icmp_ln42_reg_2271 : icmp_ln42_1_fu_1065_p2);

assign select_ln40_fu_1010_p3 = ((icmp_ln41_reg_2306[0:0] == 1'b1) ? 32'd0 : j_1_reg_473);

assign select_ln41_1_fu_1092_p3 = ((select_ln40_5_fu_1070_p3[0:0] == 1'b1) ? tmp4_mid1_fu_1086_p2 : select_ln40_3_fu_1054_p3);

assign select_ln41_2_fu_1104_p3 = ((select_ln40_5_fu_1070_p3[0:0] == 1'b1) ? trunc_ln44_2_fu_1100_p1 : select_ln40_4_fu_1059_p3);

assign select_ln41_3_fu_1122_p3 = ((select_ln40_5_fu_1070_p3[0:0] == 1'b1) ? add_ln41_fu_1076_p2 : select_ln40_fu_1010_p3);

assign select_ln41_4_fu_1285_p3 = ((icmp_ln41_reg_2306[0:0] == 1'b1) ? 64'd1 : add_ln41_1_fu_1279_p2);

assign select_ln41_fu_1138_p3 = ((or_ln41_fu_1134_p2[0:0] == 1'b1) ? 32'd0 : k_1_reg_485);

assign select_ln54_1_fu_1408_p3 = ((icmp_ln55_fu_1395_p2[0:0] == 1'b1) ? trunc_ln54_1_fu_1400_p1 : trunc_ln54_2_fu_1404_p1);

assign select_ln54_2_fu_1474_p3 = ((icmp_ln55_reg_2530[0:0] == 1'b1) ? 7'd0 : trunc_ln1116_reg_2517);

assign select_ln54_3_fu_1485_p3 = ((icmp_ln55_reg_2530[0:0] == 1'b1) ? icmp_ln57_reg_2453 : icmp_ln57_1_fu_1480_p2);

assign select_ln54_4_fu_1421_p3 = ((icmp_ln55_fu_1395_p2[0:0] == 1'b1) ? icmp_ln56_reg_2507 : icmp_ln56_1_fu_1416_p2);

assign select_ln54_5_fu_1428_p3 = ((icmp_ln55_fu_1395_p2[0:0] == 1'b1) ? add_ln54_1_fu_1389_p2 : f_reg_530);

assign select_ln54_fu_1454_p3 = ((icmp_ln55_reg_2530[0:0] == 1'b1) ? 32'd0 : c_reg_553);

assign select_ln55_1_fu_1508_p3 = ((select_ln54_4_reg_2547[0:0] == 1'b1) ? trunc_ln1116_1_fu_1504_p1 : select_ln54_2_fu_1474_p3);

assign select_ln55_2_fu_1515_p3 = ((or_ln55_reg_2560[0:0] == 1'b1) ? 10'd0 : trunc_ln58_reg_2522);

assign select_ln55_3_fu_1521_p3 = ((select_ln54_4_reg_2547[0:0] == 1'b1) ? icmp_ln57_reg_2453 : select_ln54_3_fu_1485_p3);

assign select_ln55_4_fu_1527_p3 = ((select_ln54_4_reg_2547[0:0] == 1'b1) ? add_ln55_fu_1491_p2 : select_ln54_fu_1454_p3);

assign select_ln55_5_fu_1739_p3 = ((icmp_ln55_reg_2530[0:0] == 1'b1) ? 96'd1 : add_ln55_1_fu_1733_p2);

assign select_ln55_fu_1497_p3 = ((or_ln55_reg_2560[0:0] == 1'b1) ? 32'd0 : h_reg_577);

assign select_ln56_1_fu_1544_p3 = ((select_ln55_3_fu_1521_p3[0:0] == 1'b1) ? trunc_ln58_1_fu_1540_p1 : select_ln55_2_fu_1515_p3);

assign select_ln56_2_fu_1556_p3 = ((select_ln55_3_fu_1521_p3[0:0] == 1'b1) ? add_ln56_fu_1534_p2 : select_ln55_fu_1497_p3);

assign select_ln56_3_fu_1726_p3 = ((or_ln55_reg_2560[0:0] == 1'b1) ? 64'd1 : add_ln56_1_fu_1720_p2);

assign select_ln56_fu_1577_p3 = ((or_ln56_1_fu_1572_p2[0:0] == 1'b1) ? 32'd0 : w_1_reg_589);

assign select_ln70_1_fu_1849_p3 = ((icmp_ln71_fu_1844_p2[0:0] == 1'b1) ? add_ln70_fu_1838_p2 : i_3_reg_669);

assign select_ln70_fu_1865_p3 = ((icmp_ln71_reg_2738[0:0] == 1'b1) ? 32'd0 : j_2_reg_680);

assign sext_ln32_fu_852_p1 = $signed(trunc_ln3_fu_842_p4);

assign sext_ln43_fu_1201_p1 = $signed(trunc_ln7_fu_1191_p4);

assign sext_ln50_fu_995_p1 = $signed(trunc_ln5_fu_986_p4);

assign sext_ln72_fu_1919_p1 = $signed(trunc_ln_fu_1909_p4);

assign shl_ln1118_fu_1635_p2 = add_ln1118_1_fu_1629_p2 << 30'd2;

assign sub_ln54_fu_1316_p2 = (add_ln54_fu_1311_p2 - FH_read_reg_2022);

assign tmp4_fu_954_p2 = (trunc_ln41_fu_950_p1 + empty_39_reg_2285);

assign tmp4_mid1_fu_1086_p2 = (trunc_ln41_1_fu_1082_p1 + select_ln40_1_fu_1017_p3);

assign tmp6_fu_1150_p2 = (trunc_ln42_fu_1146_p1 + mul_ln41_reg_2361);

assign tmp8_fu_1876_p2 = (trunc_ln71_fu_1872_p1 + mul_ln70_reg_2754);

assign tmp_1_fu_830_p3 = {{empty_35_reg_2184}, {1'd0}};

assign tmp_2_fu_1162_p3 = {{add_ln44_1_reg_2350}, {2'd0}};

assign tmp_3_fu_1022_p3 = {{trunc_ln44_1_reg_2322}, {3'd0}};

assign tmp_4_fu_1589_p3 = {{select_ln54_1_reg_2539}, {3'd0}};

assign tmp_5_fu_1033_p3 = {{trunc_ln44_1_reg_2322}, {1'd0}};

assign tmp_6_fu_1600_p3 = {{select_ln54_1_reg_2539}, {1'd0}};

assign tmp_7_fu_1179_p3 = {{empty_42_reg_2377}, {1'd0}};

assign tmp_fu_808_p2 = (trunc_ln31_fu_804_p1 + mul_ln30_reg_2168);

assign tmp_s_fu_1897_p3 = {{empty_52_reg_2775}, {1'd0}};

assign trunc_ln1116_1_fu_1504_p1 = add_ln55_fu_1491_p2[6:0];

assign trunc_ln1116_fu_1376_p1 = c_reg_553[6:0];

assign trunc_ln1118_1_fu_1679_p1 = add_ln1118_3_fu_1670_p2[9:0];

assign trunc_ln1118_2_fu_1765_p1 = fw_reg_622[11:0];

assign trunc_ln1118_fu_1675_p1 = add_ln1118_3_fu_1670_p2[11:0];

assign trunc_ln30_1_fu_772_p1 = select_ln30_1_fu_764_p3[30:0];

assign trunc_ln30_2_fu_776_p1 = select_ln30_1_fu_764_p3[3:0];

assign trunc_ln30_fu_703_p1 = H[30:0];

assign trunc_ln31_fu_804_p1 = select_ln30_fu_797_p3[30:0];

assign trunc_ln33_1_fu_884_p1 = k_reg_427[16:0];

assign trunc_ln33_fu_862_p1 = select_ln30_reg_2173[9:0];

assign trunc_ln3_fu_842_p4 = {{empty_36_fu_837_p2[31:1]}};

assign trunc_ln40_fu_923_p1 = FH_read_reg_2022[30:0];

assign trunc_ln41_1_fu_1082_p1 = add_ln41_fu_1076_p2[30:0];

assign trunc_ln41_fu_950_p1 = j_1_reg_473[30:0];

assign trunc_ln42_fu_1146_p1 = select_ln41_fu_1138_p3[30:0];

assign trunc_ln44_1_fu_982_p1 = select_ln40_2_fu_974_p3[3:0];

assign trunc_ln44_2_fu_1100_p1 = add_ln41_fu_1076_p2[6:0];

assign trunc_ln44_3_fu_1211_p1 = select_ln41_reg_2366[8:0];

assign trunc_ln44_4_fu_1224_p1 = add_ln44_3_fu_1218_p2[11:0];

assign trunc_ln44_5_fu_1228_p1 = add_ln44_3_fu_1218_p2[9:0];

assign trunc_ln44_6_fu_1261_p1 = l_reg_497[11:0];

assign trunc_ln44_fu_959_p1 = j_1_reg_473[6:0];

assign trunc_ln51_fu_1303_p1 = i_2_reg_508[3:0];

assign trunc_ln54_1_fu_1400_p1 = add_ln54_1_fu_1389_p2[3:0];

assign trunc_ln54_2_fu_1404_p1 = f_reg_530[3:0];

assign trunc_ln54_fu_1321_p1 = sub_ln54_fu_1316_p2[30:0];

assign trunc_ln58_1_fu_1540_p1 = add_ln56_fu_1534_p2[9:0];

assign trunc_ln58_2_fu_1585_p1 = select_ln56_fu_1577_p3[16:0];

assign trunc_ln58_fu_1380_p1 = h_reg_577[9:0];

assign trunc_ln5_fu_986_p4 = {{b_read_reg_2060[31:1]}};

assign trunc_ln61_fu_1761_p1 = fw_reg_622[16:0];

assign trunc_ln70_fu_1857_p1 = select_ln70_1_fu_1849_p3[3:0];

assign trunc_ln71_fu_1872_p1 = select_ln70_fu_1865_p3[30:0];

assign trunc_ln73_1_fu_1951_p1 = k_2_reg_692[16:0];

assign trunc_ln73_fu_1929_p1 = select_ln70_reg_2759[9:0];

assign trunc_ln7_fu_1191_p4 = {{empty_43_fu_1186_p2[31:1]}};

assign trunc_ln_fu_1909_p4 = {{empty_53_fu_1904_p2[31:1]}};

assign zext_ln1116_2_fu_1702_p1 = add_ln1116_fu_1697_p2;

assign zext_ln1116_3_fu_1789_p1 = add_ln1116_3_fu_1784_p2;

assign zext_ln1116_fu_1617_p1 = select_ln55_1_reg_2577;

assign zext_ln1118_1_fu_1596_p1 = tmp_4_fu_1589_p3;

assign zext_ln1118_2_fu_1607_p1 = tmp_6_fu_1600_p3;

assign zext_ln1118_3_fu_1666_p1 = empty_46_fu_1662_p1;

assign zext_ln1118_4_fu_1774_p1 = add_ln1118_5_fu_1769_p2;

assign zext_ln31_fu_826_p1 = mul_ln33_fu_820_p2;

assign zext_ln33_2_fu_893_p1 = add_ln33_1_reg_2214_pp0_iter1_reg;

assign zext_ln41_fu_1050_p1 = add_ln44_fu_1044_p2;

assign zext_ln44_1_fu_1040_p1 = tmp_5_fu_1033_p3;

assign zext_ln44_2_fu_1112_p1 = select_ln41_2_fu_1104_p3;

assign zext_ln44_3_fu_1159_p1 = add_ln44_1_reg_2350;

assign zext_ln44_4_fu_1169_p1 = tmp_2_fu_1162_p3;

assign zext_ln44_5_fu_1214_p1 = trunc_ln44_3_fu_1211_p1;

assign zext_ln44_6_fu_1270_p1 = add_ln44_5_reg_2402_pp1_iter1_reg;

assign zext_ln44_fu_1029_p1 = tmp_3_fu_1022_p3;

assign zext_ln51_fu_1307_p1 = trunc_ln51_reg_2431_pp2_iter1_reg;

assign zext_ln54_6_fu_1564_p1 = select_ln54_1_reg_2539;

assign zext_ln58_1_fu_1647_p1 = grp_fu_1977_p4;

assign zext_ln73_2_fu_1960_p1 = add_ln73_1_fu_1955_p2;

always @ (posedge ap_clk) begin
    cast_reg_2096[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln31_reg_2189[11] <= 1'b0;
end

endmodule //conv_fwd
