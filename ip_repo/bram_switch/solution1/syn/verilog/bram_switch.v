// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bram_switch_bram_switch,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=37,HLS_SYN_LUT=42,HLS_VERSION=2020_2}" *)

module bram_switch (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        ap_clk,
        x_Addr_B,
        x_EN_B,
        x_WEN_B,
        x_Din_B,
        x_Dout_B,
        x_Clk_B,
        debugport_Addr_A,
        debugport_EN_A,
        debugport_WEN_A,
        debugport_Din_A,
        debugport_Dout_A,
        debugport_Clk_A,
        debugport_Addr_B,
        debugport_EN_B,
        debugport_WEN_B,
        debugport_Din_B,
        debugport_Dout_B,
        debugport_Clk_B,
        gradport_Addr_A,
        gradport_EN_A,
        gradport_WEN_A,
        gradport_Din_A,
        gradport_Dout_A,
        gradport_Clk_A,
        gradport_Addr_B,
        gradport_EN_B,
        gradport_WEN_B,
        gradport_Din_B,
        gradport_Dout_B,
        gradport_Clk_B,
        dummyport_Addr_A,
        dummyport_EN_A,
        dummyport_WEN_A,
        dummyport_Din_A,
        dummyport_Dout_A,
        dummyport_Clk_A,
        dummyport_Addr_B,
        dummyport_EN_B,
        dummyport_WEN_B,
        dummyport_Din_B,
        dummyport_Dout_B,
        dummyport_Clk_B,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_rst_n
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [1:0] x_WEN_A;
output  [15:0] x_Din_A;
input  [15:0] x_Dout_A;
output   x_Clk_A;
input   ap_clk;
output  [31:0] x_Addr_B;
output   x_EN_B;
output  [1:0] x_WEN_B;
output  [15:0] x_Din_B;
input  [15:0] x_Dout_B;
output   x_Clk_B;
output  [31:0] debugport_Addr_A;
output   debugport_EN_A;
output  [1:0] debugport_WEN_A;
output  [15:0] debugport_Din_A;
input  [15:0] debugport_Dout_A;
output   debugport_Clk_A;
output  [31:0] debugport_Addr_B;
output   debugport_EN_B;
output  [1:0] debugport_WEN_B;
output  [15:0] debugport_Din_B;
input  [15:0] debugport_Dout_B;
output   debugport_Clk_B;
output  [31:0] gradport_Addr_A;
output   gradport_EN_A;
output  [1:0] gradport_WEN_A;
output  [15:0] gradport_Din_A;
input  [15:0] gradport_Dout_A;
output   gradport_Clk_A;
output  [31:0] gradport_Addr_B;
output   gradport_EN_B;
output  [1:0] gradport_WEN_B;
output  [15:0] gradport_Din_B;
input  [15:0] gradport_Dout_B;
output   gradport_Clk_B;
output  [31:0] dummyport_Addr_A;
output   dummyport_EN_A;
output  [1:0] dummyport_WEN_A;
output  [15:0] dummyport_Din_A;
input  [15:0] dummyport_Dout_A;
output   dummyport_Clk_A;
output  [31:0] dummyport_Addr_B;
output   dummyport_EN_B;
output  [1:0] dummyport_WEN_B;
output  [15:0] dummyport_Din_B;
input  [15:0] dummyport_Dout_B;
output   dummyport_Clk_B;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_rst_n;

wire    debug;
 reg    ap_rst_n_inv;

bram_switch_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .debug(debug)
);

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign debugport_Addr_A = 32'd0;

assign debugport_Addr_B = 32'd0;

assign debugport_Clk_A = ap_clk;

assign debugport_Clk_B = ap_clk;

assign debugport_Din_A = 16'd0;

assign debugport_Din_B = 16'd0;

assign debugport_EN_A = 1'b0;

assign debugport_EN_B = 1'b0;

assign debugport_WEN_A = 2'd0;

assign debugport_WEN_B = 2'd0;

assign dummyport_Addr_A = 32'd0;

assign dummyport_Addr_B = 32'd0;

assign dummyport_Clk_A = ap_clk;

assign dummyport_Clk_B = ap_clk;

assign dummyport_Din_A = 16'd0;

assign dummyport_Din_B = 16'd0;

assign dummyport_EN_A = 1'b0;

assign dummyport_EN_B = 1'b0;

assign dummyport_WEN_A = 2'd0;

assign dummyport_WEN_B = 2'd0;

assign gradport_Addr_A = 32'd0;

assign gradport_Addr_B = 32'd0;

assign gradport_Clk_A = ap_clk;

assign gradport_Clk_B = ap_clk;

assign gradport_Din_A = 16'd0;

assign gradport_Din_B = 16'd0;

assign gradport_EN_A = 1'b0;

assign gradport_EN_B = 1'b0;

assign gradport_WEN_A = 2'd0;

assign gradport_WEN_B = 2'd0;

assign x_Addr_A = 32'd0;

assign x_Addr_B = 32'd0;

assign x_Clk_A = ap_clk;

assign x_Clk_B = ap_clk;

assign x_Din_A = 16'd0;

assign x_Din_B = 16'd0;

assign x_EN_A = 1'b0;

assign x_EN_B = 1'b0;

assign x_WEN_A = 2'd0;

assign x_WEN_B = 2'd0;

endmodule //bram_switch
