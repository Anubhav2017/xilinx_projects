-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_combined is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    x_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_EN_A : OUT STD_LOGIC;
    x_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    x_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    x_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    x_Clk_A : OUT STD_LOGIC;
    x_Rst_A : OUT STD_LOGIC;
    dx_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dx_EN_A : OUT STD_LOGIC;
    dx_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dx_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dx_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dx_Clk_A : OUT STD_LOGIC;
    dx_Rst_A : OUT STD_LOGIC;
    y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_EN_A : OUT STD_LOGIC;
    y_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    y_Clk_A : OUT STD_LOGIC;
    y_Rst_A : OUT STD_LOGIC;
    dy_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dy_EN_A : OUT STD_LOGIC;
    dy_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dy_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dy_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dy_Clk_A : OUT STD_LOGIC;
    dy_Rst_A : OUT STD_LOGIC;
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of relu_combined is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "relu_combined_relu_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=273,HLS_SYN_LUT=409,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal dim : STD_LOGIC_VECTOR (31 downto 0);
    signal fwprop : STD_LOGIC;
    signal i_1_reg_152 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_163 : STD_LOGIC_VECTOR (30 downto 0);
    signal fwprop_read_read_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp171_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln29_fu_186_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln29_reg_258 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln18_fu_190_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln18_reg_263 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln29_fu_194_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln29_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1494_1_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1494_1_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1494_1_reg_277_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_reg_289 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln18_fu_214_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln18_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_303_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1494_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1494_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1494_reg_307_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_fu_238_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln19_reg_317 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal dx_addr_gep_fu_122_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal x_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1494_2_fu_205_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1494_fu_225_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1494_1_fu_234_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component relu_combined_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        dim : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwprop : OUT STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CTRL_s_axi_U : component relu_combined_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        dim => dim,
        fwprop => fwprop,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln29_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_1_reg_152 <= add_ln29_fu_194_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_0))) then 
                i_1_reg_152 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln18_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_reg_163 <= add_ln18_fu_214_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_1))) then 
                i_reg_163 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1494_1_reg_289 <= grp_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln18_reg_303 <= icmp_ln18_fu_220_p2;
                icmp_ln18_reg_303_pp1_iter1_reg <= icmp_ln18_reg_303;
                    zext_ln1494_reg_307_pp1_iter1_reg(9 downto 0) <= zext_ln1494_reg_307(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln18_reg_303 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln19_reg_317 <= select_ln19_fu_238_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_1))) then
                trunc_ln18_reg_263 <= trunc_ln18_fu_190_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_0))) then
                trunc_ln29_reg_258 <= trunc_ln29_fu_186_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln29_fu_200_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln1494_1_reg_277(9 downto 0) <= zext_ln1494_1_fu_209_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln1494_1_reg_277_pp0_iter1_reg(9 downto 0) <= zext_ln1494_1_reg_277(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln18_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln1494_reg_307(9 downto 0) <= zext_ln1494_fu_229_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln1494_1_reg_277(31 downto 10) <= "0000000000000000000000";
    zext_ln1494_1_reg_277_pp0_iter1_reg(31 downto 10) <= "0000000000000000000000";
    zext_ln1494_reg_307(31 downto 10) <= "0000000000000000000000";
    zext_ln1494_reg_307_pp1_iter1_reg(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fwprop_read_read_fu_70_p2, cmp171_fu_180_p2, ap_enable_reg_pp0_iter0, icmp_ln29_fu_200_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter0, icmp_ln18_fu_220_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_1) and (fwprop_read_read_fu_70_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (cmp171_fu_180_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln29_fu_200_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln29_fu_200_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln18_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln18_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln18_fu_214_p2 <= std_logic_vector(unsigned(i_reg_163) + unsigned(ap_const_lv31_1));
    add_ln29_fu_194_p2 <= std_logic_vector(unsigned(i_1_reg_152) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln29_fu_200_p2)
    begin
        if ((icmp_ln29_fu_200_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln18_fu_220_p2)
    begin
        if ((icmp_ln18_fu_220_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cmp171_fu_180_p2 <= "1" when (signed(dim) > signed(ap_const_lv32_0)) else "0";
    dx_Addr_A <= std_logic_vector(shift_left(unsigned(dx_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    dx_Addr_A_orig_assign_proc : process(zext_ln1494_1_reg_277_pp0_iter1_reg, icmp_ln1494_1_reg_289, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, dx_addr_gep_fu_122_p3)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((icmp_ln1494_1_reg_289 = ap_const_lv1_1)) then 
                dx_Addr_A_orig <= dx_addr_gep_fu_122_p3;
            elsif ((icmp_ln1494_1_reg_289 = ap_const_lv1_0)) then 
                dx_Addr_A_orig <= zext_ln1494_1_reg_277_pp0_iter1_reg;
            else 
                dx_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dx_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dx_Clk_A <= ap_clk;

    dx_Din_A_assign_proc : process(dy_Dout_A, icmp_ln1494_1_reg_289, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((icmp_ln1494_1_reg_289 = ap_const_lv1_1)) then 
                dx_Din_A <= dy_Dout_A;
            elsif ((icmp_ln1494_1_reg_289 = ap_const_lv1_0)) then 
                dx_Din_A <= ap_const_lv16_0;
            else 
                dx_Din_A <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            dx_Din_A <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dx_EN_A_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1494_1_reg_289, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1494_1_reg_289 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1494_1_reg_289 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dx_EN_A <= ap_const_logic_1;
        else 
            dx_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dx_Rst_A <= ap_rst_n_inv;

    dx_WEN_A_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1494_1_reg_289, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1494_1_reg_289 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1494_1_reg_289 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dx_WEN_A <= ap_const_lv2_3;
        else 
            dx_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    dx_addr_gep_fu_122_p3 <= zext_ln1494_1_reg_277_pp0_iter1_reg;
    dy_Addr_A <= std_logic_vector(shift_left(unsigned(zext_ln1494_1_reg_277),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    dy_Clk_A <= ap_clk;
    dy_Din_A <= ap_const_lv16_0;

    dy_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dy_EN_A <= ap_const_logic_1;
        else 
            dy_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dy_Rst_A <= ap_rst_n_inv;
    dy_WEN_A <= ap_const_lv2_0;
    fwprop_read_read_fu_70_p2 <= (0=>fwprop, others=>'-');
    grp_fu_174_p2 <= "1" when (signed(x_Dout_A) > signed(ap_const_lv16_0)) else "0";
    icmp_ln18_fu_220_p2 <= "1" when (i_reg_163 = trunc_ln18_reg_263) else "0";
    icmp_ln29_fu_200_p2 <= "1" when (i_1_reg_152 = trunc_ln29_reg_258) else "0";
    select_ln19_fu_238_p3 <= 
        trunc_ln1494_1_fu_234_p1 when (grp_fu_174_p2(0) = '1') else 
        ap_const_lv15_0;
    trunc_ln1494_1_fu_234_p1 <= x_Dout_A(15 - 1 downto 0);
    trunc_ln1494_2_fu_205_p1 <= i_1_reg_152(10 - 1 downto 0);
    trunc_ln1494_fu_225_p1 <= i_reg_163(10 - 1 downto 0);
    trunc_ln18_fu_190_p1 <= dim(31 - 1 downto 0);
    trunc_ln29_fu_186_p1 <= dim(31 - 1 downto 0);
    x_Addr_A <= std_logic_vector(shift_left(unsigned(x_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    x_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln1494_1_fu_209_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln1494_fu_229_p1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            x_Addr_A_orig <= zext_ln1494_fu_229_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            x_Addr_A_orig <= zext_ln1494_1_fu_209_p1;
        else 
            x_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x_Clk_A <= ap_clk;
    x_Din_A <= ap_const_lv16_0;

    x_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            x_EN_A <= ap_const_logic_1;
        else 
            x_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    x_Rst_A <= ap_rst_n_inv;
    x_WEN_A <= ap_const_lv2_0;
    y_Addr_A <= std_logic_vector(shift_left(unsigned(zext_ln1494_reg_307_pp1_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    y_Clk_A <= ap_clk;
    y_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_reg_317),16));

    y_EN_A_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            y_EN_A <= ap_const_logic_1;
        else 
            y_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    y_Rst_A <= ap_rst_n_inv;

    y_WEN_A_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln18_reg_303_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln18_reg_303_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            y_WEN_A <= ap_const_lv2_3;
        else 
            y_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    zext_ln1494_1_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1494_2_fu_205_p1),32));
    zext_ln1494_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1494_fu_225_p1),32));
end behav;
