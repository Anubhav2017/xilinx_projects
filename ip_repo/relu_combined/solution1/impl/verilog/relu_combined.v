// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="relu_combined_relu_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.451000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=240,HLS_SYN_LUT=321,HLS_VERSION=2020_2}" *)

module relu_combined (
        ap_clk,
        ap_rst_n,
        x,
        dx,
        dx_ap_vld,
        y,
        y_ap_vld,
        dy,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] x;
output  [15:0] dx;
output   dx_ap_vld;
output  [15:0] y;
output   y_ap_vld;
input  [15:0] dy;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg dx_ap_vld;
reg y_ap_vld;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] dim;
wire    fwprop;
wire   [0:0] fwprop_read_read_fu_72_p2;
wire   [0:0] cmp171_fu_138_p2;
wire   [30:0] trunc_ln1494_1_fu_148_p1;
reg   [30:0] trunc_ln1494_1_reg_206;
wire   [15:0] select_ln29_fu_152_p3;
reg   [15:0] select_ln29_reg_211;
wire   [30:0] trunc_ln1494_fu_160_p1;
reg   [30:0] trunc_ln1494_reg_216;
wire   [15:0] zext_ln17_fu_172_p1;
reg   [15:0] zext_ln17_reg_221;
wire   [30:0] add_ln28_fu_176_p2;
wire    ap_CS_fsm_state2;
wire   [30:0] add_ln17_fu_187_p2;
wire    ap_CS_fsm_state4;
reg   [30:0] i_1_reg_110;
wire   [0:0] icmp_ln28_fu_182_p2;
reg   [30:0] i_reg_121;
wire   [0:0] icmp_ln17_fu_193_p2;
wire   [0:0] grp_fu_132_p2;
wire   [14:0] trunc_ln15_fu_144_p1;
wire   [14:0] select_ln18_fu_164_p3;
wire    ap_CS_fsm_state3;
reg   [3:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

relu_combined_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .dim(dim),
    .fwprop(fwprop),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln28_fu_182_p2 == 1'd0))) begin
        i_1_reg_110 <= add_ln28_fu_176_p2;
    end else if (((cmp171_fu_138_p2 == 1'd1) & (fwprop_read_read_fu_72_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_reg_110 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln17_fu_193_p2 == 1'd0))) begin
        i_reg_121 <= add_ln17_fu_187_p2;
    end else if (((cmp171_fu_138_p2 == 1'd1) & (fwprop_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_121 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp171_fu_138_p2 == 1'd1) & (fwprop_read_read_fu_72_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln29_reg_211 <= select_ln29_fu_152_p3;
        trunc_ln1494_1_reg_206 <= trunc_ln1494_1_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp171_fu_138_p2 == 1'd1) & (fwprop_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln1494_reg_216 <= trunc_ln1494_fu_160_p1;
        zext_ln17_reg_221[14 : 0] <= zext_ln17_fu_172_p1[14 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln28_fu_182_p2 == 1'd0))) begin
        dx_ap_vld = 1'b1;
    end else begin
        dx_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln17_fu_193_p2 == 1'd0))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((cmp171_fu_138_p2 == 1'd1) & (fwprop_read_read_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((cmp171_fu_138_p2 == 1'd1) & (fwprop_read_read_fu_72_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((cmp171_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln28_fu_182_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln17_fu_193_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_187_p2 = (i_reg_121 + 31'd1);

assign add_ln28_fu_176_p2 = (i_1_reg_110 + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp171_fu_138_p2 = (($signed(dim) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign dx = select_ln29_reg_211;

assign fwprop_read_read_fu_72_p2 = fwprop;

assign grp_fu_132_p2 = (($signed(x) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_193_p2 = ((i_reg_121 == trunc_ln1494_reg_216) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_182_p2 = ((i_1_reg_110 == trunc_ln1494_1_reg_206) ? 1'b1 : 1'b0);

assign select_ln18_fu_164_p3 = ((grp_fu_132_p2[0:0] == 1'b1) ? trunc_ln15_fu_144_p1 : 15'd0);

assign select_ln29_fu_152_p3 = ((grp_fu_132_p2[0:0] == 1'b1) ? dy : 16'd0);

assign trunc_ln1494_1_fu_148_p1 = dim[30:0];

assign trunc_ln1494_fu_160_p1 = dim[30:0];

assign trunc_ln15_fu_144_p1 = x[14:0];

assign y = zext_ln17_reg_221;

assign zext_ln17_fu_172_p1 = select_ln18_fu_164_p3;

always @ (posedge ap_clk) begin
    zext_ln17_reg_221[15] <= 1'b0;
end

endmodule //relu_combined
