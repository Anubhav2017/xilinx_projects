-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fcc_combined is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    x_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_EN_A : OUT STD_LOGIC;
    x_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    x_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    x_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    x_Clk_A : OUT STD_LOGIC;
    x_Rst_A : OUT STD_LOGIC;
    dx_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dx_EN_A : OUT STD_LOGIC;
    dx_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dx_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dx_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dx_Clk_A : OUT STD_LOGIC;
    dx_Rst_A : OUT STD_LOGIC;
    y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_EN_A : OUT STD_LOGIC;
    y_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    y_Clk_A : OUT STD_LOGIC;
    y_Rst_A : OUT STD_LOGIC;
    dy_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dy_EN_A : OUT STD_LOGIC;
    dy_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dy_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dy_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dy_Clk_A : OUT STD_LOGIC;
    dy_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fcc_combined is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=70,HLS_SYN_DSP=0,HLS_SYN_FF=5765,HLS_SYN_LUT=5879,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (69 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (69 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (69 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (69 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (69 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (69 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (69 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (69 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage1 : STD_LOGIC_VECTOR (69 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (69 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFDF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv29_1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_FFFFFFE0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100000";
    constant ap_const_lv15_3E8 : STD_LOGIC_VECTOR (14 downto 0) := "000001111101000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (69 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal wt : STD_LOGIC_VECTOR (31 downto 0);
    signal dwt : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal db : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_x : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_dx : STD_LOGIC_VECTOR (31 downto 0);
    signal debugip : STD_LOGIC;
    signal xdim : STD_LOGIC_VECTOR (31 downto 0);
    signal ydim : STD_LOGIC_VECTOR (31 downto 0);
    signal fwprop : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln43_reg_1786 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln43_1_reg_1811 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln70_reg_2219 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln91_reg_1946 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln108_reg_2149 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln108_reg_2149_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal cmp36319_reg_1825 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal icmp_ln119_1_reg_2345 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp8_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage1 : signal is "none";
    signal ap_block_pp8_stage1 : BOOLEAN;
    signal icmp_ln119_1_reg_2345_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp8_iter4 : STD_LOGIC := '0';
    signal icmp_ln119_1_reg_2345_pp8_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal icmp_ln119_1_reg_2345_pp8_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWVALID : STD_LOGIC;
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_WVALID : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BREADY : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_552 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_610 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_621 : STD_LOGIC_VECTOR (95 downto 0);
    signal i_5_reg_632 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_655 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_4_reg_678 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_712 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_3_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_reg_745 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_reg_756 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_772 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state33_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln96_reg_1970 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state91_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state93_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state93_io : BOOLEAN;
    signal ap_block_state95_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state95_io : BOOLEAN;
    signal ap_block_state97_pp8_stage0_iter3 : BOOLEAN;
    signal ap_block_state99_pp8_stage0_iter4 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal dwbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_777 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln96_reg_1970_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state52_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state53_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state54_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state54_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal fwprop_read_reg_1716 : STD_LOGIC_VECTOR (0 downto 0);
    signal ydim_read_reg_1720 : STD_LOGIC_VECTOR (31 downto 0);
    signal xdim_read_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal debugip_read_reg_1751 : STD_LOGIC_VECTOR (0 downto 0);
    signal debug_dx_read_reg_1755 : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_x_read_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_1765 : STD_LOGIC_VECTOR (31 downto 0);
    signal dwt_read_reg_1770 : STD_LOGIC_VECTOR (31 downto 0);
    signal wt_read_reg_1776 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln41_1_reg_1781 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln43_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_iters_fu_845_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal num_iters_reg_1790 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln43_fu_871_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_reg_1801 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln43_fu_874_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln43_1_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_1811_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_fu_885_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_1815 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_1815_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_addr_read_reg_1820 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmp36319_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln49_fu_898_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln49_reg_1829 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln49_fu_901_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln49_reg_1836 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln49_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln49_reg_1841 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_1_fu_909_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln49_1_reg_1847 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln96_fu_912_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal zext_ln96_reg_1852 : STD_LOGIC_VECTOR (95 downto 0);
    signal icmp_ln49_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln49_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_reg_1861 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast9_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast9_reg_1866 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_957_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_reg_1875 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln53_2_fu_975_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln53_2_reg_1882 : STD_LOGIC_VECTOR (9 downto 0);
    signal ub_fu_999_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ub_reg_1888 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln90_fu_1011_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln90_reg_1897 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln90_1_fu_1017_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1026_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_49_reg_1915 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal gmem_addr_1_reg_1920 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal trunc_ln92_fu_1076_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln92_reg_1926 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_1657_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln92_reg_1936 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln91_fu_1083_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state25_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln91_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln91_reg_1946_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_1102_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln92_fu_1102_p2 : signal is "no";
    signal add_ln92_reg_1950 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln92_reg_1950_pp1_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal gmem_addr_1_read_reg_1955 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1034_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln96_reg_1960 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln96_2_fu_1111_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln96_2_reg_1965 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln96_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1970_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1970_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln96_fu_1122_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln96_reg_1974 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln97_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1979 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln96_fu_1133_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln96_reg_1984 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln96_2_fu_1149_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln96_2_reg_1989 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1118_fu_1161_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1118_reg_2000 : STD_LOGIC_VECTOR (14 downto 0);
    signal dx_addr_2_reg_2005 : STD_LOGIC_VECTOR (9 downto 0);
    signal dx_addr_2_reg_2005_pp2_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal dx_addr_2_reg_2005_pp2_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal dx_addr_2_reg_2005_pp2_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state34_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state36_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state38_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state40_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal select_ln96_3_fu_1180_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln96_3_reg_2020 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln97_fu_1186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln97_reg_2025 : STD_LOGIC_VECTOR (31 downto 0);
    signal dwbuf_V_addr_1_reg_2045 : STD_LOGIC_VECTOR (14 downto 0);
    signal dwbuf_V_addr_1_reg_2045_pp2_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln103_fu_1252_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state42_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln103_fu_1262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_2080 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_2080_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dbbuf_V_addr_reg_2084 : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_addr_reg_2084_pp3_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_load_reg_2095 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal add_ln107_fu_1283_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln107_reg_2100 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln107_fu_1289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next31_fu_1303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next29_fu_1309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1298_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_55_reg_2123 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal gmem_addr_3_reg_2128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_1689_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln109_reg_2139 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln108_fu_1360_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln108_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln65_fu_1389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state60_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state61_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state62_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln65_fu_1395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_fu_1409_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln69_reg_2175 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal icmp_ln69_1_fu_1415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1424_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_44_reg_2188 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal gmem_addr_2_reg_2193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal trunc_ln71_fu_1466_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln71_reg_2199 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_1695_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln71_reg_2209 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal add_ln70_fu_1473_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state74_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state75_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state76_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln70_fu_1483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2219_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_fu_1492_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln71_fu_1492_p2 : signal is "no";
    signal add_ln71_reg_2223 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln71_reg_2223_pp6_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal gmem_addr_2_read_reg_2228 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln76_fu_1501_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln76_reg_2233 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal trunc_ln78_fu_1512_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_reg_2241 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln76_fu_1507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal y_addr_reg_2256 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1701_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln78_reg_2261 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal bbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln80_fu_1530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state82_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state83_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state84_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state85_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state86_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_state87_pp7_stage0_iter5 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln80_fu_1536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_2276 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_2276_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_2276_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_2276_pp7_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_2276_pp7_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1116_fu_1550_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln1116_fu_1550_p2 : signal is "no";
    signal add_ln1116_reg_2280 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp7_iter5 : STD_LOGIC := '0';
    signal grp_fu_1007_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul156_reg_2315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal icmp_ln119_fu_1584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal trunc_ln119_fu_1589_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln119_reg_2325 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln119_fu_1601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln119_reg_2330 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln119_1_fu_1614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln119_1_reg_2335 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_fu_1618_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln119_reg_2340 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal icmp_ln119_1_fu_1624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_1_reg_2345_pp8_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_addr_reg_2354 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_1_reg_2365 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_1_reg_2365_pp8_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_load_reg_2371 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state25 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state33 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state42 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state52 : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state60 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state74 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state91 : STD_LOGIC;
    signal ap_block_state92_pp8_stage1_iter0 : BOOLEAN;
    signal ap_block_state94_pp8_stage1_iter1 : BOOLEAN;
    signal ap_block_state94_io : BOOLEAN;
    signal ap_block_state96_pp8_stage1_iter2 : BOOLEAN;
    signal ap_block_state98_pp8_stage1_iter3 : BOOLEAN;
    signal ap_block_state100_pp8_stage1_iter4 : BOOLEAN;
    signal ap_block_pp8_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp8_iter3 : STD_LOGIC := '0';
    signal wbuf_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal wbuf_V_ce0 : STD_LOGIC;
    signal wbuf_V_we0 : STD_LOGIC;
    signal wbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bbuf_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal bbuf_V_ce0 : STD_LOGIC;
    signal bbuf_V_we0 : STD_LOGIC;
    signal dwbuf_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dwbuf_V_ce0 : STD_LOGIC;
    signal dwbuf_V_we0 : STD_LOGIC;
    signal dwbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_ce0 : STD_LOGIC;
    signal dbbuf_V_we0 : STD_LOGIC;
    signal dbbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_ce1 : STD_LOGIC;
    signal indvars_iv30_reg_563 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv28_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_598 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_625_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_5_phi_fu_636_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_j_1_phi_fu_648_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_reg_666 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state59 : BOOLEAN;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal i_4_reg_700 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal i_6_reg_723 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_phi_mux_rhs_phi_fu_749_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_760_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln44_fu_889_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln92_1_fu_1107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_fu_1165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln96_2_fu_1175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln96_3_fu_1191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_1_fu_1199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_fu_1271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln109_1_fu_1384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln66_fu_1404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln71_1_fu_1497_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln78_1_fu_1524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1116_fu_1545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1116_1_fu_1555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln120_fu_1629_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln43_fu_860_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln91_fu_1066_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln108_fu_1342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln70_fu_1456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln120_fu_1635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln121_fu_1646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_block_pp8_stage1_11001 : BOOLEAN;
    signal ap_block_pp8_stage1_01001 : BOOLEAN;
    signal ap_block_pp8_stage0_01001 : BOOLEAN;
    signal x_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_798_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_fu_811_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln41_2_fu_820_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_fu_804_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln41_1_fu_814_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln41_1_fu_829_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln41_fu_833_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln41_fu_841_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln1_fu_851_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_42_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax32_fu_931_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_43_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln53_fu_952_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln53_fu_952_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln53_1_fu_971_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln53_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_fu_983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln53_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1026_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1034_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_50_fu_1039_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_1043_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_51_fu_1051_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_1056_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_cast_fu_1089_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln92_1_fu_1098_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln96_fu_1141_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln96_1_fu_1145_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln96_1_fu_1171_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1663_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1671_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1680_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_7_cast_fu_1258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln703_fu_1267_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1298_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_56_fu_1315_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_1319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_57_fu_1327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_fu_1332_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln109_fu_1352_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_4_cast_fu_1366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln109_1_fu_1375_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln109_fu_1379_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 of add_ln109_fu_1379_p2 : signal is "no";
    signal trunc_ln66_fu_1400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1424_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_45_fu_1429_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_1433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_46_fu_1441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_1446_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_cast_fu_1479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln71_1_fu_1488_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln78_fu_1520_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1116_fu_1541_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1707_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln4_fu_1592_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln119_1_fu_1605_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1657_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1657_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1663_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1663_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1671_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1680_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1689_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1689_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1695_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1701_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1701_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1707_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1689_ce : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (69 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal grp_fu_1034_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_1657_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1663_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1689_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1695_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1701_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_2708 : BOOLEAN;
    signal ap_condition_2712 : BOOLEAN;
    signal ap_condition_1681 : BOOLEAN;
    signal ap_condition_1693 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fcc_combined_mul_26s_26s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component fcc_combined_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fcc_combined_mul_31s_31s_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fcc_combined_mul_64ns_32ns_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component fcc_combined_mul_mul_5ns_11ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component fcc_combined_mac_muladd_10ns_11ns_15ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component fcc_combined_mul_mul_10ns_11ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component fcc_combined_wbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_bbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_dbbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        wt : OUT STD_LOGIC_VECTOR (31 downto 0);
        dwt : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        db : OUT STD_LOGIC_VECTOR (31 downto 0);
        debug_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        debug_dx : OUT STD_LOGIC_VECTOR (31 downto 0);
        debugip : OUT STD_LOGIC;
        xdim : OUT STD_LOGIC_VECTOR (31 downto 0);
        ydim : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwprop : OUT STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fcc_combined_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fcc_combined_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component fcc_combined_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        wt => wt,
        dwt => dwt,
        b => b,
        db => db,
        debug_x => debug_x,
        debug_dx => debug_dx,
        debugip => debugip,
        xdim => xdim,
        ydim => ydim,
        fwprop => fwprop,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component fcc_combined_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_3_reg_2128,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => xdim_read_reg_1733,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => reg_777,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    gmem2_m_axi_U : component fcc_combined_gmem2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => gmem2_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => gmem2_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem2_BVALID,
        I_BREADY => gmem2_BREADY,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    wbuf_V_U : component fcc_combined_wbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 32000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wbuf_V_address0,
        ce0 => wbuf_V_ce0,
        we0 => wbuf_V_we0,
        d0 => gmem_addr_2_read_reg_2228,
        q0 => wbuf_V_q0);

    bbuf_V_U : component fcc_combined_bbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bbuf_V_address0,
        ce0 => bbuf_V_ce0,
        we0 => bbuf_V_we0,
        d0 => gmem_addr_read_reg_1820,
        q0 => bbuf_V_q0);

    dwbuf_V_U : component fcc_combined_wbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 32000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dwbuf_V_address0,
        ce0 => dwbuf_V_ce0,
        we0 => dwbuf_V_we0,
        d0 => dwbuf_V_d0,
        q0 => dwbuf_V_q0);

    dbbuf_V_U : component fcc_combined_dbbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dbbuf_V_addr_reg_2084_pp3_iter1_reg,
        ce0 => dbbuf_V_ce0,
        we0 => dbbuf_V_we0,
        d0 => dbbuf_V_d0,
        address1 => dbbuf_V_address1,
        ce1 => dbbuf_V_ce1,
        q1 => dbbuf_V_q1);

    mul_26s_26s_26_1_1_U1 : component fcc_combined_mul_26s_26s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 26,
        din1_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln53_fu_952_p0,
        din1 => trunc_ln49_1_reg_1847,
        dout => mul_ln53_fu_952_p2);

    mul_32s_32s_32_2_1_U2 : component fcc_combined_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ydim_read_reg_1720,
        din1 => xdim_read_reg_1733,
        ce => ap_const_logic_1,
        dout => grp_fu_1007_p2);

    mul_31s_31s_31_2_1_U3 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1026_p0,
        din1 => trunc_ln49_reg_1829,
        ce => ap_const_logic_1,
        dout => grp_fu_1026_p2);

    mul_64ns_32ns_96_5_1_U4 : component fcc_combined_mul_64ns_32ns_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1034_p0,
        din1 => grp_fu_1034_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1034_p2);

    mul_31s_31s_31_2_1_U5 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1298_p0,
        din1 => trunc_ln49_reg_1829,
        ce => ap_const_logic_1,
        dout => grp_fu_1298_p2);

    mul_31s_31s_31_2_1_U6 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1424_p0,
        din1 => trunc_ln49_reg_1829,
        ce => ap_const_logic_1,
        dout => grp_fu_1424_p2);

    mul_mul_5ns_11ns_15_4_1_U7 : component fcc_combined_mul_mul_5ns_11ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1657_p0,
        din1 => grp_fu_1657_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1657_p2);

    mac_muladd_10ns_11ns_15ns_15_4_1_U8 : component fcc_combined_mac_muladd_10ns_11ns_15ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        din2_WIDTH => 15,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1663_p0,
        din1 => grp_fu_1663_p1,
        din2 => trunc_ln1118_reg_2000,
        ce => ap_const_logic_1,
        dout => grp_fu_1663_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U9 : component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_772,
        din1 => dy_Dout_A,
        din2 => grp_fu_1671_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1671_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U10 : component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => wbuf_V_q0,
        din1 => dy_Dout_A,
        din2 => grp_fu_1680_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1680_p3);

    mul_mul_5ns_11ns_15_4_1_U11 : component fcc_combined_mul_mul_5ns_11ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1689_p0,
        din1 => grp_fu_1689_p1,
        ce => grp_fu_1689_ce,
        dout => grp_fu_1689_p2);

    mul_mul_5ns_11ns_15_4_1_U12 : component fcc_combined_mul_mul_5ns_11ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1695_p0,
        din1 => grp_fu_1695_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1695_p2);

    mul_mul_10ns_11ns_15_4_1_U13 : component fcc_combined_mul_mul_10ns_11ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1701_p0,
        din1 => grp_fu_1701_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1701_p2);

    mac_muladd_16s_16s_29ns_29_4_1_U14 : component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_Dout_A,
        din1 => wbuf_V_q0,
        din2 => grp_fu_1707_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1707_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state25);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state33))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state42)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state42);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state52))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state52)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state52);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state60) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln49_fu_915_p2 = ap_const_lv1_0) and (fwprop_read_reg_1716 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state60)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state60);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif (((icmp_ln49_fu_915_p2 = ap_const_lv1_0) and (fwprop_read_reg_1716 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state74))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state74)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state74);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp7_flush_enable)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter5 <= ap_enable_reg_pp7_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    ap_enable_reg_pp7_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state91))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state90) and (icmp_ln119_fu_1584_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1))) then 
                    ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1))) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1))) then 
                    ap_enable_reg_pp8_iter3 <= ap_enable_reg_pp8_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp8_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1))) then 
                    ap_enable_reg_pp8_iter4 <= ap_enable_reg_pp8_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state90) and (icmp_ln119_fu_1584_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp8_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_689_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_915_p2 = ap_const_lv1_0) and (fwprop_read_reg_1716 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_1_reg_689 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln65_fu_1395_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
                i_1_reg_689 <= add_ln65_fu_1389_p2;
            end if; 
        end if;
    end process;

    i_2_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state90) and (icmp_ln119_fu_1584_p2 = ap_const_lv1_1))) then 
                i_2_reg_756 <= ap_const_lv31_0;
            elsif (((icmp_ln119_1_reg_2345 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
                i_2_reg_756 <= add_ln119_reg_2340;
            end if; 
        end if;
    end process;

    i_3_reg_598_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_3_reg_598 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                i_3_reg_598 <= add_ln90_reg_1897;
            end if; 
        end if;
    end process;

    i_4_reg_700_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                i_4_reg_700 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                i_4_reg_700 <= add_ln69_reg_2175;
            end if; 
        end if;
    end process;

    i_5_reg_632_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_5_reg_632 <= select_ln96_3_reg_2020;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                i_5_reg_632 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_6_reg_723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (icmp_ln69_1_fu_1415_p2 = ap_const_lv1_1))) then 
                i_6_reg_723 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
                i_6_reg_723 <= add_ln76_reg_2233;
            end if; 
        end if;
    end process;

    i_7_reg_655_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_1262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_7_reg_655 <= add_ln103_fu_1252_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_7_reg_655 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_8_reg_666_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_reg_1893 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                i_8_reg_666 <= ap_const_lv64_0;
            elsif ((not(((gmem_BVALID = ap_const_logic_0) and (cmp36319_reg_1825 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                i_8_reg_666 <= add_ln107_reg_2100;
            end if; 
        end if;
    end process;

    i_reg_552_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_552 <= ap_const_lv31_0;
            elsif (((icmp_ln43_1_fu_880_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_552 <= add_ln43_fu_874_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_621 <= add_ln96_2_reg_1965;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                indvar_flatten_reg_621 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvars_iv28_reg_575_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvars_iv28_reg_575 <= ap_const_lv32_FFFFFFFF;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and ((fwprop_read_reg_1716 = ap_const_lv1_1) or ((icmp_ln107_fu_1289_p2 = ap_const_lv1_1) or (icmp_ln90_reg_1893 = ap_const_lv1_0))))) then 
                indvars_iv28_reg_575 <= indvars_iv_next29_fu_1309_p2;
            end if; 
        end if;
    end process;

    indvars_iv30_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvars_iv30_reg_563 <= ap_const_lv32_FFFFFFDF;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and ((fwprop_read_reg_1716 = ap_const_lv1_1) or ((icmp_ln107_fu_1289_p2 = ap_const_lv1_1) or (icmp_ln90_reg_1893 = ap_const_lv1_0))))) then 
                indvars_iv30_reg_563 <= indvars_iv_next31_fu_1303_p2;
            end if; 
        end if;
    end process;

    j_1_reg_644_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_1_reg_644 <= add_ln97_reg_2025;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                j_1_reg_644 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_2_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                j_2_reg_712 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln70_fu_1483_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then 
                j_2_reg_712 <= add_ln70_fu_1473_p2;
            end if; 
        end if;
    end process;

    j_3_reg_734_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln80_fu_1536_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then 
                j_3_reg_734 <= add_ln80_fu_1530_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                j_3_reg_734 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_4_reg_678_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                j_4_reg_678 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln108_fu_1370_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
                j_4_reg_678 <= add_ln108_fu_1360_p2;
            end if; 
        end if;
    end process;

    j_reg_610_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_reg_610 <= ap_const_lv31_0;
            elsif (((icmp_ln91_fu_1093_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_reg_610 <= add_ln91_fu_1083_p2;
            end if; 
        end if;
    end process;

    k_reg_587_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_reg_587 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and ((fwprop_read_reg_1716 = ap_const_lv1_1) or ((icmp_ln107_fu_1289_p2 = ap_const_lv1_1) or (icmp_ln90_reg_1893 = ap_const_lv1_0))))) then 
                k_reg_587 <= add_ln49_reg_1861;
            end if; 
        end if;
    end process;

    rhs_reg_745_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (icmp_ln80_reg_2276_pp7_iter4_reg = ap_const_lv1_0))) then 
                rhs_reg_745 <= grp_fu_1707_p3(28 downto 13);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                rhs_reg_745 <= bbuf_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_reg_1893 = ap_const_lv1_1) and (fwprop_read_reg_1716 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                add_ln107_reg_2100 <= add_ln107_fu_1283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln80_fu_1536_p2 = ap_const_lv1_0))) then
                add_ln1116_reg_2280 <= add_ln1116_fu_1550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) then
                add_ln119_reg_2340 <= add_ln119_fu_1618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln49_reg_1861 <= add_ln49_fu_920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                add_ln69_reg_2175 <= add_ln69_fu_1409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln70_fu_1483_p2 = ap_const_lv1_0))) then
                add_ln71_reg_2223 <= add_ln71_fu_1492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln71_reg_2223_pp6_iter1_reg <= add_ln71_reg_2223;
                icmp_ln70_reg_2219 <= icmp_ln70_fu_1483_p2;
                icmp_ln70_reg_2219_pp6_iter1_reg <= icmp_ln70_reg_2219;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                add_ln76_reg_2233 <= add_ln76_fu_1501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln90_reg_1897 <= add_ln90_fu_1011_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_fu_1093_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln92_reg_1950 <= add_ln92_fu_1102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln92_reg_1950_pp1_iter1_reg <= add_ln92_reg_1950;
                icmp_ln91_reg_1946 <= icmp_ln91_fu_1093_p2;
                icmp_ln91_reg_1946_pp1_iter1_reg <= icmp_ln91_reg_1946;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln96_2_reg_1965 <= add_ln96_2_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_1117_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln96_reg_1974 <= add_ln96_fu_1122_p2;
                dx_addr_2_reg_2005 <= zext_ln1118_fu_1165_p1(10 - 1 downto 0);
                icmp_ln97_reg_1979 <= icmp_ln97_fu_1128_p2;
                select_ln96_2_reg_1989 <= select_ln96_2_fu_1149_p3;
                select_ln96_reg_1984 <= select_ln96_fu_1133_p3;
                trunc_ln1118_reg_2000 <= trunc_ln1118_fu_1161_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln97_reg_2025 <= add_ln97_fu_1186_p2;
                select_ln96_3_reg_2020 <= select_ln96_3_fu_1180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                b_read_reg_1765 <= b;
                debug_dx_read_reg_1755 <= debug_dx;
                debug_x_read_reg_1760 <= debug_x;
                debugip_read_reg_1751 <= (0=>debugip, others=>'-');
                dwt_read_reg_1770 <= dwt;
                fwprop_read_reg_1716 <= (0=>fwprop, others=>'-');
                icmp_ln43_reg_1786 <= icmp_ln43_fu_798_p2;
                trunc_ln41_1_reg_1781 <= sub_ln41_fu_782_p2(31 downto 5);
                wt_read_reg_1776 <= wt;
                xdim_read_reg_1733 <= xdim;
                ydim_read_reg_1720 <= ydim;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                cmp36319_reg_1825 <= cmp36319_fu_893_p2;
                sext_ln49_reg_1836 <= sext_ln49_fu_901_p1;
                trunc_ln49_1_reg_1847 <= trunc_ln49_1_fu_909_p1;
                trunc_ln49_reg_1829 <= trunc_ln49_fu_898_p1;
                xor_ln49_reg_1841 <= xor_ln49_fu_904_p2;
                    zext_ln96_reg_1852(31 downto 0) <= zext_ln96_fu_912_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_1262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_addr_reg_2084 <= zext_ln703_fu_1271_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_addr_reg_2084_pp3_iter1_reg <= dbbuf_V_addr_reg_2084;
                icmp_ln103_reg_2080 <= icmp_ln103_fu_1262_p2;
                icmp_ln103_reg_2080_pp3_iter1_reg <= icmp_ln103_reg_2080;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln103_reg_2080 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_load_reg_2095 <= dbbuf_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1970_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                dwbuf_V_addr_1_reg_2045 <= zext_ln1118_1_fu_1199_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                dwbuf_V_addr_1_reg_2045_pp2_iter2_reg <= dwbuf_V_addr_1_reg_2045;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                dx_addr_2_reg_2005_pp2_iter1_reg <= dx_addr_2_reg_2005;
                dx_addr_2_reg_2005_pp2_iter2_reg <= dx_addr_2_reg_2005_pp2_iter1_reg;
                dx_addr_2_reg_2005_pp2_iter3_reg <= dx_addr_2_reg_2005_pp2_iter2_reg;
                icmp_ln96_reg_1970 <= icmp_ln96_fu_1117_p2;
                icmp_ln96_reg_1970_pp2_iter1_reg <= icmp_ln96_reg_1970;
                icmp_ln96_reg_1970_pp2_iter2_reg <= icmp_ln96_reg_1970_pp2_iter1_reg;
                icmp_ln96_reg_1970_pp2_iter3_reg <= icmp_ln96_reg_1970_pp2_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_1_reg_2345 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                dx_load_reg_2371 <= dx_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                empty_44_reg_2188 <= grp_fu_1424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                empty_49_reg_1915 <= grp_fu_1026_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                empty_55_reg_2123 <= grp_fu_1298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (icmp_ln119_1_fu_1624_p2 = ap_const_lv1_0))) then
                gmem2_addr_1_reg_2365 <= add_ln121_fu_1646_p2;
                gmem2_addr_reg_2354 <= add_ln120_fu_1635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then
                gmem2_addr_1_reg_2365_pp8_iter1_reg <= gmem2_addr_1_reg_2365;
                icmp_ln119_1_reg_2345 <= icmp_ln119_1_fu_1624_p2;
                icmp_ln119_1_reg_2345_pp8_iter1_reg <= icmp_ln119_1_reg_2345;
                icmp_ln119_1_reg_2345_pp8_iter2_reg <= icmp_ln119_1_reg_2345_pp8_iter1_reg;
                icmp_ln119_1_reg_2345_pp8_iter3_reg <= icmp_ln119_1_reg_2345_pp8_iter2_reg;
                icmp_ln119_1_reg_2345_pp8_iter4_reg <= icmp_ln119_1_reg_2345_pp8_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln91_reg_1946 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                gmem_addr_1_read_reg_1955 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36319_reg_1825 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                gmem_addr_1_reg_1920 <= sext_ln91_fu_1066_p1;
                trunc_ln92_reg_1926 <= trunc_ln92_fu_1076_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_reg_2219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                gmem_addr_2_read_reg_2228 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36319_reg_1825 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                gmem_addr_2_reg_2193 <= sext_ln70_fu_1456_p1;
                trunc_ln71_reg_2199 <= trunc_ln71_fu_1466_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36319_reg_1825 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                gmem_addr_3_reg_2128 <= sext_ln108_fu_1342_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_1_reg_1811 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_addr_read_reg_1820 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln108_reg_2149 <= icmp_ln108_fu_1370_p2;
                icmp_ln108_reg_2149_pp4_iter1_reg <= icmp_ln108_reg_2149;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln43_1_reg_1811 <= icmp_ln43_1_fu_880_p2;
                icmp_ln43_1_reg_1811_pp0_iter1_reg <= icmp_ln43_1_reg_1811;
                trunc_ln44_reg_1815_pp0_iter1_reg <= trunc_ln44_reg_1815;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln80_reg_2276 <= icmp_ln80_fu_1536_p2;
                icmp_ln80_reg_2276_pp7_iter1_reg <= icmp_ln80_reg_2276;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp7_stage0_11001)) then
                icmp_ln80_reg_2276_pp7_iter2_reg <= icmp_ln80_reg_2276_pp7_iter1_reg;
                icmp_ln80_reg_2276_pp7_iter3_reg <= icmp_ln80_reg_2276_pp7_iter2_reg;
                icmp_ln80_reg_2276_pp7_iter4_reg <= icmp_ln80_reg_2276_pp7_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                icmp_ln90_reg_1893 <= grp_fu_767_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                mul156_reg_2315 <= grp_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                mul_ln109_reg_2139 <= grp_fu_1689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                mul_ln71_reg_2209 <= grp_fu_1695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                mul_ln78_reg_2261 <= grp_fu_1701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul_ln92_reg_1936 <= grp_fu_1657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                mul_ln96_reg_1960 <= grp_fu_1034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                num_iters_reg_1790 <= num_iters_fu_845_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                p_cast9_reg_1866 <= p_cast9_fu_944_p1;
                    shl_ln_reg_1875(30 downto 5) <= shl_ln_fu_957_p3(30 downto 5);
                    trunc_ln53_2_reg_1882(9 downto 5) <= trunc_ln53_2_fu_975_p3(9 downto 5);
                ub_reg_1888 <= ub_fu_999_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln119_1_reg_2345 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)))) then
                reg_772 <= x_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln108_reg_2149 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((icmp_ln96_reg_1970_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                reg_777 <= dwbuf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state90) and (icmp_ln119_fu_1584_p2 = ap_const_lv1_1))) then
                sext_ln119_1_reg_2335 <= sext_ln119_1_fu_1614_p1;
                sext_ln119_reg_2330 <= sext_ln119_fu_1601_p1;
                trunc_ln119_reg_2325 <= trunc_ln119_fu_1589_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln43_reg_1801 <= trunc_ln43_fu_871_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_1_fu_880_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln44_reg_1815 <= trunc_ln44_fu_885_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (icmp_ln76_fu_1507_p2 = ap_const_lv1_0))) then
                trunc_ln78_reg_2241 <= trunc_ln78_fu_1512_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                y_addr_reg_2256 <= zext_ln78_1_fu_1524_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    zext_ln96_reg_1852(95 downto 32) <= "0000000000000000000000000000000000000000000000000000000000000000";
    shl_ln_reg_1875(4 downto 0) <= "00000";
    trunc_ln53_2_reg_1882(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln43_reg_1786, ap_enable_reg_pp0_iter1, ap_CS_fsm_state67, ap_enable_reg_pp6_iter1, ap_CS_fsm_state18, ap_enable_reg_pp1_iter1, ap_CS_fsm_state51, ap_enable_reg_pp4_iter2, ap_CS_fsm_state59, cmp36319_reg_1825, ap_enable_reg_pp8_iter1, ap_CS_fsm_pp8_stage1, ap_enable_reg_pp8_iter4, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter1, fwprop_read_reg_1716, debugip_read_reg_1751, ap_enable_reg_pp0_iter0, icmp_ln43_1_fu_880_p2, icmp_ln49_fu_915_p2, ap_CS_fsm_state13, grp_fu_767_p2, icmp_ln90_reg_1893, ap_CS_fsm_state14, ap_CS_fsm_state15, icmp_ln90_1_fu_1017_p2, ap_CS_fsm_state17, ap_enable_reg_pp1_iter0, icmp_ln91_fu_1093_p2, ap_enable_reg_pp2_iter0, icmp_ln96_fu_1117_p2, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp3_iter0, icmp_ln103_fu_1262_p2, ap_enable_reg_pp3_iter1, ap_CS_fsm_state46, icmp_ln107_fu_1289_p2, ap_CS_fsm_state48, ap_enable_reg_pp4_iter0, icmp_ln108_fu_1370_p2, ap_enable_reg_pp5_iter0, icmp_ln65_fu_1395_p2, ap_CS_fsm_state64, icmp_ln69_1_fu_1415_p2, ap_CS_fsm_state66, ap_enable_reg_pp6_iter0, icmp_ln70_fu_1483_p2, ap_CS_fsm_state78, icmp_ln76_fu_1507_p2, ap_enable_reg_pp7_iter5, icmp_ln119_fu_1584_p2, ap_CS_fsm_state90, ap_enable_reg_pp8_iter0, icmp_ln119_1_fu_1624_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter2, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter4, ap_block_pp8_stage0_subdone, ap_block_pp8_stage1_subdone, ap_enable_reg_pp8_iter3, ap_CS_fsm_state63, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln43_reg_1786 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln43_reg_1786 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln43_1_fu_880_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln43_1_fu_880_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln49_fu_915_p2 = ap_const_lv1_1) and (debugip_read_reg_1751 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                elsif (((icmp_ln49_fu_915_p2 = ap_const_lv1_1) and (debugip_read_reg_1751 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                elsif (((icmp_ln49_fu_915_p2 = ap_const_lv1_0) and (fwprop_read_reg_1716 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((grp_fu_767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln90_1_fu_1017_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((cmp36319_reg_1825 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln91_fu_1093_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln91_fu_1093_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln96_fu_1117_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((icmp_ln96_fu_1117_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln103_fu_1262_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln103_fu_1262_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and ((fwprop_read_reg_1716 = ap_const_lv1_1) or ((icmp_ln107_fu_1289_p2 = ap_const_lv1_1) or (icmp_ln90_reg_1893 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((cmp36319_reg_1825 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln108_fu_1370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln108_fu_1370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (cmp36319_reg_1825 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln65_fu_1395_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (icmp_ln65_fu_1395_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state63 => 
                if (((grp_fu_767_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (icmp_ln69_1_fu_1415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((cmp36319_reg_1825 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln70_fu_1483_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln70_fu_1483_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (icmp_ln76_fu_1507_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state90) and (icmp_ln119_fu_1584_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (icmp_ln119_1_fu_1624_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage1;
                elsif (((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (icmp_ln119_1_fu_1624_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_pp8_stage1 => 
                if ((not(((ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp8_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif (((ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage1;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_fu_1252_p2 <= std_logic_vector(unsigned(i_7_reg_655) + unsigned(ap_const_lv31_1));
    add_ln107_fu_1283_p2 <= std_logic_vector(unsigned(i_8_reg_666) + unsigned(ap_const_lv64_1));
    add_ln108_fu_1360_p2 <= std_logic_vector(unsigned(j_4_reg_678) + unsigned(ap_const_lv31_1));
    add_ln109_fu_1379_p2 <= std_logic_vector(unsigned(mul_ln109_reg_2139) + unsigned(trunc_ln109_1_fu_1375_p1));
    add_ln1116_fu_1550_p2 <= std_logic_vector(unsigned(mul_ln78_reg_2261) + unsigned(trunc_ln1116_fu_1541_p1));
    add_ln119_fu_1618_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_760_p4) + unsigned(ap_const_lv31_1));
    add_ln120_fu_1635_p2 <= std_logic_vector(unsigned(zext_ln120_fu_1629_p1) + unsigned(sext_ln119_reg_2330));
    add_ln121_fu_1646_p2 <= std_logic_vector(unsigned(zext_ln120_fu_1629_p1) + unsigned(sext_ln119_1_reg_2335));
    add_ln43_fu_874_p2 <= std_logic_vector(unsigned(i_reg_552) + unsigned(ap_const_lv31_1));
    add_ln49_fu_920_p2 <= std_logic_vector(unsigned(k_reg_587) + unsigned(ap_const_lv32_1));
    add_ln53_fu_983_p2 <= std_logic_vector(unsigned(shl_ln53_fu_965_p2) + unsigned(ap_const_lv32_20));
    add_ln65_fu_1389_p2 <= std_logic_vector(unsigned(i_1_reg_689) + unsigned(ap_const_lv32_1));
    add_ln69_fu_1409_p2 <= std_logic_vector(unsigned(i_4_reg_700) + unsigned(ap_const_lv64_1));
    add_ln70_fu_1473_p2 <= std_logic_vector(unsigned(j_2_reg_712) + unsigned(ap_const_lv31_1));
    add_ln71_fu_1492_p2 <= std_logic_vector(unsigned(mul_ln71_reg_2209) + unsigned(trunc_ln71_1_fu_1488_p1));
    add_ln76_fu_1501_p2 <= std_logic_vector(unsigned(i_6_reg_723) + unsigned(ap_const_lv64_1));
    add_ln78_fu_1520_p2 <= std_logic_vector(unsigned(trunc_ln78_reg_2241) + unsigned(trunc_ln53_2_reg_1882));
    add_ln80_fu_1530_p2 <= std_logic_vector(unsigned(j_3_reg_734) + unsigned(ap_const_lv32_1));
    add_ln90_fu_1011_p2 <= std_logic_vector(unsigned(i_3_reg_598) + unsigned(ap_const_lv64_1));
    add_ln91_fu_1083_p2 <= std_logic_vector(unsigned(j_reg_610) + unsigned(ap_const_lv31_1));
    add_ln92_fu_1102_p2 <= std_logic_vector(unsigned(mul_ln92_reg_1936) + unsigned(trunc_ln92_1_fu_1098_p1));
    add_ln96_1_fu_1171_p2 <= std_logic_vector(unsigned(select_ln96_2_reg_1989) + unsigned(trunc_ln53_2_reg_1882));
    add_ln96_2_fu_1111_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_625_p4) + unsigned(ap_const_lv96_1));
    add_ln96_fu_1122_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_5_phi_fu_636_p4) + unsigned(ap_const_lv64_1));
    add_ln97_fu_1186_p2 <= std_logic_vector(unsigned(select_ln96_reg_1984) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(28);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(29);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(39);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(45);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(57);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(63);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(67);
    ap_CS_fsm_pp8_stage1 <= ap_CS_fsm(68);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(69);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state32 <= ap_CS_fsm(27);
    ap_CS_fsm_state41 <= ap_CS_fsm(30);
    ap_CS_fsm_state45 <= ap_CS_fsm(32);
    ap_CS_fsm_state46 <= ap_CS_fsm(33);
    ap_CS_fsm_state47 <= ap_CS_fsm(34);
    ap_CS_fsm_state48 <= ap_CS_fsm(35);
    ap_CS_fsm_state49 <= ap_CS_fsm(36);
    ap_CS_fsm_state50 <= ap_CS_fsm(37);
    ap_CS_fsm_state51 <= ap_CS_fsm(38);
    ap_CS_fsm_state59 <= ap_CS_fsm(44);
    ap_CS_fsm_state63 <= ap_CS_fsm(46);
    ap_CS_fsm_state64 <= ap_CS_fsm(47);
    ap_CS_fsm_state65 <= ap_CS_fsm(48);
    ap_CS_fsm_state66 <= ap_CS_fsm(49);
    ap_CS_fsm_state67 <= ap_CS_fsm(50);
    ap_CS_fsm_state70 <= ap_CS_fsm(53);
    ap_CS_fsm_state73 <= ap_CS_fsm(56);
    ap_CS_fsm_state77 <= ap_CS_fsm(58);
    ap_CS_fsm_state78 <= ap_CS_fsm(59);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(61);
    ap_CS_fsm_state81 <= ap_CS_fsm(62);
    ap_CS_fsm_state88 <= ap_CS_fsm(64);
    ap_CS_fsm_state89 <= ap_CS_fsm(65);
    ap_CS_fsm_state90 <= ap_CS_fsm(66);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln43_1_reg_1811, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln43_1_reg_1811 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln43_1_reg_1811, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln43_1_reg_1811 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln91_reg_1946, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln91_reg_1946 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln91_reg_1946, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln91_reg_1946 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state54_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state54_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln70_reg_2219, gmem_RVALID)
    begin
                ap_block_pp6_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln70_reg_2219 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln70_reg_2219, gmem_RVALID)
    begin
                ap_block_pp6_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln70_reg_2219 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_01001_assign_proc : process(ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter3_reg, gmem2_BVALID)
    begin
                ap_block_pp8_stage0_01001 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter3_reg, ap_enable_reg_pp8_iter2, gmem2_BVALID, ap_block_state93_io, ap_block_state95_io)
    begin
                ap_block_pp8_stage0_11001 <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state95_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state93_io) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter3_reg, ap_enable_reg_pp8_iter2, gmem2_BVALID, ap_block_state93_io, ap_block_state95_io)
    begin
                ap_block_pp8_stage0_subdone <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state95_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state93_io) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp8_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage1_01001_assign_proc : process(ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter4_reg, gmem2_BVALID)
    begin
                ap_block_pp8_stage1_01001 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage1_11001_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter4_reg, gmem2_BVALID, ap_block_state94_io)
    begin
                ap_block_pp8_stage1_11001 <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state94_io) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp8_stage1_subdone_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter4_reg, gmem2_BVALID, ap_block_state94_io)
    begin
                ap_block_pp8_stage1_subdone <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state94_io) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state100_pp8_stage1_iter4_assign_proc : process(icmp_ln119_1_reg_2345_pp8_iter4_reg, gmem2_BVALID)
    begin
                ap_block_state100_pp8_stage1_iter4 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter4_reg = ap_const_lv1_0));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln43_1_reg_1811, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln43_1_reg_1811 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_pp1_stage0_iter1_assign_proc : process(icmp_ln91_reg_1946, gmem_RVALID)
    begin
                ap_block_state26_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln91_reg_1946 = ap_const_lv1_0));
    end process;

        ap_block_state27_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(icmp_ln43_reg_1786, gmem_ARREADY)
    begin
                ap_block_state2_io <= ((gmem_ARREADY = ap_const_logic_0) and (icmp_ln43_reg_1786 = ap_const_lv1_1));
    end process;

        ap_block_state33_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_io_assign_proc : process(icmp_ln108_reg_2149_pp4_iter1_reg, gmem_WREADY)
    begin
                ap_block_state54_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln108_reg_2149_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state54_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state59_assign_proc : process(cmp36319_reg_1825, gmem_BVALID)
    begin
                ap_block_state59 <= ((gmem_BVALID = ap_const_logic_0) and (cmp36319_reg_1825 = ap_const_lv1_1));
    end process;

        ap_block_state60_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state75_pp6_stage0_iter1_assign_proc : process(icmp_ln70_reg_2219, gmem_RVALID)
    begin
                ap_block_state75_pp6_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln70_reg_2219 = ap_const_lv1_0));
    end process;

        ap_block_state76_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp7_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp7_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp8_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state93_io_assign_proc : process(icmp_ln119_1_reg_2345, gmem2_AWREADY)
    begin
                ap_block_state93_io <= ((gmem2_AWREADY = ap_const_logic_0) and (icmp_ln119_1_reg_2345 = ap_const_lv1_0));
    end process;

        ap_block_state93_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state94_io_assign_proc : process(icmp_ln119_1_reg_2345_pp8_iter1_reg, gmem2_AWREADY, gmem2_WREADY)
    begin
                ap_block_state94_io <= (((gmem2_WREADY = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0)) or ((gmem2_AWREADY = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_state94_pp8_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state95_io_assign_proc : process(icmp_ln119_1_reg_2345_pp8_iter1_reg, gmem2_WREADY)
    begin
                ap_block_state95_io <= ((gmem2_WREADY = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state95_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp8_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp8_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp8_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state99_pp8_stage0_iter4_assign_proc : process(icmp_ln119_1_reg_2345_pp8_iter3_reg, gmem2_BVALID)
    begin
                ap_block_state99_pp8_stage0_iter4 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln119_1_reg_2345_pp8_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1681_assign_proc : process(ap_enable_reg_pp8_iter1, ap_CS_fsm_pp8_stage1, ap_block_pp8_stage1_01001)
    begin
                ap_condition_1681 <= ((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1));
    end process;


    ap_condition_1693_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter2, ap_block_pp8_stage0_01001)
    begin
                ap_condition_1693 <= ((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0));
    end process;


    ap_condition_2708_assign_proc : process(ap_CS_fsm_pp8_stage0, icmp_ln119_1_reg_2345, ap_block_pp8_stage0_11001)
    begin
                ap_condition_2708 <= ((icmp_ln119_1_reg_2345 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0));
    end process;


    ap_condition_2712_assign_proc : process(ap_CS_fsm_pp8_stage1, icmp_ln119_1_reg_2345_pp8_iter1_reg, ap_block_pp8_stage1_11001)
    begin
                ap_condition_2712 <= ((icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln43_1_fu_880_p2)
    begin
        if ((icmp_ln43_1_fu_880_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state25_assign_proc : process(icmp_ln91_fu_1093_p2)
    begin
        if ((icmp_ln91_fu_1093_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state33_assign_proc : process(icmp_ln96_fu_1117_p2)
    begin
        if ((icmp_ln96_fu_1117_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state42_assign_proc : process(icmp_ln103_fu_1262_p2)
    begin
        if ((icmp_ln103_fu_1262_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state52_assign_proc : process(icmp_ln108_fu_1370_p2)
    begin
        if ((icmp_ln108_fu_1370_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state52 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state52 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state60_assign_proc : process(icmp_ln65_fu_1395_p2)
    begin
        if ((icmp_ln65_fu_1395_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state60 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state60 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state74_assign_proc : process(icmp_ln70_fu_1483_p2)
    begin
        if ((icmp_ln70_fu_1483_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state74 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state74 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_flush_enable_assign_proc : process(ap_CS_fsm_pp7_stage0, icmp_ln80_fu_1536_p2, ap_block_pp7_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln80_fu_1536_p2 = ap_const_lv1_1))) then 
            ap_condition_pp7_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp7_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state91_assign_proc : process(icmp_ln119_1_fu_1624_p2)
    begin
        if ((icmp_ln119_1_fu_1624_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state91 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state91 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter5, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter3, ap_enable_reg_pp7_iter4)
    begin
        if (((ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter4, ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter3)
    begin
        if (((ap_enable_reg_pp8_iter2 = ap_const_logic_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_760_p4_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, icmp_ln119_1_reg_2345, i_2_reg_756, add_ln119_reg_2340)
    begin
        if (((icmp_ln119_1_reg_2345 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0))) then 
            ap_phi_mux_i_2_phi_fu_760_p4 <= add_ln119_reg_2340;
        else 
            ap_phi_mux_i_2_phi_fu_760_p4 <= i_2_reg_756;
        end if; 
    end process;


    ap_phi_mux_i_5_phi_fu_636_p4_assign_proc : process(i_5_reg_632, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln96_reg_1970, select_ln96_3_reg_2020, ap_block_pp2_stage0)
    begin
        if (((icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_5_phi_fu_636_p4 <= select_ln96_3_reg_2020;
        else 
            ap_phi_mux_i_5_phi_fu_636_p4 <= i_5_reg_632;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_625_p4_assign_proc : process(indvar_flatten_reg_621, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln96_reg_1970, add_ln96_2_reg_1965, ap_block_pp2_stage0)
    begin
        if (((icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_625_p4 <= add_ln96_2_reg_1965;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_625_p4 <= indvar_flatten_reg_621;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_648_p4_assign_proc : process(j_1_reg_644, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln96_reg_1970, add_ln97_reg_2025, ap_block_pp2_stage0)
    begin
        if (((icmp_ln96_reg_1970 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_j_1_phi_fu_648_p4 <= add_ln97_reg_2025;
        else 
            ap_phi_mux_j_1_phi_fu_648_p4 <= j_1_reg_644;
        end if; 
    end process;


    ap_phi_mux_rhs_phi_fu_749_p4_assign_proc : process(rhs_reg_745, icmp_ln80_reg_2276_pp7_iter4_reg, ap_enable_reg_pp7_iter5, ap_block_pp7_stage0, grp_fu_1707_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1) and (icmp_ln80_reg_2276_pp7_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_rhs_phi_fu_749_p4 <= grp_fu_1707_p3(28 downto 13);
        else 
            ap_phi_mux_rhs_phi_fu_749_p4 <= rhs_reg_745;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bbuf_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state80, ap_enable_reg_pp0_iter2, zext_ln44_fu_889_p1, zext_ln78_1_fu_1524_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            bbuf_V_address0 <= zext_ln78_1_fu_1524_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bbuf_V_address0 <= zext_ln44_fu_889_p1(10 - 1 downto 0);
        else 
            bbuf_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    bbuf_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state80, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            bbuf_V_ce0 <= ap_const_logic_1;
        else 
            bbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bbuf_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_1_reg_1811_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln43_1_reg_1811_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bbuf_V_we0 <= ap_const_logic_1;
        else 
            bbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp36319_fu_893_p2 <= "1" when (signed(xdim_read_reg_1733) > signed(ap_const_lv32_0)) else "0";
    dbbuf_V_address1 <= zext_ln703_fu_1271_p1(10 - 1 downto 0);

    dbbuf_V_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            dbbuf_V_ce0 <= ap_const_logic_1;
        else 
            dbbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dbbuf_V_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dbbuf_V_ce1 <= ap_const_logic_1;
        else 
            dbbuf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dbbuf_V_d0 <= std_logic_vector(unsigned(dy_Dout_A) + unsigned(dbbuf_V_load_reg_2095));

    dbbuf_V_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln103_reg_2080_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((icmp_ln103_reg_2080_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            dbbuf_V_we0 <= ap_const_logic_1;
        else 
            dbbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dwbuf_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp2_stage1, dwbuf_V_addr_1_reg_2045_pp2_iter2_reg, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, zext_ln92_1_fu_1107_p1, ap_block_pp2_stage1, zext_ln1118_1_fu_1199_p1, zext_ln109_1_fu_1384_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= zext_ln109_1_fu_1384_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= dwbuf_V_addr_1_reg_2045_pp2_iter2_reg;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dwbuf_V_address0 <= zext_ln1118_1_fu_1199_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= zext_ln92_1_fu_1107_p1(15 - 1 downto 0);
        else 
            dwbuf_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            dwbuf_V_ce0 <= ap_const_logic_1;
        else 
            dwbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dwbuf_V_d0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, gmem_addr_1_read_reg_1955, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, grp_fu_1671_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dwbuf_V_d0 <= grp_fu_1671_p3(28 downto 13);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            dwbuf_V_d0 <= gmem_addr_1_read_reg_1955;
        else 
            dwbuf_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln91_reg_1946_pp1_iter1_reg, icmp_ln96_reg_1970_pp2_iter2_reg, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3)
    begin
        if ((((icmp_ln96_reg_1970_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((icmp_ln91_reg_1946_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            dwbuf_V_we0 <= ap_const_logic_1;
        else 
            dwbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dx_Addr_A <= std_logic_vector(shift_left(unsigned(dx_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    dx_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter2, dx_addr_2_reg_2005_pp2_iter1_reg, dx_addr_2_reg_2005_pp2_iter3_reg, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp8_iter0, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, ap_block_pp2_stage1, zext_ln66_fu_1404_p1, ap_block_pp5_stage0, zext_ln120_fu_1629_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) then 
            dx_Addr_A_orig <= zext_ln120_fu_1629_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            dx_Addr_A_orig <= zext_ln66_fu_1404_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dx_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dx_addr_2_reg_2005_pp2_iter3_reg),32));
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dx_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dx_addr_2_reg_2005_pp2_iter1_reg),32));
        else 
            dx_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dx_Clk_A <= ap_clk;

    dx_Din_A_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp2_iter3, ap_block_pp2_stage1, ap_block_pp5_stage0, grp_fu_1680_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
            dx_Din_A <= ap_const_lv16_0;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dx_Din_A <= grp_fu_1680_p3(28 downto 13);
        else 
            dx_Din_A <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dx_EN_A_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_CS_fsm_pp8_stage1, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp8_stage0_11001, ap_enable_reg_pp2_iter2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp8_iter0, ap_enable_reg_pp2_iter3, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_pp8_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then 
            dx_EN_A <= ap_const_logic_1;
        else 
            dx_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dx_Rst_A <= ap_rst_n_inv;

    dx_WEN_A_assign_proc : process(icmp_ln96_reg_1970_pp2_iter3_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, icmp_ln65_fu_1395_p2, ap_enable_reg_pp2_iter3)
    begin
        if ((((icmp_ln96_reg_1970_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln65_fu_1395_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then 
            dx_WEN_A <= ap_const_lv2_3;
        else 
            dx_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    dy_Addr_A <= std_logic_vector(shift_left(unsigned(dy_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    dy_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, zext_ln96_2_fu_1175_p1, ap_block_pp2_stage1, zext_ln96_3_fu_1191_p1, zext_ln703_fu_1271_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dy_Addr_A_orig <= zext_ln703_fu_1271_p1;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dy_Addr_A_orig <= zext_ln96_3_fu_1191_p1;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dy_Addr_A_orig <= zext_ln96_2_fu_1175_p1;
        else 
            dy_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dy_Clk_A <= ap_clk;
    dy_Din_A <= ap_const_lv16_0;

    dy_EN_A_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            dy_EN_A <= ap_const_logic_1;
        else 
            dy_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dy_Rst_A <= ap_rst_n_inv;
    dy_WEN_A <= ap_const_lv2_0;
    empty_42_fu_926_p2 <= "1" when (signed(indvars_iv30_reg_563) > signed(xor_ln49_reg_1841)) else "0";
    empty_43_fu_938_p2 <= std_logic_vector(unsigned(indvars_iv28_reg_575) - unsigned(smax32_fu_931_p3));
    empty_45_fu_1429_p2 <= std_logic_vector(unsigned(empty_44_reg_2188) + unsigned(shl_ln_reg_1875));
    empty_46_fu_1441_p2 <= std_logic_vector(unsigned(tmp_3_fu_1433_p3) + unsigned(wt_read_reg_1776));
    empty_50_fu_1039_p2 <= std_logic_vector(unsigned(empty_49_reg_1915) + unsigned(shl_ln_reg_1875));
    empty_51_fu_1051_p2 <= std_logic_vector(unsigned(tmp_2_fu_1043_p3) + unsigned(dwt_read_reg_1770));
    empty_56_fu_1315_p2 <= std_logic_vector(unsigned(empty_55_reg_2123) + unsigned(shl_ln_reg_1875));
    empty_57_fu_1327_p2 <= std_logic_vector(unsigned(tmp_4_fu_1319_p3) + unsigned(dwt_read_reg_1770));

    gmem2_AWADDR_assign_proc : process(ap_enable_reg_pp8_iter1, gmem2_addr_reg_2354, gmem2_addr_1_reg_2365_pp8_iter1_reg, ap_condition_2708, ap_condition_2712)
    begin
        if ((ap_enable_reg_pp8_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_2712)) then 
                gmem2_AWADDR <= gmem2_addr_1_reg_2365_pp8_iter1_reg;
            elsif ((ap_const_boolean_1 = ap_condition_2708)) then 
                gmem2_AWADDR <= gmem2_addr_reg_2354;
            else 
                gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_AWVALID_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, icmp_ln119_1_reg_2345, ap_CS_fsm_pp8_stage1, icmp_ln119_1_reg_2345_pp8_iter1_reg, ap_block_pp8_stage0_11001, ap_block_pp8_stage1_11001)
    begin
        if ((((icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1)) or ((icmp_ln119_1_reg_2345 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)))) then 
            gmem2_AWVALID <= ap_const_logic_1;
        else 
            gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_BREADY_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_CS_fsm_pp8_stage1, ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter3_reg, icmp_ln119_1_reg_2345_pp8_iter4_reg, ap_block_pp8_stage0_11001, ap_block_pp8_stage1_11001)
    begin
        if ((((icmp_ln119_1_reg_2345_pp8_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1)) or ((icmp_ln119_1_reg_2345_pp8_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)))) then 
            gmem2_BREADY <= ap_const_logic_1;
        else 
            gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_WDATA_assign_proc : process(icmp_ln119_1_reg_2345_pp8_iter1_reg, reg_772, dx_load_reg_2371, ap_condition_1681, ap_condition_1693)
    begin
        if ((icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1693)) then 
                gmem2_WDATA <= dx_load_reg_2371;
            elsif ((ap_const_boolean_1 = ap_condition_1681)) then 
                gmem2_WDATA <= reg_772;
            else 
                gmem2_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem2_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_WVALID_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_CS_fsm_pp8_stage1, icmp_ln119_1_reg_2345_pp8_iter1_reg, ap_enable_reg_pp8_iter2, ap_block_pp8_stage0_11001, ap_block_pp8_stage1_11001)
    begin
        if ((((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1)))) then 
            gmem2_WVALID <= ap_const_logic_1;
        else 
            gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, icmp_ln119_1_reg_2345, ap_CS_fsm_pp8_stage1, ap_block_pp8_stage1, icmp_ln119_1_reg_2345_pp8_iter1_reg)
    begin
        if ((((icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1)) or ((icmp_ln119_1_reg_2345 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)))) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0, ap_CS_fsm_pp8_stage1, ap_block_pp8_stage1, ap_enable_reg_pp8_iter4, icmp_ln119_1_reg_2345_pp8_iter3_reg, icmp_ln119_1_reg_2345_pp8_iter4_reg)
    begin
        if ((((icmp_ln119_1_reg_2345_pp8_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1)) or ((icmp_ln119_1_reg_2345_pp8_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)))) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_W_assign_proc : process(m_axi_gmem2_WREADY, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, ap_CS_fsm_pp8_stage1, ap_block_pp8_stage1, icmp_ln119_1_reg_2345_pp8_iter1_reg, ap_enable_reg_pp8_iter2)
    begin
        if ((((ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((icmp_ln119_1_reg_2345_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1)))) then 
            gmem2_blk_n_W <= m_axi_gmem2_WREADY;
        else 
            gmem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln43_reg_1786, ap_CS_fsm_state67, ap_CS_fsm_state18, gmem_ARREADY, gmem_addr_1_reg_1920, gmem_addr_2_reg_2193, sext_ln43_fu_860_p1, ap_block_state2_io)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67))) then 
            gmem_ARADDR <= gmem_addr_2_reg_2193;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            gmem_ARADDR <= gmem_addr_1_reg_1920;
        elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln43_reg_1786 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARADDR <= sext_ln43_fu_860_p1;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, icmp_ln43_reg_1786, ap_CS_fsm_state67, ap_CS_fsm_state18, gmem_ARREADY, ydim_read_reg_1720, xdim_read_reg_1733, ap_block_state2_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67)))) then 
            gmem_ARLEN <= xdim_read_reg_1733;
        elsif (((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln43_reg_1786 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= ydim_read_reg_1720;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln43_reg_1786, ap_CS_fsm_state67, ap_CS_fsm_state18, gmem_ARREADY, ap_block_state2_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state67)) or ((ap_const_boolean_0 = ap_block_state2_io) and (icmp_ln43_reg_1786 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state51, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state59, cmp36319_reg_1825, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (cmp36319_reg_1825 = ap_const_lv1_1))) and (cmp36319_reg_1825 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln43_1_reg_1811, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, icmp_ln70_reg_2219, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln91_reg_1946, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp6_stage0_11001)
    begin
        if ((((icmp_ln91_reg_1946 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln70_reg_2219 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((icmp_ln43_1_reg_1811 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln108_reg_2149_pp4_iter1_reg, ap_block_pp4_stage0_11001)
    begin
        if (((icmp_ln108_reg_2149_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, icmp_ln43_reg_1786, ap_CS_fsm_state67, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state67) or ((icmp_ln43_reg_1786 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state59, cmp36319_reg_1825)
    begin
        if (((cmp36319_reg_1825 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln43_1_reg_1811, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln70_reg_2219, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln91_reg_1946)
    begin
        if ((((icmp_ln91_reg_1946 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln70_reg_2219 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((icmp_ln43_1_reg_1811 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, icmp_ln108_reg_2149_pp4_iter1_reg)
    begin
        if (((icmp_ln108_reg_2149_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1026_p0 <= i_3_reg_598(31 - 1 downto 0);
    grp_fu_1034_p0 <= grp_fu_1034_p00(64 - 1 downto 0);
    grp_fu_1034_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast9_reg_1866),96));
    grp_fu_1034_p1 <= zext_ln96_reg_1852(32 - 1 downto 0);
    grp_fu_1298_p0 <= i_8_reg_666(31 - 1 downto 0);
    grp_fu_1424_p0 <= i_4_reg_700(31 - 1 downto 0);
    grp_fu_1657_p0 <= grp_fu_1657_p00(5 - 1 downto 0);
    grp_fu_1657_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln92_reg_1926),15));
    grp_fu_1657_p1 <= ap_const_lv15_3E8(11 - 1 downto 0);
    grp_fu_1663_p0 <= grp_fu_1663_p00(10 - 1 downto 0);
    grp_fu_1663_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln96_2_fu_1149_p3),15));
    grp_fu_1663_p1 <= ap_const_lv15_3E8(11 - 1 downto 0);
    grp_fu_1671_p2 <= (reg_777 & ap_const_lv13_0);
    grp_fu_1680_p2 <= (dx_Dout_A & ap_const_lv13_0);

    grp_fu_1689_ce_assign_proc : process(ap_CS_fsm_state51, gmem_AWREADY, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)))) then 
            grp_fu_1689_ce <= ap_const_logic_1;
        else 
            grp_fu_1689_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1689_p0 <= grp_fu_1689_p00(5 - 1 downto 0);
    grp_fu_1689_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln109_fu_1352_p1),15));
    grp_fu_1689_p1 <= ap_const_lv15_3E8(11 - 1 downto 0);
    grp_fu_1695_p0 <= grp_fu_1695_p00(5 - 1 downto 0);
    grp_fu_1695_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln71_reg_2199),15));
    grp_fu_1695_p1 <= ap_const_lv15_3E8(11 - 1 downto 0);
    grp_fu_1701_p0 <= grp_fu_1701_p00(10 - 1 downto 0);
    grp_fu_1701_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln78_fu_1512_p1),15));
    grp_fu_1701_p1 <= ap_const_lv15_3E8(11 - 1 downto 0);
    grp_fu_1707_p2 <= (ap_phi_mux_rhs_phi_fu_749_p4 & ap_const_lv13_0);
    grp_fu_767_p2 <= "1" when (signed(ub_reg_1888) > signed(ap_const_lv32_0)) else "0";
    i_7_cast_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_655),32));
    icmp_ln103_fu_1262_p2 <= "1" when (i_7_cast_fu_1258_p1 = ydim_read_reg_1720) else "0";
    icmp_ln107_fu_1289_p2 <= "1" when (i_8_reg_666 = p_cast9_reg_1866) else "0";
    icmp_ln108_fu_1370_p2 <= "1" when (j_4_cast_fu_1366_p1 = xdim_read_reg_1733) else "0";
    icmp_ln119_1_fu_1624_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_760_p4 = trunc_ln119_reg_2325) else "0";
    icmp_ln119_fu_1584_p2 <= "1" when (signed(mul156_reg_2315) > signed(ap_const_lv32_0)) else "0";
    icmp_ln43_1_fu_880_p2 <= "1" when (i_reg_552 = trunc_ln43_reg_1801) else "0";
    icmp_ln43_fu_798_p0 <= ydim;
    icmp_ln43_fu_798_p2 <= "1" when (signed(icmp_ln43_fu_798_p0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln49_fu_915_p2 <= "1" when (k_reg_587 = sext_ln49_reg_1836) else "0";
    icmp_ln53_fu_989_p2 <= "1" when (signed(add_ln53_fu_983_p2) > signed(ydim_read_reg_1720)) else "0";
    icmp_ln65_fu_1395_p2 <= "1" when (i_1_reg_689 = xdim_read_reg_1733) else "0";
    icmp_ln69_1_fu_1415_p2 <= "1" when (i_4_reg_700 = p_cast9_reg_1866) else "0";
    icmp_ln70_fu_1483_p2 <= "1" when (j_2_cast_fu_1479_p1 = xdim_read_reg_1733) else "0";
    icmp_ln76_fu_1507_p2 <= "1" when (i_6_reg_723 = p_cast9_reg_1866) else "0";
    icmp_ln80_fu_1536_p2 <= "1" when (j_3_reg_734 = xdim_read_reg_1733) else "0";
    icmp_ln90_1_fu_1017_p2 <= "1" when (i_3_reg_598 = p_cast9_reg_1866) else "0";
    icmp_ln91_fu_1093_p2 <= "1" when (j_cast_fu_1089_p1 = xdim_read_reg_1733) else "0";
    icmp_ln96_fu_1117_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_625_p4 = mul_ln96_reg_1960) else "0";
    icmp_ln97_fu_1128_p2 <= "1" when (ap_phi_mux_j_1_phi_fu_648_p4 = xdim_read_reg_1733) else "0";
    indvars_iv_next29_fu_1309_p2 <= std_logic_vector(unsigned(indvars_iv28_reg_575) + unsigned(ap_const_lv32_FFFFFFE0));
    indvars_iv_next31_fu_1303_p2 <= std_logic_vector(unsigned(indvars_iv30_reg_563) + unsigned(ap_const_lv32_FFFFFFE0));
    j_2_cast_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_712),32));
    j_4_cast_fu_1366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_678),32));
    j_cast_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_610),32));
    mul_ln53_fu_952_p0 <= k_reg_587(26 - 1 downto 0);
    num_iters_fu_845_p2 <= std_logic_vector(signed(sext_ln41_fu_841_p1) + signed(ap_const_lv29_1));
        p_cast9_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_43_fu_938_p2),64));

    select_ln41_fu_833_p3 <= 
        sub_ln41_1_fu_814_p2 when (tmp_fu_804_p3(0) = '1') else 
        zext_ln41_1_fu_829_p1;
    select_ln96_2_fu_1149_p3 <= 
        trunc_ln96_fu_1141_p1 when (icmp_ln97_fu_1128_p2(0) = '1') else 
        trunc_ln96_1_fu_1145_p1;
    select_ln96_3_fu_1180_p3 <= 
        add_ln96_reg_1974 when (icmp_ln97_reg_1979(0) = '1') else 
        i_5_reg_632;
    select_ln96_fu_1133_p3 <= 
        ap_const_lv32_0 when (icmp_ln97_fu_1128_p2(0) = '1') else 
        ap_phi_mux_j_1_phi_fu_648_p4;
        sext_ln108_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_1332_p4),32));

        sext_ln119_1_fu_1614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln119_1_fu_1605_p4),32));

        sext_ln119_fu_1601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_1592_p4),32));

        sext_ln41_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln41_fu_833_p3),29));

        sext_ln43_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_851_p4),32));

        sext_ln49_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_iters_reg_1790),32));

        sext_ln70_fu_1456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_1446_p4),32));

        sext_ln91_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_1056_p4),32));

    shl_ln53_fu_965_p2 <= std_logic_vector(shift_left(unsigned(k_reg_587),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    shl_ln_fu_957_p3 <= (mul_ln53_fu_952_p2 & ap_const_lv5_0);
    smax32_fu_931_p3 <= 
        indvars_iv30_reg_563 when (empty_42_fu_926_p2(0) = '1') else 
        xor_ln49_reg_1841;
    sub_ln41_1_fu_814_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln41_fu_811_p1));
    sub_ln41_fu_782_p1 <= ydim;
    sub_ln41_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln41_fu_782_p1));
    sub_ln53_fu_994_p2 <= std_logic_vector(signed(ydim_read_reg_1720) - signed(shl_ln53_fu_965_p2));
    tmp_2_fu_1043_p3 <= (empty_50_fu_1039_p2 & ap_const_lv1_0);
    tmp_3_fu_1433_p3 <= (empty_45_fu_1429_p2 & ap_const_lv1_0);
    tmp_4_fu_1319_p3 <= (empty_56_fu_1315_p2 & ap_const_lv1_0);
    tmp_fu_804_p3 <= ydim_read_reg_1720(31 downto 31);
    trunc_ln109_1_fu_1375_p1 <= j_4_reg_678(15 - 1 downto 0);
    trunc_ln109_fu_1352_p1 <= i_8_reg_666(5 - 1 downto 0);
    trunc_ln1116_fu_1541_p1 <= j_3_reg_734(15 - 1 downto 0);
    trunc_ln1118_fu_1161_p1 <= select_ln96_fu_1133_p3(15 - 1 downto 0);
    trunc_ln119_1_fu_1605_p4 <= debug_dx_read_reg_1755(31 downto 1);
    trunc_ln119_fu_1589_p1 <= mul156_reg_2315(31 - 1 downto 0);
    trunc_ln1_fu_851_p4 <= b_read_reg_1765(31 downto 1);
    trunc_ln2_fu_1446_p4 <= empty_46_fu_1441_p2(31 downto 1);
    trunc_ln3_fu_1332_p4 <= empty_57_fu_1327_p2(31 downto 1);
    trunc_ln41_2_fu_820_p4 <= ydim_read_reg_1720(31 downto 5);
    trunc_ln43_fu_871_p1 <= ydim_read_reg_1720(31 - 1 downto 0);
    trunc_ln44_fu_885_p1 <= i_reg_552(10 - 1 downto 0);
    trunc_ln49_1_fu_909_p1 <= xdim_read_reg_1733(26 - 1 downto 0);
    trunc_ln49_fu_898_p1 <= xdim_read_reg_1733(31 - 1 downto 0);
    trunc_ln4_fu_1592_p4 <= debug_x_read_reg_1760(31 downto 1);
    trunc_ln53_1_fu_971_p1 <= k_reg_587(5 - 1 downto 0);
    trunc_ln53_2_fu_975_p3 <= (trunc_ln53_1_fu_971_p1 & ap_const_lv5_0);
    trunc_ln66_fu_1400_p1 <= i_1_reg_689(10 - 1 downto 0);
    trunc_ln703_fu_1267_p1 <= i_7_reg_655(10 - 1 downto 0);
    trunc_ln71_1_fu_1488_p1 <= j_2_reg_712(15 - 1 downto 0);
    trunc_ln71_fu_1466_p1 <= i_4_reg_700(5 - 1 downto 0);
    trunc_ln78_fu_1512_p1 <= i_6_reg_723(10 - 1 downto 0);
    trunc_ln7_fu_1056_p4 <= empty_51_fu_1051_p2(31 downto 1);
    trunc_ln92_1_fu_1098_p1 <= j_reg_610(15 - 1 downto 0);
    trunc_ln92_fu_1076_p1 <= i_3_reg_598(5 - 1 downto 0);
    trunc_ln96_1_fu_1145_p1 <= ap_phi_mux_i_5_phi_fu_636_p4(10 - 1 downto 0);
    trunc_ln96_fu_1141_p1 <= add_ln96_fu_1122_p2(10 - 1 downto 0);
    ub_fu_999_p3 <= 
        sub_ln53_fu_994_p2 when (icmp_ln53_fu_989_p2(0) = '1') else 
        ap_const_lv32_20;

    wbuf_V_address0_assign_proc : process(ap_block_pp6_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp6_iter2, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, ap_block_pp2_stage1, zext_ln1118_1_fu_1199_p1, zext_ln71_1_fu_1497_p1, zext_ln1116_1_fu_1555_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1))) then 
            wbuf_V_address0 <= zext_ln1116_1_fu_1555_p1(15 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            wbuf_V_address0 <= zext_ln71_1_fu_1497_p1(15 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            wbuf_V_address0 <= zext_ln1118_1_fu_1199_p1(15 - 1 downto 0);
        else 
            wbuf_V_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    wbuf_V_ce0_assign_proc : process(ap_enable_reg_pp2_iter1, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_block_pp6_stage0_11001, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp6_iter2, ap_enable_reg_pp7_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)))) then 
            wbuf_V_ce0 <= ap_const_logic_1;
        else 
            wbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wbuf_V_we0_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln70_reg_2219_pp6_iter1_reg, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln70_reg_2219_pp6_iter1_reg = ap_const_lv1_0))) then 
            wbuf_V_we0 <= ap_const_logic_1;
        else 
            wbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_Addr_A <= std_logic_vector(shift_left(unsigned(x_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    x_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_enable_reg_pp8_iter0, ap_block_pp2_stage0, ap_block_pp7_stage0, zext_ln1118_fu_1165_p1, zext_ln1116_fu_1545_p1, zext_ln120_fu_1629_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1))) then 
            x_Addr_A_orig <= zext_ln120_fu_1629_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then 
            x_Addr_A_orig <= zext_ln1116_fu_1545_p1;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_Addr_A_orig <= zext_ln1118_fu_1165_p1;
        else 
            x_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x_Clk_A <= ap_clk;
    x_Din_A <= ap_const_lv16_0;

    x_EN_A_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_CS_fsm_pp8_stage1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_block_pp8_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_block_pp7_stage0_11001, ap_enable_reg_pp8_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2, ap_block_pp8_stage1_11001)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0)) or ((ap_const_boolean_0 = ap_block_pp8_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)))) then 
            x_EN_A <= ap_const_logic_1;
        else 
            x_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    x_Rst_A <= ap_rst_n_inv;
    x_WEN_A <= ap_const_lv2_0;
    xor_ln49_fu_904_p2 <= (ydim_read_reg_1720 xor ap_const_lv32_FFFFFFFF);
    y_Addr_A <= std_logic_vector(shift_left(unsigned(y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    y_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_addr_reg_2256),32));
    y_Clk_A <= ap_clk;
    y_Din_A <= rhs_reg_745;

    y_EN_A_assign_proc : process(ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1))) then 
            y_EN_A <= ap_const_logic_1;
        else 
            y_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    y_Rst_A <= ap_rst_n_inv;

    y_WEN_A_assign_proc : process(ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter5 = ap_const_logic_1))) then 
            y_WEN_A <= ap_const_lv2_3;
        else 
            y_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    zext_ln109_1_fu_1384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_fu_1379_p2),32));
    zext_ln1116_1_fu_1555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_reg_2280),32));
    zext_ln1116_fu_1545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1116_fu_1541_p1),32));
    zext_ln1118_1_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1663_p3),32));
    zext_ln1118_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1118_fu_1161_p1),32));
    zext_ln120_fu_1629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_2_phi_fu_760_p4),32));
    zext_ln41_1_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln41_2_fu_820_p4),28));
    zext_ln41_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln41_1_reg_1781),28));
    zext_ln44_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_reg_1815_pp0_iter1_reg),32));
    zext_ln66_fu_1404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln66_fu_1400_p1),32));
    zext_ln703_fu_1271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_fu_1267_p1),32));
    zext_ln71_1_fu_1497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_reg_2223_pp6_iter1_reg),32));
    zext_ln78_1_fu_1524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_fu_1520_p2),32));
    zext_ln92_1_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_reg_1950_pp1_iter1_reg),32));
    zext_ln96_2_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_1_fu_1171_p2),32));
    zext_ln96_3_fu_1191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln96_2_reg_1989),32));
    zext_ln96_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xdim_read_reg_1733),96));
end behav;
