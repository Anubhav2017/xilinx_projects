-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fcc_combined is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    x_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_EN_A : OUT STD_LOGIC;
    x_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    x_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    x_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    x_Clk_A : OUT STD_LOGIC;
    x_Rst_A : OUT STD_LOGIC;
    dx_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dx_EN_A : OUT STD_LOGIC;
    dx_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dx_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dx_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dx_Clk_A : OUT STD_LOGIC;
    dx_Rst_A : OUT STD_LOGIC;
    y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_EN_A : OUT STD_LOGIC;
    y_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    y_Clk_A : OUT STD_LOGIC;
    y_Rst_A : OUT STD_LOGIC;
    dy_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dy_EN_A : OUT STD_LOGIC;
    dy_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dy_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dy_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dy_Clk_A : OUT STD_LOGIC;
    dy_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fcc_combined is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=134,HLS_SYN_DSP=0,HLS_SYN_FF=5831,HLS_SYN_LUT=5386,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (66 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (66 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (66 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (66 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (66 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (66 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (66 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage1 : STD_LOGIC_VECTOR (66 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (66 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_32 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000110010";
    constant ap_const_lv38_32 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000110010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (66 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal wt : STD_LOGIC_VECTOR (31 downto 0);
    signal dwt : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal db : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_x : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_dx : STD_LOGIC_VECTOR (31 downto 0);
    signal debugip : STD_LOGIC;
    signal xdim : STD_LOGIC_VECTOR (31 downto 0);
    signal ydim : STD_LOGIC_VECTOR (31 downto 0);
    signal fwprop : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln43_reg_1697 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln43_1_reg_1722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln66_reg_2095 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln87_reg_1870 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln104_reg_2052 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_2052_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal cmp37257_reg_1744 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal icmp_ln115_1_reg_2216 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp7_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage1 : signal is "none";
    signal ap_block_pp7_stage1 : BOOLEAN;
    signal icmp_ln115_1_reg_2216_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp7_iter4 : STD_LOGIC := '0';
    signal icmp_ln115_1_reg_2216_pp7_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal icmp_ln115_1_reg_2216_pp7_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWVALID : STD_LOGIC;
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_WVALID : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BREADY : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_544 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_590 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_601 : STD_LOGIC_VECTOR (62 downto 0);
    signal i_5_reg_612 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_3_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_635 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_4_reg_658 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_681 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_reg_703 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_723 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state36_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln92_reg_1894 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state85_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state87_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state87_io : BOOLEAN;
    signal ap_block_state89_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state89_io : BOOLEAN;
    signal ap_block_state91_pp7_stage0_iter3 : BOOLEAN;
    signal ap_block_state93_pp7_stage0_iter4 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal dwbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_746 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln92_reg_1894_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state52_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state53_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state54_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state54_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal fwprop_read_reg_1608 : STD_LOGIC_VECTOR (0 downto 0);
    signal ydim_read_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal xdim_read_reg_1624 : STD_LOGIC_VECTOR (31 downto 0);
    signal debugip_read_reg_1640 : STD_LOGIC_VECTOR (0 downto 0);
    signal debug_dx_read_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_x_read_reg_1649 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal dwt_read_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal wt_read_reg_1665 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1670 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_762_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln41_reg_1681 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_reg_1686 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln41_1_fu_799_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln41_1_reg_1692 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln43_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_iters_fu_815_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal num_iters_reg_1701 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln43_fu_841_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_reg_1712 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln43_fu_844_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln43_1_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_1_reg_1722_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_fu_855_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_1726 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_1726_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_addr_read_reg_1731 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln49_fu_863_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln49_reg_1736 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal cmp37257_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sext_ln49_fu_877_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln49_reg_1748 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln49_1_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln49_1_reg_1753 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_866_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln53_reg_1758 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln92_fu_883_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln92_reg_1763 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln53_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_reg_1768 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln49_fu_892_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln49_reg_1774 : STD_LOGIC_VECTOR (37 downto 0);
    signal icmp_ln49_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_907_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln53_1_reg_1787 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_919_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln53_2_reg_1799 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln54_fu_933_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln54_reg_1804 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ub_fu_946_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ub_reg_1810 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp36262_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp36262_reg_1815 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln86_fu_960_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln86_reg_1819 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln65_fu_964_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln65_reg_1825 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln86_fu_968_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln86_reg_1831 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln86_fu_974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_979_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_51_reg_1844 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal gmem_addr_2_reg_1849 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln88_fu_1029_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln88_reg_1855 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_1033_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1860 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln87_fu_1040_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state31_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln87_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1870_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln88_fu_1059_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln88_reg_1874 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln88_reg_1874_pp1_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_2_read_reg_1879 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_987_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln92_reg_1884 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal add_ln92_2_fu_1068_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln92_2_reg_1889 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln92_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_1894_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln92_fu_1079_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln92_reg_1898 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln93_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_1903 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_1092_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln92_reg_1908 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln92_1_fu_1121_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln92_1_reg_1918 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1118_fu_1130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_reg_1923 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_reg_1923_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_reg_1923_pp2_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1118_fu_1135_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1118_reg_1928 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state37_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state39_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state41_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal grp_fu_734_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln92_2_reg_1943 : STD_LOGIC_VECTOR (30 downto 0);
    signal dwbuf_V_addr_1_reg_1953 : STD_LOGIC_VECTOR (15 downto 0);
    signal dwbuf_V_addr_1_reg_1953_pp2_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal dwbuf_V_addr_1_reg_1953_pp2_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln93_fu_1150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_reg_1958 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln99_fu_1199_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state44_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln99_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1993 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln99_reg_1993_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dbbuf_V_addr_reg_1997 : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_addr_reg_1997_pp3_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_load_reg_2008 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal trunc_ln103_fu_1230_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln103_reg_2013 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal add_ln103_fu_1233_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln103_reg_2018 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_1244_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_58_reg_2026 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal gmem_addr_3_reg_2031 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal trunc_ln105_fu_1286_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln105_reg_2037 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_1290_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_2042 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln104_fu_1297_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln104_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln65_fu_1326_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln65_reg_2061 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_1337_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_44_reg_2069 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal gmem_addr_1_reg_2074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal trunc_ln67_fu_1379_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln67_reg_2080 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_1383_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_2085 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal add_ln66_fu_1390_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state70_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state71_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state72_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln66_fu_1400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_2095_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67_fu_1409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_reg_2099 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_reg_2099_pp5_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_1_read_reg_2104 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln72_fu_1418_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln72_reg_2109 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal icmp_ln72_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_addr_reg_2122 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1116_fu_1444_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_reg_2127 : STD_LOGIC_VECTOR (5 downto 0);
    signal bbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal tmp_s_fu_1448_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_2137 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln76_fu_1455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state76_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state77_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state78_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state79_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state80_pp6_stage0_iter4 : BOOLEAN;
    signal ap_block_state81_pp6_stage0_iter5 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln76_fu_1461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2147 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2147_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2147_pp6_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2147_pp6_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2147_pp6_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1116_fu_1475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1116_reg_2151 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp6_iter5 : STD_LOGIC := '0';
    signal grp_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul150_reg_2186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal icmp_ln115_fu_1510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal trunc_ln115_fu_1515_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln115_reg_2196 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln115_fu_1527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln115_reg_2201 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln115_1_fu_1540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln115_1_reg_2206 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln115_fu_1544_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln115_reg_2211 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal icmp_ln115_1_fu_1550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_1_reg_2216_pp7_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_addr_reg_2225 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_1_reg_2236 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_addr_1_reg_2236_pp7_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_load_reg_2242 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state36 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state44 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state52 : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state70 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp6_exit_iter4_state80 : STD_LOGIC;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state85 : STD_LOGIC;
    signal ap_block_state86_pp7_stage1_iter0 : BOOLEAN;
    signal ap_block_state88_pp7_stage1_iter1 : BOOLEAN;
    signal ap_block_state88_io : BOOLEAN;
    signal ap_block_state90_pp7_stage1_iter2 : BOOLEAN;
    signal ap_block_state92_pp7_stage1_iter3 : BOOLEAN;
    signal ap_block_state94_pp7_stage1_iter4 : BOOLEAN;
    signal ap_block_pp7_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp7_iter3 : STD_LOGIC := '0';
    signal wbuf_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal wbuf_V_ce0 : STD_LOGIC;
    signal wbuf_V_we0 : STD_LOGIC;
    signal wbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bbuf_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal bbuf_V_ce0 : STD_LOGIC;
    signal bbuf_V_we0 : STD_LOGIC;
    signal dwbuf_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dwbuf_V_ce0 : STD_LOGIC;
    signal dwbuf_V_we0 : STD_LOGIC;
    signal dwbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_ce0 : STD_LOGIC;
    signal dbbuf_V_we0 : STD_LOGIC;
    signal dbbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_ce1 : STD_LOGIC;
    signal k_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln103_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_566 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_3_reg_578 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_605_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_5_phi_fu_616_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_j_3_phi_fu_628_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_646 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state59 : BOOLEAN;
    signal i_2_reg_669 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal i_4_reg_692 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal icmp_ln65_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_rhs_phi_fu_717_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_727_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln44_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln88_fu_1064_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln92_2_fu_1116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln92_3_fu_1141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln1118_1_fu_1145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_fu_1218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln105_fu_1321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln67_fu_1414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln74_fu_1438_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1116_fu_1470_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1116_1_fu_1480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln116_fu_1555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln43_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln87_fu_1019_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln104_fu_1276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln66_fu_1369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln116_fu_1561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln117_fu_1572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_block_pp7_stage1_11001 : BOOLEAN;
    signal ap_block_pp7_stage1_01001 : BOOLEAN;
    signal ap_block_pp7_stage0_01001 : BOOLEAN;
    signal dy_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal x_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_734_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_734_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_734_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_762_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln41_fu_778_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_1_fu_783_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln41_fu_793_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln41_1_fu_810_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln_fu_821_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_866_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_866_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_907_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_919_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_919_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln53_1_fu_925_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln54_1_fu_937_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln53_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_987_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_987_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_52_fu_992_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_53_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_fu_1009_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_cast_fu_1046_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln88_1_fu_1055_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_fu_1104_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln92_fu_1100_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1118_1_fu_1126_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_cast_fu_1108_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1583_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1590_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_6_cast_fu_1205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln703_fu_1214_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_59_fu_1249_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_1253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_60_fu_1261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_1266_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_4_cast_fu_1303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_1_fu_1312_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln105_fu_1316_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_45_fu_1342_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_1346_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_46_fu_1354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln7_fu_1359_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_cast_fu_1396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln67_1_fu_1405_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln72_fu_1429_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln74_fu_1433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1116_1_fu_1466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1599_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal trunc_ln4_fu_1518_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln115_1_fu_1531_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1590_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1599_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (66 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal grp_fu_919_p00 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_987_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_condition_2547 : BOOLEAN;
    signal ap_condition_2551 : BOOLEAN;
    signal ap_condition_1628 : BOOLEAN;
    signal ap_condition_1640 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fcc_combined_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component fcc_combined_mul_31s_7ns_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fcc_combined_mul_31s_31s_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fcc_combined_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fcc_combined_mul_32ns_7ns_38_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component fcc_combined_mul_31ns_32ns_63_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component fcc_combined_mul_mul_16s_16s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component fcc_combined_wbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_bbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_dbbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        wt : OUT STD_LOGIC_VECTOR (31 downto 0);
        dwt : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        db : OUT STD_LOGIC_VECTOR (31 downto 0);
        debug_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        debug_dx : OUT STD_LOGIC_VECTOR (31 downto 0);
        debugip : OUT STD_LOGIC;
        xdim : OUT STD_LOGIC_VECTOR (31 downto 0);
        ydim : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwprop : OUT STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fcc_combined_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fcc_combined_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component fcc_combined_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        wt => wt,
        dwt => dwt,
        b => b,
        db => db,
        debug_x => debug_x,
        debug_dx => debug_dx,
        debugip => debugip,
        xdim => xdim,
        ydim => ydim,
        fwprop => fwprop,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component fcc_combined_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_3_reg_2031,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => xdim_read_reg_1624,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => reg_746,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    gmem2_m_axi_U : component fcc_combined_gmem2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => gmem2_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => gmem2_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem2_BVALID,
        I_BREADY => gmem2_BREADY,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    wbuf_V_U : component fcc_combined_wbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 51200,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wbuf_V_address0,
        ce0 => wbuf_V_ce0,
        we0 => wbuf_V_we0,
        d0 => gmem_addr_1_read_reg_2104,
        q0 => wbuf_V_q0);

    bbuf_V_U : component fcc_combined_bbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bbuf_V_address0,
        ce0 => bbuf_V_ce0,
        we0 => bbuf_V_we0,
        d0 => gmem_addr_read_reg_1731,
        q0 => bbuf_V_q0);

    dwbuf_V_U : component fcc_combined_wbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 51200,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dwbuf_V_address0,
        ce0 => dwbuf_V_ce0,
        we0 => dwbuf_V_we0,
        d0 => dwbuf_V_d0,
        q0 => dwbuf_V_q0);

    dbbuf_V_U : component fcc_combined_dbbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dbbuf_V_addr_reg_1997_pp3_iter1_reg,
        ce0 => dbbuf_V_ce0,
        we0 => dbbuf_V_we0,
        d0 => dbbuf_V_d0,
        address1 => dbbuf_V_address1,
        ce1 => dbbuf_V_ce1,
        q1 => dbbuf_V_q1);

    mul_32s_34ns_65_2_1_U1 : component fcc_combined_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ydim_read_reg_1612,
        din1 => grp_fu_762_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_762_p2);

    mul_31s_7ns_31_2_1_U2 : component fcc_combined_mul_31s_7ns_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 7,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_866_p0,
        din1 => grp_fu_866_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_866_p2);

    mul_31s_31s_31_2_1_U3 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_ln53_reg_1758,
        din1 => grp_fu_907_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_907_p2);

    mul_32s_32s_32_2_1_U4 : component fcc_combined_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ydim_read_reg_1612,
        din1 => xdim_read_reg_1624,
        ce => ap_const_logic_1,
        dout => grp_fu_912_p2);

    mul_32ns_7ns_38_2_1_U5 : component fcc_combined_mul_32ns_7ns_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_919_p0,
        din1 => grp_fu_919_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_919_p2);

    mul_31s_31s_31_2_1_U6 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_3_reg_578,
        din1 => trunc_ln49_reg_1736,
        ce => ap_const_logic_1,
        dout => grp_fu_979_p2);

    mul_31ns_32ns_63_2_1_U7 : component fcc_combined_mul_31ns_32ns_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_987_p0,
        din1 => grp_fu_987_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_987_p2);

    mul_31s_31s_31_2_1_U8 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_7_reg_646,
        din1 => trunc_ln49_reg_1736,
        ce => ap_const_logic_1,
        dout => grp_fu_1244_p2);

    mul_31s_31s_31_2_1_U9 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_2_reg_669,
        din1 => trunc_ln49_reg_1736,
        ce => ap_const_logic_1,
        dout => grp_fu_1337_p2);

    mul_mul_16s_16s_29_4_1_U10 : component fcc_combined_mul_mul_16s_16s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => wbuf_V_q0,
        din1 => dy_Dout_A,
        ce => ap_const_logic_1,
        dout => grp_fu_1583_p2);

    mac_muladd_16s_16s_29ns_29_4_1_U11 : component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_741,
        din1 => dy_Dout_A,
        din2 => grp_fu_1590_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1590_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U12 : component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_Dout_A,
        din1 => wbuf_V_q0,
        din2 => grp_fu_1599_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1599_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state31))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state31)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state44)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state44);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state52))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state52)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state52);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state70))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state70)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state70);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp6_flush_enable)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter4_state80) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter4_state80))) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter3;
                elsif ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state85))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state84) and (icmp_ln115_fu_1510_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1))) then 
                    ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1))) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1))) then 
                    ap_enable_reg_pp7_iter3 <= ap_enable_reg_pp7_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1))) then 
                    ap_enable_reg_pp7_iter4 <= ap_enable_reg_pp7_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state84) and (icmp_ln115_fu_1510_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp7_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) and (icmp_ln115_fu_1510_p2 = ap_const_lv1_1))) then 
                i_1_reg_723 <= ap_const_lv31_0;
            elsif (((icmp_ln115_1_reg_2216 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                i_1_reg_723 <= add_ln115_reg_2211;
            end if; 
        end if;
    end process;

    i_2_reg_669_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36262_fu_954_p2 = ap_const_lv1_1) and (fwprop_read_reg_1608 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_2_reg_669 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                i_2_reg_669 <= add_ln65_reg_2061;
            end if; 
        end if;
    end process;

    i_3_reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36262_fu_954_p2 = ap_const_lv1_1) and (fwprop_read_reg_1608 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_3_reg_578 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i_3_reg_578 <= add_ln86_reg_1831;
            end if; 
        end if;
    end process;

    i_4_reg_692_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) and (icmp_ln65_fu_1332_p2 = ap_const_lv1_1))) then 
                i_4_reg_692 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                i_4_reg_692 <= add_ln72_reg_2109;
            end if; 
        end if;
    end process;

    i_5_reg_612_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_5_reg_612 <= select_ln92_2_reg_1943;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_5_reg_612 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_6_reg_635_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_1209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_6_reg_635 <= add_ln99_fu_1199_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_6_reg_635 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_7_reg_646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36262_reg_1815 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                i_7_reg_646 <= ap_const_lv31_0;
            elsif ((not(((gmem_BVALID = ap_const_logic_0) and (cmp37257_reg_1744 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
                i_7_reg_646 <= add_ln103_reg_2018;
            end if; 
        end if;
    end process;

    i_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_544 <= ap_const_lv31_0;
            elsif (((icmp_ln43_1_fu_850_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_544 <= add_ln43_fu_844_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_601 <= add_ln92_2_reg_1889;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                indvar_flatten_reg_601 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    j_1_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_1_reg_590 <= ap_const_lv31_0;
            elsif (((icmp_ln87_fu_1050_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_1_reg_590 <= add_ln87_fu_1040_p2;
            end if; 
        end if;
    end process;

    j_2_reg_703_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln76_fu_1461_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then 
                j_2_reg_703 <= add_ln76_fu_1455_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                j_2_reg_703 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_3_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_3_reg_624 <= add_ln93_reg_1958;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                j_3_reg_624 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_4_reg_658_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
                j_4_reg_658 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln104_fu_1307_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
                j_4_reg_658 <= add_ln104_fu_1297_p2;
            end if; 
        end if;
    end process;

    j_reg_681_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
                j_reg_681 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln66_fu_1400_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then 
                j_reg_681 <= add_ln66_fu_1390_p2;
            end if; 
        end if;
    end process;

    k_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and ((fwprop_read_reg_1608 = ap_const_lv1_1) or ((cmp36262_reg_1815 = ap_const_lv1_0) or (icmp_ln103_fu_1239_p2 = ap_const_lv1_1))))) then 
                k_reg_555 <= add_ln53_reg_1768;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                k_reg_555 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) and ((fwprop_read_reg_1608 = ap_const_lv1_1) or ((cmp36262_reg_1815 = ap_const_lv1_0) or (icmp_ln103_fu_1239_p2 = ap_const_lv1_1))))) then 
                phi_mul_reg_566 <= add_ln49_reg_1774;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_mul_reg_566 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    rhs_reg_714_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (icmp_ln76_reg_2147_pp6_iter4_reg = ap_const_lv1_0))) then 
                rhs_reg_714 <= grp_fu_1599_p3(28 downto 13);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                rhs_reg_714 <= bbuf_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36262_reg_1815 = ap_const_lv1_1) and (fwprop_read_reg_1608 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                add_ln103_reg_2018 <= add_ln103_fu_1233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln76_fu_1461_p2 = ap_const_lv1_0))) then
                add_ln1116_reg_2151 <= add_ln1116_fu_1475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_fu_1074_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln1118_reg_1928 <= add_ln1118_fu_1135_p2;
                add_ln92_1_reg_1918 <= add_ln92_1_fu_1121_p2;
                add_ln92_reg_1898 <= add_ln92_fu_1079_p2;
                icmp_ln93_reg_1903 <= icmp_ln93_fu_1086_p2;
                select_ln92_reg_1908 <= select_ln92_fu_1092_p3;
                    zext_ln1118_reg_1923(15 downto 0) <= zext_ln1118_fu_1130_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then
                add_ln115_reg_2211 <= add_ln115_fu_1544_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln49_reg_1774 <= add_ln49_fu_892_p2;
                add_ln53_reg_1768 <= add_ln53_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                add_ln65_reg_2061 <= add_ln65_fu_1326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln66_fu_1400_p2 = ap_const_lv1_0))) then
                add_ln67_reg_2099 <= add_ln67_fu_1409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln67_reg_2099_pp5_iter1_reg <= add_ln67_reg_2099;
                icmp_ln66_reg_2095 <= icmp_ln66_fu_1400_p2;
                icmp_ln66_reg_2095_pp5_iter1_reg <= icmp_ln66_reg_2095;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                add_ln72_reg_2109 <= add_ln72_fu_1418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln86_reg_1831 <= add_ln86_fu_968_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_1050_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln88_reg_1874 <= add_ln88_fu_1059_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln88_reg_1874_pp1_iter1_reg <= add_ln88_reg_1874;
                icmp_ln87_reg_1870 <= icmp_ln87_fu_1050_p2;
                icmp_ln87_reg_1870_pp1_iter1_reg <= icmp_ln87_reg_1870;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln92_2_reg_1889 <= add_ln92_2_fu_1068_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln93_reg_1958 <= add_ln93_fu_1150_p2;
                select_ln92_2_reg_1943 <= grp_fu_734_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                b_read_reg_1654 <= b;
                debug_dx_read_reg_1644 <= debug_dx;
                debug_x_read_reg_1649 <= debug_x;
                debugip_read_reg_1640 <= (0=>debugip, others=>'-');
                dwt_read_reg_1659 <= dwt;
                fwprop_read_reg_1608 <= (0=>fwprop, others=>'-');
                tmp_reg_1670 <= tmp_fu_751_p1(31 downto 31);
                wt_read_reg_1665 <= wt;
                xdim_read_reg_1624 <= xdim;
                ydim_read_reg_1612 <= ydim;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                cmp36262_reg_1815 <= cmp36262_fu_954_p2;
                trunc_ln54_reg_1804 <= trunc_ln54_fu_933_p1;
                ub_reg_1810 <= ub_fu_946_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                cmp37257_reg_1744 <= cmp37257_fu_872_p2;
                mul_ln53_reg_1758 <= grp_fu_866_p2;
                sext_ln49_1_reg_1753 <= sext_ln49_1_fu_880_p1;
                sext_ln49_reg_1748 <= sext_ln49_fu_877_p1;
                    zext_ln92_reg_1763(31 downto 0) <= zext_ln92_fu_883_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_fu_1209_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_addr_reg_1997 <= zext_ln703_fu_1218_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_addr_reg_1997_pp3_iter1_reg <= dbbuf_V_addr_reg_1997;
                icmp_ln99_reg_1993 <= icmp_ln99_fu_1209_p2;
                icmp_ln99_reg_1993_pp3_iter1_reg <= icmp_ln99_reg_1993;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln99_reg_1993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1))) then
                dbbuf_V_load_reg_2008 <= dbbuf_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                dwbuf_V_addr_1_reg_1953 <= zext_ln1118_1_fu_1145_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                dwbuf_V_addr_1_reg_1953_pp2_iter1_reg <= dwbuf_V_addr_1_reg_1953;
                dwbuf_V_addr_1_reg_1953_pp2_iter2_reg <= dwbuf_V_addr_1_reg_1953_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_1_reg_2216 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                dx_load_reg_2242 <= dx_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                empty_44_reg_2069 <= grp_fu_1337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                empty_51_reg_1844 <= grp_fu_979_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                empty_58_reg_2026 <= grp_fu_1244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln115_1_fu_1550_p2 = ap_const_lv1_0))) then
                gmem2_addr_1_reg_2236 <= add_ln117_fu_1572_p2;
                gmem2_addr_reg_2225 <= add_ln116_fu_1561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                gmem2_addr_1_reg_2236_pp7_iter1_reg <= gmem2_addr_1_reg_2236;
                icmp_ln115_1_reg_2216 <= icmp_ln115_1_fu_1550_p2;
                icmp_ln115_1_reg_2216_pp7_iter1_reg <= icmp_ln115_1_reg_2216;
                icmp_ln115_1_reg_2216_pp7_iter2_reg <= icmp_ln115_1_reg_2216_pp7_iter1_reg;
                icmp_ln115_1_reg_2216_pp7_iter3_reg <= icmp_ln115_1_reg_2216_pp7_iter2_reg;
                icmp_ln115_1_reg_2216_pp7_iter4_reg <= icmp_ln115_1_reg_2216_pp7_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_reg_2095 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                gmem_addr_1_read_reg_2104 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp37257_reg_1744 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                gmem_addr_1_reg_2074 <= sext_ln66_fu_1369_p1;
                trunc_ln67_reg_2080 <= trunc_ln67_fu_1379_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_1870 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                gmem_addr_2_read_reg_1879 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp37257_reg_1744 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                gmem_addr_2_reg_1849 <= sext_ln87_fu_1019_p1;
                trunc_ln88_reg_1855 <= trunc_ln88_fu_1029_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp37257_reg_1744 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                gmem_addr_3_reg_2031 <= sext_ln104_fu_1276_p1;
                trunc_ln105_reg_2037 <= trunc_ln105_fu_1286_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_1_reg_1722 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_addr_read_reg_1731 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln104_reg_2052 <= icmp_ln104_fu_1307_p2;
                icmp_ln104_reg_2052_pp4_iter1_reg <= icmp_ln104_reg_2052;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln43_1_reg_1722 <= icmp_ln43_1_fu_850_p2;
                icmp_ln43_1_reg_1722_pp0_iter1_reg <= icmp_ln43_1_reg_1722;
                trunc_ln44_reg_1726_pp0_iter1_reg <= trunc_ln44_reg_1726;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln43_reg_1697 <= icmp_ln43_fu_805_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln76_reg_2147 <= icmp_ln76_fu_1461_p2;
                icmp_ln76_reg_2147_pp6_iter1_reg <= icmp_ln76_reg_2147;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                icmp_ln76_reg_2147_pp6_iter2_reg <= icmp_ln76_reg_2147_pp6_iter1_reg;
                icmp_ln76_reg_2147_pp6_iter3_reg <= icmp_ln76_reg_2147_pp6_iter2_reg;
                icmp_ln76_reg_2147_pp6_iter4_reg <= icmp_ln76_reg_2147_pp6_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln92_reg_1894 <= icmp_ln92_fu_1074_p2;
                icmp_ln92_reg_1894_pp2_iter1_reg <= icmp_ln92_reg_1894;
                icmp_ln92_reg_1894_pp2_iter2_reg <= icmp_ln92_reg_1894_pp2_iter1_reg;
                    zext_ln1118_reg_1923_pp2_iter1_reg(15 downto 0) <= zext_ln1118_reg_1923(15 downto 0);
                    zext_ln1118_reg_1923_pp2_iter2_reg(15 downto 0) <= zext_ln1118_reg_1923_pp2_iter1_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                mul150_reg_2186 <= grp_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln41_reg_1681 <= grp_fu_762_p2;
                tmp_2_reg_1686 <= grp_fu_762_p2(64 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mul_ln53_1_reg_1787 <= grp_fu_907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mul_ln53_2_reg_1799 <= grp_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                mul_ln92_reg_1884 <= grp_fu_987_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                num_iters_reg_1701 <= num_iters_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((icmp_ln115_1_reg_2216 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then
                reg_741 <= x_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln104_reg_2052 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((icmp_ln92_reg_1894_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                reg_746 <= dwbuf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state84) and (icmp_ln115_fu_1510_p2 = ap_const_lv1_1))) then
                sext_ln115_1_reg_2206 <= sext_ln115_1_fu_1540_p1;
                sext_ln115_reg_2201 <= sext_ln115_fu_1527_p1;
                trunc_ln115_reg_2196 <= trunc_ln115_fu_1515_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1670 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sub_ln41_1_reg_1692 <= sub_ln41_1_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                    tmp_6_reg_2042(15 downto 10) <= tmp_6_fu_1290_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                    tmp_7_reg_2085(15 downto 10) <= tmp_7_fu_1383_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    tmp_9_reg_1860(15 downto 10) <= tmp_9_fu_1033_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                    tmp_s_reg_2137(15 downto 10) <= tmp_s_fu_1448_p3(15 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36262_reg_1815 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                trunc_ln103_reg_2013 <= trunc_ln103_fu_1230_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (icmp_ln72_fu_1424_p2 = ap_const_lv1_0))) then
                trunc_ln1116_reg_2127 <= trunc_ln1116_fu_1444_p1;
                y_addr_reg_2122 <= zext_ln74_fu_1438_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln43_reg_1712 <= trunc_ln43_fu_841_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_1_fu_850_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln44_reg_1726 <= trunc_ln44_fu_855_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln49_reg_1736 <= trunc_ln49_fu_863_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36262_fu_954_p2 = ap_const_lv1_1) and (fwprop_read_reg_1608 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                trunc_ln65_reg_1825 <= trunc_ln65_fu_964_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36262_fu_954_p2 = ap_const_lv1_1) and (fwprop_read_reg_1608 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                trunc_ln86_reg_1819 <= trunc_ln86_fu_960_p1;
            end if;
        end if;
    end process;
    zext_ln92_reg_1763(62 downto 32) <= "0000000000000000000000000000000";
    tmp_9_reg_1860(9 downto 0) <= "0000000000";
    zext_ln1118_reg_1923(31 downto 16) <= "0000000000000000";
    zext_ln1118_reg_1923_pp2_iter1_reg(31 downto 16) <= "0000000000000000";
    zext_ln1118_reg_1923_pp2_iter2_reg(31 downto 16) <= "0000000000000000";
    tmp_6_reg_2042(9 downto 0) <= "0000000000";
    tmp_7_reg_2085(9 downto 0) <= "0000000000";
    tmp_s_reg_2137(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln43_reg_1697, ap_enable_reg_pp0_iter1, ap_CS_fsm_state63, ap_enable_reg_pp5_iter1, ap_CS_fsm_state24, ap_enable_reg_pp1_iter1, ap_CS_fsm_state51, ap_enable_reg_pp4_iter2, ap_CS_fsm_state59, cmp37257_reg_1744, ap_enable_reg_pp7_iter1, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp7_iter4, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter1, fwprop_read_reg_1608, debugip_read_reg_1640, ap_enable_reg_pp0_iter0, icmp_ln43_1_fu_850_p2, ap_CS_fsm_state17, icmp_ln49_fu_898_p2, ap_CS_fsm_state20, cmp36262_fu_954_p2, cmp36262_reg_1815, ap_CS_fsm_state21, icmp_ln86_fu_974_p2, ap_CS_fsm_state23, ap_enable_reg_pp1_iter0, icmp_ln87_fu_1050_p2, ap_enable_reg_pp2_iter0, icmp_ln92_fu_1074_p2, ap_enable_reg_pp3_iter0, icmp_ln99_fu_1209_p2, ap_enable_reg_pp3_iter1, ap_CS_fsm_state48, ap_CS_fsm_state50, ap_enable_reg_pp4_iter0, icmp_ln104_fu_1307_p2, ap_CS_fsm_state60, ap_CS_fsm_state62, ap_enable_reg_pp5_iter0, icmp_ln66_fu_1400_p2, ap_CS_fsm_state74, icmp_ln72_fu_1424_p2, icmp_ln115_fu_1510_p2, ap_CS_fsm_state84, ap_enable_reg_pp7_iter0, icmp_ln115_1_fu_1550_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4, ap_block_pp7_stage0_subdone, ap_block_pp7_stage1_subdone, ap_enable_reg_pp7_iter3, icmp_ln103_fu_1239_p2, icmp_ln65_fu_1332_p2, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln43_reg_1697 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln43_reg_1697 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln43_1_fu_850_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln43_1_fu_850_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln49_fu_898_p2 = ap_const_lv1_1) and (debugip_read_reg_1640 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                elsif (((icmp_ln49_fu_898_p2 = ap_const_lv1_1) and (debugip_read_reg_1640 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((cmp36262_fu_954_p2 = ap_const_lv1_1) and (fwprop_read_reg_1608 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                elsif (((cmp36262_fu_954_p2 = ap_const_lv1_0) and (fwprop_read_reg_1608 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((cmp36262_fu_954_p2 = ap_const_lv1_1) and (fwprop_read_reg_1608 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln86_fu_974_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((cmp37257_reg_1744 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln87_fu_1050_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln87_fu_1050_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln92_fu_1074_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif ((((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((icmp_ln92_fu_1074_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln99_fu_1209_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((icmp_ln99_fu_1209_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and ((fwprop_read_reg_1608 = ap_const_lv1_1) or ((cmp36262_reg_1815 = ap_const_lv1_0) or (icmp_ln103_fu_1239_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((cmp37257_reg_1744 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state51 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln104_fu_1307_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln104_fu_1307_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (cmp37257_reg_1744 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (icmp_ln65_fu_1332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((cmp37257_reg_1744 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln66_fu_1400_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln66_fu_1400_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (icmp_ln72_fu_1424_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter4 = ap_const_logic_1) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter4 = ap_const_logic_1) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (icmp_ln115_fu_1510_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln115_1_fu_1550_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage1;
                elsif (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln115_1_fu_1550_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_pp7_stage1 => 
                if ((not(((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif (((ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage1;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_fu_1233_p2 <= std_logic_vector(signed(i_7_reg_646) + signed(ap_const_lv31_1));
    add_ln104_fu_1297_p2 <= std_logic_vector(unsigned(j_4_reg_658) + unsigned(ap_const_lv31_1));
    add_ln105_fu_1316_p2 <= std_logic_vector(unsigned(tmp_6_reg_2042) + unsigned(trunc_ln105_1_fu_1312_p1));
    add_ln1116_fu_1475_p2 <= std_logic_vector(unsigned(tmp_s_reg_2137) + unsigned(trunc_ln1116_1_fu_1466_p1));
    add_ln1118_fu_1135_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_1108_p3) + unsigned(trunc_ln1118_1_fu_1126_p1));
    add_ln115_fu_1544_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_727_p4) + unsigned(ap_const_lv31_1));
    add_ln116_fu_1561_p2 <= std_logic_vector(unsigned(zext_ln116_fu_1555_p1) + unsigned(sext_ln115_reg_2201));
    add_ln117_fu_1572_p2 <= std_logic_vector(unsigned(zext_ln116_fu_1555_p1) + unsigned(sext_ln115_1_reg_2206));
    add_ln43_fu_844_p2 <= std_logic_vector(unsigned(i_reg_544) + unsigned(ap_const_lv31_1));
    add_ln49_fu_892_p2 <= std_logic_vector(unsigned(phi_mul_reg_566) + unsigned(ap_const_lv38_32));
    add_ln53_fu_886_p2 <= std_logic_vector(unsigned(k_reg_555) + unsigned(ap_const_lv32_1));
    add_ln65_fu_1326_p2 <= std_logic_vector(signed(i_2_reg_669) + signed(ap_const_lv31_1));
    add_ln66_fu_1390_p2 <= std_logic_vector(unsigned(j_reg_681) + unsigned(ap_const_lv31_1));
    add_ln67_fu_1409_p2 <= std_logic_vector(unsigned(tmp_7_reg_2085) + unsigned(trunc_ln67_1_fu_1405_p1));
    add_ln72_fu_1418_p2 <= std_logic_vector(unsigned(i_4_reg_692) + unsigned(ap_const_lv31_1));
    add_ln74_fu_1433_p2 <= std_logic_vector(unsigned(trunc_ln72_fu_1429_p1) + unsigned(trunc_ln54_reg_1804));
    add_ln76_fu_1455_p2 <= std_logic_vector(unsigned(j_2_reg_703) + unsigned(ap_const_lv32_1));
    add_ln86_fu_968_p2 <= std_logic_vector(signed(i_3_reg_578) + signed(ap_const_lv31_1));
    add_ln87_fu_1040_p2 <= std_logic_vector(unsigned(j_1_reg_590) + unsigned(ap_const_lv31_1));
    add_ln88_fu_1059_p2 <= std_logic_vector(unsigned(tmp_9_reg_1860) + unsigned(trunc_ln88_1_fu_1055_p1));
    add_ln92_1_fu_1121_p2 <= std_logic_vector(unsigned(trunc_ln92_fu_1100_p1) + unsigned(trunc_ln54_reg_1804));
    add_ln92_2_fu_1068_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_605_p4) + unsigned(ap_const_lv63_1));
    add_ln92_fu_1079_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_5_phi_fu_616_p4) + unsigned(ap_const_lv31_1));
    add_ln93_fu_1150_p2 <= std_logic_vector(unsigned(select_ln92_reg_1908) + unsigned(ap_const_lv32_1));
    add_ln99_fu_1199_p2 <= std_logic_vector(unsigned(i_6_reg_635) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(28);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(32);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(56);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(60);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(64);
    ap_CS_fsm_pp7_stage1 <= ap_CS_fsm(65);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(29);
    ap_CS_fsm_state35 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(33);
    ap_CS_fsm_state47 <= ap_CS_fsm(35);
    ap_CS_fsm_state48 <= ap_CS_fsm(36);
    ap_CS_fsm_state49 <= ap_CS_fsm(37);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(38);
    ap_CS_fsm_state51 <= ap_CS_fsm(39);
    ap_CS_fsm_state59 <= ap_CS_fsm(45);
    ap_CS_fsm_state60 <= ap_CS_fsm(46);
    ap_CS_fsm_state61 <= ap_CS_fsm(47);
    ap_CS_fsm_state62 <= ap_CS_fsm(48);
    ap_CS_fsm_state63 <= ap_CS_fsm(49);
    ap_CS_fsm_state69 <= ap_CS_fsm(55);
    ap_CS_fsm_state73 <= ap_CS_fsm(57);
    ap_CS_fsm_state74 <= ap_CS_fsm(58);
    ap_CS_fsm_state75 <= ap_CS_fsm(59);
    ap_CS_fsm_state82 <= ap_CS_fsm(61);
    ap_CS_fsm_state83 <= ap_CS_fsm(62);
    ap_CS_fsm_state84 <= ap_CS_fsm(63);
    ap_CS_fsm_state95 <= ap_CS_fsm(66);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln43_1_reg_1722, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln43_1_reg_1722 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln43_1_reg_1722, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln43_1_reg_1722 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln87_reg_1870, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln87_reg_1870 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln87_reg_1870, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln87_reg_1870 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state54_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state54_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln66_reg_2095, gmem_RVALID)
    begin
                ap_block_pp5_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln66_reg_2095 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln66_reg_2095, gmem_RVALID)
    begin
                ap_block_pp5_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln66_reg_2095 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_01001_assign_proc : process(ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter3_reg, gmem2_BVALID)
    begin
                ap_block_pp7_stage0_01001 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter3_reg, ap_enable_reg_pp7_iter2, gmem2_BVALID, ap_block_state87_io, ap_block_state89_io)
    begin
                ap_block_pp7_stage0_11001 <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state89_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state87_io) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter3_reg, ap_enable_reg_pp7_iter2, gmem2_BVALID, ap_block_state87_io, ap_block_state89_io)
    begin
                ap_block_pp7_stage0_subdone <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state89_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state87_io) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp7_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage1_01001_assign_proc : process(ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter4_reg, gmem2_BVALID)
    begin
                ap_block_pp7_stage1_01001 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage1_11001_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter4_reg, gmem2_BVALID, ap_block_state88_io)
    begin
                ap_block_pp7_stage1_11001 <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state88_io) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp7_stage1_subdone_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter4_reg, gmem2_BVALID, ap_block_state88_io)
    begin
                ap_block_pp7_stage1_subdone <= (((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state88_io) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter1_assign_proc : process(icmp_ln43_1_reg_1722, gmem_RVALID)
    begin
                ap_block_state13_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln43_1_reg_1722 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp1_stage0_iter1_assign_proc : process(icmp_ln87_reg_1870, gmem_RVALID)
    begin
                ap_block_state32_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln87_reg_1870 = ap_const_lv1_0));
    end process;

        ap_block_state33_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_io_assign_proc : process(icmp_ln104_reg_2052_pp4_iter1_reg, gmem_WREADY)
    begin
                ap_block_state54_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln104_reg_2052_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state54_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state59_assign_proc : process(cmp37257_reg_1744, gmem_BVALID)
    begin
                ap_block_state59 <= ((gmem_BVALID = ap_const_logic_0) and (cmp37257_reg_1744 = ap_const_lv1_1));
    end process;


    ap_block_state5_io_assign_proc : process(icmp_ln43_reg_1697, gmem_ARREADY)
    begin
                ap_block_state5_io <= ((gmem_ARREADY = ap_const_logic_0) and (icmp_ln43_reg_1697 = ap_const_lv1_1));
    end process;

        ap_block_state70_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state71_pp5_stage0_iter1_assign_proc : process(icmp_ln66_reg_2095, gmem_RVALID)
    begin
                ap_block_state71_pp5_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln66_reg_2095 = ap_const_lv1_0));
    end process;

        ap_block_state72_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp6_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp6_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp7_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state87_io_assign_proc : process(icmp_ln115_1_reg_2216, gmem2_AWREADY)
    begin
                ap_block_state87_io <= ((gmem2_AWREADY = ap_const_logic_0) and (icmp_ln115_1_reg_2216 = ap_const_lv1_0));
    end process;

        ap_block_state87_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state88_io_assign_proc : process(icmp_ln115_1_reg_2216_pp7_iter1_reg, gmem2_AWREADY, gmem2_WREADY)
    begin
                ap_block_state88_io <= (((gmem2_WREADY = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0)) or ((gmem2_AWREADY = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0)));
    end process;

        ap_block_state88_pp7_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state89_io_assign_proc : process(icmp_ln115_1_reg_2216_pp7_iter1_reg, gmem2_WREADY)
    begin
                ap_block_state89_io <= ((gmem2_WREADY = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state89_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp7_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp7_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp7_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state93_pp7_stage0_iter4_assign_proc : process(icmp_ln115_1_reg_2216_pp7_iter3_reg, gmem2_BVALID)
    begin
                ap_block_state93_pp7_stage0_iter4 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state94_pp7_stage1_iter4_assign_proc : process(icmp_ln115_1_reg_2216_pp7_iter4_reg, gmem2_BVALID)
    begin
                ap_block_state94_pp7_stage1_iter4 <= ((gmem2_BVALID = ap_const_logic_0) and (icmp_ln115_1_reg_2216_pp7_iter4_reg = ap_const_lv1_0));
    end process;


    ap_condition_1628_assign_proc : process(ap_enable_reg_pp7_iter1, ap_CS_fsm_pp7_stage1, ap_block_pp7_stage1_01001)
    begin
                ap_condition_1628 <= ((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1));
    end process;


    ap_condition_1640_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter2, ap_block_pp7_stage0_01001)
    begin
                ap_condition_1640 <= ((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0));
    end process;


    ap_condition_2547_assign_proc : process(ap_CS_fsm_pp7_stage0, icmp_ln115_1_reg_2216, ap_block_pp7_stage0_11001)
    begin
                ap_condition_2547 <= ((icmp_ln115_1_reg_2216 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0));
    end process;


    ap_condition_2551_assign_proc : process(ap_CS_fsm_pp7_stage1, icmp_ln115_1_reg_2216_pp7_iter1_reg, ap_block_pp7_stage1_11001)
    begin
                ap_condition_2551 <= ((icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state12_assign_proc : process(icmp_ln43_1_fu_850_p2)
    begin
        if ((icmp_ln43_1_fu_850_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state31_assign_proc : process(icmp_ln87_fu_1050_p2)
    begin
        if ((icmp_ln87_fu_1050_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state36_assign_proc : process(icmp_ln92_fu_1074_p2)
    begin
        if ((icmp_ln92_fu_1074_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state44_assign_proc : process(icmp_ln99_fu_1209_p2)
    begin
        if ((icmp_ln99_fu_1209_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state52_assign_proc : process(icmp_ln104_fu_1307_p2)
    begin
        if ((icmp_ln104_fu_1307_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state52 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state52 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state70_assign_proc : process(icmp_ln66_fu_1400_p2)
    begin
        if ((icmp_ln66_fu_1400_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state70 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state70 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter4_state80_assign_proc : process(ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4)
    begin
        if (((ap_enable_reg_pp6_iter4 = ap_const_logic_1) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0))) then 
            ap_condition_pp6_exit_iter4_state80 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter4_state80 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_flush_enable_assign_proc : process(ap_CS_fsm_pp6_stage0, icmp_ln76_fu_1461_p2, ap_block_pp6_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln76_fu_1461_p2 = ap_const_lv1_1))) then 
            ap_condition_pp6_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp6_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state85_assign_proc : process(icmp_ln115_1_fu_1550_p2)
    begin
        if ((icmp_ln115_1_fu_1550_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state85 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state85 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter5, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4)
    begin
        if (((ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter4, ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter3)
    begin
        if (((ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter3 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_727_p4_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, icmp_ln115_1_reg_2216, i_1_reg_723, add_ln115_reg_2211)
    begin
        if (((icmp_ln115_1_reg_2216 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            ap_phi_mux_i_1_phi_fu_727_p4 <= add_ln115_reg_2211;
        else 
            ap_phi_mux_i_1_phi_fu_727_p4 <= i_1_reg_723;
        end if; 
    end process;


    ap_phi_mux_i_5_phi_fu_616_p4_assign_proc : process(i_5_reg_612, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln92_reg_1894, select_ln92_2_reg_1943, ap_block_pp2_stage0)
    begin
        if (((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_5_phi_fu_616_p4 <= select_ln92_2_reg_1943;
        else 
            ap_phi_mux_i_5_phi_fu_616_p4 <= i_5_reg_612;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_605_p4_assign_proc : process(indvar_flatten_reg_601, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln92_reg_1894, add_ln92_2_reg_1889, ap_block_pp2_stage0)
    begin
        if (((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_605_p4 <= add_ln92_2_reg_1889;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_605_p4 <= indvar_flatten_reg_601;
        end if; 
    end process;


    ap_phi_mux_j_3_phi_fu_628_p4_assign_proc : process(j_3_reg_624, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln92_reg_1894, add_ln93_reg_1958, ap_block_pp2_stage0)
    begin
        if (((icmp_ln92_reg_1894 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_j_3_phi_fu_628_p4 <= add_ln93_reg_1958;
        else 
            ap_phi_mux_j_3_phi_fu_628_p4 <= j_3_reg_624;
        end if; 
    end process;


    ap_phi_mux_rhs_phi_fu_717_p4_assign_proc : process(rhs_reg_714, icmp_ln76_reg_2147_pp6_iter4_reg, ap_enable_reg_pp6_iter5, ap_block_pp6_stage0, grp_fu_1599_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (icmp_ln76_reg_2147_pp6_iter4_reg = ap_const_lv1_0))) then 
            ap_phi_mux_rhs_phi_fu_717_p4 <= grp_fu_1599_p3(28 downto 13);
        else 
            ap_phi_mux_rhs_phi_fu_717_p4 <= rhs_reg_714;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bbuf_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state74, ap_enable_reg_pp0_iter2, zext_ln44_fu_859_p1, zext_ln74_fu_1438_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            bbuf_V_address0 <= zext_ln74_fu_1438_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bbuf_V_address0 <= zext_ln44_fu_859_p1(10 - 1 downto 0);
        else 
            bbuf_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    bbuf_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state74, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            bbuf_V_ce0 <= ap_const_logic_1;
        else 
            bbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bbuf_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln43_1_reg_1722_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln43_1_reg_1722_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bbuf_V_we0 <= ap_const_logic_1;
        else 
            bbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp36262_fu_954_p2 <= "1" when (signed(ub_fu_946_p3) > signed(ap_const_lv32_0)) else "0";
    cmp37257_fu_872_p2 <= "1" when (signed(xdim_read_reg_1624) > signed(ap_const_lv32_0)) else "0";
    dbbuf_V_address1 <= zext_ln703_fu_1218_p1(10 - 1 downto 0);

    dbbuf_V_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            dbbuf_V_ce0 <= ap_const_logic_1;
        else 
            dbbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dbbuf_V_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dbbuf_V_ce1 <= ap_const_logic_1;
        else 
            dbbuf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dbbuf_V_d0 <= std_logic_vector(unsigned(dy_Dout_A) + unsigned(dbbuf_V_load_reg_2008));

    dbbuf_V_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln99_reg_1993_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((icmp_ln99_reg_1993_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            dbbuf_V_we0 <= ap_const_logic_1;
        else 
            dbbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dwbuf_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp2_stage1, dwbuf_V_addr_1_reg_1953, dwbuf_V_addr_1_reg_1953_pp2_iter2_reg, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, zext_ln88_fu_1064_p1, ap_block_pp2_stage1, zext_ln105_fu_1321_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= zext_ln105_fu_1321_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= dwbuf_V_addr_1_reg_1953_pp2_iter2_reg;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dwbuf_V_address0 <= dwbuf_V_addr_1_reg_1953;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= zext_ln88_fu_1064_p1(16 - 1 downto 0);
        else 
            dwbuf_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            dwbuf_V_ce0 <= ap_const_logic_1;
        else 
            dwbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dwbuf_V_d0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, gmem_addr_2_read_reg_1879, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, grp_fu_1590_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dwbuf_V_d0 <= grp_fu_1590_p3(28 downto 13);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            dwbuf_V_d0 <= gmem_addr_2_read_reg_1879;
        else 
            dwbuf_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln87_reg_1870_pp1_iter1_reg, icmp_ln92_reg_1894_pp2_iter2_reg, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3)
    begin
        if ((((icmp_ln92_reg_1894_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((icmp_ln87_reg_1870_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            dwbuf_V_we0 <= ap_const_logic_1;
        else 
            dwbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dx_Addr_A <= std_logic_vector(shift_left(unsigned(dx_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    dx_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0, ap_enable_reg_pp2_iter2, zext_ln1118_reg_1923_pp2_iter2_reg, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp7_iter0, ap_block_pp2_stage1, zext_ln116_fu_1555_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then 
            dx_Addr_A_orig <= zext_ln116_fu_1555_p1;
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dx_Addr_A_orig <= zext_ln1118_reg_1923_pp2_iter2_reg;
        else 
            dx_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dx_Clk_A <= ap_clk;
    dx_Din_A <= grp_fu_1583_p2(28 downto 13);

    dx_EN_A_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_CS_fsm_pp7_stage1, ap_block_pp7_stage0_11001, ap_enable_reg_pp2_iter2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp7_iter0, ap_block_pp7_stage1_11001)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)))) then 
            dx_EN_A <= ap_const_logic_1;
        else 
            dx_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dx_Rst_A <= ap_rst_n_inv;

    dx_WEN_A_assign_proc : process(ap_enable_reg_pp2_iter2, icmp_ln92_reg_1894_pp2_iter2_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001)
    begin
        if (((icmp_ln92_reg_1894_pp2_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dx_WEN_A <= ap_const_lv2_3;
        else 
            dx_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    dy_Addr_A <= std_logic_vector(shift_left(unsigned(dy_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    dy_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, zext_ln92_2_fu_1116_p1, zext_ln92_3_fu_1141_p1, ap_block_pp2_stage1, zext_ln703_fu_1218_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dy_Addr_A_orig <= zext_ln703_fu_1218_p1;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dy_Addr_A_orig <= zext_ln92_3_fu_1141_p1;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dy_Addr_A_orig <= zext_ln92_2_fu_1116_p1;
        else 
            dy_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dy_Clk_A <= ap_clk;
    dy_Din_A <= ap_const_lv16_0;

    dy_EN_A_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            dy_EN_A <= ap_const_logic_1;
        else 
            dy_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dy_Rst_A <= ap_rst_n_inv;
    dy_WEN_A <= ap_const_lv2_0;
    empty_45_fu_1342_p2 <= std_logic_vector(unsigned(empty_44_reg_2069) + unsigned(mul_ln53_1_reg_1787));
    empty_46_fu_1354_p2 <= std_logic_vector(unsigned(tmp_4_fu_1346_p3) + unsigned(wt_read_reg_1665));
    empty_52_fu_992_p2 <= std_logic_vector(unsigned(empty_51_reg_1844) + unsigned(mul_ln53_1_reg_1787));
    empty_53_fu_1004_p2 <= std_logic_vector(unsigned(tmp_5_fu_996_p3) + unsigned(dwt_read_reg_1659));
    empty_59_fu_1249_p2 <= std_logic_vector(unsigned(empty_58_reg_2026) + unsigned(mul_ln53_1_reg_1787));
    empty_60_fu_1261_p2 <= std_logic_vector(unsigned(tmp_3_fu_1253_p3) + unsigned(dwt_read_reg_1659));

    gmem2_AWADDR_assign_proc : process(ap_enable_reg_pp7_iter1, gmem2_addr_reg_2225, gmem2_addr_1_reg_2236_pp7_iter1_reg, ap_condition_2547, ap_condition_2551)
    begin
        if ((ap_enable_reg_pp7_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_2551)) then 
                gmem2_AWADDR <= gmem2_addr_1_reg_2236_pp7_iter1_reg;
            elsif ((ap_const_boolean_1 = ap_condition_2547)) then 
                gmem2_AWADDR <= gmem2_addr_reg_2225;
            else 
                gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem2_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_AWVALID_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, icmp_ln115_1_reg_2216, ap_CS_fsm_pp7_stage1, icmp_ln115_1_reg_2216_pp7_iter1_reg, ap_block_pp7_stage0_11001, ap_block_pp7_stage1_11001)
    begin
        if ((((icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)) or ((icmp_ln115_1_reg_2216 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            gmem2_AWVALID <= ap_const_logic_1;
        else 
            gmem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_BREADY_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_CS_fsm_pp7_stage1, ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter3_reg, icmp_ln115_1_reg_2216_pp7_iter4_reg, ap_block_pp7_stage0_11001, ap_block_pp7_stage1_11001)
    begin
        if ((((icmp_ln115_1_reg_2216_pp7_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)) or ((icmp_ln115_1_reg_2216_pp7_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            gmem2_BREADY <= ap_const_logic_1;
        else 
            gmem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_WDATA_assign_proc : process(icmp_ln115_1_reg_2216_pp7_iter1_reg, reg_741, dx_load_reg_2242, ap_condition_1628, ap_condition_1640)
    begin
        if ((icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_1640)) then 
                gmem2_WDATA <= dx_load_reg_2242;
            elsif ((ap_const_boolean_1 = ap_condition_1628)) then 
                gmem2_WDATA <= reg_741;
            else 
                gmem2_WDATA <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem2_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem2_WVALID_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_CS_fsm_pp7_stage1, icmp_ln115_1_reg_2216_pp7_iter1_reg, ap_enable_reg_pp7_iter2, ap_block_pp7_stage0_11001, ap_block_pp7_stage1_11001)
    begin
        if ((((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)))) then 
            gmem2_WVALID <= ap_const_logic_1;
        else 
            gmem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem2_blk_n_AW_assign_proc : process(m_axi_gmem2_AWREADY, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, icmp_ln115_1_reg_2216, ap_CS_fsm_pp7_stage1, ap_block_pp7_stage1, icmp_ln115_1_reg_2216_pp7_iter1_reg)
    begin
        if ((((icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)) or ((icmp_ln115_1_reg_2216 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            gmem2_blk_n_AW <= m_axi_gmem2_AWREADY;
        else 
            gmem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_B_assign_proc : process(m_axi_gmem2_BVALID, ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0, ap_CS_fsm_pp7_stage1, ap_block_pp7_stage1, ap_enable_reg_pp7_iter4, icmp_ln115_1_reg_2216_pp7_iter3_reg, icmp_ln115_1_reg_2216_pp7_iter4_reg)
    begin
        if ((((icmp_ln115_1_reg_2216_pp7_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)) or ((icmp_ln115_1_reg_2216_pp7_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            gmem2_blk_n_B <= m_axi_gmem2_BVALID;
        else 
            gmem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem2_blk_n_W_assign_proc : process(m_axi_gmem2_WREADY, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, ap_CS_fsm_pp7_stage1, ap_block_pp7_stage1, icmp_ln115_1_reg_2216_pp7_iter1_reg, ap_enable_reg_pp7_iter2)
    begin
        if ((((ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((icmp_ln115_1_reg_2216_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1)))) then 
            gmem2_blk_n_W <= m_axi_gmem2_WREADY;
        else 
            gmem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state5, icmp_ln43_reg_1697, ap_CS_fsm_state63, ap_CS_fsm_state24, gmem_ARREADY, gmem_addr_2_reg_1849, gmem_addr_1_reg_2074, sext_ln43_fu_830_p1, ap_block_state5_io)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            gmem_ARADDR <= gmem_addr_1_reg_2074;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_ARADDR <= gmem_addr_2_reg_1849;
        elsif (((ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln43_reg_1697 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARADDR <= sext_ln43_fu_830_p1;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state5, icmp_ln43_reg_1697, ap_CS_fsm_state63, ap_CS_fsm_state24, gmem_ARREADY, ydim_read_reg_1612, xdim_read_reg_1624, ap_block_state5_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
            gmem_ARLEN <= xdim_read_reg_1624;
        elsif (((ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln43_reg_1697 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gmem_ARLEN <= ydim_read_reg_1612;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state5, icmp_ln43_reg_1697, ap_CS_fsm_state63, ap_CS_fsm_state24, gmem_ARREADY, ap_block_state5_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((ap_const_boolean_0 = ap_block_state5_io) and (icmp_ln43_reg_1697 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state51, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state59, cmp37257_reg_1744, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (cmp37257_reg_1744 = ap_const_lv1_1))) and (cmp37257_reg_1744 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln43_1_reg_1722, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln66_reg_2095, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln87_reg_1870, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp5_stage0_11001)
    begin
        if ((((icmp_ln87_reg_1870 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln66_reg_2095 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((icmp_ln43_1_reg_1722 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln104_reg_2052_pp4_iter1_reg, ap_block_pp4_stage0_11001)
    begin
        if (((icmp_ln104_reg_2052_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state5, icmp_ln43_reg_1697, ap_CS_fsm_state63, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state63) or ((icmp_ln43_reg_1697 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state59, cmp37257_reg_1744)
    begin
        if (((cmp37257_reg_1744 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln43_1_reg_1722, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln66_reg_2095, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln87_reg_1870)
    begin
        if ((((icmp_ln87_reg_1870 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln66_reg_2095 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((icmp_ln43_1_reg_1722 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, icmp_ln104_reg_2052_pp4_iter1_reg)
    begin
        if (((icmp_ln104_reg_2052_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1590_p2 <= (reg_746 & ap_const_lv13_0);
    grp_fu_1599_p2 <= (ap_phi_mux_rhs_phi_fu_717_p4 & ap_const_lv13_0);

    grp_fu_734_p0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, icmp_ln93_fu_1086_p2, icmp_ln93_reg_1903, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_fu_734_p0 <= icmp_ln93_reg_1903;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                grp_fu_734_p0 <= icmp_ln93_fu_1086_p2;
            else 
                grp_fu_734_p0 <= "X";
            end if;
        else 
            grp_fu_734_p0 <= "X";
        end if; 
    end process;


    grp_fu_734_p1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, add_ln92_fu_1079_p2, add_ln92_reg_1898, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage0, ap_block_pp2_stage1)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_fu_734_p1 <= add_ln92_reg_1898;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                grp_fu_734_p1 <= add_ln92_fu_1079_p2;
            else 
                grp_fu_734_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_734_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_734_p2_assign_proc : process(i_5_reg_612, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage0, ap_phi_mux_i_5_phi_fu_616_p4, ap_block_pp2_stage1)
    begin
        if ((ap_enable_reg_pp2_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                grp_fu_734_p2 <= i_5_reg_612;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                grp_fu_734_p2 <= ap_phi_mux_i_5_phi_fu_616_p4;
            else 
                grp_fu_734_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_734_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_734_p3 <= 
        grp_fu_734_p1 when (grp_fu_734_p0(0) = '1') else 
        grp_fu_734_p2;
    grp_fu_762_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_866_p0 <= xdim_read_reg_1624(31 - 1 downto 0);
    grp_fu_866_p1 <= ap_const_lv31_32(7 - 1 downto 0);
    grp_fu_907_p1 <= k_reg_555(31 - 1 downto 0);
    grp_fu_919_p0 <= grp_fu_919_p00(32 - 1 downto 0);
    grp_fu_919_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_reg_1768),38));
    grp_fu_919_p1 <= ap_const_lv38_32(7 - 1 downto 0);
    grp_fu_987_p0 <= grp_fu_987_p00(31 - 1 downto 0);
    grp_fu_987_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln86_reg_1819),63));
    grp_fu_987_p1 <= zext_ln92_reg_1763(32 - 1 downto 0);
    i_6_cast_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_635),32));
    icmp_ln103_fu_1239_p2 <= "1" when (i_7_reg_646 = trunc_ln103_reg_2013) else "0";
    icmp_ln104_fu_1307_p2 <= "1" when (j_4_cast_fu_1303_p1 = xdim_read_reg_1624) else "0";
    icmp_ln115_1_fu_1550_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_727_p4 = trunc_ln115_reg_2196) else "0";
    icmp_ln115_fu_1510_p2 <= "1" when (signed(mul150_reg_2186) > signed(ap_const_lv32_0)) else "0";
    icmp_ln43_1_fu_850_p2 <= "1" when (i_reg_544 = trunc_ln43_reg_1712) else "0";
    icmp_ln43_fu_805_p2 <= "1" when (signed(ydim_read_reg_1612) > signed(ap_const_lv32_0)) else "0";
    icmp_ln49_fu_898_p2 <= "1" when (k_reg_555 = sext_ln49_1_reg_1753) else "0";
    icmp_ln53_fu_928_p2 <= "1" when (signed(sext_ln49_reg_1748) < signed(zext_ln53_1_fu_925_p1)) else "0";
    icmp_ln65_fu_1332_p2 <= "1" when (i_2_reg_669 = trunc_ln65_reg_1825) else "0";
    icmp_ln66_fu_1400_p2 <= "1" when (j_cast_fu_1396_p1 = xdim_read_reg_1624) else "0";
    icmp_ln72_fu_1424_p2 <= "1" when (i_4_reg_692 = trunc_ln65_reg_1825) else "0";
    icmp_ln76_fu_1461_p2 <= "1" when (j_2_reg_703 = xdim_read_reg_1624) else "0";
    icmp_ln86_fu_974_p2 <= "1" when (i_3_reg_578 = trunc_ln86_reg_1819) else "0";
    icmp_ln87_fu_1050_p2 <= "1" when (j_1_cast_fu_1046_p1 = xdim_read_reg_1624) else "0";
    icmp_ln92_fu_1074_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_605_p4 = mul_ln92_reg_1884) else "0";
    icmp_ln93_fu_1086_p2 <= "1" when (ap_phi_mux_j_3_phi_fu_628_p4 = xdim_read_reg_1624) else "0";
    icmp_ln99_fu_1209_p2 <= "1" when (i_6_cast_fu_1205_p1 = ydim_read_reg_1612) else "0";
    j_1_cast_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_590),32));
    j_4_cast_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_658),32));
    j_cast_fu_1396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_681),32));
    num_iters_fu_815_p2 <= std_logic_vector(unsigned(select_ln41_1_fu_810_p3) + unsigned(ap_const_lv27_1));
    select_ln41_1_fu_810_p3 <= 
        sub_ln41_1_reg_1692 when (tmp_reg_1670(0) = '1') else 
        tmp_2_reg_1686;
    select_ln41_fu_793_p3 <= 
        tmp_1_fu_783_p4 when (tmp_reg_1670(0) = '1') else 
        tmp_2_reg_1686;
    select_ln92_fu_1092_p3 <= 
        ap_const_lv32_0 when (icmp_ln93_fu_1086_p2(0) = '1') else 
        ap_phi_mux_j_3_phi_fu_628_p4;
        sext_ln104_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_1266_p4),32));

        sext_ln115_1_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln115_1_fu_1531_p4),32));

        sext_ln115_fu_1527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_1518_p4),32));

        sext_ln43_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_821_p4),32));

        sext_ln49_1_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_iters_reg_1701),32));

        sext_ln49_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ydim_read_reg_1612),39));

        sext_ln66_fu_1369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_1359_p4),32));

        sext_ln87_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_1009_p4),32));

    sub_ln41_1_fu_799_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(select_ln41_fu_793_p3));
    sub_ln41_fu_778_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln41_reg_1681));
    sub_ln53_fu_941_p2 <= std_logic_vector(signed(ydim_read_reg_1612) - signed(trunc_ln54_1_fu_937_p1));
    tmp_14_cast_fu_1108_p3 <= (trunc_ln1118_fu_1104_p1 & ap_const_lv10_0);
    tmp_1_fu_783_p4 <= sub_ln41_fu_778_p2(64 downto 38);
    tmp_3_fu_1253_p3 <= (empty_59_fu_1249_p2 & ap_const_lv1_0);
    tmp_4_fu_1346_p3 <= (empty_45_fu_1342_p2 & ap_const_lv1_0);
    tmp_5_fu_996_p3 <= (empty_52_fu_992_p2 & ap_const_lv1_0);
    tmp_6_fu_1290_p3 <= (trunc_ln105_reg_2037 & ap_const_lv10_0);
    tmp_7_fu_1383_p3 <= (trunc_ln67_reg_2080 & ap_const_lv10_0);
    tmp_9_fu_1033_p3 <= (trunc_ln88_reg_1855 & ap_const_lv10_0);
    tmp_fu_751_p1 <= ydim;
    tmp_s_fu_1448_p3 <= (trunc_ln1116_reg_2127 & ap_const_lv10_0);
    trunc_ln103_fu_1230_p1 <= ub_reg_1810(31 - 1 downto 0);
    trunc_ln105_1_fu_1312_p1 <= j_4_reg_658(16 - 1 downto 0);
    trunc_ln105_fu_1286_p1 <= i_7_reg_646(6 - 1 downto 0);
    trunc_ln1116_1_fu_1466_p1 <= j_2_reg_703(16 - 1 downto 0);
    trunc_ln1116_fu_1444_p1 <= i_4_reg_692(6 - 1 downto 0);
    trunc_ln1118_1_fu_1126_p1 <= select_ln92_fu_1092_p3(16 - 1 downto 0);
    trunc_ln1118_fu_1104_p1 <= grp_fu_734_p3(6 - 1 downto 0);
    trunc_ln115_1_fu_1531_p4 <= debug_dx_read_reg_1644(31 downto 1);
    trunc_ln115_fu_1515_p1 <= mul150_reg_2186(31 - 1 downto 0);
    trunc_ln2_fu_1266_p4 <= empty_60_fu_1261_p2(31 downto 1);
    trunc_ln43_fu_841_p1 <= ydim_read_reg_1612(31 - 1 downto 0);
    trunc_ln44_fu_855_p1 <= i_reg_544(10 - 1 downto 0);
    trunc_ln49_fu_863_p1 <= xdim_read_reg_1624(31 - 1 downto 0);
    trunc_ln4_fu_1518_p4 <= debug_x_read_reg_1649(31 downto 1);
    trunc_ln54_1_fu_937_p1 <= phi_mul_reg_566(32 - 1 downto 0);
    trunc_ln54_fu_933_p1 <= phi_mul_reg_566(10 - 1 downto 0);
    trunc_ln65_fu_964_p1 <= ub_fu_946_p3(31 - 1 downto 0);
    trunc_ln67_1_fu_1405_p1 <= j_reg_681(16 - 1 downto 0);
    trunc_ln67_fu_1379_p1 <= i_2_reg_669(6 - 1 downto 0);
    trunc_ln703_fu_1214_p1 <= i_6_reg_635(10 - 1 downto 0);
    trunc_ln72_fu_1429_p1 <= i_4_reg_692(10 - 1 downto 0);
    trunc_ln7_fu_1359_p4 <= empty_46_fu_1354_p2(31 downto 1);
    trunc_ln86_fu_960_p1 <= ub_fu_946_p3(31 - 1 downto 0);
    trunc_ln88_1_fu_1055_p1 <= j_1_reg_590(16 - 1 downto 0);
    trunc_ln88_fu_1029_p1 <= i_3_reg_578(6 - 1 downto 0);
    trunc_ln92_fu_1100_p1 <= grp_fu_734_p3(10 - 1 downto 0);
    trunc_ln9_fu_1009_p4 <= empty_53_fu_1004_p2(31 downto 1);
    trunc_ln_fu_821_p4 <= b_read_reg_1654(31 downto 1);
    ub_fu_946_p3 <= 
        sub_ln53_fu_941_p2 when (icmp_ln53_fu_928_p2(0) = '1') else 
        ap_const_lv32_32;

    wbuf_V_address0_assign_proc : process(ap_block_pp5_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, ap_block_pp2_stage1, zext_ln1118_1_fu_1145_p1, zext_ln67_fu_1414_p1, zext_ln1116_1_fu_1480_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            wbuf_V_address0 <= zext_ln1116_1_fu_1480_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            wbuf_V_address0 <= zext_ln67_fu_1414_p1(16 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            wbuf_V_address0 <= zext_ln1118_1_fu_1145_p1(16 - 1 downto 0);
        else 
            wbuf_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wbuf_V_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter1)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)))) then 
            wbuf_V_ce0 <= ap_const_logic_1;
        else 
            wbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wbuf_V_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln66_reg_2095_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (icmp_ln66_reg_2095_pp5_iter1_reg = ap_const_lv1_0))) then 
            wbuf_V_we0 <= ap_const_logic_1;
        else 
            wbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_Addr_A <= std_logic_vector(shift_left(unsigned(x_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    x_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln1118_fu_1130_p1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp7_iter0, ap_block_pp2_stage0, ap_block_pp6_stage0, zext_ln1116_fu_1470_p1, zext_ln116_fu_1555_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then 
            x_Addr_A_orig <= zext_ln116_fu_1555_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then 
            x_Addr_A_orig <= zext_ln1116_fu_1470_p1;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_Addr_A_orig <= zext_ln1118_fu_1130_p1;
        else 
            x_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x_Clk_A <= ap_clk;
    x_Din_A <= ap_const_lv16_0;

    x_EN_A_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_CS_fsm_pp7_stage1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_block_pp7_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp6_stage0_11001, ap_enable_reg_pp7_iter0, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2, ap_block_pp7_stage1_11001)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp7_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then 
            x_EN_A <= ap_const_logic_1;
        else 
            x_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    x_Rst_A <= ap_rst_n_inv;
    x_WEN_A <= ap_const_lv2_0;
    y_Addr_A <= std_logic_vector(shift_left(unsigned(y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    y_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_addr_reg_2122),32));
    y_Clk_A <= ap_clk;

    y_Din_A_assign_proc : process(bbuf_V_q0, ap_CS_fsm_state75, ap_enable_reg_pp6_iter5, ap_block_pp6_stage0, grp_fu_1599_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1))) then 
            y_Din_A <= grp_fu_1599_p3(28 downto 13);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            y_Din_A <= bbuf_V_q0;
        else 
            y_Din_A <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_EN_A_assign_proc : process(ap_CS_fsm_state75, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1)))) then 
            y_EN_A <= ap_const_logic_1;
        else 
            y_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    y_Rst_A <= ap_rst_n_inv;

    y_WEN_A_assign_proc : process(ap_CS_fsm_state75, ap_block_pp6_stage0_11001, icmp_ln76_reg_2147_pp6_iter4_reg, ap_enable_reg_pp6_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1) and (icmp_ln76_reg_2147_pp6_iter4_reg = ap_const_lv1_0)))) then 
            y_WEN_A <= ap_const_lv2_3;
        else 
            y_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    zext_ln105_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_fu_1316_p2),32));
    zext_ln1116_1_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_reg_2151),32));
    zext_ln1116_fu_1470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1116_1_fu_1466_p1),32));
    zext_ln1118_1_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1118_reg_1928),32));
    zext_ln1118_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1118_1_fu_1126_p1),32));
    zext_ln116_fu_1555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_727_p4),32));
    zext_ln44_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_reg_1726_pp0_iter1_reg),32));
    zext_ln53_1_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln53_2_reg_1799),39));
    zext_ln67_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_reg_2099_pp5_iter1_reg),32));
    zext_ln703_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_fu_1214_p1),32));
    zext_ln74_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_1433_p2),32));
    zext_ln88_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_reg_1874_pp1_iter1_reg),32));
    zext_ln92_2_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln92_fu_1100_p1),32));
    zext_ln92_3_fu_1141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_1_reg_1918),32));
    zext_ln92_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xdim_read_reg_1624),63));
end behav;
