-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fcc_combined is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    x_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_EN_A : OUT STD_LOGIC;
    x_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    x_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    x_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    x_Clk_A : OUT STD_LOGIC;
    x_Rst_A : OUT STD_LOGIC;
    dx_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dx_EN_A : OUT STD_LOGIC;
    dx_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dx_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dx_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dx_Clk_A : OUT STD_LOGIC;
    dx_Rst_A : OUT STD_LOGIC;
    y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_EN_A : OUT STD_LOGIC;
    y_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    y_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    y_Clk_A : OUT STD_LOGIC;
    y_Rst_A : OUT STD_LOGIC;
    dy_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dy_EN_A : OUT STD_LOGIC;
    dy_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dy_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dy_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dy_Clk_A : OUT STD_LOGIC;
    dy_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fcc_combined is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=132,HLS_SYN_DSP=0,HLS_SYN_FF=4568,HLS_SYN_LUT=4089,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv38_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_32 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000110010";
    constant ap_const_lv38_32 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000110010";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv16_3E8 : STD_LOGIC_VECTOR (15 downto 0) := "0000001111101000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal wt : STD_LOGIC_VECTOR (31 downto 0);
    signal dwt : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal db : STD_LOGIC_VECTOR (31 downto 0);
    signal xdim : STD_LOGIC_VECTOR (31 downto 0);
    signal ydim : STD_LOGIC_VECTOR (31 downto 0);
    signal fwprop : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln40_reg_1508 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln40_1_reg_1533 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln63_reg_1928 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln84_reg_1687 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln101_reg_1880 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1880_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal cmp37252_reg_1555 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_453 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_500 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_511 : STD_LOGIC_VECTOR (62 downto 0);
    signal i_4_reg_522 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_3_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_545 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_4_reg_568 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_591 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_reg_624 : STD_LOGIC_VECTOR (15 downto 0);
    signal dwbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_633 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_state36_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln89_reg_1711 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_1711_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state55_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state56_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state57_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state57_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal fwprop_read_reg_1435 : STD_LOGIC_VECTOR (0 downto 0);
    signal ydim_read_reg_1439 : STD_LOGIC_VECTOR (31 downto 0);
    signal xdim_read_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal dwt_read_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal wt_read_reg_1476 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1481 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_649_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln38_reg_1492 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_reg_1497 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln38_1_fu_686_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln38_1_reg_1503 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln40_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_iters_fu_702_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal num_iters_reg_1512 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln40_fu_728_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln40_reg_1523 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln40_fu_731_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln40_1_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_reg_1533_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_fu_742_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln41_reg_1537 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln41_reg_1537_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_addr_read_reg_1542 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_fu_750_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln46_reg_1547 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal cmp37252_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sext_ln46_fu_764_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln46_reg_1559 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln46_1_fu_767_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln46_1_reg_1564 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln50_reg_1569 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln89_fu_770_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln89_reg_1574 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln50_fu_773_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln50_reg_1579 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln46_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1585 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_fu_784_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln46_reg_1589 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln50_1_reg_1604 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_802_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln50_2_reg_1611 : STD_LOGIC_VECTOR (37 downto 0);
    signal trunc_ln51_fu_816_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln51_reg_1616 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ub_fu_829_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ub_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp36257_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp36257_reg_1627 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln83_fu_843_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln83_reg_1631 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln62_fu_847_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln62_reg_1637 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln83_fu_851_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln83_reg_1643 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln83_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_862_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_46_reg_1656 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal gmem_addr_2_reg_1661 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln85_fu_912_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln85_reg_1667 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_1378_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln85_reg_1677 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln84_fu_919_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state31_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln84_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_1687_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln85_fu_938_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln85_fu_938_p2 : signal is "no";
    signal add_ln85_reg_1691 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln85_reg_1691_pp1_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_2_read_reg_1696 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_870_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln89_reg_1701 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal add_ln89_2_fu_947_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln89_2_reg_1706 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln89_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_1711_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_1711_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_fu_958_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln89_reg_1715 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln90_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1720 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln89_fu_969_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln89_reg_1725 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln89_2_fu_985_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln89_2_reg_1730 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1118_fu_997_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1118_reg_1741 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1118_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_reg_1746 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_reg_1746_pp2_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_reg_1746_pp2_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_reg_1746_pp2_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state37_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state39_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state41_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_state43_pp2_stage1_iter3 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal select_ln89_3_fu_1015_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln89_3_reg_1761 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln90_fu_1021_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln90_reg_1766 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_load_1_reg_1776 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal dwbuf_V_addr_1_reg_1791 : STD_LOGIC_VECTOR (15 downto 0);
    signal dwbuf_V_addr_1_reg_1791_pp2_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_fu_1078_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state45_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state47_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln96_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1821 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1821_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dbbuf_V_addr_reg_1825 : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_addr_reg_1825_pp3_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_load_reg_1836 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal trunc_ln100_fu_1109_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln100_reg_1841 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln100_fu_1112_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln100_reg_1846 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_1123_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_53_reg_1854 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal gmem_addr_3_reg_1859 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_1408_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln102_reg_1870 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal add_ln101_fu_1173_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln101_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln62_fu_1202_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln62_reg_1889 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_fu_1213_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_39_reg_1897 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal gmem_addr_1_reg_1902 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal trunc_ln64_fu_1255_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln64_reg_1908 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal grp_fu_1414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln64_reg_1918 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal add_ln63_fu_1262_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state73_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state74_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state75_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln63_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln63_reg_1928_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_1281_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln64_fu_1281_p2 : signal is "no";
    signal add_ln64_reg_1932 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln64_reg_1932_pp5_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_1_read_reg_1937 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_1290_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln69_reg_1942 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal add_ln71_fu_1305_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln71_reg_1950 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln69_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal y_addr_reg_1965 : STD_LOGIC_VECTOR (9 downto 0);
    signal bbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_fu_1420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1116_reg_1975 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln73_fu_1323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state81_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state82_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state83_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state84_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state85_pp6_stage0_iter4 : BOOLEAN;
    signal ap_block_state86_pp6_stage0_iter5 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln73_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1985 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1985_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1985_pp6_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1985_pp6_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_1985_pp6_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1116_fu_1343_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln1116_fu_1343_p2 : signal is "no";
    signal add_ln1116_reg_1989 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp6_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state36 : STD_LOGIC;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state45 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state55 : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state73 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp6_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp6_exit_iter4_state85 : STD_LOGIC;
    signal wbuf_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal wbuf_V_ce0 : STD_LOGIC;
    signal wbuf_V_we0 : STD_LOGIC;
    signal wbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bbuf_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal bbuf_V_ce0 : STD_LOGIC;
    signal bbuf_V_we0 : STD_LOGIC;
    signal dwbuf_V_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dwbuf_V_ce0 : STD_LOGIC;
    signal dwbuf_V_we0 : STD_LOGIC;
    signal dwbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_ce0 : STD_LOGIC;
    signal dbbuf_V_we0 : STD_LOGIC;
    signal dbbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dbbuf_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal dbbuf_V_ce1 : STD_LOGIC;
    signal k_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln100_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_476 : STD_LOGIC_VECTOR (37 downto 0);
    signal i_2_reg_488 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_515_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_4_phi_fu_526_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_j_3_phi_fu_538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_556 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state62 : BOOLEAN;
    signal i_1_reg_579 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal i_3_reg_602 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal icmp_ln62_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_rhs_phi_fu_627_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal zext_ln41_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln85_1_fu_943_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_2_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln89_3_fu_1026_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1118_1_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_fu_1097_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln102_1_fu_1197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln64_1_fu_1286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln71_fu_1318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1116_1_fu_1338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1116_2_fu_1348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln40_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln84_fu_902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln101_fu_1155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln63_fu_1245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal x_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal dy_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_649_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln38_fu_665_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_1_fu_670_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln38_fu_680_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln38_1_fu_697_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln_fu_708_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_753_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_753_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_794_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_802_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_802_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln50_1_fu_808_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln51_1_fu_820_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln50_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln50_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_870_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_870_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_47_fu_875_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_879_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_48_fu_887_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_fu_892_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_cast_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln85_1_fu_934_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln89_fu_977_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln89_1_fu_981_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln89_1_fu_1006_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1392_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1401_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_5_cast_fu_1084_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln703_fu_1093_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_54_fu_1128_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_1132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_55_fu_1140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln2_fu_1145_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln102_fu_1165_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_4_cast_fu_1179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln102_1_fu_1188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln102_fu_1192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln102_fu_1192_p2 : signal is "no";
    signal empty_40_fu_1218_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_1222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_fu_1230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln6_fu_1235_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_cast_fu_1268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_1_fu_1277_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln69_fu_1301_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1116_fu_1310_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_1_fu_1334_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1426_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1378_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1384_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1384_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1392_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1408_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1408_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1414_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1414_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1420_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1420_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1426_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1408_ce : STD_LOGIC;
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal grp_fu_1378_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1384_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1408_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1414_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1420_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_802_p00 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_870_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fcc_combined_mul_32s_34ns_65_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component fcc_combined_mul_31s_7ns_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fcc_combined_mul_31s_31s_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component fcc_combined_mul_32ns_7ns_38_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component fcc_combined_mul_31ns_32ns_63_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component fcc_combined_mul_mul_6ns_11ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_mac_muladd_10ns_11ns_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component fcc_combined_mul_mul_16s_16s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component fcc_combined_wbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_bbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_dbbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fcc_combined_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        wt : OUT STD_LOGIC_VECTOR (31 downto 0);
        dwt : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        db : OUT STD_LOGIC_VECTOR (31 downto 0);
        xdim : OUT STD_LOGIC_VECTOR (31 downto 0);
        ydim : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwprop : OUT STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fcc_combined_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    CRTL_BUS_s_axi_U : component fcc_combined_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        wt => wt,
        dwt => dwt,
        b => b,
        db => db,
        xdim => xdim,
        ydim => ydim,
        fwprop => fwprop,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component fcc_combined_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_3_reg_1859,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => xdim_read_reg_1450,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => reg_633,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    wbuf_V_U : component fcc_combined_wbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 50000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => wbuf_V_address0,
        ce0 => wbuf_V_ce0,
        we0 => wbuf_V_we0,
        d0 => gmem_addr_1_read_reg_1937,
        q0 => wbuf_V_q0);

    bbuf_V_U : component fcc_combined_bbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bbuf_V_address0,
        ce0 => bbuf_V_ce0,
        we0 => bbuf_V_we0,
        d0 => gmem_addr_read_reg_1542,
        q0 => bbuf_V_q0);

    dwbuf_V_U : component fcc_combined_wbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 50000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dwbuf_V_address0,
        ce0 => dwbuf_V_ce0,
        we0 => dwbuf_V_we0,
        d0 => dwbuf_V_d0,
        q0 => dwbuf_V_q0);

    dbbuf_V_U : component fcc_combined_dbbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dbbuf_V_addr_reg_1825_pp3_iter1_reg,
        ce0 => dbbuf_V_ce0,
        we0 => dbbuf_V_we0,
        d0 => dbbuf_V_d0,
        address1 => dbbuf_V_address1,
        ce1 => dbbuf_V_ce1,
        q1 => dbbuf_V_q1);

    mul_32s_34ns_65_2_1_U1 : component fcc_combined_mul_32s_34ns_65_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ydim_read_reg_1439,
        din1 => grp_fu_649_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_649_p2);

    mul_31s_7ns_31_2_1_U2 : component fcc_combined_mul_31s_7ns_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 7,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_753_p0,
        din1 => grp_fu_753_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_753_p2);

    mul_31s_31s_31_2_1_U3 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_ln50_reg_1569,
        din1 => grp_fu_794_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_794_p2);

    mul_32ns_7ns_38_2_1_U4 : component fcc_combined_mul_32ns_7ns_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_802_p0,
        din1 => grp_fu_802_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_802_p2);

    mul_31s_31s_31_2_1_U5 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_2_reg_488,
        din1 => trunc_ln46_reg_1547,
        ce => ap_const_logic_1,
        dout => grp_fu_862_p2);

    mul_31ns_32ns_63_2_1_U6 : component fcc_combined_mul_31ns_32ns_63_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_870_p0,
        din1 => grp_fu_870_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_870_p2);

    mul_31s_31s_31_2_1_U7 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_6_reg_556,
        din1 => trunc_ln46_reg_1547,
        ce => ap_const_logic_1,
        dout => grp_fu_1123_p2);

    mul_31s_31s_31_2_1_U8 : component fcc_combined_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_1_reg_579,
        din1 => trunc_ln46_reg_1547,
        ce => ap_const_logic_1,
        dout => grp_fu_1213_p2);

    mul_mul_6ns_11ns_16_4_1_U9 : component fcc_combined_mul_mul_6ns_11ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1378_p0,
        din1 => grp_fu_1378_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1378_p2);

    mac_muladd_10ns_11ns_16ns_16_4_1_U10 : component fcc_combined_mac_muladd_10ns_11ns_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 11,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1384_p0,
        din1 => grp_fu_1384_p1,
        din2 => trunc_ln1118_reg_1741,
        ce => ap_const_logic_1,
        dout => grp_fu_1384_p3);

    mac_muladd_16s_16s_29ns_29_4_1_U11 : component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_load_1_reg_1776,
        din1 => dy_Dout_A,
        din2 => grp_fu_1392_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1392_p3);

    mul_mul_16s_16s_29_4_1_U12 : component fcc_combined_mul_mul_16s_16s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => wbuf_V_q0,
        din1 => dy_Dout_A,
        ce => ap_const_logic_1,
        dout => grp_fu_1401_p2);

    mul_mul_6ns_11ns_16_4_1_U13 : component fcc_combined_mul_mul_6ns_11ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1408_p0,
        din1 => grp_fu_1408_p1,
        ce => grp_fu_1408_ce,
        dout => grp_fu_1408_p2);

    mul_mul_6ns_11ns_16_4_1_U14 : component fcc_combined_mul_mul_6ns_11ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1414_p0,
        din1 => grp_fu_1414_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1414_p2);

    mul_mul_6ns_11ns_16_4_1_U15 : component fcc_combined_mul_mul_6ns_11ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1420_p0,
        din1 => grp_fu_1420_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1420_p2);

    mac_muladd_16s_16s_29ns_29_4_1_U16 : component fcc_combined_mac_muladd_16s_16s_29ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_Dout_A,
        din1 => wbuf_V_q0,
        din2 => grp_fu_1426_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1426_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state31))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state31)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state45))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state45)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state45);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state55))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state55)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state55);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state73))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state73)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state73);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp6_flush_enable)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter4 <= ap_enable_reg_pp6_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter4_state85) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp6_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter4_state85))) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter3;
                elsif ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter5 <= ap_enable_reg_pp6_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                    ap_enable_reg_pp6_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36257_fu_837_p2 = ap_const_lv1_1) and (fwprop_read_reg_1435 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_1_reg_579 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
                i_1_reg_579 <= add_ln62_reg_1889;
            end if; 
        end if;
    end process;

    i_2_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36257_fu_837_p2 = ap_const_lv1_1) and (fwprop_read_reg_1435 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_2_reg_488 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                i_2_reg_488 <= add_ln83_reg_1643;
            end if; 
        end if;
    end process;

    i_3_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (icmp_ln62_fu_1208_p2 = ap_const_lv1_1))) then 
                i_3_reg_602 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                i_3_reg_602 <= add_ln69_reg_1942;
            end if; 
        end if;
    end process;

    i_4_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_4_reg_522 <= select_ln89_3_reg_1761;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_4_reg_522 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_5_reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_1088_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_5_reg_545 <= add_ln96_fu_1078_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_5_reg_545 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_6_reg_556_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36257_reg_1627 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                i_6_reg_556 <= ap_const_lv31_0;
            elsif ((not(((gmem_BVALID = ap_const_logic_0) and (cmp37252_reg_1555 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
                i_6_reg_556 <= add_ln100_reg_1846;
            end if; 
        end if;
    end process;

    i_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_453 <= ap_const_lv31_0;
            elsif (((icmp_ln40_1_fu_737_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_453 <= add_ln40_fu_731_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten_reg_511 <= add_ln89_2_reg_1706;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                indvar_flatten_reg_511 <= ap_const_lv63_0;
            end if; 
        end if;
    end process;

    j_1_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_1_reg_500 <= ap_const_lv31_0;
            elsif (((icmp_ln84_fu_929_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_1_reg_500 <= add_ln84_fu_919_p2;
            end if; 
        end if;
    end process;

    j_2_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_1329_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                j_2_reg_613 <= add_ln73_fu_1323_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                j_2_reg_613 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_3_reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_3_reg_534 <= add_ln90_reg_1766;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                j_3_reg_534 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_4_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                j_4_reg_568 <= ap_const_lv31_0;
            elsif (((icmp_ln101_fu_1183_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                j_4_reg_568 <= add_ln101_fu_1173_p2;
            end if; 
        end if;
    end process;

    j_reg_591_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                j_reg_591 <= ap_const_lv31_0;
            elsif (((icmp_ln63_fu_1272_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                j_reg_591 <= add_ln63_fu_1262_p2;
            end if; 
        end if;
    end process;

    k_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and ((fwprop_read_reg_1435 = ap_const_lv1_1) or ((cmp36257_reg_1627 = ap_const_lv1_0) or (icmp_ln100_fu_1118_p2 = ap_const_lv1_1))))) then 
                k_reg_464 <= add_ln50_reg_1579;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                k_reg_464 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and ((fwprop_read_reg_1435 = ap_const_lv1_1) or ((cmp36257_reg_1627 = ap_const_lv1_0) or (icmp_ln100_fu_1118_p2 = ap_const_lv1_1))))) then 
                phi_mul_reg_476 <= add_ln46_reg_1589;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_mul_reg_476 <= ap_const_lv38_0;
            end if; 
        end if;
    end process;

    rhs_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_reg_1985_pp6_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1))) then 
                rhs_reg_624 <= grp_fu_1426_p3(28 downto 13);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                rhs_reg_624 <= bbuf_V_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36257_reg_1627 = ap_const_lv1_1) and (fwprop_read_reg_1435 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                add_ln100_reg_1846 <= add_ln100_fu_1112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_1329_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                add_ln1116_reg_1989 <= add_ln1116_fu_1343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln46_reg_1589 <= add_ln46_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln50_reg_1579 <= add_ln50_fu_773_p2;
                icmp_ln46_reg_1585 <= icmp_ln46_fu_779_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                add_ln62_reg_1889 <= add_ln62_fu_1202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_1272_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln64_reg_1932 <= add_ln64_fu_1281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                add_ln64_reg_1932_pp5_iter1_reg <= add_ln64_reg_1932;
                icmp_ln63_reg_1928 <= icmp_ln63_fu_1272_p2;
                icmp_ln63_reg_1928_pp5_iter1_reg <= icmp_ln63_reg_1928;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                add_ln69_reg_1942 <= add_ln69_fu_1290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_1296_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                add_ln71_reg_1950 <= add_ln71_fu_1305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln83_reg_1643 <= add_ln83_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_fu_929_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln85_reg_1691 <= add_ln85_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln85_reg_1691_pp1_iter1_reg <= add_ln85_reg_1691;
                icmp_ln84_reg_1687 <= icmp_ln84_fu_929_p2;
                icmp_ln84_reg_1687_pp1_iter1_reg <= icmp_ln84_reg_1687;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln89_2_reg_1706 <= add_ln89_2_fu_947_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_953_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln89_reg_1715 <= add_ln89_fu_958_p2;
                icmp_ln90_reg_1720 <= icmp_ln90_fu_964_p2;
                select_ln89_2_reg_1730 <= select_ln89_2_fu_985_p3;
                select_ln89_reg_1725 <= select_ln89_fu_969_p3;
                trunc_ln1118_reg_1741 <= trunc_ln1118_fu_997_p1;
                    zext_ln1118_reg_1746(15 downto 0) <= zext_ln1118_fu_1001_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                add_ln90_reg_1766 <= add_ln90_fu_1021_p2;
                select_ln89_3_reg_1761 <= select_ln89_3_fu_1015_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                b_read_reg_1465 <= b;
                dwt_read_reg_1470 <= dwt;
                fwprop_read_reg_1435 <= (0=>fwprop, others=>'-');
                tmp_reg_1481 <= tmp_fu_638_p1(31 downto 31);
                wt_read_reg_1476 <= wt;
                xdim_read_reg_1450 <= xdim;
                ydim_read_reg_1439 <= ydim;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                cmp36257_reg_1627 <= cmp36257_fu_837_p2;
                trunc_ln51_reg_1616 <= trunc_ln51_fu_816_p1;
                ub_reg_1622 <= ub_fu_829_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                cmp37252_reg_1555 <= cmp37252_fu_759_p2;
                mul_ln50_reg_1569 <= grp_fu_753_p2;
                sext_ln46_1_reg_1564 <= sext_ln46_1_fu_767_p1;
                sext_ln46_reg_1559 <= sext_ln46_fu_764_p1;
                    zext_ln89_reg_1574(31 downto 0) <= zext_ln89_fu_770_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_fu_1088_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_addr_reg_1825 <= zext_ln703_fu_1097_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_addr_reg_1825_pp3_iter1_reg <= dbbuf_V_addr_reg_1825;
                icmp_ln96_reg_1821 <= icmp_ln96_fu_1088_p2;
                icmp_ln96_reg_1821_pp3_iter1_reg <= icmp_ln96_reg_1821;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (icmp_ln96_reg_1821 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                dbbuf_V_load_reg_1836 <= dbbuf_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_reg_1711_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                dwbuf_V_addr_1_reg_1791 <= zext_ln1118_1_fu_1034_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                dwbuf_V_addr_1_reg_1791_pp2_iter2_reg <= dwbuf_V_addr_1_reg_1791;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                empty_39_reg_1897 <= grp_fu_1213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                empty_46_reg_1656 <= grp_fu_862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                empty_53_reg_1854 <= grp_fu_1123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_1928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                gmem_addr_1_read_reg_1937 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp37252_reg_1555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                gmem_addr_1_reg_1902 <= sext_ln63_fu_1245_p1;
                trunc_ln64_reg_1908 <= trunc_ln64_fu_1255_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln84_reg_1687 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                gmem_addr_2_read_reg_1696 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp37252_reg_1555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                gmem_addr_2_reg_1661 <= sext_ln84_fu_902_p1;
                trunc_ln85_reg_1667 <= trunc_ln85_fu_912_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp37252_reg_1555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                gmem_addr_3_reg_1859 <= sext_ln101_fu_1155_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_1_reg_1533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_addr_read_reg_1542 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln101_reg_1880 <= icmp_ln101_fu_1183_p2;
                icmp_ln101_reg_1880_pp4_iter1_reg <= icmp_ln101_reg_1880;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln40_1_reg_1533 <= icmp_ln40_1_fu_737_p2;
                icmp_ln40_1_reg_1533_pp0_iter1_reg <= icmp_ln40_1_reg_1533;
                trunc_ln41_reg_1537_pp0_iter1_reg <= trunc_ln41_reg_1537;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln40_reg_1508 <= icmp_ln40_fu_692_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln73_reg_1985 <= icmp_ln73_fu_1329_p2;
                icmp_ln73_reg_1985_pp6_iter1_reg <= icmp_ln73_reg_1985;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                icmp_ln73_reg_1985_pp6_iter2_reg <= icmp_ln73_reg_1985_pp6_iter1_reg;
                icmp_ln73_reg_1985_pp6_iter3_reg <= icmp_ln73_reg_1985_pp6_iter2_reg;
                icmp_ln73_reg_1985_pp6_iter4_reg <= icmp_ln73_reg_1985_pp6_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln89_reg_1711 <= icmp_ln89_fu_953_p2;
                icmp_ln89_reg_1711_pp2_iter1_reg <= icmp_ln89_reg_1711;
                icmp_ln89_reg_1711_pp2_iter2_reg <= icmp_ln89_reg_1711_pp2_iter1_reg;
                icmp_ln89_reg_1711_pp2_iter3_reg <= icmp_ln89_reg_1711_pp2_iter2_reg;
                    zext_ln1118_reg_1746_pp2_iter1_reg(15 downto 0) <= zext_ln1118_reg_1746(15 downto 0);
                    zext_ln1118_reg_1746_pp2_iter2_reg(15 downto 0) <= zext_ln1118_reg_1746_pp2_iter1_reg(15 downto 0);
                    zext_ln1118_reg_1746_pp2_iter3_reg(15 downto 0) <= zext_ln1118_reg_1746_pp2_iter2_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                mul_ln102_reg_1870 <= grp_fu_1408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then
                mul_ln1116_reg_1975 <= grp_fu_1420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln38_reg_1492 <= grp_fu_649_p2;
                tmp_2_reg_1497 <= grp_fu_649_p2(64 downto 38);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mul_ln50_1_reg_1604 <= grp_fu_794_p2;
                mul_ln50_2_reg_1611 <= grp_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                mul_ln64_reg_1918 <= grp_fu_1414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                mul_ln85_reg_1677 <= grp_fu_1378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                mul_ln89_reg_1701 <= grp_fu_870_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                num_iters_reg_1512 <= num_iters_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln101_reg_1880 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((icmp_ln89_reg_1711_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                reg_633 <= dwbuf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_1481 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sub_ln38_1_reg_1503 <= sub_ln38_1_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36257_reg_1627 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                trunc_ln100_reg_1841 <= trunc_ln100_fu_1109_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln40_reg_1523 <= trunc_ln40_fu_728_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_1_fu_737_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln41_reg_1537 <= trunc_ln41_fu_742_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln46_reg_1547 <= trunc_ln46_fu_750_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36257_fu_837_p2 = ap_const_lv1_1) and (fwprop_read_reg_1435 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                trunc_ln62_reg_1637 <= trunc_ln62_fu_847_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp36257_fu_837_p2 = ap_const_lv1_1) and (fwprop_read_reg_1435 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                trunc_ln83_reg_1631 <= trunc_ln83_fu_843_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                x_load_1_reg_1776 <= x_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                y_addr_reg_1965 <= zext_ln71_fu_1318_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    zext_ln89_reg_1574(62 downto 32) <= "0000000000000000000000000000000";
    zext_ln1118_reg_1746(31 downto 16) <= "0000000000000000";
    zext_ln1118_reg_1746_pp2_iter1_reg(31 downto 16) <= "0000000000000000";
    zext_ln1118_reg_1746_pp2_iter2_reg(31 downto 16) <= "0000000000000000";
    zext_ln1118_reg_1746_pp2_iter3_reg(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln40_reg_1508, ap_enable_reg_pp0_iter1, ap_CS_fsm_state66, ap_enable_reg_pp5_iter1, ap_CS_fsm_state24, ap_enable_reg_pp1_iter1, ap_CS_fsm_state52, ap_enable_reg_pp4_iter2, ap_CS_fsm_state62, cmp37252_reg_1555, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_enable_reg_pp2_iter2, ap_enable_reg_pp4_iter1, fwprop_read_reg_1435, ap_enable_reg_pp0_iter0, icmp_ln40_1_fu_737_p2, icmp_ln46_reg_1585, ap_CS_fsm_state18, ap_CS_fsm_state20, cmp36257_fu_837_p2, cmp36257_reg_1627, ap_CS_fsm_state21, icmp_ln83_fu_857_p2, ap_CS_fsm_state23, ap_enable_reg_pp1_iter0, icmp_ln84_fu_929_p2, ap_enable_reg_pp2_iter0, icmp_ln89_fu_953_p2, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter0, icmp_ln96_fu_1088_p2, ap_enable_reg_pp3_iter1, ap_CS_fsm_state49, ap_CS_fsm_state51, ap_enable_reg_pp4_iter0, icmp_ln101_fu_1183_p2, ap_CS_fsm_state63, ap_CS_fsm_state65, ap_enable_reg_pp5_iter0, icmp_ln63_fu_1272_p2, ap_CS_fsm_state77, icmp_ln69_fu_1296_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp2_stage1_subdone, ap_enable_reg_pp2_iter3, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4, icmp_ln100_fu_1118_p2, icmp_ln62_fu_1208_p2, ap_block_state5_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_reg_1508 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_reg_1508 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln40_1_fu_737_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln40_1_fu_737_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln46_reg_1585 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((cmp36257_fu_837_p2 = ap_const_lv1_1) and (fwprop_read_reg_1435 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                elsif (((cmp36257_fu_837_p2 = ap_const_lv1_0) and (fwprop_read_reg_1435 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                elsif (((cmp36257_fu_837_p2 = ap_const_lv1_1) and (fwprop_read_reg_1435 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln83_fu_857_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((cmp37252_reg_1555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln84_fu_929_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((icmp_ln84_fu_929_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln89_fu_953_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln89_fu_953_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((not(((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln96_fu_1088_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln96_fu_1088_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and ((fwprop_read_reg_1435 = ap_const_lv1_1) or ((cmp36257_reg_1627 = ap_const_lv1_0) or (icmp_ln100_fu_1118_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (((cmp37252_reg_1555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln101_fu_1183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((icmp_ln101_fu_1183_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (cmp37252_reg_1555 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (icmp_ln62_fu_1208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((cmp37252_reg_1555 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state66 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln63_fu_1272_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((icmp_ln63_fu_1272_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state77 => 
                if (((icmp_ln69_fu_1296_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter4 = ap_const_logic_1) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter4 = ap_const_logic_1) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_1112_p2 <= std_logic_vector(signed(i_6_reg_556) + signed(ap_const_lv31_1));
    add_ln101_fu_1173_p2 <= std_logic_vector(unsigned(j_4_reg_568) + unsigned(ap_const_lv31_1));
    add_ln102_fu_1192_p2 <= std_logic_vector(unsigned(mul_ln102_reg_1870) + unsigned(trunc_ln102_1_fu_1188_p1));
    add_ln1116_fu_1343_p2 <= std_logic_vector(unsigned(mul_ln1116_reg_1975) + unsigned(trunc_ln1116_1_fu_1334_p1));
    add_ln40_fu_731_p2 <= std_logic_vector(unsigned(i_reg_453) + unsigned(ap_const_lv31_1));
    add_ln46_fu_784_p2 <= std_logic_vector(unsigned(phi_mul_reg_476) + unsigned(ap_const_lv38_32));
    add_ln50_fu_773_p2 <= std_logic_vector(unsigned(k_reg_464) + unsigned(ap_const_lv32_1));
    add_ln62_fu_1202_p2 <= std_logic_vector(signed(i_1_reg_579) + signed(ap_const_lv31_1));
    add_ln63_fu_1262_p2 <= std_logic_vector(unsigned(j_reg_591) + unsigned(ap_const_lv31_1));
    add_ln64_fu_1281_p2 <= std_logic_vector(unsigned(mul_ln64_reg_1918) + unsigned(trunc_ln64_1_fu_1277_p1));
    add_ln69_fu_1290_p2 <= std_logic_vector(unsigned(i_3_reg_602) + unsigned(ap_const_lv31_1));
    add_ln71_fu_1305_p2 <= std_logic_vector(unsigned(trunc_ln69_fu_1301_p1) + unsigned(trunc_ln51_reg_1616));
    add_ln73_fu_1323_p2 <= std_logic_vector(unsigned(j_2_reg_613) + unsigned(ap_const_lv32_1));
    add_ln83_fu_851_p2 <= std_logic_vector(signed(i_2_reg_488) + signed(ap_const_lv31_1));
    add_ln84_fu_919_p2 <= std_logic_vector(unsigned(j_1_reg_500) + unsigned(ap_const_lv31_1));
    add_ln85_fu_938_p2 <= std_logic_vector(unsigned(mul_ln85_reg_1677) + unsigned(trunc_ln85_1_fu_934_p1));
    add_ln89_1_fu_1006_p2 <= std_logic_vector(unsigned(select_ln89_2_reg_1730) + unsigned(trunc_ln51_reg_1616));
    add_ln89_2_fu_947_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_515_p4) + unsigned(ap_const_lv63_1));
    add_ln89_fu_958_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_4_phi_fu_526_p4) + unsigned(ap_const_lv31_1));
    add_ln90_fu_1021_p2 <= std_logic_vector(unsigned(select_ln89_reg_1725) + unsigned(ap_const_lv32_1));
    add_ln96_fu_1078_p2 <= std_logic_vector(unsigned(i_5_reg_545) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(28);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(32);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(34);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(42);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(58);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(64);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state21 <= ap_CS_fsm(18);
    ap_CS_fsm_state22 <= ap_CS_fsm(19);
    ap_CS_fsm_state23 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(29);
    ap_CS_fsm_state35 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(33);
    ap_CS_fsm_state48 <= ap_CS_fsm(35);
    ap_CS_fsm_state49 <= ap_CS_fsm(36);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(37);
    ap_CS_fsm_state51 <= ap_CS_fsm(38);
    ap_CS_fsm_state52 <= ap_CS_fsm(39);
    ap_CS_fsm_state53 <= ap_CS_fsm(40);
    ap_CS_fsm_state54 <= ap_CS_fsm(41);
    ap_CS_fsm_state62 <= ap_CS_fsm(47);
    ap_CS_fsm_state63 <= ap_CS_fsm(48);
    ap_CS_fsm_state64 <= ap_CS_fsm(49);
    ap_CS_fsm_state65 <= ap_CS_fsm(50);
    ap_CS_fsm_state66 <= ap_CS_fsm(51);
    ap_CS_fsm_state69 <= ap_CS_fsm(54);
    ap_CS_fsm_state72 <= ap_CS_fsm(57);
    ap_CS_fsm_state76 <= ap_CS_fsm(59);
    ap_CS_fsm_state77 <= ap_CS_fsm(60);
    ap_CS_fsm_state79 <= ap_CS_fsm(62);
    ap_CS_fsm_state80 <= ap_CS_fsm(63);
    ap_CS_fsm_state87 <= ap_CS_fsm(65);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln40_1_reg_1533, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln40_1_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln40_1_reg_1533, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln40_1_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln84_reg_1687, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln84_reg_1687 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln84_reg_1687, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln84_reg_1687 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state57_io)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state57_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter2, ap_block_state57_io)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state57_io) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln63_reg_1928, gmem_RVALID)
    begin
                ap_block_pp5_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln63_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln63_reg_1928, gmem_RVALID)
    begin
                ap_block_pp5_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln63_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter1_assign_proc : process(icmp_ln40_1_reg_1533, gmem_RVALID)
    begin
                ap_block_state13_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln40_1_reg_1533 = ap_const_lv1_0));
    end process;

        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp1_stage0_iter1_assign_proc : process(icmp_ln84_reg_1687, gmem_RVALID)
    begin
                ap_block_state32_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln84_reg_1687 = ap_const_lv1_0));
    end process;

        ap_block_state33_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state57_io_assign_proc : process(icmp_ln101_reg_1880_pp4_iter1_reg, gmem_WREADY)
    begin
                ap_block_state57_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln101_reg_1880_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state57_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(icmp_ln40_reg_1508, gmem_ARREADY)
    begin
                ap_block_state5_io <= ((gmem_ARREADY = ap_const_logic_0) and (icmp_ln40_reg_1508 = ap_const_lv1_1));
    end process;


    ap_block_state62_assign_proc : process(cmp37252_reg_1555, gmem_BVALID)
    begin
                ap_block_state62 <= ((gmem_BVALID = ap_const_logic_0) and (cmp37252_reg_1555 = ap_const_lv1_1));
    end process;

        ap_block_state73_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state74_pp5_stage0_iter1_assign_proc : process(icmp_ln63_reg_1928, gmem_RVALID)
    begin
                ap_block_state74_pp5_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln63_reg_1928 = ap_const_lv1_0));
    end process;

        ap_block_state75_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp6_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp6_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state12_assign_proc : process(icmp_ln40_1_fu_737_p2)
    begin
        if ((icmp_ln40_1_fu_737_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state31_assign_proc : process(icmp_ln84_fu_929_p2)
    begin
        if ((icmp_ln84_fu_929_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state36_assign_proc : process(icmp_ln89_fu_953_p2)
    begin
        if ((icmp_ln89_fu_953_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state45_assign_proc : process(icmp_ln96_fu_1088_p2)
    begin
        if ((icmp_ln96_fu_1088_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state45 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state55_assign_proc : process(icmp_ln101_fu_1183_p2)
    begin
        if ((icmp_ln101_fu_1183_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state55 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state73_assign_proc : process(icmp_ln63_fu_1272_p2)
    begin
        if ((icmp_ln63_fu_1272_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state73 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state73 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter4_state85_assign_proc : process(ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4)
    begin
        if (((ap_enable_reg_pp6_iter4 = ap_const_logic_1) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0))) then 
            ap_condition_pp6_exit_iter4_state85 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter4_state85 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_flush_enable_assign_proc : process(ap_CS_fsm_pp6_stage0, icmp_ln73_fu_1329_p2, ap_block_pp6_stage0_subdone)
    begin
        if (((icmp_ln73_fu_1329_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            ap_condition_pp6_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp6_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln46_reg_1585, ap_CS_fsm_state18)
    begin
        if (((icmp_ln46_reg_1585 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter5, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter4)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter4 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_4_phi_fu_526_p4_assign_proc : process(i_4_reg_522, ap_CS_fsm_pp2_stage0, icmp_ln89_reg_1711, select_ln89_3_reg_1761, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_4_phi_fu_526_p4 <= select_ln89_3_reg_1761;
        else 
            ap_phi_mux_i_4_phi_fu_526_p4 <= i_4_reg_522;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_515_p4_assign_proc : process(indvar_flatten_reg_511, ap_CS_fsm_pp2_stage0, icmp_ln89_reg_1711, add_ln89_2_reg_1706, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_515_p4 <= add_ln89_2_reg_1706;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_515_p4 <= indvar_flatten_reg_511;
        end if; 
    end process;


    ap_phi_mux_j_3_phi_fu_538_p4_assign_proc : process(j_3_reg_534, ap_CS_fsm_pp2_stage0, icmp_ln89_reg_1711, add_ln90_reg_1766, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1711 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_j_3_phi_fu_538_p4 <= add_ln90_reg_1766;
        else 
            ap_phi_mux_j_3_phi_fu_538_p4 <= j_3_reg_534;
        end if; 
    end process;


    ap_phi_mux_rhs_phi_fu_627_p4_assign_proc : process(rhs_reg_624, icmp_ln73_reg_1985_pp6_iter4_reg, ap_enable_reg_pp6_iter5, ap_block_pp6_stage0, grp_fu_1426_p3)
    begin
        if (((icmp_ln73_reg_1985_pp6_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_rhs_phi_fu_627_p4 <= grp_fu_1426_p3(28 downto 13);
        else 
            ap_phi_mux_rhs_phi_fu_627_p4 <= rhs_reg_624;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln46_reg_1585, ap_CS_fsm_state18)
    begin
        if (((icmp_ln46_reg_1585 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bbuf_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state79, ap_enable_reg_pp0_iter2, zext_ln41_fu_746_p1, zext_ln71_fu_1318_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            bbuf_V_address0 <= zext_ln71_fu_1318_p1(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bbuf_V_address0 <= zext_ln41_fu_746_p1(10 - 1 downto 0);
        else 
            bbuf_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    bbuf_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state79, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state79) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            bbuf_V_ce0 <= ap_const_logic_1;
        else 
            bbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bbuf_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln40_1_reg_1533_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln40_1_reg_1533_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bbuf_V_we0 <= ap_const_logic_1;
        else 
            bbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp36257_fu_837_p2 <= "1" when (signed(ub_fu_829_p3) > signed(ap_const_lv32_0)) else "0";
    cmp37252_fu_759_p2 <= "1" when (signed(xdim_read_reg_1450) > signed(ap_const_lv32_0)) else "0";
    dbbuf_V_address1 <= zext_ln703_fu_1097_p1(10 - 1 downto 0);

    dbbuf_V_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            dbbuf_V_ce0 <= ap_const_logic_1;
        else 
            dbbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dbbuf_V_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dbbuf_V_ce1 <= ap_const_logic_1;
        else 
            dbbuf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dbbuf_V_d0 <= std_logic_vector(unsigned(dy_Dout_A) + unsigned(dbbuf_V_load_reg_1836));

    dbbuf_V_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln96_reg_1821_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((icmp_ln96_reg_1821_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            dbbuf_V_we0 <= ap_const_logic_1;
        else 
            dbbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dwbuf_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_block_pp4_stage0, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, dwbuf_V_addr_1_reg_1791_pp2_iter2_reg, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, zext_ln85_1_fu_943_p1, ap_block_pp2_stage1, zext_ln1118_1_fu_1034_p1, zext_ln102_1_fu_1197_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            dwbuf_V_address0 <= zext_ln102_1_fu_1197_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= dwbuf_V_addr_1_reg_1791_pp2_iter2_reg;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dwbuf_V_address0 <= zext_ln1118_1_fu_1034_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            dwbuf_V_address0 <= zext_ln85_1_fu_943_p1(16 - 1 downto 0);
        else 
            dwbuf_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)))) then 
            dwbuf_V_ce0 <= ap_const_logic_1;
        else 
            dwbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dwbuf_V_d0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, gmem_addr_2_read_reg_1696, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3, ap_block_pp2_stage0, grp_fu_1392_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dwbuf_V_d0 <= grp_fu_1392_p3(28 downto 13);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            dwbuf_V_d0 <= gmem_addr_2_read_reg_1696;
        else 
            dwbuf_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dwbuf_V_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_block_pp1_stage0_11001, icmp_ln84_reg_1687_pp1_iter1_reg, icmp_ln89_reg_1711_pp2_iter2_reg, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter3)
    begin
        if ((((icmp_ln89_reg_1711_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1)) or ((icmp_ln84_reg_1687_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            dwbuf_V_we0 <= ap_const_logic_1;
        else 
            dwbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dx_Addr_A <= std_logic_vector(shift_left(unsigned(zext_ln1118_reg_1746_pp2_iter3_reg),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    dx_Clk_A <= ap_clk;
    dx_Din_A <= grp_fu_1401_p2(28 downto 13);

    dx_EN_A_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dx_EN_A <= ap_const_logic_1;
        else 
            dx_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dx_Rst_A <= ap_rst_n_inv;

    dx_WEN_A_assign_proc : process(icmp_ln89_reg_1711_pp2_iter3_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter3)
    begin
        if (((icmp_ln89_reg_1711_pp2_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then 
            dx_WEN_A <= ap_const_lv2_3;
        else 
            dx_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    dy_Addr_A <= std_logic_vector(shift_left(unsigned(dy_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    dy_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, zext_ln89_2_fu_1010_p1, ap_block_pp2_stage1, zext_ln89_3_fu_1026_p1, zext_ln703_fu_1097_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            dy_Addr_A_orig <= zext_ln703_fu_1097_p1;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dy_Addr_A_orig <= zext_ln89_3_fu_1026_p1;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            dy_Addr_A_orig <= zext_ln89_2_fu_1010_p1;
        else 
            dy_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dy_Clk_A <= ap_clk;
    dy_Din_A <= ap_const_lv16_0;

    dy_EN_A_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            dy_EN_A <= ap_const_logic_1;
        else 
            dy_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dy_Rst_A <= ap_rst_n_inv;
    dy_WEN_A <= ap_const_lv2_0;
    empty_40_fu_1218_p2 <= std_logic_vector(unsigned(empty_39_reg_1897) + unsigned(mul_ln50_1_reg_1604));
    empty_41_fu_1230_p2 <= std_logic_vector(unsigned(tmp_4_fu_1222_p3) + unsigned(wt_read_reg_1476));
    empty_47_fu_875_p2 <= std_logic_vector(unsigned(empty_46_reg_1656) + unsigned(mul_ln50_1_reg_1604));
    empty_48_fu_887_p2 <= std_logic_vector(unsigned(tmp_5_fu_879_p3) + unsigned(dwt_read_reg_1470));
    empty_54_fu_1128_p2 <= std_logic_vector(unsigned(empty_53_reg_1854) + unsigned(mul_ln50_1_reg_1604));
    empty_55_fu_1140_p2 <= std_logic_vector(unsigned(tmp_6_fu_1132_p3) + unsigned(dwt_read_reg_1470));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state5, icmp_ln40_reg_1508, ap_CS_fsm_state66, ap_CS_fsm_state24, gmem_ARREADY, gmem_addr_2_reg_1661, gmem_addr_1_reg_1902, sext_ln40_fu_717_p1, ap_block_state5_io)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            gmem_ARADDR <= gmem_addr_1_reg_1902;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            gmem_ARADDR <= gmem_addr_2_reg_1661;
        elsif (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_reg_1508 = ap_const_lv1_1))) then 
            gmem_ARADDR <= sext_ln40_fu_717_p1;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state5, icmp_ln40_reg_1508, ap_CS_fsm_state66, ap_CS_fsm_state24, gmem_ARREADY, ydim_read_reg_1439, xdim_read_reg_1450, ap_block_state5_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
            gmem_ARLEN <= xdim_read_reg_1450;
        elsif (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_reg_1508 = ap_const_lv1_1))) then 
            gmem_ARLEN <= ydim_read_reg_1439;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state5, icmp_ln40_reg_1508, ap_CS_fsm_state66, ap_CS_fsm_state24, gmem_ARREADY, ap_block_state5_io)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_reg_1508 = ap_const_lv1_1)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state52, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state62, cmp37252_reg_1555, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (cmp37252_reg_1555 = ap_const_lv1_1))) and (cmp37252_reg_1555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln40_1_reg_1533, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln63_reg_1928, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln84_reg_1687, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_block_pp5_stage0_11001)
    begin
        if ((((icmp_ln84_reg_1687 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln63_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((icmp_ln40_1_reg_1533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp4_iter2, icmp_ln101_reg_1880_pp4_iter1_reg, ap_block_pp4_stage0_11001)
    begin
        if (((icmp_ln101_reg_1880_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state5, icmp_ln40_reg_1508, ap_CS_fsm_state66, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state66) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_reg_1508 = ap_const_lv1_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state62, cmp37252_reg_1555)
    begin
        if (((cmp37252_reg_1555 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln40_1_reg_1533, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln63_reg_1928, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln84_reg_1687)
    begin
        if ((((icmp_ln84_reg_1687 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln63_reg_1928 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((icmp_ln40_1_reg_1533 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0, icmp_ln101_reg_1880_pp4_iter1_reg)
    begin
        if (((icmp_ln101_reg_1880_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1378_p0 <= grp_fu_1378_p00(6 - 1 downto 0);
    grp_fu_1378_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln85_reg_1667),16));
    grp_fu_1378_p1 <= ap_const_lv16_3E8(11 - 1 downto 0);
    grp_fu_1384_p0 <= grp_fu_1384_p00(10 - 1 downto 0);
    grp_fu_1384_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_2_fu_985_p3),16));
    grp_fu_1384_p1 <= ap_const_lv16_3E8(11 - 1 downto 0);
    grp_fu_1392_p2 <= (reg_633 & ap_const_lv13_0);

    grp_fu_1408_ce_assign_proc : process(ap_CS_fsm_state52, gmem_AWREADY, ap_CS_fsm_state51, ap_CS_fsm_state54, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state53) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)))) then 
            grp_fu_1408_ce <= ap_const_logic_1;
        else 
            grp_fu_1408_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1408_p0 <= grp_fu_1408_p00(6 - 1 downto 0);
    grp_fu_1408_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln102_fu_1165_p1),16));
    grp_fu_1408_p1 <= ap_const_lv16_3E8(11 - 1 downto 0);
    grp_fu_1414_p0 <= grp_fu_1414_p00(6 - 1 downto 0);
    grp_fu_1414_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln64_reg_1908),16));
    grp_fu_1414_p1 <= ap_const_lv16_3E8(11 - 1 downto 0);
    grp_fu_1420_p0 <= grp_fu_1420_p00(6 - 1 downto 0);
    grp_fu_1420_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1116_fu_1310_p1),16));
    grp_fu_1420_p1 <= ap_const_lv16_3E8(11 - 1 downto 0);
    grp_fu_1426_p2 <= (ap_phi_mux_rhs_phi_fu_627_p4 & ap_const_lv13_0);
    grp_fu_649_p1 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_753_p0 <= xdim_read_reg_1450(31 - 1 downto 0);
    grp_fu_753_p1 <= ap_const_lv31_32(7 - 1 downto 0);
    grp_fu_794_p1 <= k_reg_464(31 - 1 downto 0);
    grp_fu_802_p0 <= grp_fu_802_p00(32 - 1 downto 0);
    grp_fu_802_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_reg_1579),38));
    grp_fu_802_p1 <= ap_const_lv38_32(7 - 1 downto 0);
    grp_fu_870_p0 <= grp_fu_870_p00(31 - 1 downto 0);
    grp_fu_870_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln83_reg_1631),63));
    grp_fu_870_p1 <= zext_ln89_reg_1574(32 - 1 downto 0);
    i_5_cast_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_545),32));
    icmp_ln100_fu_1118_p2 <= "1" when (i_6_reg_556 = trunc_ln100_reg_1841) else "0";
    icmp_ln101_fu_1183_p2 <= "1" when (j_4_cast_fu_1179_p1 = xdim_read_reg_1450) else "0";
    icmp_ln40_1_fu_737_p2 <= "1" when (i_reg_453 = trunc_ln40_reg_1523) else "0";
    icmp_ln40_fu_692_p2 <= "1" when (signed(ydim_read_reg_1439) > signed(ap_const_lv32_0)) else "0";
    icmp_ln46_fu_779_p2 <= "1" when (k_reg_464 = sext_ln46_1_reg_1564) else "0";
    icmp_ln50_fu_811_p2 <= "1" when (signed(sext_ln46_reg_1559) < signed(zext_ln50_1_fu_808_p1)) else "0";
    icmp_ln62_fu_1208_p2 <= "1" when (i_1_reg_579 = trunc_ln62_reg_1637) else "0";
    icmp_ln63_fu_1272_p2 <= "1" when (j_cast_fu_1268_p1 = xdim_read_reg_1450) else "0";
    icmp_ln69_fu_1296_p2 <= "1" when (i_3_reg_602 = trunc_ln62_reg_1637) else "0";
    icmp_ln73_fu_1329_p2 <= "1" when (j_2_reg_613 = xdim_read_reg_1450) else "0";
    icmp_ln83_fu_857_p2 <= "1" when (i_2_reg_488 = trunc_ln83_reg_1631) else "0";
    icmp_ln84_fu_929_p2 <= "1" when (j_1_cast_fu_925_p1 = xdim_read_reg_1450) else "0";
    icmp_ln89_fu_953_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_515_p4 = mul_ln89_reg_1701) else "0";
    icmp_ln90_fu_964_p2 <= "1" when (ap_phi_mux_j_3_phi_fu_538_p4 = xdim_read_reg_1450) else "0";
    icmp_ln96_fu_1088_p2 <= "1" when (i_5_cast_fu_1084_p1 = ydim_read_reg_1439) else "0";
    j_1_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_500),32));
    j_4_cast_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_568),32));
    j_cast_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_591),32));
    num_iters_fu_702_p2 <= std_logic_vector(unsigned(select_ln38_1_fu_697_p3) + unsigned(ap_const_lv27_1));
    select_ln38_1_fu_697_p3 <= 
        sub_ln38_1_reg_1503 when (tmp_reg_1481(0) = '1') else 
        tmp_2_reg_1497;
    select_ln38_fu_680_p3 <= 
        tmp_1_fu_670_p4 when (tmp_reg_1481(0) = '1') else 
        tmp_2_reg_1497;
    select_ln89_2_fu_985_p3 <= 
        trunc_ln89_fu_977_p1 when (icmp_ln90_fu_964_p2(0) = '1') else 
        trunc_ln89_1_fu_981_p1;
    select_ln89_3_fu_1015_p3 <= 
        add_ln89_reg_1715 when (icmp_ln90_reg_1720(0) = '1') else 
        i_4_reg_522;
    select_ln89_fu_969_p3 <= 
        ap_const_lv32_0 when (icmp_ln90_fu_964_p2(0) = '1') else 
        ap_phi_mux_j_3_phi_fu_538_p4;
        sext_ln101_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_1145_p4),32));

        sext_ln40_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_708_p4),32));

        sext_ln46_1_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_iters_reg_1512),32));

        sext_ln46_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ydim_read_reg_1439),39));

        sext_ln63_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_1235_p4),32));

        sext_ln84_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_892_p4),32));

    sub_ln38_1_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(select_ln38_fu_680_p3));
    sub_ln38_fu_665_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln38_reg_1492));
    sub_ln50_fu_824_p2 <= std_logic_vector(signed(ydim_read_reg_1439) - signed(trunc_ln51_1_fu_820_p1));
    tmp_1_fu_670_p4 <= sub_ln38_fu_665_p2(64 downto 38);
    tmp_4_fu_1222_p3 <= (empty_40_fu_1218_p2 & ap_const_lv1_0);
    tmp_5_fu_879_p3 <= (empty_47_fu_875_p2 & ap_const_lv1_0);
    tmp_6_fu_1132_p3 <= (empty_54_fu_1128_p2 & ap_const_lv1_0);
    tmp_fu_638_p1 <= ydim;
    trunc_ln100_fu_1109_p1 <= ub_reg_1622(31 - 1 downto 0);
    trunc_ln102_1_fu_1188_p1 <= j_4_reg_568(16 - 1 downto 0);
    trunc_ln102_fu_1165_p1 <= i_6_reg_556(6 - 1 downto 0);
    trunc_ln1116_1_fu_1334_p1 <= j_2_reg_613(16 - 1 downto 0);
    trunc_ln1116_fu_1310_p1 <= i_3_reg_602(6 - 1 downto 0);
    trunc_ln1118_fu_997_p1 <= select_ln89_fu_969_p3(16 - 1 downto 0);
    trunc_ln2_fu_1145_p4 <= empty_55_fu_1140_p2(31 downto 1);
    trunc_ln40_fu_728_p1 <= ydim_read_reg_1439(31 - 1 downto 0);
    trunc_ln41_fu_742_p1 <= i_reg_453(10 - 1 downto 0);
    trunc_ln46_fu_750_p1 <= xdim_read_reg_1450(31 - 1 downto 0);
    trunc_ln51_1_fu_820_p1 <= phi_mul_reg_476(32 - 1 downto 0);
    trunc_ln51_fu_816_p1 <= phi_mul_reg_476(10 - 1 downto 0);
    trunc_ln62_fu_847_p1 <= ub_fu_829_p3(31 - 1 downto 0);
    trunc_ln64_1_fu_1277_p1 <= j_reg_591(16 - 1 downto 0);
    trunc_ln64_fu_1255_p1 <= i_1_reg_579(6 - 1 downto 0);
    trunc_ln69_fu_1301_p1 <= i_3_reg_602(10 - 1 downto 0);
    trunc_ln6_fu_1235_p4 <= empty_41_fu_1230_p2(31 downto 1);
    trunc_ln703_fu_1093_p1 <= i_5_reg_545(10 - 1 downto 0);
    trunc_ln83_fu_843_p1 <= ub_fu_829_p3(31 - 1 downto 0);
    trunc_ln85_1_fu_934_p1 <= j_1_reg_500(16 - 1 downto 0);
    trunc_ln85_fu_912_p1 <= i_2_reg_488(6 - 1 downto 0);
    trunc_ln89_1_fu_981_p1 <= ap_phi_mux_i_4_phi_fu_526_p4(10 - 1 downto 0);
    trunc_ln89_fu_977_p1 <= add_ln89_fu_958_p2(10 - 1 downto 0);
    trunc_ln9_fu_892_p4 <= empty_48_fu_887_p2(31 downto 1);
    trunc_ln_fu_708_p4 <= b_read_reg_1465(31 downto 1);
    ub_fu_829_p3 <= 
        sub_ln50_fu_824_p2 when (icmp_ln50_fu_811_p2(0) = '1') else 
        ap_const_lv32_32;

    wbuf_V_address0_assign_proc : process(ap_block_pp5_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, ap_block_pp2_stage1, zext_ln1118_1_fu_1034_p1, zext_ln64_1_fu_1286_p1, zext_ln1116_2_fu_1348_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1))) then 
            wbuf_V_address0 <= zext_ln1116_2_fu_1348_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            wbuf_V_address0 <= zext_ln64_1_fu_1286_p1(16 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            wbuf_V_address0 <= zext_ln1118_1_fu_1034_p1(16 - 1 downto 0);
        else 
            wbuf_V_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    wbuf_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_block_pp5_stage0_11001, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp5_iter2, ap_enable_reg_pp6_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
            wbuf_V_ce0 <= ap_const_logic_1;
        else 
            wbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wbuf_V_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln63_reg_1928_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((icmp_ln63_reg_1928_pp5_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            wbuf_V_we0 <= ap_const_logic_1;
        else 
            wbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_Addr_A <= std_logic_vector(shift_left(unsigned(x_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    x_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln1118_fu_1001_p1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp2_stage0, ap_block_pp6_stage0, zext_ln1116_1_fu_1338_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            x_Addr_A_orig <= zext_ln1116_1_fu_1338_p1;
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            x_Addr_A_orig <= zext_ln1118_fu_1001_p1;
        else 
            x_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x_Clk_A <= ap_clk;
    x_Din_A <= ap_const_lv16_0;

    x_EN_A_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            x_EN_A <= ap_const_logic_1;
        else 
            x_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    x_Rst_A <= ap_rst_n_inv;
    x_WEN_A <= ap_const_lv2_0;
    y_Addr_A <= std_logic_vector(shift_left(unsigned(y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    y_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_addr_reg_1965),32));
    y_Clk_A <= ap_clk;

    y_Din_A_assign_proc : process(bbuf_V_q0, ap_CS_fsm_state80, ap_enable_reg_pp6_iter5, ap_block_pp6_stage0, grp_fu_1426_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1))) then 
            y_Din_A <= grp_fu_1426_p3(28 downto 13);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            y_Din_A <= bbuf_V_q0;
        else 
            y_Din_A <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_EN_A_assign_proc : process(ap_CS_fsm_state80, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1)))) then 
            y_EN_A <= ap_const_logic_1;
        else 
            y_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    y_Rst_A <= ap_rst_n_inv;

    y_WEN_A_assign_proc : process(ap_CS_fsm_state80, ap_block_pp6_stage0_11001, icmp_ln73_reg_1985_pp6_iter4_reg, ap_enable_reg_pp6_iter5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or ((icmp_ln73_reg_1985_pp6_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter5 = ap_const_logic_1)))) then 
            y_WEN_A <= ap_const_lv2_3;
        else 
            y_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    zext_ln102_1_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_fu_1192_p2),32));
    zext_ln1116_1_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1116_1_fu_1334_p1),32));
    zext_ln1116_2_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_reg_1989),32));
    zext_ln1118_1_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1384_p3),32));
    zext_ln1118_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1118_fu_997_p1),32));
    zext_ln41_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln41_reg_1537_pp0_iter1_reg),32));
    zext_ln50_1_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln50_2_reg_1611),39));
    zext_ln64_1_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_reg_1932_pp5_iter1_reg),32));
    zext_ln703_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_fu_1093_p1),32));
    zext_ln71_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_reg_1950),32));
    zext_ln85_1_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_reg_1691_pp1_iter1_reg),32));
    zext_ln89_2_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_1_fu_1006_p2),32));
    zext_ln89_3_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_2_reg_1730),32));
    zext_ln89_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xdim_read_reg_1450),63));
end behav;
