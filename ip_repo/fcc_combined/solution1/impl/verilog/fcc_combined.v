// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4102,HLS_SYN_DSP=0,HLS_SYN_FF=3367,HLS_SYN_LUT=2748,HLS_VERSION=2020_2}" *)

module fcc_combined (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        dx_Addr_A,
        dx_EN_A,
        dx_WEN_A,
        dx_Din_A,
        dx_Dout_A,
        dx_Clk_A,
        dx_Rst_A,
        y_Addr_A,
        y_EN_A,
        y_WEN_A,
        y_Din_A,
        y_Dout_A,
        y_Clk_A,
        y_Rst_A,
        dy_Addr_A,
        dy_EN_A,
        dy_WEN_A,
        dy_Din_A,
        dy_Dout_A,
        dy_Clk_A,
        dy_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 33'd2048;
parameter    ap_ST_fsm_state15 = 33'd4096;
parameter    ap_ST_fsm_state16 = 33'd8192;
parameter    ap_ST_fsm_state17 = 33'd16384;
parameter    ap_ST_fsm_state18 = 33'd32768;
parameter    ap_ST_fsm_state19 = 33'd65536;
parameter    ap_ST_fsm_state20 = 33'd131072;
parameter    ap_ST_fsm_state21 = 33'd262144;
parameter    ap_ST_fsm_state22 = 33'd524288;
parameter    ap_ST_fsm_pp1_stage0 = 33'd1048576;
parameter    ap_ST_fsm_state26 = 33'd2097152;
parameter    ap_ST_fsm_state27 = 33'd4194304;
parameter    ap_ST_fsm_pp2_stage0 = 33'd8388608;
parameter    ap_ST_fsm_state36 = 33'd16777216;
parameter    ap_ST_fsm_pp3_stage0 = 33'd33554432;
parameter    ap_ST_fsm_state40 = 33'd67108864;
parameter    ap_ST_fsm_state41 = 33'd134217728;
parameter    ap_ST_fsm_state42 = 33'd268435456;
parameter    ap_ST_fsm_state43 = 33'd536870912;
parameter    ap_ST_fsm_state44 = 33'd1073741824;
parameter    ap_ST_fsm_pp4_stage0 = 33'd2147483648;
parameter    ap_ST_fsm_state50 = 33'd4294967296;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [3:0] x_WEN_A;
output  [31:0] x_Din_A;
input  [31:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] dx_Addr_A;
output   dx_EN_A;
output  [3:0] dx_WEN_A;
output  [31:0] dx_Din_A;
input  [31:0] dx_Dout_A;
output   dx_Clk_A;
output   dx_Rst_A;
output  [31:0] y_Addr_A;
output   y_EN_A;
output  [3:0] y_WEN_A;
output  [31:0] y_Din_A;
input  [31:0] y_Dout_A;
output   y_Clk_A;
output   y_Rst_A;
output  [31:0] dy_Addr_A;
output   dy_EN_A;
output  [3:0] dy_WEN_A;
output  [31:0] dy_Din_A;
input  [31:0] dy_Dout_A;
output   dy_Clk_A;
output   dy_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg x_EN_A;
reg dx_EN_A;
reg[3:0] dx_WEN_A;
reg y_EN_A;
reg[3:0] y_WEN_A;
reg dy_EN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] w;
wire   [31:0] dw;
wire   [31:0] b;
wire   [31:0] db;
wire   [31:0] xdim;
wire   [31:0] ydim;
wire    fwprop;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg   [0:0] cmp28236_reg_944;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln39_reg_1008;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln45_reg_1033;
wire    gmem_AWREADY;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] j_reg_365;
reg   [30:0] i_1_reg_376;
reg   [62:0] indvar_flatten_reg_387;
reg   [30:0] i_3_reg_398;
reg   [31:0] j_2_reg_409;
reg   [30:0] i_4_reg_420;
reg   [31:0] j_1_reg_442;
reg   [31:0] rhs_reg_453;
reg  signed [31:0] reg_463;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_state28_pp2_stage0_iter0;
wire    ap_block_state29_pp2_stage0_iter1;
wire    ap_block_state30_pp2_stage0_iter2;
wire    ap_block_state31_pp2_stage0_iter3;
wire    ap_block_state32_pp2_stage0_iter4;
wire    ap_block_state33_pp2_stage0_iter5;
wire    ap_block_state34_pp2_stage0_iter6;
wire    ap_block_state35_pp2_stage0_iter7;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln61_reg_1077;
reg   [0:0] icmp_ln61_reg_1077_pp2_iter1_reg;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state45_pp4_stage0_iter0;
wire    ap_block_state46_pp4_stage0_iter1;
wire    ap_block_state47_pp4_stage0_iter2;
wire    ap_block_state48_pp4_stage0_iter3;
wire    ap_block_state49_pp4_stage0_iter4;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] icmp_ln54_reg_1237;
wire   [31:0] wbuf_V_q0;
reg  signed [31:0] reg_467;
reg    ap_enable_reg_pp2_iter4;
reg   [0:0] icmp_ln61_reg_1077_pp2_iter3_reg;
reg   [0:0] fwprop_read_reg_910;
reg   [31:0] ydim_read_reg_914;
reg   [31:0] xdim_read_reg_921;
reg   [31:0] b_read_reg_930;
reg   [31:0] w_read_reg_935;
wire   [0:0] icmp_ln38_fu_471_p2;
reg   [0:0] icmp_ln38_reg_940;
wire   [0:0] cmp28236_fu_477_p2;
wire   [30:0] empty_fu_483_p1;
reg   [30:0] empty_reg_948;
wire  signed [29:0] empty_30_fu_487_p1;
reg  signed [29:0] empty_30_reg_954;
wire   [30:0] add_ln38_fu_491_p2;
reg   [30:0] add_ln38_reg_959;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln38_1_fu_497_p2;
reg   [29:0] trunc_ln_reg_977;
wire   [29:0] grp_fu_514_p2;
reg   [29:0] empty_34_reg_982;
wire    ap_CS_fsm_state3;
wire   [31:0] empty_35_fu_535_p2;
reg   [31:0] empty_35_reg_987;
wire    ap_CS_fsm_state4;
wire   [19:0] grp_fu_890_p2;
reg   [19:0] mul_ln40_reg_992;
wire   [30:0] add_ln39_fu_560_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln39_fu_570_p2;
reg   [0:0] icmp_ln39_reg_1008_pp0_iter1_reg;
(* use_dsp48 = "no" *) wire   [19:0] add_ln40_fu_579_p2;
reg   [19:0] add_ln40_reg_1012;
reg   [19:0] add_ln40_reg_1012_pp0_iter1_reg;
reg   [31:0] gmem_addr_1_read_reg_1017;
wire   [30:0] add_ln45_fu_598_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state23_pp1_stage0_iter0;
reg    ap_block_state24_pp1_stage0_iter1;
wire    ap_block_state25_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln45_fu_604_p2;
reg   [0:0] icmp_ln45_reg_1033_pp1_iter1_reg;
wire   [9:0] trunc_ln46_fu_609_p1;
reg   [9:0] trunc_ln46_reg_1037;
reg   [9:0] trunc_ln46_reg_1037_pp1_iter1_reg;
reg   [31:0] gmem_addr_read_reg_1042;
wire   [30:0] trunc_ln61_fu_617_p1;
reg   [30:0] trunc_ln61_reg_1047;
wire    ap_CS_fsm_state26;
wire   [30:0] trunc_ln50_fu_633_p1;
reg   [30:0] trunc_ln50_reg_1062;
wire   [62:0] grp_fu_627_p2;
reg   [62:0] mul_ln61_reg_1067;
wire    ap_CS_fsm_state27;
wire   [62:0] add_ln61_1_fu_636_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln61_fu_642_p2;
reg   [0:0] icmp_ln61_reg_1077_pp2_iter2_reg;
reg   [0:0] icmp_ln61_reg_1077_pp2_iter4_reg;
reg   [0:0] icmp_ln61_reg_1077_pp2_iter5_reg;
reg   [0:0] icmp_ln61_reg_1077_pp2_iter6_reg;
wire   [9:0] select_ln61_2_fu_674_p3;
reg   [9:0] select_ln61_2_reg_1081;
wire   [30:0] select_ln61_3_fu_686_p3;
wire   [19:0] trunc_ln1118_fu_694_p1;
reg   [19:0] trunc_ln1118_reg_1096;
reg   [19:0] trunc_ln1118_reg_1096_pp2_iter1_reg;
wire   [31:0] add_ln62_fu_698_p2;
wire   [31:0] zext_ln1118_fu_708_p1;
reg   [31:0] zext_ln1118_reg_1112;
reg   [31:0] zext_ln1118_reg_1112_pp2_iter2_reg;
reg   [31:0] zext_ln1118_reg_1112_pp2_iter3_reg;
reg   [31:0] zext_ln1118_reg_1112_pp2_iter4_reg;
reg   [31:0] zext_ln1118_reg_1112_pp2_iter5_reg;
reg   [31:0] zext_ln1118_reg_1112_pp2_iter6_reg;
reg  signed [31:0] dy_load_reg_1122;
wire  signed [54:0] sext_ln61_fu_712_p1;
reg  signed [54:0] sext_ln61_reg_1127;
reg  signed [54:0] sext_ln61_reg_1127_pp2_iter4_reg;
reg   [19:0] dwbuf_V_addr_reg_1138;
reg   [19:0] dwbuf_V_addr_reg_1138_pp2_iter4_reg;
wire   [54:0] grp_fu_724_p2;
reg   [54:0] r_V_2_reg_1149;
wire   [31:0] dwbuf_V_q1;
reg   [31:0] lhs_reg_1154;
reg   [31:0] trunc_ln708_1_reg_1164;
wire   [30:0] add_ln69_fu_772_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state37_pp3_stage0_iter0;
wire    ap_block_state38_pp3_stage0_iter1;
wire    ap_block_state39_pp3_stage0_iter2;
wire    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln69_fu_778_p2;
reg   [0:0] icmp_ln69_reg_1174;
reg   [0:0] icmp_ln69_reg_1174_pp3_iter1_reg;
reg   [9:0] dbbuf_V_addr_reg_1178;
reg   [9:0] dbbuf_V_addr_reg_1178_pp3_iter1_reg;
wire   [31:0] add_ln703_fu_793_p2;
reg   [31:0] add_ln703_reg_1189;
wire   [30:0] add_ln50_fu_799_p2;
reg   [30:0] add_ln50_reg_1194;
wire    ap_CS_fsm_state41;
wire   [9:0] trunc_ln52_fu_810_p1;
reg   [9:0] trunc_ln52_reg_1202;
wire   [0:0] icmp_ln50_fu_805_p2;
wire    ap_CS_fsm_state43;
reg   [9:0] y_addr_reg_1217;
wire   [19:0] grp_fu_904_p2;
reg   [19:0] mul_ln1116_reg_1222;
wire    ap_CS_fsm_state44;
wire   [31:0] bbuf_V_q0;
wire   [31:0] add_ln54_fu_823_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln54_fu_829_p2;
reg   [0:0] icmp_ln54_reg_1237_pp4_iter1_reg;
reg   [0:0] icmp_ln54_reg_1237_pp4_iter2_reg;
reg   [0:0] icmp_ln54_reg_1237_pp4_iter3_reg;
wire   [54:0] grp_fu_861_p2;
reg   [54:0] r_V_3_reg_1261;
reg    ap_enable_reg_pp4_iter4;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state22;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state28;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
wire    ap_CS_fsm_state36;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state37;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_flush_enable;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg   [19:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
reg   [9:0] bbuf_V_address0;
reg    bbuf_V_ce0;
reg    bbuf_V_we0;
reg    dwbuf_V_ce0;
reg    dwbuf_V_we0;
wire   [31:0] dwbuf_V_d0;
wire   [19:0] dwbuf_V_address1;
reg    dwbuf_V_ce1;
reg    dbbuf_V_ce0;
reg    dbbuf_V_we0;
wire   [9:0] dbbuf_V_address1;
reg    dbbuf_V_ce1;
wire   [31:0] dbbuf_V_q1;
reg   [30:0] i_reg_354;
wire    ap_CS_fsm_state15;
reg   [30:0] i_2_reg_431;
wire    ap_CS_fsm_state50;
wire   [31:0] zext_ln40_1_fu_584_p1;
wire   [31:0] zext_ln46_fu_613_p1;
wire   [31:0] zext_ln61_2_fu_704_p1;
wire    ap_block_pp2_stage0;
wire   [31:0] zext_ln1118_2_fu_715_p1;
wire   [31:0] zext_ln703_fu_787_p1;
wire    ap_block_pp3_stage0;
wire   [31:0] zext_ln52_fu_818_p1;
wire   [31:0] zext_ln1116_2_fu_848_p1;
wire    ap_block_pp4_stage0;
wire   [31:0] zext_ln1116_fu_838_p1;
wire  signed [31:0] sext_ln39_fu_549_p1;
wire  signed [31:0] sext_ln45_fu_588_p1;
reg    ap_block_state5_io;
reg   [31:0] dy_Addr_A_orig;
reg   [31:0] x_Addr_A_orig;
wire   [31:0] y_Addr_A_orig;
wire   [9:0] empty_32_fu_502_p1;
wire  signed [29:0] grp_fu_514_p0;
wire   [31:0] tmp_fu_528_p3;
wire   [29:0] trunc_ln1_fu_540_p4;
wire   [31:0] j_cast_fu_566_p1;
wire   [19:0] trunc_ln40_fu_575_p1;
wire   [30:0] grp_fu_627_p0;
wire   [31:0] grp_fu_627_p1;
wire   [0:0] icmp_ln62_fu_653_p2;
wire   [30:0] add_ln61_fu_647_p2;
wire   [9:0] trunc_ln61_1_fu_666_p1;
wire   [9:0] trunc_ln61_2_fu_670_p1;
wire   [31:0] select_ln61_fu_658_p3;
wire   [19:0] grp_fu_896_p3;
wire  signed [31:0] grp_fu_734_p1;
wire   [54:0] lhs_1_fu_739_p3;
wire   [54:0] ret_V_1_fu_746_p2;
wire   [54:0] grp_fu_734_p2;
wire   [9:0] trunc_ln703_fu_783_p1;
wire   [19:0] trunc_ln1116_fu_834_p1;
(* use_dsp48 = "no" *) wire   [19:0] add_ln1116_fu_843_p2;
wire   [54:0] rhs_1_fu_867_p3;
wire   [54:0] ret_V_fu_875_p2;
wire   [9:0] grp_fu_890_p0;
wire   [10:0] grp_fu_890_p1;
wire   [9:0] grp_fu_896_p0;
wire   [10:0] grp_fu_896_p1;
wire   [9:0] grp_fu_904_p0;
wire   [10:0] grp_fu_904_p1;
reg    grp_fu_890_ce;
wire    ap_CS_fsm_state40;
reg   [32:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [62:0] grp_fu_627_p00;
wire   [62:0] grp_fu_627_p10;
wire   [19:0] grp_fu_890_p00;
wire   [19:0] grp_fu_896_p00;
wire   [19:0] grp_fu_904_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
end

fcc_combined_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .w(w),
    .dw(dw),
    .b(b),
    .db(db),
    .xdim(xdim),
    .ydim(ydim),
    .fwprop(fwprop),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fcc_combined_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

fcc_combined_wbuf_V #(
    .DataWidth( 32 ),
    .AddressRange( 1000000 ),
    .AddressWidth( 20 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(gmem_addr_1_read_reg_1017),
    .q0(wbuf_V_q0)
);

fcc_combined_bbuf_V #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
bbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_V_address0),
    .ce0(bbuf_V_ce0),
    .we0(bbuf_V_we0),
    .d0(gmem_addr_read_reg_1042),
    .q0(bbuf_V_q0)
);

fcc_combined_dwbuf_V #(
    .DataWidth( 32 ),
    .AddressRange( 1000000 ),
    .AddressWidth( 20 ))
dwbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dwbuf_V_addr_reg_1138_pp2_iter4_reg),
    .ce0(dwbuf_V_ce0),
    .we0(dwbuf_V_we0),
    .d0(dwbuf_V_d0),
    .address1(dwbuf_V_address1),
    .ce1(dwbuf_V_ce1),
    .q1(dwbuf_V_q1)
);

fcc_combined_dbbuf_V #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
dbbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dbbuf_V_addr_reg_1178_pp3_iter1_reg),
    .ce0(dbbuf_V_ce0),
    .we0(dbbuf_V_we0),
    .d0(add_ln703_reg_1189),
    .address1(dbbuf_V_address1),
    .ce1(dbbuf_V_ce1),
    .q1(dbbuf_V_q1)
);

fcc_combined_mul_30s_30s_30_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
mul_30s_30s_30_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_514_p0),
    .din1(empty_30_reg_954),
    .ce(1'b1),
    .dout(grp_fu_514_p2)
);

fcc_combined_mul_31ns_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32ns_63_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_627_p0),
    .din1(grp_fu_627_p1),
    .ce(1'b1),
    .dout(grp_fu_627_p2)
);

fcc_combined_mul_32s_32s_55_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 55 ))
mul_32s_32s_55_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_463),
    .din1(dy_load_reg_1122),
    .ce(1'b1),
    .dout(grp_fu_724_p2)
);

fcc_combined_mul_32s_32s_55_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 55 ))
mul_32s_32s_55_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_467),
    .din1(grp_fu_734_p1),
    .ce(1'b1),
    .dout(grp_fu_734_p2)
);

fcc_combined_mul_32s_32s_55_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 55 ))
mul_32s_32s_55_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_463),
    .din1(reg_467),
    .ce(1'b1),
    .dout(grp_fu_861_p2)
);

fcc_combined_mul_mul_10ns_11ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
mul_mul_10ns_11ns_20_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_890_p0),
    .din1(grp_fu_890_p1),
    .ce(grp_fu_890_ce),
    .dout(grp_fu_890_p2)
);

fcc_combined_mac_muladd_10ns_11ns_20ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
mac_muladd_10ns_11ns_20ns_20_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_896_p0),
    .din1(grp_fu_896_p1),
    .din2(trunc_ln1118_reg_1096_pp2_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_896_p3)
);

fcc_combined_mul_mul_10ns_11ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 20 ))
mul_mul_10ns_11ns_20_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_904_p0),
    .din1(grp_fu_904_p1),
    .ce(1'b1),
    .dout(grp_fu_904_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state23)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state28)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp2_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state37) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state37)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state37);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp4_flush_enable)) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            ap_enable_reg_pp4_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_1_reg_376 <= 31'd0;
    end else if (((icmp_ln45_fu_604_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_376 <= add_ln45_fu_598_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_940 == 1'd1) & (fwprop_read_reg_910 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        i_2_reg_431 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        i_2_reg_431 <= add_ln50_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_642_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_3_reg_398 <= select_ln61_3_fu_686_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_3_reg_398 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        i_4_reg_420 <= 31'd0;
    end else if (((icmp_ln69_fu_778_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_4_reg_420 <= add_ln69_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln38_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_354 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_354 <= add_ln38_reg_959;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_642_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        indvar_flatten_reg_387 <= add_ln61_1_fu_636_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        indvar_flatten_reg_387 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_829_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        j_1_reg_442 <= add_ln54_fu_823_p2;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        j_1_reg_442 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_642_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_2_reg_409 <= add_ln62_fu_698_p2;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j_2_reg_409 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_365 <= 31'd0;
    end else if (((icmp_ln39_fu_570_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_365 <= add_ln39_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter4 == 1'b1) & (icmp_ln54_reg_1237_pp4_iter3_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        rhs_reg_453 <= {{ret_V_fu_875_p2[54:23]}};
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        rhs_reg_453 <= bbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln38_reg_959 <= add_ln38_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_570_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln40_reg_1012 <= add_ln40_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln40_reg_1012_pp0_iter1_reg <= add_ln40_reg_1012;
        icmp_ln39_reg_1008 <= icmp_ln39_fu_570_p2;
        icmp_ln39_reg_1008_pp0_iter1_reg <= icmp_ln39_reg_1008;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln50_reg_1194 <= add_ln50_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_reg_1174 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln703_reg_1189 <= add_ln703_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        b_read_reg_930 <= b;
        fwprop_read_reg_910 <= fwprop;
        icmp_ln38_reg_940 <= icmp_ln38_fu_471_p2;
        w_read_reg_935 <= w;
        xdim_read_reg_921 <= xdim;
        ydim_read_reg_914 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cmp28236_reg_944 <= cmp28236_fu_477_p2;
        empty_30_reg_954 <= empty_30_fu_487_p1;
        empty_reg_948 <= empty_fu_483_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_778_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_addr_reg_1178 <= zext_ln703_fu_787_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_addr_reg_1178_pp3_iter1_reg <= dbbuf_V_addr_reg_1178;
        icmp_ln69_reg_1174 <= icmp_ln69_fu_778_p2;
        icmp_ln69_reg_1174_pp3_iter1_reg <= icmp_ln69_reg_1174;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_1077_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dwbuf_V_addr_reg_1138 <= zext_ln1118_2_fu_715_p1;
        sext_ln61_reg_1127 <= sext_ln61_fu_712_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        dwbuf_V_addr_reg_1138_pp2_iter4_reg <= dwbuf_V_addr_reg_1138;
        icmp_ln61_reg_1077_pp2_iter2_reg <= icmp_ln61_reg_1077_pp2_iter1_reg;
        icmp_ln61_reg_1077_pp2_iter3_reg <= icmp_ln61_reg_1077_pp2_iter2_reg;
        icmp_ln61_reg_1077_pp2_iter4_reg <= icmp_ln61_reg_1077_pp2_iter3_reg;
        icmp_ln61_reg_1077_pp2_iter5_reg <= icmp_ln61_reg_1077_pp2_iter4_reg;
        icmp_ln61_reg_1077_pp2_iter6_reg <= icmp_ln61_reg_1077_pp2_iter5_reg;
        sext_ln61_reg_1127_pp2_iter4_reg <= sext_ln61_reg_1127;
        zext_ln1118_reg_1112_pp2_iter2_reg[19 : 0] <= zext_ln1118_reg_1112[19 : 0];
        zext_ln1118_reg_1112_pp2_iter3_reg[19 : 0] <= zext_ln1118_reg_1112_pp2_iter2_reg[19 : 0];
        zext_ln1118_reg_1112_pp2_iter4_reg[19 : 0] <= zext_ln1118_reg_1112_pp2_iter3_reg[19 : 0];
        zext_ln1118_reg_1112_pp2_iter5_reg[19 : 0] <= zext_ln1118_reg_1112_pp2_iter4_reg[19 : 0];
        zext_ln1118_reg_1112_pp2_iter6_reg[19 : 0] <= zext_ln1118_reg_1112_pp2_iter5_reg[19 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_1077_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dy_load_reg_1122 <= dy_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_34_reg_982 <= grp_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_35_reg_987 <= empty_35_fu_535_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_reg_1008 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_1_read_reg_1017 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln45_reg_1033 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_read_reg_1042 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln45_reg_1033 <= icmp_ln45_fu_604_p2;
        icmp_ln45_reg_1033_pp1_iter1_reg <= icmp_ln45_reg_1033;
        trunc_ln46_reg_1037_pp1_iter1_reg <= trunc_ln46_reg_1037;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln54_reg_1237 <= icmp_ln54_fu_829_p2;
        icmp_ln54_reg_1237_pp4_iter1_reg <= icmp_ln54_reg_1237;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln54_reg_1237_pp4_iter2_reg <= icmp_ln54_reg_1237_pp4_iter1_reg;
        icmp_ln54_reg_1237_pp4_iter3_reg <= icmp_ln54_reg_1237_pp4_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln61_reg_1077 <= icmp_ln61_fu_642_p2;
        icmp_ln61_reg_1077_pp2_iter1_reg <= icmp_ln61_reg_1077;
        trunc_ln1118_reg_1096_pp2_iter1_reg <= trunc_ln1118_reg_1096;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_1077_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        lhs_reg_1154 <= dwbuf_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        mul_ln1116_reg_1222 <= grp_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln40_reg_992 <= grp_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        mul_ln61_reg_1067 <= grp_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_1077_pp2_iter3_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        r_V_2_reg_1149 <= grp_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_reg_1237_pp4_iter2_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        r_V_3_reg_1261 <= grp_fu_861_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln54_reg_1237 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln61_reg_1077_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_463 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln61_reg_1077_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln54_reg_1237 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        reg_467 <= wbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        select_ln61_2_reg_1081 <= select_ln61_2_fu_674_p3;
        trunc_ln1118_reg_1096 <= trunc_ln1118_fu_694_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_604_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln46_reg_1037 <= trunc_ln46_fu_609_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_940 == 1'd1) & (fwprop_read_reg_910 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        trunc_ln50_reg_1062 <= trunc_ln50_fu_633_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_805_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        trunc_ln52_reg_1202 <= trunc_ln52_fu_810_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_reg_940 == 1'd1) & (fwprop_read_reg_910 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
        trunc_ln61_reg_1047 <= trunc_ln61_fu_617_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_1077_pp2_iter5_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        trunc_ln708_1_reg_1164 <= {{grp_fu_734_p2[54:23]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_1_fu_497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln_reg_977 <= {{b_read_reg_930[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        y_addr_reg_1217 <= zext_ln52_fu_818_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_1077 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln1118_reg_1112[19 : 0] <= zext_ln1118_fu_708_p1[19 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_570_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_604_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_fu_642_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_778_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state37 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state37 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_829_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
        ap_condition_pp4_flush_enable = 1'b1;
    end else begin
        ap_condition_pp4_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        bbuf_V_address0 = zext_ln52_fu_818_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bbuf_V_address0 = zext_ln46_fu_613_p1;
    end else begin
        bbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln45_reg_1033_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_ce0 = 1'b1;
    end else begin
        dbbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_ce1 = 1'b1;
    end else begin
        dbbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln69_reg_1174_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        dbbuf_V_we0 = 1'b1;
    end else begin
        dbbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dwbuf_V_ce0 = 1'b1;
    end else begin
        dwbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dwbuf_V_ce1 = 1'b1;
    end else begin
        dwbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter5 == 1'b1) & (icmp_ln61_reg_1077_pp2_iter4_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dwbuf_V_we0 = 1'b1;
    end else begin
        dwbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter7 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dx_EN_A = 1'b1;
    end else begin
        dx_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter7 == 1'b1) & (icmp_ln61_reg_1077_pp2_iter6_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        dx_WEN_A = 4'd15;
    end else begin
        dx_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        dy_Addr_A_orig = zext_ln703_fu_787_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        dy_Addr_A_orig = zext_ln61_2_fu_704_p1;
    end else begin
        dy_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        dy_EN_A = 1'b1;
    end else begin
        dy_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        gmem_ARADDR = sext_ln45_fu_588_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (cmp28236_reg_944 == 1'd1))) begin
        gmem_ARADDR = sext_ln39_fu_549_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        gmem_ARLEN = ydim_read_reg_914;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (cmp28236_reg_944 == 1'd1))) begin
        gmem_ARLEN = xdim_read_reg_921;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (cmp28236_reg_944 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln45_reg_1033 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_reg_1008 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state5) & (cmp28236_reg_944 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln45_reg_1033 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_reg_1008 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io)))) begin
        grp_fu_890_ce = 1'b1;
    end else begin
        grp_fu_890_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        wbuf_V_address0 = zext_ln1116_2_fu_848_p1;
    end else if (((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        wbuf_V_address0 = zext_ln1118_2_fu_715_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        wbuf_V_address0 = zext_ln40_1_fu_584_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln39_reg_1008_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        x_Addr_A_orig = zext_ln1116_fu_838_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        x_Addr_A_orig = zext_ln1118_fu_708_p1;
    end else begin
        x_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter4 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        y_EN_A = 1'b1;
    end else begin
        y_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter4 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        y_WEN_A = 4'd15;
    end else begin
        y_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln38_fu_471_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (icmp_ln38_fu_471_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_1_fu_497_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (cmp28236_reg_944 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_io) & (cmp28236_reg_944 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln39_fu_570_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln39_fu_570_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state16 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln45_fu_604_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln45_fu_604_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln38_reg_940 == 1'd1) & (fwprop_read_reg_910 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else if (((icmp_ln38_reg_940 == 1'd0) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln61_fu_642_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter7 == 1'b1) & (ap_enable_reg_pp2_iter6 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter7 == 1'b1) & (ap_enable_reg_pp2_iter6 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln61_fu_642_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln69_fu_778_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln69_fu_778_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state41 : begin
            if (((icmp_ln50_fu_805_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_fu_843_p2 = (mul_ln1116_reg_1222 + trunc_ln1116_fu_834_p1);

assign add_ln38_fu_491_p2 = (i_reg_354 + 31'd1);

assign add_ln39_fu_560_p2 = (j_reg_365 + 31'd1);

assign add_ln40_fu_579_p2 = (mul_ln40_reg_992 + trunc_ln40_fu_575_p1);

assign add_ln45_fu_598_p2 = (i_1_reg_376 + 31'd1);

assign add_ln50_fu_799_p2 = (i_2_reg_431 + 31'd1);

assign add_ln54_fu_823_p2 = (j_1_reg_442 + 32'd1);

assign add_ln61_1_fu_636_p2 = (indvar_flatten_reg_387 + 63'd1);

assign add_ln61_fu_647_p2 = (i_3_reg_398 + 31'd1);

assign add_ln62_fu_698_p2 = (select_ln61_fu_658_p3 + 32'd1);

assign add_ln69_fu_772_p2 = (i_4_reg_420 + 31'd1);

assign add_ln703_fu_793_p2 = (dy_Dout_A + dbbuf_V_q1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd32];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln39_reg_1008 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln39_reg_1008 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln45_reg_1033 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln45_reg_1033 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln39_reg_1008 == 1'd0));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln45_reg_1033 == 1'd0));
end

assign ap_block_state25_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((gmem_ARREADY == 1'b0) & (cmp28236_reg_944 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cmp28236_fu_477_p2 = (($signed(xdim) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign dbbuf_V_address1 = zext_ln703_fu_787_p1;

assign dwbuf_V_address1 = zext_ln1118_2_fu_715_p1;

assign dwbuf_V_d0 = {{ret_V_1_fu_746_p2[54:23]}};

assign dx_Addr_A = zext_ln1118_reg_1112_pp2_iter6_reg << 32'd2;

assign dx_Clk_A = ap_clk;

assign dx_Din_A = trunc_ln708_1_reg_1164;

assign dx_Rst_A = ap_rst_n_inv;

assign dy_Addr_A = dy_Addr_A_orig << 32'd2;

assign dy_Clk_A = ap_clk;

assign dy_Din_A = 32'd0;

assign dy_Rst_A = ap_rst_n_inv;

assign dy_WEN_A = 4'd0;

assign empty_30_fu_487_p1 = xdim[29:0];

assign empty_32_fu_502_p1 = i_reg_354[9:0];

assign empty_35_fu_535_p2 = (tmp_fu_528_p3 + w_read_reg_935);

assign empty_fu_483_p1 = ydim[30:0];

assign grp_fu_514_p0 = i_reg_354[29:0];

assign grp_fu_627_p0 = grp_fu_627_p00;

assign grp_fu_627_p00 = trunc_ln61_fu_617_p1;

assign grp_fu_627_p1 = grp_fu_627_p10;

assign grp_fu_627_p10 = xdim_read_reg_921;

assign grp_fu_734_p1 = sext_ln61_reg_1127_pp2_iter4_reg;

assign grp_fu_890_p0 = grp_fu_890_p00;

assign grp_fu_890_p00 = empty_32_fu_502_p1;

assign grp_fu_890_p1 = 20'd1000;

assign grp_fu_896_p0 = grp_fu_896_p00;

assign grp_fu_896_p00 = select_ln61_2_fu_674_p3;

assign grp_fu_896_p1 = 20'd1000;

assign grp_fu_904_p0 = grp_fu_904_p00;

assign grp_fu_904_p00 = trunc_ln52_fu_810_p1;

assign grp_fu_904_p1 = 20'd1000;

assign icmp_ln38_1_fu_497_p2 = ((i_reg_354 == empty_reg_948) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_471_p2 = (($signed(ydim) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_570_p2 = ((j_cast_fu_566_p1 == xdim_read_reg_921) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_604_p2 = ((i_1_reg_376 == empty_reg_948) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_805_p2 = ((i_2_reg_431 == trunc_ln50_reg_1062) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_829_p2 = ((j_1_reg_442 == xdim_read_reg_921) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_642_p2 = ((indvar_flatten_reg_387 == mul_ln61_reg_1067) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_653_p2 = ((j_2_reg_409 == xdim_read_reg_921) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_778_p2 = ((i_4_reg_420 == trunc_ln61_reg_1047) ? 1'b1 : 1'b0);

assign j_cast_fu_566_p1 = j_reg_365;

assign lhs_1_fu_739_p3 = {{lhs_reg_1154}, {23'd0}};

assign ret_V_1_fu_746_p2 = (lhs_1_fu_739_p3 + r_V_2_reg_1149);

assign ret_V_fu_875_p2 = (rhs_1_fu_867_p3 + r_V_3_reg_1261);

assign rhs_1_fu_867_p3 = {{rhs_reg_453}, {23'd0}};

assign select_ln61_2_fu_674_p3 = ((icmp_ln62_fu_653_p2[0:0] == 1'b1) ? trunc_ln61_1_fu_666_p1 : trunc_ln61_2_fu_670_p1);

assign select_ln61_3_fu_686_p3 = ((icmp_ln62_fu_653_p2[0:0] == 1'b1) ? add_ln61_fu_647_p2 : i_3_reg_398);

assign select_ln61_fu_658_p3 = ((icmp_ln62_fu_653_p2[0:0] == 1'b1) ? 32'd0 : j_2_reg_409);

assign sext_ln39_fu_549_p1 = $signed(trunc_ln1_fu_540_p4);

assign sext_ln45_fu_588_p1 = $signed(trunc_ln_reg_977);

assign sext_ln61_fu_712_p1 = dy_load_reg_1122;

assign tmp_fu_528_p3 = {{empty_34_reg_982}, {2'd0}};

assign trunc_ln1116_fu_834_p1 = j_1_reg_442[19:0];

assign trunc_ln1118_fu_694_p1 = select_ln61_fu_658_p3[19:0];

assign trunc_ln1_fu_540_p4 = {{empty_35_reg_987[31:2]}};

assign trunc_ln40_fu_575_p1 = j_reg_365[19:0];

assign trunc_ln46_fu_609_p1 = i_1_reg_376[9:0];

assign trunc_ln50_fu_633_p1 = ydim_read_reg_914[30:0];

assign trunc_ln52_fu_810_p1 = i_2_reg_431[9:0];

assign trunc_ln61_1_fu_666_p1 = add_ln61_fu_647_p2[9:0];

assign trunc_ln61_2_fu_670_p1 = i_3_reg_398[9:0];

assign trunc_ln61_fu_617_p1 = ydim_read_reg_914[30:0];

assign trunc_ln703_fu_783_p1 = i_4_reg_420[9:0];

assign x_Addr_A = x_Addr_A_orig << 32'd2;

assign x_Clk_A = ap_clk;

assign x_Din_A = 32'd0;

assign x_Rst_A = ap_rst_n_inv;

assign x_WEN_A = 4'd0;

assign y_Addr_A = y_Addr_A_orig << 32'd2;

assign y_Addr_A_orig = y_addr_reg_1217;

assign y_Clk_A = ap_clk;

assign y_Din_A = rhs_reg_453;

assign y_Rst_A = ap_rst_n_inv;

assign zext_ln1116_2_fu_848_p1 = add_ln1116_fu_843_p2;

assign zext_ln1116_fu_838_p1 = trunc_ln1116_fu_834_p1;

assign zext_ln1118_2_fu_715_p1 = grp_fu_896_p3;

assign zext_ln1118_fu_708_p1 = trunc_ln1118_reg_1096;

assign zext_ln40_1_fu_584_p1 = add_ln40_reg_1012_pp0_iter1_reg;

assign zext_ln46_fu_613_p1 = trunc_ln46_reg_1037_pp1_iter1_reg;

assign zext_ln52_fu_818_p1 = trunc_ln52_reg_1202;

assign zext_ln61_2_fu_704_p1 = select_ln61_2_reg_1081;

assign zext_ln703_fu_787_p1 = trunc_ln703_fu_783_p1;

always @ (posedge ap_clk) begin
    zext_ln1118_reg_1112[31:20] <= 12'b000000000000;
    zext_ln1118_reg_1112_pp2_iter2_reg[31:20] <= 12'b000000000000;
    zext_ln1118_reg_1112_pp2_iter3_reg[31:20] <= 12'b000000000000;
    zext_ln1118_reg_1112_pp2_iter4_reg[31:20] <= 12'b000000000000;
    zext_ln1118_reg_1112_pp2_iter5_reg[31:20] <= 12'b000000000000;
    zext_ln1118_reg_1112_pp2_iter6_reg[31:20] <= 12'b000000000000;
end

endmodule //fcc_combined
