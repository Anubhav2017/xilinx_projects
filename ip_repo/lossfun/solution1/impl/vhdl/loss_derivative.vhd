-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loss_derivative is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of loss_derivative is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loss_derivative_loss_derivative,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=9239,HLS_SYN_LUT=8409,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_1FF80 : STD_LOGIC_VECTOR (16 downto 0) := "11111111110000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (63 downto 0);
    signal dx : STD_LOGIC_VECTOR (63 downto 0);
    signal y : STD_LOGIC_VECTOR (31 downto 0);
    signal x_size : STD_LOGIC_VECTOR (31 downto 0);
    signal N : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond4729_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal icmp_ln29_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal exitcond2_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_993_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_index451_reg_321 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_index451_reg_321_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_V_1_reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_354 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_365 : STD_LOGIC_VECTOR (6 downto 0);
    signal sum_V_reg_376 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_reg_388 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_4_reg_399 : STD_LOGIC_VECTOR (6 downto 0);
    signal loop_index_reg_410 : STD_LOGIC_VECTOR (6 downto 0);
    signal log_probs_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state28_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln47_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state38_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state40_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state41_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state42_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state43_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state44_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state45_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_state46_pp4_stage0_iter8 : BOOLEAN;
    signal ap_block_state47_pp4_stage0_iter9 : BOOLEAN;
    signal ap_block_state48_pp4_stage0_iter10 : BOOLEAN;
    signal ap_block_state49_pp4_stage0_iter11 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter12 : BOOLEAN;
    signal ap_block_state51_pp4_stage0_iter13 : BOOLEAN;
    signal ap_block_state52_pp4_stage0_iter14 : BOOLEAN;
    signal ap_block_state53_pp4_stage0_iter15 : BOOLEAN;
    signal ap_block_state54_pp4_stage0_iter16 : BOOLEAN;
    signal ap_block_state55_pp4_stage0_iter17 : BOOLEAN;
    signal ap_block_state56_pp4_stage0_iter18 : BOOLEAN;
    signal ap_block_state57_pp4_stage0_iter19 : BOOLEAN;
    signal ap_block_state58_pp4_stage0_iter20 : BOOLEAN;
    signal ap_block_state59_pp4_stage0_iter21 : BOOLEAN;
    signal ap_block_state60_pp4_stage0_iter22 : BOOLEAN;
    signal ap_block_state61_pp4_stage0_iter23 : BOOLEAN;
    signal ap_block_state62_pp4_stage0_iter24 : BOOLEAN;
    signal ap_block_state63_pp4_stage0_iter25 : BOOLEAN;
    signal ap_block_state64_pp4_stage0_iter26 : BOOLEAN;
    signal ap_block_state65_pp4_stage0_iter27 : BOOLEAN;
    signal ap_block_state66_pp4_stage0_iter28 : BOOLEAN;
    signal ap_block_state67_pp4_stage0_iter29 : BOOLEAN;
    signal ap_block_state68_pp4_stage0_iter30 : BOOLEAN;
    signal ap_block_state69_pp4_stage0_iter31 : BOOLEAN;
    signal ap_block_state70_pp4_stage0_iter32 : BOOLEAN;
    signal ap_block_state71_pp4_stage0_iter33 : BOOLEAN;
    signal ap_block_state72_pp4_stage0_iter34 : BOOLEAN;
    signal ap_block_state73_pp4_stage0_iter35 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln51_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_exp_16_9_s_fu_432_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_457 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal icmp_ln47_reg_877_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal icmp_ln51_reg_901_pp4_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal probs_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_461 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_state87_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state88_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state89_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state90_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state91_pp5_stage0_iter4 : BOOLEAN;
    signal ap_block_state92_pp5_stage0_iter5 : BOOLEAN;
    signal ap_block_state93_pp5_stage0_iter6 : BOOLEAN;
    signal ap_block_state94_pp5_stage0_iter7 : BOOLEAN;
    signal ap_block_state95_pp5_stage0_iter8 : BOOLEAN;
    signal ap_block_state96_pp5_stage0_iter9 : BOOLEAN;
    signal ap_block_state97_pp5_stage0_iter10 : BOOLEAN;
    signal ap_block_state98_pp5_stage0_iter11 : BOOLEAN;
    signal ap_block_state99_pp5_stage0_iter12 : BOOLEAN;
    signal ap_block_state100_pp5_stage0_iter13 : BOOLEAN;
    signal ap_block_state101_pp5_stage0_iter14 : BOOLEAN;
    signal ap_block_state102_pp5_stage0_iter15 : BOOLEAN;
    signal ap_block_state103_pp5_stage0_iter16 : BOOLEAN;
    signal ap_block_state104_pp5_stage0_iter17 : BOOLEAN;
    signal ap_block_state105_pp5_stage0_iter18 : BOOLEAN;
    signal ap_block_state106_pp5_stage0_iter19 : BOOLEAN;
    signal ap_block_state107_pp5_stage0_iter20 : BOOLEAN;
    signal ap_block_state108_pp5_stage0_iter21 : BOOLEAN;
    signal ap_block_state109_pp5_stage0_iter22 : BOOLEAN;
    signal ap_block_state110_pp5_stage0_iter23 : BOOLEAN;
    signal ap_block_state111_pp5_stage0_iter24 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal N_read_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_size_read_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_read_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_read_reg_780 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_read_reg_785 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln29_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_fu_483_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_42_reg_800 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond4729_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4729_reg_805_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_read_reg_809 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_V_reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln35_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state21_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln35_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal max_V_2_fu_536_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln41_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln41_fu_549_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state24_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln41_1_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_1_reg_853_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_cast5_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast5_reg_857 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast5_reg_857_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln703_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln703_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln47_fu_575_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln47_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_877_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_877_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_877_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_877_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_877_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_877_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_1_fu_595_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal sum_V_cast_fu_601_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sum_V_cast_reg_891 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal add_ln51_fu_605_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln51_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_901_pp4_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast7_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast7_reg_905_pp4_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_633_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln1148_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal dxbuff_V_addr_reg_930 : STD_LOGIC_VECTOR (6 downto 0);
    signal loss_V_fu_647_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal loss_V_reg_935 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal add_ln57_fu_653_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal icmp_ln57_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_cast_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_948_pp5_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln58_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_953_pp5_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_682_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln1148_2_reg_972 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln1148_2_reg_972_pp5_iter23_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_701_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln1148_1_reg_977 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_49_fu_734_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state113_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state114_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state115_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state115_io : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal exitcond2_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dxbuff_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dxbuff_V_load_reg_1002 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state21 : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state24 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state28 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state38 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter35 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state87 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter24 : STD_LOGIC := '0';
    signal ap_block_state112_io : BOOLEAN;
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state113 : STD_LOGIC;
    signal log_probs_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal log_probs_V_ce0 : STD_LOGIC;
    signal log_probs_V_we0 : STD_LOGIC;
    signal probs_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal probs_V_ce0 : STD_LOGIC;
    signal probs_V_we0 : STD_LOGIC;
    signal probs_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xbuff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal xbuff_V_ce0 : STD_LOGIC;
    signal xbuff_V_we0 : STD_LOGIC;
    signal xbuff_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dxbuff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dxbuff_V_ce0 : STD_LOGIC;
    signal dxbuff_V_we0 : STD_LOGIC;
    signal dxbuff_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_log_16_9_s_fu_421_ap_start : STD_LOGIC;
    signal grp_log_16_9_s_fu_421_ap_done : STD_LOGIC;
    signal grp_log_16_9_s_fu_421_ap_idle : STD_LOGIC;
    signal grp_log_16_9_s_fu_421_ap_ready : STD_LOGIC;
    signal grp_log_16_9_s_fu_421_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_log_16_9_s_fu_421_grp_fu_1007_p_din0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_log_16_9_s_fu_421_grp_fu_1007_p_din1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_log_16_9_s_fu_421_grp_fu_1007_p_dout0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_log_16_9_s_fu_421_grp_fu_1007_p_ce : STD_LOGIC;
    signal grp_exp_16_9_s_fu_432_ap_start : STD_LOGIC;
    signal grp_exp_16_9_s_fu_432_ap_done : STD_LOGIC;
    signal grp_exp_16_9_s_fu_432_ap_idle : STD_LOGIC;
    signal grp_exp_16_9_s_fu_432_ap_ready : STD_LOGIC;
    signal ap_phi_mux_loop_index451_phi_fu_325_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_log_16_9_s_fu_421_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_NS_fsm_state76 : STD_LOGIC;
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_exp_16_9_s_fu_432_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal loop_index451_cast3_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast4_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_2_cast6_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal loop_index_cast_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast2_cast_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state120 : BOOLEAN;
    signal ap_block_pp6_stage0_01001 : BOOLEAN;
    signal trunc_ln703_2_fu_706_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln703_1_fu_710_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_443_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal loop_index451_cast10_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1494_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_cast_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_cast_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast_fu_611_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_633_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_633_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_cast4_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1148_1_fu_678_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_682_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln2221_fu_687_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln2221_fu_687_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1148_fu_691_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_701_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_cast2_fu_714_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal loop_index_cast1_fu_740_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1007_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1007_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1007_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1007_ce : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (15 downto 0);

    component loss_derivative_log_16_9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
        grp_fu_1007_p_din0 : OUT STD_LOGIC_VECTOR (28 downto 0);
        grp_fu_1007_p_din1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        grp_fu_1007_p_dout0 : IN STD_LOGIC_VECTOR (28 downto 0);
        grp_fu_1007_p_ce : OUT STD_LOGIC );
    end component;


    component loss_derivative_exp_16_9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_sdiv_23ns_16s_16_27_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_sdiv_17s_32ns_16_21_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_sdiv_18s_32ns_16_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_mul_29s_6ns_29_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component loss_derivative_log_probs_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (15 downto 0);
        x : OUT STD_LOGIC_VECTOR (63 downto 0);
        dx : OUT STD_LOGIC_VECTOR (63 downto 0);
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        N : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component loss_derivative_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    CTRL_s_axi_U : component loss_derivative_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => loss_V_reg_935,
        x => x,
        dx => dx,
        y => y,
        x_size => x_size,
        N => N);

    gmem_m_axi_U : component loss_derivative_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => p_cast2_cast_fu_723_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => x_size_read_reg_760,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => dxbuff_V_load_reg_1002,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    log_probs_V_U : component loss_derivative_log_probs_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => log_probs_V_address0,
        ce0 => log_probs_V_ce0,
        we0 => log_probs_V_we0,
        d0 => sub_ln703_reg_867,
        q0 => log_probs_V_q0);

    probs_V_U : component loss_derivative_log_probs_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => probs_V_address0,
        ce0 => probs_V_ce0,
        we0 => probs_V_we0,
        d0 => probs_V_d0,
        q0 => probs_V_q0);

    xbuff_V_U : component loss_derivative_log_probs_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xbuff_V_address0,
        ce0 => xbuff_V_ce0,
        we0 => xbuff_V_we0,
        d0 => gmem_addr_read_reg_809,
        q0 => xbuff_V_q0);

    dxbuff_V_U : component loss_derivative_log_probs_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dxbuff_V_address0,
        ce0 => dxbuff_V_ce0,
        we0 => dxbuff_V_we0,
        d0 => dxbuff_V_d0,
        q0 => dxbuff_V_q0);

    grp_log_16_9_s_fu_421 : component loss_derivative_log_16_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_log_16_9_s_fu_421_ap_start,
        ap_done => grp_log_16_9_s_fu_421_ap_done,
        ap_idle => grp_log_16_9_s_fu_421_ap_idle,
        ap_ready => grp_log_16_9_s_fu_421_ap_ready,
        x => reg_461,
        ap_return => grp_log_16_9_s_fu_421_ap_return,
        grp_fu_1007_p_din0 => grp_log_16_9_s_fu_421_grp_fu_1007_p_din0,
        grp_fu_1007_p_din1 => grp_log_16_9_s_fu_421_grp_fu_1007_p_din1,
        grp_fu_1007_p_dout0 => grp_log_16_9_s_fu_421_grp_fu_1007_p_dout0,
        grp_fu_1007_p_ce => grp_log_16_9_s_fu_421_grp_fu_1007_p_ce);

    grp_exp_16_9_s_fu_432 : component loss_derivative_exp_16_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_16_9_s_fu_432_ap_start,
        ap_done => grp_exp_16_9_s_fu_432_ap_done,
        ap_idle => grp_exp_16_9_s_fu_432_ap_idle,
        ap_ready => grp_exp_16_9_s_fu_432_ap_ready,
        ap_ce => ap_const_logic_1,
        x => reg_452,
        ap_return => grp_exp_16_9_s_fu_432_ap_return);

    sdiv_23ns_16s_16_27_1_U21 : component loss_derivative_sdiv_23ns_16s_16_27_1
    generic map (
        ID => 1,
        NUM_STAGE => 27,
        din0_WIDTH => 23,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_633_p0,
        din1 => grp_fu_633_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_633_p2);

    sdiv_17s_32ns_16_21_1_U22 : component loss_derivative_sdiv_17s_32ns_16_21_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_682_p0,
        din1 => N_read_reg_754,
        ce => ap_const_logic_1,
        dout => grp_fu_682_p2);

    sdiv_18s_32ns_16_22_1_U23 : component loss_derivative_sdiv_18s_32ns_16_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_701_p0,
        din1 => N_read_reg_754,
        ce => ap_const_logic_1,
        dout => grp_fu_701_p2);

    mul_29s_6ns_29_2_1_U24 : component loss_derivative_mul_29s_6ns_29_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 29,
        din1_WIDTH => 6,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1007_p0,
        din1 => grp_fu_1007_p1,
        ce => grp_fu_1007_ce,
        dout => grp_fu_1007_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state21) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state21);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln41_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state24);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((icmp_ln41_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state28) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state28)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state28);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state38) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state38)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state38);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter14 <= ap_enable_reg_pp4_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter15 <= ap_enable_reg_pp4_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter16 <= ap_enable_reg_pp4_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter17 <= ap_enable_reg_pp4_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter18 <= ap_enable_reg_pp4_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter19 <= ap_enable_reg_pp4_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter20 <= ap_enable_reg_pp4_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter21 <= ap_enable_reg_pp4_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter22 <= ap_enable_reg_pp4_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter23 <= ap_enable_reg_pp4_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter24 <= ap_enable_reg_pp4_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter25 <= ap_enable_reg_pp4_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter26 <= ap_enable_reg_pp4_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter27 <= ap_enable_reg_pp4_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter28 <= ap_enable_reg_pp4_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter29 <= ap_enable_reg_pp4_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter30 <= ap_enable_reg_pp4_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter31 <= ap_enable_reg_pp4_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter32 <= ap_enable_reg_pp4_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter33 <= ap_enable_reg_pp4_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter34 <= ap_enable_reg_pp4_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter35 <= ap_enable_reg_pp4_iter34;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp4_iter35 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state87) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state87)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state87);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter10 <= ap_enable_reg_pp5_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter11 <= ap_enable_reg_pp5_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter12 <= ap_enable_reg_pp5_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter13 <= ap_enable_reg_pp5_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter14 <= ap_enable_reg_pp5_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter15 <= ap_enable_reg_pp5_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter16 <= ap_enable_reg_pp5_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter17 <= ap_enable_reg_pp5_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter18 <= ap_enable_reg_pp5_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter19 <= ap_enable_reg_pp5_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter20 <= ap_enable_reg_pp5_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter21 <= ap_enable_reg_pp5_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter22 <= ap_enable_reg_pp5_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter23 <= ap_enable_reg_pp5_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter24 <= ap_enable_reg_pp5_iter23;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    ap_enable_reg_pp5_iter24 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter8 <= ap_enable_reg_pp5_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter9 <= ap_enable_reg_pp5_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state113) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state112) and (icmp_ln29_reg_790 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state112_io))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state113)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state113);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state112) and (icmp_ln29_reg_790 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state112_io))) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_16_9_s_fu_432_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exp_16_9_s_fu_432_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln51_reg_901 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln47_reg_877 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
                    grp_exp_16_9_s_fu_432_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_16_9_s_fu_432_ap_ready = ap_const_logic_1)) then 
                    grp_exp_16_9_s_fu_432_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_log_16_9_s_fu_421_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_log_16_9_s_fu_421_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (ap_const_logic_1 = ap_NS_fsm_state76))) then 
                    grp_log_16_9_s_fu_421_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_log_16_9_s_fu_421_ap_ready = ap_const_logic_1)) then 
                    grp_log_16_9_s_fu_421_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_1_reg_354 <= ap_const_lv7_0;
            elsif (((icmp_ln41_1_fu_559_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_1_reg_354 <= add_ln41_fu_549_p2;
            end if; 
        end if;
    end process;

    i_2_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_2_reg_365 <= ap_const_lv7_0;
            elsif (((icmp_ln47_fu_585_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_2_reg_365 <= add_ln47_fu_575_p2;
            end if; 
        end if;
    end process;

    i_3_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                i_3_reg_388 <= ap_const_lv7_0;
            elsif (((icmp_ln51_fu_615_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_3_reg_388 <= add_ln51_fu_605_p2;
            end if; 
        end if;
    end process;

    i_4_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_663_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                i_4_reg_399 <= add_ln57_fu_653_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                i_4_reg_399 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln35_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_reg_333 <= add_ln35_fu_519_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_reg_333 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    loop_index451_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                loop_index451_reg_321 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4729_reg_805 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                loop_index451_reg_321 <= empty_42_reg_800;
            end if; 
        end if;
    end process;

    loop_index_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state112) and (icmp_ln29_reg_790 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state112_io))) then 
                loop_index_reg_410 <= ap_const_lv7_0;
            elsif (((exitcond2_fu_744_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                loop_index_reg_410 <= empty_49_fu_734_p2;
            end if; 
        end if;
    end process;

    max_V_1_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln35_reg_825 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                max_V_1_reg_344 <= max_V_2_fu_536_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                max_V_1_reg_344 <= max_V_reg_820;
            end if; 
        end if;
    end process;

    sum_V_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                sum_V_reg_376 <= ap_const_lv16_0;
            elsif (((ap_enable_reg_pp3_iter8 = ap_const_logic_1) and (icmp_ln47_reg_877_pp3_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                sum_V_reg_376 <= sum_V_1_fu_595_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                N_read_reg_754 <= N;
                dx_read_reg_780 <= dx;
                icmp_ln29_reg_790 <= icmp_ln29_fu_466_p2;
                x_read_reg_785 <= x;
                x_size_read_reg_760 <= x_size;
                y_read_reg_774 <= y;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                dxbuff_V_addr_reg_930 <= zext_ln55_fu_642_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (exitcond2_reg_993 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                dxbuff_V_load_reg_1002 <= dxbuff_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_42_reg_800 <= empty_42_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                exitcond2_reg_993 <= exitcond2_fu_744_p2;
                exitcond2_reg_993_pp6_iter1_reg <= exitcond2_reg_993;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond4729_reg_805 <= exitcond4729_fu_493_p2;
                exitcond4729_reg_805_pp0_iter1_reg <= exitcond4729_reg_805;
                loop_index451_reg_321_pp0_iter1_reg <= loop_index451_reg_321;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4729_reg_805 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_809 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_1_fu_559_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    i_1_cast5_reg_857(6 downto 0) <= i_1_cast5_fu_564_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    i_1_cast5_reg_857_pp2_iter1_reg(6 downto 0) <= i_1_cast5_reg_857(6 downto 0);
                icmp_ln41_1_reg_853 <= icmp_ln41_1_fu_559_p2;
                icmp_ln41_1_reg_853_pp2_iter1_reg <= icmp_ln41_1_reg_853;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_615_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    i_3_cast7_reg_905(6 downto 0) <= i_3_cast7_fu_620_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                    i_3_cast7_reg_905_pp4_iter10_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter9_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter11_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter10_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter12_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter11_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter13_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter12_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter14_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter13_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter15_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter14_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter16_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter15_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter17_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter16_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter18_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter17_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter19_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter18_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter20_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter19_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter21_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter20_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter22_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter21_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter23_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter22_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter24_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter23_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter25_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter24_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter26_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter25_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter27_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter26_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter28_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter27_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter29_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter28_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter2_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter1_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter30_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter29_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter31_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter30_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter32_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter31_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter33_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter32_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter34_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter33_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter3_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter2_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter4_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter3_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter5_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter4_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter6_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter5_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter7_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter6_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter8_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter7_reg(6 downto 0);
                    i_3_cast7_reg_905_pp4_iter9_reg(6 downto 0) <= i_3_cast7_reg_905_pp4_iter8_reg(6 downto 0);
                icmp_ln51_reg_901_pp4_iter10_reg <= icmp_ln51_reg_901_pp4_iter9_reg;
                icmp_ln51_reg_901_pp4_iter11_reg <= icmp_ln51_reg_901_pp4_iter10_reg;
                icmp_ln51_reg_901_pp4_iter12_reg <= icmp_ln51_reg_901_pp4_iter11_reg;
                icmp_ln51_reg_901_pp4_iter13_reg <= icmp_ln51_reg_901_pp4_iter12_reg;
                icmp_ln51_reg_901_pp4_iter14_reg <= icmp_ln51_reg_901_pp4_iter13_reg;
                icmp_ln51_reg_901_pp4_iter15_reg <= icmp_ln51_reg_901_pp4_iter14_reg;
                icmp_ln51_reg_901_pp4_iter16_reg <= icmp_ln51_reg_901_pp4_iter15_reg;
                icmp_ln51_reg_901_pp4_iter17_reg <= icmp_ln51_reg_901_pp4_iter16_reg;
                icmp_ln51_reg_901_pp4_iter18_reg <= icmp_ln51_reg_901_pp4_iter17_reg;
                icmp_ln51_reg_901_pp4_iter19_reg <= icmp_ln51_reg_901_pp4_iter18_reg;
                icmp_ln51_reg_901_pp4_iter20_reg <= icmp_ln51_reg_901_pp4_iter19_reg;
                icmp_ln51_reg_901_pp4_iter21_reg <= icmp_ln51_reg_901_pp4_iter20_reg;
                icmp_ln51_reg_901_pp4_iter22_reg <= icmp_ln51_reg_901_pp4_iter21_reg;
                icmp_ln51_reg_901_pp4_iter23_reg <= icmp_ln51_reg_901_pp4_iter22_reg;
                icmp_ln51_reg_901_pp4_iter24_reg <= icmp_ln51_reg_901_pp4_iter23_reg;
                icmp_ln51_reg_901_pp4_iter25_reg <= icmp_ln51_reg_901_pp4_iter24_reg;
                icmp_ln51_reg_901_pp4_iter26_reg <= icmp_ln51_reg_901_pp4_iter25_reg;
                icmp_ln51_reg_901_pp4_iter27_reg <= icmp_ln51_reg_901_pp4_iter26_reg;
                icmp_ln51_reg_901_pp4_iter28_reg <= icmp_ln51_reg_901_pp4_iter27_reg;
                icmp_ln51_reg_901_pp4_iter29_reg <= icmp_ln51_reg_901_pp4_iter28_reg;
                icmp_ln51_reg_901_pp4_iter2_reg <= icmp_ln51_reg_901_pp4_iter1_reg;
                icmp_ln51_reg_901_pp4_iter30_reg <= icmp_ln51_reg_901_pp4_iter29_reg;
                icmp_ln51_reg_901_pp4_iter31_reg <= icmp_ln51_reg_901_pp4_iter30_reg;
                icmp_ln51_reg_901_pp4_iter32_reg <= icmp_ln51_reg_901_pp4_iter31_reg;
                icmp_ln51_reg_901_pp4_iter33_reg <= icmp_ln51_reg_901_pp4_iter32_reg;
                icmp_ln51_reg_901_pp4_iter34_reg <= icmp_ln51_reg_901_pp4_iter33_reg;
                icmp_ln51_reg_901_pp4_iter3_reg <= icmp_ln51_reg_901_pp4_iter2_reg;
                icmp_ln51_reg_901_pp4_iter4_reg <= icmp_ln51_reg_901_pp4_iter3_reg;
                icmp_ln51_reg_901_pp4_iter5_reg <= icmp_ln51_reg_901_pp4_iter4_reg;
                icmp_ln51_reg_901_pp4_iter6_reg <= icmp_ln51_reg_901_pp4_iter5_reg;
                icmp_ln51_reg_901_pp4_iter7_reg <= icmp_ln51_reg_901_pp4_iter6_reg;
                icmp_ln51_reg_901_pp4_iter8_reg <= icmp_ln51_reg_901_pp4_iter7_reg;
                icmp_ln51_reg_901_pp4_iter9_reg <= icmp_ln51_reg_901_pp4_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    i_3_cast7_reg_905_pp4_iter1_reg(6 downto 0) <= i_3_cast7_reg_905(6 downto 0);
                icmp_ln51_reg_901 <= icmp_ln51_fu_615_p2;
                icmp_ln51_reg_901_pp4_iter1_reg <= icmp_ln51_reg_901;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_663_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    i_4_cast_reg_948(6 downto 0) <= i_4_cast_fu_668_p1(6 downto 0);
                icmp_ln58_reg_953 <= icmp_ln58_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                    i_4_cast_reg_948_pp5_iter10_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter9_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter11_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter10_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter12_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter11_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter13_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter12_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter14_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter13_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter15_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter14_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter16_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter15_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter17_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter16_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter18_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter17_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter19_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter18_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter20_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter19_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter21_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter20_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter22_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter21_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter23_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter22_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter2_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter1_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter3_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter2_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter4_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter3_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter5_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter4_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter6_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter5_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter7_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter6_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter8_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter7_reg(6 downto 0);
                    i_4_cast_reg_948_pp5_iter9_reg(6 downto 0) <= i_4_cast_reg_948_pp5_iter8_reg(6 downto 0);
                icmp_ln58_reg_953_pp5_iter10_reg <= icmp_ln58_reg_953_pp5_iter9_reg;
                icmp_ln58_reg_953_pp5_iter11_reg <= icmp_ln58_reg_953_pp5_iter10_reg;
                icmp_ln58_reg_953_pp5_iter12_reg <= icmp_ln58_reg_953_pp5_iter11_reg;
                icmp_ln58_reg_953_pp5_iter13_reg <= icmp_ln58_reg_953_pp5_iter12_reg;
                icmp_ln58_reg_953_pp5_iter14_reg <= icmp_ln58_reg_953_pp5_iter13_reg;
                icmp_ln58_reg_953_pp5_iter15_reg <= icmp_ln58_reg_953_pp5_iter14_reg;
                icmp_ln58_reg_953_pp5_iter16_reg <= icmp_ln58_reg_953_pp5_iter15_reg;
                icmp_ln58_reg_953_pp5_iter17_reg <= icmp_ln58_reg_953_pp5_iter16_reg;
                icmp_ln58_reg_953_pp5_iter18_reg <= icmp_ln58_reg_953_pp5_iter17_reg;
                icmp_ln58_reg_953_pp5_iter19_reg <= icmp_ln58_reg_953_pp5_iter18_reg;
                icmp_ln58_reg_953_pp5_iter20_reg <= icmp_ln58_reg_953_pp5_iter19_reg;
                icmp_ln58_reg_953_pp5_iter21_reg <= icmp_ln58_reg_953_pp5_iter20_reg;
                icmp_ln58_reg_953_pp5_iter22_reg <= icmp_ln58_reg_953_pp5_iter21_reg;
                icmp_ln58_reg_953_pp5_iter23_reg <= icmp_ln58_reg_953_pp5_iter22_reg;
                icmp_ln58_reg_953_pp5_iter2_reg <= icmp_ln58_reg_953_pp5_iter1_reg;
                icmp_ln58_reg_953_pp5_iter3_reg <= icmp_ln58_reg_953_pp5_iter2_reg;
                icmp_ln58_reg_953_pp5_iter4_reg <= icmp_ln58_reg_953_pp5_iter3_reg;
                icmp_ln58_reg_953_pp5_iter5_reg <= icmp_ln58_reg_953_pp5_iter4_reg;
                icmp_ln58_reg_953_pp5_iter6_reg <= icmp_ln58_reg_953_pp5_iter5_reg;
                icmp_ln58_reg_953_pp5_iter7_reg <= icmp_ln58_reg_953_pp5_iter6_reg;
                icmp_ln58_reg_953_pp5_iter8_reg <= icmp_ln58_reg_953_pp5_iter7_reg;
                icmp_ln58_reg_953_pp5_iter9_reg <= icmp_ln58_reg_953_pp5_iter8_reg;
                sdiv_ln1148_2_reg_972_pp5_iter23_reg <= sdiv_ln1148_2_reg_972;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    i_4_cast_reg_948_pp5_iter1_reg(6 downto 0) <= i_4_cast_reg_948(6 downto 0);
                icmp_ln58_reg_953_pp5_iter1_reg <= icmp_ln58_reg_953;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln35_reg_825 <= icmp_ln35_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln47_reg_877 <= icmp_ln47_fu_585_p2;
                icmp_ln47_reg_877_pp3_iter1_reg <= icmp_ln47_reg_877;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln47_reg_877_pp3_iter2_reg <= icmp_ln47_reg_877_pp3_iter1_reg;
                icmp_ln47_reg_877_pp3_iter3_reg <= icmp_ln47_reg_877_pp3_iter2_reg;
                icmp_ln47_reg_877_pp3_iter4_reg <= icmp_ln47_reg_877_pp3_iter3_reg;
                icmp_ln47_reg_877_pp3_iter5_reg <= icmp_ln47_reg_877_pp3_iter4_reg;
                icmp_ln47_reg_877_pp3_iter6_reg <= icmp_ln47_reg_877_pp3_iter5_reg;
                icmp_ln47_reg_877_pp3_iter7_reg <= icmp_ln47_reg_877_pp3_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                loss_V_reg_935 <= loss_V_fu_647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                max_V_reg_820 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln51_reg_901 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln47_reg_877 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then
                reg_452 <= log_probs_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln51_reg_901_pp4_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln47_reg_877_pp3_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then
                reg_457 <= grp_exp_16_9_s_fu_432_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state75) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then
                reg_461 <= probs_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_reg_953_pp5_iter22_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                sdiv_ln1148_1_reg_977 <= grp_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_reg_953_pp5_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                sdiv_ln1148_2_reg_972 <= grp_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_reg_901_pp4_iter33_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                sdiv_ln1148_reg_920 <= grp_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_1_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                sub_ln703_reg_867 <= sub_ln703_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                sum_V_cast_reg_891 <= sum_V_cast_fu_601_p1;
            end if;
        end if;
    end process;
    i_1_cast5_reg_857(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_1_cast5_reg_857_pp2_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter11_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter12_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter13_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter14_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter15_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter16_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter17_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter18_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter19_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter20_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter21_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter22_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter23_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter24_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter25_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter26_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter27_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter28_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter29_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter30_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter31_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter32_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter33_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_3_cast7_reg_905_pp4_iter34_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter8_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter9_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter10_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter11_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter12_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter13_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter14_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter15_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter16_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter17_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter18_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter19_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter20_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter21_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter22_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    i_4_cast_reg_948_pp5_iter23_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state112, icmp_ln29_reg_790, ap_enable_reg_pp6_iter2, ap_CS_fsm_state120, ap_CS_fsm_state12, ap_CS_fsm_state19, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_enable_reg_pp3_iter1, ap_enable_reg_pp4_iter1, ap_enable_reg_pp3_iter7, ap_enable_reg_pp5_iter1, icmp_ln29_fu_466_p2, ap_enable_reg_pp0_iter0, exitcond4729_fu_493_p2, icmp_ln35_fu_514_p2, ap_enable_reg_pp1_iter0, icmp_ln41_fu_544_p2, ap_CS_fsm_state23, ap_enable_reg_pp2_iter0, icmp_ln41_1_fu_559_p2, ap_enable_reg_pp3_iter0, icmp_ln47_fu_585_p2, ap_enable_reg_pp3_iter8, ap_enable_reg_pp4_iter0, icmp_ln51_fu_615_p2, ap_enable_reg_pp5_iter0, icmp_ln57_fu_663_p2, ap_enable_reg_pp6_iter0, exitcond2_fu_744_p2, ap_enable_reg_pp6_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter34, ap_enable_reg_pp4_iter35, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter23, ap_enable_reg_pp5_iter24, ap_block_state112_io, ap_block_pp6_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln29_fu_466_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln29_fu_466_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond4729_fu_493_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond4729_fu_493_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln35_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln35_fu_514_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln41_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln41_1_fu_559_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln41_1_fu_559_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln47_fu_585_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter8 = ap_const_logic_1) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((icmp_ln47_fu_585_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter8 = ap_const_logic_1) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln51_fu_615_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter35 = ap_const_logic_1) and (ap_enable_reg_pp4_iter34 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((icmp_ln51_fu_615_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter35 = ap_const_logic_1) and (ap_enable_reg_pp4_iter34 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln57_fu_663_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1) and (ap_enable_reg_pp5_iter23 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((icmp_ln57_fu_663_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1) and (ap_enable_reg_pp5_iter23 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state112 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state112) and (icmp_ln29_reg_790 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state112_io))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state112) and (icmp_ln29_reg_790 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state112_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (exitcond2_fu_744_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (exitcond2_fu_744_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln29_reg_790 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state120))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state120;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1148_fu_691_p2 <= std_logic_vector(signed(sext_ln2221_fu_687_p1) + signed(ap_const_lv17_1FF80));
    add_ln35_fu_519_p2 <= std_logic_vector(unsigned(i_reg_333) + unsigned(ap_const_lv32_1));
    add_ln41_fu_549_p2 <= std_logic_vector(unsigned(i_1_reg_354) + unsigned(ap_const_lv7_1));
    add_ln47_fu_575_p2 <= std_logic_vector(unsigned(i_2_reg_365) + unsigned(ap_const_lv7_1));
    add_ln51_fu_605_p2 <= std_logic_vector(unsigned(i_3_reg_388) + unsigned(ap_const_lv7_1));
    add_ln57_fu_653_p2 <= std_logic_vector(unsigned(i_4_reg_399) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(18);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(38);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state112 <= ap_CS_fsm(39);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state120 <= ap_CS_fsm(45);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(17);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state37 <= ap_CS_fsm(23);
    ap_CS_fsm_state74 <= ap_CS_fsm(25);
    ap_CS_fsm_state75 <= ap_CS_fsm(26);
    ap_CS_fsm_state76 <= ap_CS_fsm(27);
    ap_CS_fsm_state77 <= ap_CS_fsm(28);
    ap_CS_fsm_state78 <= ap_CS_fsm(29);
    ap_CS_fsm_state79 <= ap_CS_fsm(30);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(31);
    ap_CS_fsm_state81 <= ap_CS_fsm(32);
    ap_CS_fsm_state82 <= ap_CS_fsm(33);
    ap_CS_fsm_state83 <= ap_CS_fsm(34);
    ap_CS_fsm_state84 <= ap_CS_fsm(35);
    ap_CS_fsm_state85 <= ap_CS_fsm(36);
    ap_CS_fsm_state86 <= ap_CS_fsm(37);
    ap_NS_fsm_state76 <= ap_NS_fsm(27);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond4729_reg_805, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond4729_reg_805 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond4729_reg_805, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (exitcond4729_reg_805 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state115_io)
    begin
                ap_block_pp6_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state115_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state115_io)
    begin
                ap_block_pp6_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state115_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;

        ap_block_state100_pp5_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp5_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp5_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp5_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp5_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp5_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp5_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp5_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp5_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp5_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond4729_reg_805, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (exitcond4729_reg_805 = ap_const_lv1_0));
    end process;

        ap_block_state110_pp5_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp5_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state112_io_assign_proc : process(icmp_ln29_reg_790, gmem_AWREADY)
    begin
                ap_block_state112_io <= ((gmem_AWREADY = ap_const_logic_0) and (icmp_ln29_reg_790 = ap_const_lv1_1));
    end process;

        ap_block_state113_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state115_io_assign_proc : process(exitcond2_reg_993_pp6_iter1_reg, gmem_WREADY)
    begin
                ap_block_state115_io <= ((gmem_WREADY = ap_const_logic_0) and (exitcond2_reg_993_pp6_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state115_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state120_assign_proc : process(icmp_ln29_reg_790, gmem_BVALID)
    begin
                ap_block_state120 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln29_reg_790 = ap_const_lv1_1));
    end process;

        ap_block_state21_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp4_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp4_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp4_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp4_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp4_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp4_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp4_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp4_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp4_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp4_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp4_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp4_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp4_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp4_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp4_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp4_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp4_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp4_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp4_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp4_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp4_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp4_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp4_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp4_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp4_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp4_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp5_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp5_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp5_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp5_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp5_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp5_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp5_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp5_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp5_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond4729_fu_493_p2)
    begin
        if ((exitcond4729_fu_493_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state21_assign_proc : process(icmp_ln35_fu_514_p2)
    begin
        if ((icmp_ln35_fu_514_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state24_assign_proc : process(icmp_ln41_1_fu_559_p2)
    begin
        if ((icmp_ln41_1_fu_559_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state28_assign_proc : process(icmp_ln47_fu_585_p2)
    begin
        if ((icmp_ln47_fu_585_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state28 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state38_assign_proc : process(icmp_ln51_fu_615_p2)
    begin
        if ((icmp_ln51_fu_615_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state87_assign_proc : process(icmp_ln57_fu_663_p2)
    begin
        if ((icmp_ln57_fu_663_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state87 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state87 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state113_assign_proc : process(exitcond2_fu_744_p2)
    begin
        if ((exitcond2_fu_744_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state113 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state113 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln29_reg_790, ap_CS_fsm_state120, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln29_reg_790 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6)
    begin
        if (((ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter7, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter9, ap_enable_reg_pp4_iter10, ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_enable_reg_pp4_iter13, ap_enable_reg_pp4_iter14, ap_enable_reg_pp4_iter15, ap_enable_reg_pp4_iter16, ap_enable_reg_pp4_iter17, ap_enable_reg_pp4_iter18, ap_enable_reg_pp4_iter19, ap_enable_reg_pp4_iter20, ap_enable_reg_pp4_iter21, ap_enable_reg_pp4_iter22, ap_enable_reg_pp4_iter23, ap_enable_reg_pp4_iter24, ap_enable_reg_pp4_iter25, ap_enable_reg_pp4_iter26, ap_enable_reg_pp4_iter27, ap_enable_reg_pp4_iter28, ap_enable_reg_pp4_iter29, ap_enable_reg_pp4_iter30, ap_enable_reg_pp4_iter31, ap_enable_reg_pp4_iter32, ap_enable_reg_pp4_iter33, ap_enable_reg_pp4_iter34, ap_enable_reg_pp4_iter35)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter35 = ap_const_logic_0) and (ap_enable_reg_pp4_iter34 = ap_const_logic_0) and (ap_enable_reg_pp4_iter33 = ap_const_logic_0) and (ap_enable_reg_pp4_iter32 = ap_const_logic_0) and (ap_enable_reg_pp4_iter31 = ap_const_logic_0) and (ap_enable_reg_pp4_iter30 = ap_const_logic_0) and (ap_enable_reg_pp4_iter29 = ap_const_logic_0) and (ap_enable_reg_pp4_iter28 = ap_const_logic_0) and (ap_enable_reg_pp4_iter27 = ap_const_logic_0) and (ap_enable_reg_pp4_iter26 = ap_const_logic_0) and (ap_enable_reg_pp4_iter25 = ap_const_logic_0) and (ap_enable_reg_pp4_iter24 = ap_const_logic_0) and (ap_enable_reg_pp4_iter23 = ap_const_logic_0) and (ap_enable_reg_pp4_iter22 = ap_const_logic_0) and (ap_enable_reg_pp4_iter21 = ap_const_logic_0) and (ap_enable_reg_pp4_iter20 = ap_const_logic_0) and (ap_enable_reg_pp4_iter19 = ap_const_logic_0) and (ap_enable_reg_pp4_iter18 = ap_const_logic_0) and (ap_enable_reg_pp4_iter17 = ap_const_logic_0) and (ap_enable_reg_pp4_iter16 = ap_const_logic_0) and (ap_enable_reg_pp4_iter15 = ap_const_logic_0) and (ap_enable_reg_pp4_iter14 = ap_const_logic_0) and (ap_enable_reg_pp4_iter13 = ap_const_logic_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_0) and (ap_enable_reg_pp4_iter9 = ap_const_logic_0) and (ap_enable_reg_pp4_iter8 = ap_const_logic_0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter4, ap_enable_reg_pp5_iter5, ap_enable_reg_pp5_iter6, ap_enable_reg_pp5_iter7, ap_enable_reg_pp5_iter8, ap_enable_reg_pp5_iter9, ap_enable_reg_pp5_iter10, ap_enable_reg_pp5_iter11, ap_enable_reg_pp5_iter12, ap_enable_reg_pp5_iter13, ap_enable_reg_pp5_iter14, ap_enable_reg_pp5_iter15, ap_enable_reg_pp5_iter16, ap_enable_reg_pp5_iter17, ap_enable_reg_pp5_iter18, ap_enable_reg_pp5_iter19, ap_enable_reg_pp5_iter20, ap_enable_reg_pp5_iter21, ap_enable_reg_pp5_iter22, ap_enable_reg_pp5_iter23, ap_enable_reg_pp5_iter24)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter24 = ap_const_logic_0) and (ap_enable_reg_pp5_iter23 = ap_const_logic_0) and (ap_enable_reg_pp5_iter22 = ap_const_logic_0) and (ap_enable_reg_pp5_iter21 = ap_const_logic_0) and (ap_enable_reg_pp5_iter20 = ap_const_logic_0) and (ap_enable_reg_pp5_iter19 = ap_const_logic_0) and (ap_enable_reg_pp5_iter18 = ap_const_logic_0) and (ap_enable_reg_pp5_iter17 = ap_const_logic_0) and (ap_enable_reg_pp5_iter16 = ap_const_logic_0) and (ap_enable_reg_pp5_iter15 = ap_const_logic_0) and (ap_enable_reg_pp5_iter14 = ap_const_logic_0) and (ap_enable_reg_pp5_iter13 = ap_const_logic_0) and (ap_enable_reg_pp5_iter12 = ap_const_logic_0) and (ap_enable_reg_pp5_iter11 = ap_const_logic_0) and (ap_enable_reg_pp5_iter10 = ap_const_logic_0) and (ap_enable_reg_pp5_iter9 = ap_const_logic_0) and (ap_enable_reg_pp5_iter8 = ap_const_logic_0) and (ap_enable_reg_pp5_iter7 = ap_const_logic_0) and (ap_enable_reg_pp5_iter6 = ap_const_logic_0) and (ap_enable_reg_pp5_iter5 = ap_const_logic_0) and (ap_enable_reg_pp5_iter4 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_loop_index451_phi_fu_325_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond4729_reg_805, loop_index451_reg_321, empty_42_reg_800)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4729_reg_805 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_loop_index451_phi_fu_325_p4 <= empty_42_reg_800;
        else 
            ap_phi_mux_loop_index451_phi_fu_325_p4 <= loop_index451_reg_321;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln29_reg_790, ap_CS_fsm_state120, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln29_reg_790 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state120))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dxbuff_V_address0_assign_proc : process(ap_block_pp6_stage0, dxbuff_V_addr_reg_930, i_4_cast_reg_948_pp5_iter23_reg, icmp_ln58_reg_953_pp5_iter23_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter24, ap_block_pp5_stage0, loop_index_cast_fu_749_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            dxbuff_V_address0 <= loop_index_cast_fu_749_p1(7 - 1 downto 0);
        elsif (((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1))) then 
            dxbuff_V_address0 <= dxbuff_V_addr_reg_930;
        elsif (((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1))) then 
            dxbuff_V_address0 <= i_4_cast_reg_948_pp5_iter23_reg(7 - 1 downto 0);
        else 
            dxbuff_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    dxbuff_V_ce0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln58_reg_953_pp5_iter23_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp6_stage0_11001, ap_enable_reg_pp5_iter24)
    begin
        if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1)) or ((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1)))) then 
            dxbuff_V_ce0 <= ap_const_logic_1;
        else 
            dxbuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dxbuff_V_d0_assign_proc : process(icmp_ln58_reg_953_pp5_iter23_reg, ap_enable_reg_pp5_iter24, ap_block_pp5_stage0, trunc_ln703_2_fu_706_p1, trunc_ln703_1_fu_710_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1))) then
            if ((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_1)) then 
                dxbuff_V_d0 <= trunc_ln703_1_fu_710_p1;
            elsif ((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_0)) then 
                dxbuff_V_d0 <= trunc_ln703_2_fu_706_p1;
            else 
                dxbuff_V_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            dxbuff_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dxbuff_V_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln58_reg_953_pp5_iter23_reg, ap_enable_reg_pp5_iter24)
    begin
        if ((((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1)) or ((icmp_ln58_reg_953_pp5_iter23_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter24 = ap_const_logic_1)))) then 
            dxbuff_V_we0 <= ap_const_logic_1;
        else 
            dxbuff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_42_fu_483_p2 <= std_logic_vector(unsigned(ap_phi_mux_loop_index451_phi_fu_325_p4) + unsigned(ap_const_lv7_1));
    empty_49_fu_734_p2 <= std_logic_vector(unsigned(loop_index_reg_410) + unsigned(ap_const_lv7_1));
    exitcond2_fu_744_p2 <= "1" when (loop_index_cast1_fu_740_p1 = x_size_read_reg_760) else "0";
    exitcond4729_fu_493_p2 <= "1" when (loop_index451_cast10_fu_489_p1 = x_size_read_reg_760) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY, p_cast_cast_fu_472_p1, sext_ln34_fu_503_p1)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARADDR <= sext_ln34_fu_503_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARADDR <= p_cast_cast_fu_472_p1;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY, x_size_read_reg_760)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARLEN <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARLEN <= x_size_read_reg_760;
            else 
                gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state112, icmp_ln29_reg_790, ap_block_state112_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state112) and (icmp_ln29_reg_790 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state112_io))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(icmp_ln29_reg_790, ap_CS_fsm_state120, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln29_reg_790 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state120) and (icmp_ln29_reg_790 = ap_const_lv1_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond4729_reg_805, ap_CS_fsm_state19, gmem_RVALID, ap_block_pp0_stage0_11001)
    begin
        if ((((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4729_reg_805 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp6_iter2, exitcond2_reg_993_pp6_iter1_reg, ap_block_pp6_stage0_11001)
    begin
        if (((exitcond2_reg_993_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state112, icmp_ln29_reg_790)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state112) and (icmp_ln29_reg_790 = ap_const_lv1_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, icmp_ln29_reg_790, ap_CS_fsm_state120)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state120) and (icmp_ln29_reg_790 = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond4729_reg_805, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond4729_reg_805 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, exitcond2_reg_993_pp6_iter1_reg)
    begin
        if (((exitcond2_reg_993_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_exp_16_9_s_fu_432_ap_start <= grp_exp_16_9_s_fu_432_ap_start_reg;

    grp_fu_1007_ce_assign_proc : process(ap_CS_fsm_state86, grp_log_16_9_s_fu_421_grp_fu_1007_p_ce, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            grp_fu_1007_ce <= grp_log_16_9_s_fu_421_grp_fu_1007_p_ce;
        else 
            grp_fu_1007_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1007_p0 <= grp_log_16_9_s_fu_421_grp_fu_1007_p_din0;
    grp_fu_1007_p1 <= grp_log_16_9_s_fu_421_grp_fu_1007_p_din1;
    grp_fu_443_p4 <= x_read_reg_785(63 downto 1);
    grp_fu_633_p0 <= (reg_457 & ap_const_lv7_0);
    grp_fu_633_p1 <= sum_V_cast_reg_891(16 - 1 downto 0);
        grp_fu_682_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1148_1_fu_678_p0),17));

        grp_fu_701_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1148_fu_691_p2),18));

    grp_log_16_9_s_fu_421_ap_start <= grp_log_16_9_s_fu_421_ap_start_reg;
    grp_log_16_9_s_fu_421_grp_fu_1007_p_dout0 <= grp_fu_1007_p2;
    i_1_cast5_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_354),64));
    i_1_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_354),32));
    i_2_cast6_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_365),64));
    i_2_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_365),32));
    i_3_cast7_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_388),64));
    i_3_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_388),32));
    i_4_cast4_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_399),32));
    i_4_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_399),64));
    i_cast4_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_333),64));
    icmp_ln1494_fu_530_p2 <= "1" when (signed(xbuff_V_q0) > signed(max_V_1_reg_344)) else "0";
    icmp_ln29_fu_466_p2 <= "0" when (x_size = ap_const_lv32_0) else "1";
    icmp_ln35_fu_514_p2 <= "1" when (unsigned(i_reg_333) < unsigned(x_size_read_reg_760)) else "0";
    icmp_ln41_1_fu_559_p2 <= "1" when (i_1_cast_fu_555_p1 = x_size_read_reg_760) else "0";
    icmp_ln41_fu_544_p2 <= "1" when (signed(x_size_read_reg_760) > signed(ap_const_lv32_0)) else "0";
    icmp_ln47_fu_585_p2 <= "1" when (i_2_cast_fu_581_p1 = x_size_read_reg_760) else "0";
    icmp_ln51_fu_615_p2 <= "1" when (i_3_cast_fu_611_p1 = x_size_read_reg_760) else "0";
    icmp_ln57_fu_663_p2 <= "1" when (i_4_cast4_fu_659_p1 = x_size_read_reg_760) else "0";
    icmp_ln58_fu_673_p2 <= "1" when (i_4_cast4_fu_659_p1 = y_read_reg_774) else "0";

    log_probs_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_CS_fsm_pp4_stage0, i_1_cast5_reg_857_pp2_iter1_reg, ap_enable_reg_pp3_iter0, ap_enable_reg_pp4_iter0, i_3_cast7_fu_620_p1, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp2_stage0, i_2_cast6_fu_590_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            log_probs_V_address0 <= i_3_cast7_fu_620_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            log_probs_V_address0 <= i_2_cast6_fu_590_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            log_probs_V_address0 <= i_1_cast5_reg_857_pp2_iter1_reg(7 - 1 downto 0);
        else 
            log_probs_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    log_probs_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            log_probs_V_ce0 <= ap_const_logic_1;
        else 
            log_probs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    log_probs_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln41_1_reg_853_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln41_1_reg_853_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            log_probs_V_we0 <= ap_const_logic_1;
        else 
            log_probs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_index451_cast10_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loop_index451_phi_fu_325_p4),32));
    loop_index451_cast3_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index451_reg_321_pp0_iter1_reg),64));
    loop_index_cast1_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_410),32));
    loop_index_cast_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_reg_410),64));
    loss_V_fu_647_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(grp_log_16_9_s_fu_421_ap_return));
    max_V_2_fu_536_p3 <= 
        xbuff_V_q0 when (icmp_ln1494_fu_530_p2(0) = '1') else 
        max_V_1_reg_344;
        p_cast2_cast_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast2_fu_714_p4),64));

    p_cast2_fu_714_p4 <= dx_read_reg_780(63 downto 1);
        p_cast_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_443_p4),64));


    probs_V_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, i_3_cast7_reg_905_pp4_iter34_reg, ap_CS_fsm_state74, ap_enable_reg_pp5_iter0, i_4_cast_fu_668_p1, ap_enable_reg_pp4_iter35, ap_block_pp4_stage0, zext_ln55_fu_642_p1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            probs_V_address0 <= i_4_cast_fu_668_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            probs_V_address0 <= zext_ln55_fu_642_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter35 = ap_const_logic_1))) then 
            probs_V_address0 <= i_3_cast7_reg_905_pp4_iter34_reg(7 - 1 downto 0);
        else 
            probs_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    probs_V_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state74, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter35 = ap_const_logic_1)))) then 
            probs_V_ce0 <= ap_const_logic_1;
        else 
            probs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    probs_V_d0 <= sdiv_ln1148_reg_920(16 - 1 downto 0);

    probs_V_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln51_reg_901_pp4_iter34_reg, ap_enable_reg_pp4_iter35)
    begin
        if (((icmp_ln51_reg_901_pp4_iter34_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter35 = ap_const_logic_1))) then 
            probs_V_we0 <= ap_const_logic_1;
        else 
            probs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln1148_1_fu_678_p0 <= reg_461;
    sext_ln2221_fu_687_p0 <= reg_461;
        sext_ln2221_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln2221_fu_687_p0),17));

        sext_ln34_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_443_p4),64));

    sub_ln703_fu_569_p2 <= std_logic_vector(unsigned(xbuff_V_q0) - unsigned(max_V_1_reg_344));
    sum_V_1_fu_595_p2 <= std_logic_vector(unsigned(reg_457) + unsigned(sum_V_reg_376));
        sum_V_cast_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_V_reg_376),23));

    trunc_ln703_1_fu_710_p1 <= sdiv_ln1148_1_reg_977(16 - 1 downto 0);
    trunc_ln703_2_fu_706_p1 <= sdiv_ln1148_2_reg_972_pp5_iter23_reg(16 - 1 downto 0);

    xbuff_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, i_1_cast5_fu_564_p1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0, loop_index451_cast3_fu_498_p1, i_cast4_fu_525_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            xbuff_V_address0 <= i_1_cast5_fu_564_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            xbuff_V_address0 <= i_cast4_fu_525_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            xbuff_V_address0 <= loop_index451_cast3_fu_498_p1(7 - 1 downto 0);
        else 
            xbuff_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    xbuff_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            xbuff_V_ce0 <= ap_const_logic_1;
        else 
            xbuff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xbuff_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond4729_reg_805_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond4729_reg_805_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xbuff_V_we0 <= ap_const_logic_1;
        else 
            xbuff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln55_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_read_reg_774),64));
end behav;
