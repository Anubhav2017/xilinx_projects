-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loss_derivative is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    x_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_EN_A : OUT STD_LOGIC;
    x_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    x_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    x_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    x_Clk_A : OUT STD_LOGIC;
    x_Rst_A : OUT STD_LOGIC;
    dx_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    dx_EN_A : OUT STD_LOGIC;
    dx_WEN_A : OUT STD_LOGIC_VECTOR (1 downto 0);
    dx_Din_A : OUT STD_LOGIC_VECTOR (15 downto 0);
    dx_Dout_A : IN STD_LOGIC_VECTOR (15 downto 0);
    dx_Clk_A : OUT STD_LOGIC;
    dx_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of loss_derivative is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loss_derivative_loss_derivative,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=6057,HLS_SYN_LUT=5718,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (56 downto 0) := "000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (56 downto 0) := "000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (56 downto 0) := "000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (56 downto 0) := "000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (56 downto 0) := "000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (56 downto 0) := "000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (56 downto 0) := "000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (56 downto 0) := "000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (56 downto 0) := "010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv16_E000 : STD_LOGIC_VECTOR (15 downto 0) := "1110000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal y : STD_LOGIC_VECTOR (31 downto 0);
    signal dim : STD_LOGIC_VECTOR (31 downto 0);
    signal writetoddr : STD_LOGIC;
    signal ddrtobram : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal icmp_ln31_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal icmp_ln34_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp5_iter3 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln39_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_1112_pp5_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_enable_reg_pp6_iter3 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln42_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1132_pp6_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_386 : STD_LOGIC_VECTOR (30 downto 0);
    signal max_V_1_reg_397 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_reg_407 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_6_reg_418 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_V_reg_429 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_7_reg_441 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_8_reg_452 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_463 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_5_reg_474 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_485 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_4_reg_496 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_575 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_state99_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state100_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state101_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state102_pp5_stage0_iter3 : BOOLEAN;
    signal ap_block_state102_io : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln39_reg_1112_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal log_probs_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state12_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln65_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_state30_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state42_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state43_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter14 : BOOLEAN;
    signal ap_block_state45_pp3_stage0_iter15 : BOOLEAN;
    signal ap_block_state46_pp3_stage0_iter16 : BOOLEAN;
    signal ap_block_state47_pp3_stage0_iter17 : BOOLEAN;
    signal ap_block_state48_pp3_stage0_iter18 : BOOLEAN;
    signal ap_block_state49_pp3_stage0_iter19 : BOOLEAN;
    signal ap_block_state50_pp3_stage0_iter20 : BOOLEAN;
    signal ap_block_state51_pp3_stage0_iter21 : BOOLEAN;
    signal ap_block_state52_pp3_stage0_iter22 : BOOLEAN;
    signal ap_block_state53_pp3_stage0_iter23 : BOOLEAN;
    signal ap_block_state54_pp3_stage0_iter24 : BOOLEAN;
    signal ap_block_state55_pp3_stage0_iter25 : BOOLEAN;
    signal ap_block_state56_pp3_stage0_iter26 : BOOLEAN;
    signal ap_block_state57_pp3_stage0_iter27 : BOOLEAN;
    signal ap_block_state58_pp3_stage0_iter28 : BOOLEAN;
    signal ap_block_state59_pp3_stage0_iter29 : BOOLEAN;
    signal ap_block_state60_pp3_stage0_iter30 : BOOLEAN;
    signal ap_block_state61_pp3_stage0_iter31 : BOOLEAN;
    signal ap_block_state62_pp3_stage0_iter32 : BOOLEAN;
    signal ap_block_state63_pp3_stage0_iter33 : BOOLEAN;
    signal ap_block_state64_pp3_stage0_iter34 : BOOLEAN;
    signal ap_block_state65_pp3_stage0_iter35 : BOOLEAN;
    signal ap_block_state66_pp3_stage0_iter36 : BOOLEAN;
    signal ap_block_state67_pp3_stage0_iter37 : BOOLEAN;
    signal ap_block_state68_pp3_stage0_iter38 : BOOLEAN;
    signal ap_block_state69_pp3_stage0_iter39 : BOOLEAN;
    signal ap_block_state70_pp3_stage0_iter40 : BOOLEAN;
    signal ap_block_state71_pp3_stage0_iter41 : BOOLEAN;
    signal ap_block_state72_pp3_stage0_iter42 : BOOLEAN;
    signal ap_block_state73_pp3_stage0_iter43 : BOOLEAN;
    signal ap_block_state74_pp3_stage0_iter44 : BOOLEAN;
    signal ap_block_state75_pp3_stage0_iter45 : BOOLEAN;
    signal ap_block_state76_pp3_stage0_iter46 : BOOLEAN;
    signal ap_block_state77_pp3_stage0_iter47 : BOOLEAN;
    signal ap_block_state78_pp3_stage0_iter48 : BOOLEAN;
    signal ap_block_state79_pp3_stage0_iter49 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln69_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_exp_16_3_s_fu_529_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal icmp_ln65_reg_1003_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter15 : STD_LOGIC := '0';
    signal icmp_ln69_reg_1027_pp3_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal probs_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state94_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state95_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state96_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal dim_read_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_read_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_ddr_read_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_ddr_read_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal writetoddr_read_read_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln53_reg_956_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_605_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal max_V_2_fu_626_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln59_fu_634_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln59_1_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_984_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln703_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_reg_988_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln65_fu_665_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln65_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_1_fu_689_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal sum_V_cast_fu_695_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sum_V_cast_reg_1017 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln69_fu_699_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln69_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1027_pp3_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln70_fu_718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter38_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter39_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter40_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter41_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter42_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter43_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter44_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter45_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter46_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter47_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln70_reg_1031_pp3_iter48_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_731_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sdiv_ln1148_reg_1046 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_log_16_3_s_fu_540_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_1_reg_1056 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal loss_V_fu_740_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal loss_V_reg_1061 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal dx_addr_2_reg_1067 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln75_fu_745_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln75_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1081_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_cast6_cast_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_cast6_cast_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_cast6_cast_reg_1085_pp4_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_fu_781_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln39_reg_1095 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln39_fu_795_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal icmp_ln39_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_826_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state108_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state109_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state110_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state111_pp6_stage0_iter3 : BOOLEAN;
    signal ap_block_state111_io : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln42_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1132_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dx_load_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal trunc_ln31_fu_857_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln31_reg_1152 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal add_ln31_fu_860_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state124_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state125_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state126_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln31_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1163_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln32_fu_871_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln32_reg_1167 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln32_reg_1167_pp7_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_read_reg_1172 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_fu_890_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal ap_block_state134_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state135_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state136_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal icmp_ln34_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_1188_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_fu_901_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln35_reg_1192 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln35_reg_1192_pp8_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal gmem_addr_2_read_reg_1197 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter49 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state94 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state99 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state108 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state124 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state134 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal log_probs_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal log_probs_V_ce0 : STD_LOGIC;
    signal log_probs_V_we0 : STD_LOGIC;
    signal log_probs_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal probs_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal probs_V_ce0 : STD_LOGIC;
    signal probs_V_we0 : STD_LOGIC;
    signal probs_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_exp_16_3_s_fu_529_ap_start : STD_LOGIC;
    signal grp_exp_16_3_s_fu_529_ap_done : STD_LOGIC;
    signal grp_exp_16_3_s_fu_529_ap_idle : STD_LOGIC;
    signal grp_exp_16_3_s_fu_529_ap_ready : STD_LOGIC;
    signal grp_log_16_3_s_fu_540_ap_start : STD_LOGIC;
    signal grp_log_16_3_s_fu_540_ap_done : STD_LOGIC;
    signal grp_log_16_3_s_fu_540_ap_idle : STD_LOGIC;
    signal grp_log_16_3_s_fu_540_ap_ready : STD_LOGIC;
    signal loss_V_1_reg_507 : STD_LOGIC_VECTOR (15 downto 0);
    signal ddrtobram_read_read_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal grp_exp_16_3_s_fu_529_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal grp_log_16_3_s_fu_540_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_NS_fsm_state82 : STD_LOGIC;
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal zext_ln1494_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln66_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln40_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln39_fu_784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln42_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln31_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_fu_879_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp5_stage0_01001 : BOOLEAN;
    signal ap_block_pp6_stage0_01001 : BOOLEAN;
    signal x_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dx_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln703_fu_774_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_551_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast3_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1494_fu_611_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1494_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln703_fu_649_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_cast_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln66_fu_680_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_7_cast_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln70_fu_714_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_731_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_731_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_8_cast_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_74_fu_765_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_557_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln40_fu_806_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_566_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln43_fu_837_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (15 downto 0);

    component loss_derivative_exp_16_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_log_16_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_sdiv_29ns_16s_16_33_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_log_probs_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (15 downto 0);
        x_ddr : OUT STD_LOGIC_VECTOR (31 downto 0);
        dx_ddr : OUT STD_LOGIC_VECTOR (31 downto 0);
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        dim : OUT STD_LOGIC_VECTOR (31 downto 0);
        writetoddr : OUT STD_LOGIC;
        ddrtobram : OUT STD_LOGIC );
    end component;


    component loss_derivative_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component loss_derivative_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => loss_V_1_reg_507,
        x_ddr => x_ddr,
        dx_ddr => dx_ddr,
        y => y,
        dim => dim,
        writetoddr => writetoddr,
        ddrtobram => ddrtobram);

    gmem_m_axi_U : component loss_derivative_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => dim_read_reg_915,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => dim_read_reg_915,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    log_probs_V_U : component loss_derivative_log_probs_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => log_probs_V_address0,
        ce0 => log_probs_V_ce0,
        we0 => log_probs_V_we0,
        d0 => log_probs_V_d0,
        q0 => log_probs_V_q0);

    probs_V_U : component loss_derivative_log_probs_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => probs_V_address0,
        ce0 => probs_V_ce0,
        we0 => probs_V_we0,
        d0 => probs_V_d0,
        q0 => probs_V_q0);

    grp_exp_16_3_s_fu_529 : component loss_derivative_exp_16_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_16_3_s_fu_529_ap_start,
        ap_done => grp_exp_16_3_s_fu_529_ap_done,
        ap_idle => grp_exp_16_3_s_fu_529_ap_idle,
        ap_ready => grp_exp_16_3_s_fu_529_ap_ready,
        ap_ce => ap_const_logic_1,
        x => reg_581,
        ap_return => grp_exp_16_3_s_fu_529_ap_return);

    grp_log_16_3_s_fu_540 : component loss_derivative_log_16_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_log_16_3_s_fu_540_ap_start,
        ap_done => grp_log_16_3_s_fu_540_ap_done,
        ap_idle => grp_log_16_3_s_fu_540_ap_idle,
        ap_ready => grp_log_16_3_s_fu_540_ap_ready,
        x => reg_590,
        ap_return => grp_log_16_3_s_fu_540_ap_return);

    sdiv_29ns_16s_16_33_1_U21 : component loss_derivative_sdiv_29ns_16s_16_33_1
    generic map (
        ID => 1,
        NUM_STAGE => 33,
        din0_WIDTH => 29,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_731_p0,
        din1 => grp_fu_731_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_731_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_fu_551_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((grp_fu_551_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state12)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state30);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter17 <= ap_enable_reg_pp3_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter18 <= ap_enable_reg_pp3_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter19 <= ap_enable_reg_pp3_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter20 <= ap_enable_reg_pp3_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter21 <= ap_enable_reg_pp3_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter22 <= ap_enable_reg_pp3_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter23 <= ap_enable_reg_pp3_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter24 <= ap_enable_reg_pp3_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter25 <= ap_enable_reg_pp3_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter26 <= ap_enable_reg_pp3_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter27 <= ap_enable_reg_pp3_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter28 <= ap_enable_reg_pp3_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter29 <= ap_enable_reg_pp3_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter30 <= ap_enable_reg_pp3_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter31 <= ap_enable_reg_pp3_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter32 <= ap_enable_reg_pp3_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter33 <= ap_enable_reg_pp3_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter34 <= ap_enable_reg_pp3_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter35 <= ap_enable_reg_pp3_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter36 <= ap_enable_reg_pp3_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter37 <= ap_enable_reg_pp3_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter38 <= ap_enable_reg_pp3_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter39 <= ap_enable_reg_pp3_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter40 <= ap_enable_reg_pp3_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter41 <= ap_enable_reg_pp3_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter42 <= ap_enable_reg_pp3_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter43 <= ap_enable_reg_pp3_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter44 <= ap_enable_reg_pp3_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter45 <= ap_enable_reg_pp3_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter46 <= ap_enable_reg_pp3_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter47 <= ap_enable_reg_pp3_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter48 <= ap_enable_reg_pp3_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter49 <= ap_enable_reg_pp3_iter48;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    ap_enable_reg_pp3_iter49 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state94) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln59_reg_975 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state94)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state94);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((icmp_ln59_reg_975 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state99) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state99)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state99);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
                    ap_enable_reg_pp5_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state108) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state108)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state108);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
                elsif ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                    ap_enable_reg_pp6_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state124) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state124)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state124);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_logic_1 = ap_condition_pp8_exit_iter0_state134) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state134)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state134);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                    ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_16_3_s_fu_529_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exp_16_3_s_fu_529_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln69_reg_1027 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((icmp_ln65_reg_1003 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
                    grp_exp_16_3_s_fu_529_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_16_3_s_fu_529_ap_ready = ap_const_logic_1)) then 
                    grp_exp_16_3_s_fu_529_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_log_16_3_s_fu_540_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_log_16_3_s_fu_540_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (ap_const_logic_1 = ap_NS_fsm_state82))) then 
                    grp_log_16_3_s_fu_540_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_log_16_3_s_fu_540_ap_ready = ap_const_logic_1)) then 
                    grp_log_16_3_s_fu_540_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
                i_1_reg_485 <= ap_const_lv31_0;
            elsif (((icmp_ln31_fu_866_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                i_1_reg_485 <= add_ln31_fu_860_p2;
            end if; 
        end if;
    end process;

    i_2_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
                i_2_reg_463 <= ap_const_lv31_0;
            elsif (((icmp_ln39_fu_801_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                i_2_reg_463 <= add_ln39_fu_795_p2;
            end if; 
        end if;
    end process;

    i_3_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_551_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_3_reg_407 <= ap_const_lv31_0;
            elsif (((icmp_ln59_1_fu_644_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_3_reg_407 <= add_ln59_fu_634_p2;
            end if; 
        end if;
    end process;

    i_4_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
                i_4_reg_496 <= ap_const_lv31_0;
            elsif (((icmp_ln34_fu_896_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                i_4_reg_496 <= add_ln34_fu_890_p2;
            end if; 
        end if;
    end process;

    i_5_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                i_5_reg_474 <= ap_const_lv31_0;
            elsif (((icmp_ln42_fu_832_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                i_5_reg_474 <= add_ln42_fu_826_p2;
            end if; 
        end if;
    end process;

    i_6_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_6_reg_418 <= ap_const_lv31_0;
            elsif (((icmp_ln65_fu_675_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_6_reg_418 <= add_ln65_fu_665_p2;
            end if; 
        end if;
    end process;

    i_7_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_7_reg_441 <= ap_const_lv31_0;
            elsif (((icmp_ln69_fu_709_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_7_reg_441 <= add_ln69_fu_699_p2;
            end if; 
        end if;
    end process;

    i_8_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_755_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_8_reg_452 <= add_ln75_fu_745_p2;
            elsif (((icmp_ln59_reg_975 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                i_8_reg_452 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln53_fu_600_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_386 <= add_ln53_fu_605_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_386 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;

    loss_V_1_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
                loss_V_1_reg_507 <= loss_V_reg_1061;
            elsif (((icmp_ln59_reg_975 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                loss_V_1_reg_507 <= loss_V_fu_740_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state137) or ((ap_start = ap_const_logic_1) and (grp_fu_551_p2 = ap_const_lv1_0) and (writetoddr_read_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ddrtobram_read_read_fu_164_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (grp_fu_551_p2 = ap_const_lv1_0) and (writetoddr_read_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ddrtobram_read_read_fu_164_p2 = ap_const_lv1_1)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116)))) then 
                loss_V_1_reg_507 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    max_V_1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln53_reg_956_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                max_V_1_reg_397 <= max_V_2_fu_626_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                max_V_1_reg_397 <= x_Dout_A;
            end if; 
        end if;
    end process;

    sum_V_reg_429_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                sum_V_reg_429 <= ap_const_lv16_0;
            elsif (((ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (icmp_ln65_reg_1003_pp2_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                sum_V_reg_429 <= sum_V_1_fu_689_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dim_read_reg_915 <= dim;
                dx_ddr_read_reg_938 <= dx_ddr;
                x_ddr_read_reg_943 <= x_ddr;
                y_read_reg_931 <= y;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_975 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                dx_addr_2_reg_1067 <= y_read_reg_931(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (icmp_ln42_reg_1132_pp6_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                dx_load_reg_1141 <= dx_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (icmp_ln34_reg_1188 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                gmem_addr_2_read_reg_1197 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln31_reg_1163 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                gmem_addr_read_reg_1172 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_755_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    i_8_cast6_cast_reg_1085(6 downto 0) <= i_8_cast6_cast_fu_769_p1(6 downto 0);
                icmp_ln76_reg_1081 <= icmp_ln76_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    i_8_cast6_cast_reg_1085_pp4_iter1_reg(6 downto 0) <= i_8_cast6_cast_reg_1085(6 downto 0);
                icmp_ln76_reg_1081_pp4_iter1_reg <= icmp_ln76_reg_1081;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                icmp_ln31_reg_1163 <= icmp_ln31_fu_866_p2;
                icmp_ln31_reg_1163_pp7_iter1_reg <= icmp_ln31_reg_1163;
                trunc_ln32_reg_1167_pp7_iter1_reg <= trunc_ln32_reg_1167;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                icmp_ln34_reg_1188 <= icmp_ln34_fu_896_p2;
                icmp_ln34_reg_1188_pp8_iter1_reg <= icmp_ln34_reg_1188;
                trunc_ln35_reg_1192_pp8_iter1_reg <= trunc_ln35_reg_1192;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                icmp_ln39_reg_1112 <= icmp_ln39_fu_801_p2;
                icmp_ln39_reg_1112_pp5_iter1_reg <= icmp_ln39_reg_1112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp5_stage0_11001)) then
                icmp_ln39_reg_1112_pp5_iter2_reg <= icmp_ln39_reg_1112_pp5_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                icmp_ln42_reg_1132 <= icmp_ln42_fu_832_p2;
                icmp_ln42_reg_1132_pp6_iter1_reg <= icmp_ln42_reg_1132;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp6_stage0_11001)) then
                icmp_ln42_reg_1132_pp6_iter2_reg <= icmp_ln42_reg_1132_pp6_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln53_reg_956 <= icmp_ln53_fu_600_p2;
                icmp_ln53_reg_956_pp0_iter1_reg <= icmp_ln53_reg_956;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln59_1_reg_984 <= icmp_ln59_1_fu_644_p2;
                icmp_ln59_1_reg_984_pp1_iter1_reg <= icmp_ln59_1_reg_984;
                    zext_ln703_reg_988_pp1_iter1_reg(6 downto 0) <= zext_ln703_reg_988(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln59_reg_975 <= grp_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln65_reg_1003 <= icmp_ln65_fu_675_p2;
                icmp_ln65_reg_1003_pp2_iter1_reg <= icmp_ln65_reg_1003;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln65_reg_1003_pp2_iter10_reg <= icmp_ln65_reg_1003_pp2_iter9_reg;
                icmp_ln65_reg_1003_pp2_iter11_reg <= icmp_ln65_reg_1003_pp2_iter10_reg;
                icmp_ln65_reg_1003_pp2_iter12_reg <= icmp_ln65_reg_1003_pp2_iter11_reg;
                icmp_ln65_reg_1003_pp2_iter13_reg <= icmp_ln65_reg_1003_pp2_iter12_reg;
                icmp_ln65_reg_1003_pp2_iter14_reg <= icmp_ln65_reg_1003_pp2_iter13_reg;
                icmp_ln65_reg_1003_pp2_iter15_reg <= icmp_ln65_reg_1003_pp2_iter14_reg;
                icmp_ln65_reg_1003_pp2_iter2_reg <= icmp_ln65_reg_1003_pp2_iter1_reg;
                icmp_ln65_reg_1003_pp2_iter3_reg <= icmp_ln65_reg_1003_pp2_iter2_reg;
                icmp_ln65_reg_1003_pp2_iter4_reg <= icmp_ln65_reg_1003_pp2_iter3_reg;
                icmp_ln65_reg_1003_pp2_iter5_reg <= icmp_ln65_reg_1003_pp2_iter4_reg;
                icmp_ln65_reg_1003_pp2_iter6_reg <= icmp_ln65_reg_1003_pp2_iter5_reg;
                icmp_ln65_reg_1003_pp2_iter7_reg <= icmp_ln65_reg_1003_pp2_iter6_reg;
                icmp_ln65_reg_1003_pp2_iter8_reg <= icmp_ln65_reg_1003_pp2_iter7_reg;
                icmp_ln65_reg_1003_pp2_iter9_reg <= icmp_ln65_reg_1003_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln69_reg_1027 <= icmp_ln69_fu_709_p2;
                icmp_ln69_reg_1027_pp3_iter1_reg <= icmp_ln69_reg_1027;
                    zext_ln70_reg_1031_pp3_iter1_reg(6 downto 0) <= zext_ln70_reg_1031(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln69_reg_1027_pp3_iter10_reg <= icmp_ln69_reg_1027_pp3_iter9_reg;
                icmp_ln69_reg_1027_pp3_iter11_reg <= icmp_ln69_reg_1027_pp3_iter10_reg;
                icmp_ln69_reg_1027_pp3_iter12_reg <= icmp_ln69_reg_1027_pp3_iter11_reg;
                icmp_ln69_reg_1027_pp3_iter13_reg <= icmp_ln69_reg_1027_pp3_iter12_reg;
                icmp_ln69_reg_1027_pp3_iter14_reg <= icmp_ln69_reg_1027_pp3_iter13_reg;
                icmp_ln69_reg_1027_pp3_iter15_reg <= icmp_ln69_reg_1027_pp3_iter14_reg;
                icmp_ln69_reg_1027_pp3_iter16_reg <= icmp_ln69_reg_1027_pp3_iter15_reg;
                icmp_ln69_reg_1027_pp3_iter17_reg <= icmp_ln69_reg_1027_pp3_iter16_reg;
                icmp_ln69_reg_1027_pp3_iter18_reg <= icmp_ln69_reg_1027_pp3_iter17_reg;
                icmp_ln69_reg_1027_pp3_iter19_reg <= icmp_ln69_reg_1027_pp3_iter18_reg;
                icmp_ln69_reg_1027_pp3_iter20_reg <= icmp_ln69_reg_1027_pp3_iter19_reg;
                icmp_ln69_reg_1027_pp3_iter21_reg <= icmp_ln69_reg_1027_pp3_iter20_reg;
                icmp_ln69_reg_1027_pp3_iter22_reg <= icmp_ln69_reg_1027_pp3_iter21_reg;
                icmp_ln69_reg_1027_pp3_iter23_reg <= icmp_ln69_reg_1027_pp3_iter22_reg;
                icmp_ln69_reg_1027_pp3_iter24_reg <= icmp_ln69_reg_1027_pp3_iter23_reg;
                icmp_ln69_reg_1027_pp3_iter25_reg <= icmp_ln69_reg_1027_pp3_iter24_reg;
                icmp_ln69_reg_1027_pp3_iter26_reg <= icmp_ln69_reg_1027_pp3_iter25_reg;
                icmp_ln69_reg_1027_pp3_iter27_reg <= icmp_ln69_reg_1027_pp3_iter26_reg;
                icmp_ln69_reg_1027_pp3_iter28_reg <= icmp_ln69_reg_1027_pp3_iter27_reg;
                icmp_ln69_reg_1027_pp3_iter29_reg <= icmp_ln69_reg_1027_pp3_iter28_reg;
                icmp_ln69_reg_1027_pp3_iter2_reg <= icmp_ln69_reg_1027_pp3_iter1_reg;
                icmp_ln69_reg_1027_pp3_iter30_reg <= icmp_ln69_reg_1027_pp3_iter29_reg;
                icmp_ln69_reg_1027_pp3_iter31_reg <= icmp_ln69_reg_1027_pp3_iter30_reg;
                icmp_ln69_reg_1027_pp3_iter32_reg <= icmp_ln69_reg_1027_pp3_iter31_reg;
                icmp_ln69_reg_1027_pp3_iter33_reg <= icmp_ln69_reg_1027_pp3_iter32_reg;
                icmp_ln69_reg_1027_pp3_iter34_reg <= icmp_ln69_reg_1027_pp3_iter33_reg;
                icmp_ln69_reg_1027_pp3_iter35_reg <= icmp_ln69_reg_1027_pp3_iter34_reg;
                icmp_ln69_reg_1027_pp3_iter36_reg <= icmp_ln69_reg_1027_pp3_iter35_reg;
                icmp_ln69_reg_1027_pp3_iter37_reg <= icmp_ln69_reg_1027_pp3_iter36_reg;
                icmp_ln69_reg_1027_pp3_iter38_reg <= icmp_ln69_reg_1027_pp3_iter37_reg;
                icmp_ln69_reg_1027_pp3_iter39_reg <= icmp_ln69_reg_1027_pp3_iter38_reg;
                icmp_ln69_reg_1027_pp3_iter3_reg <= icmp_ln69_reg_1027_pp3_iter2_reg;
                icmp_ln69_reg_1027_pp3_iter40_reg <= icmp_ln69_reg_1027_pp3_iter39_reg;
                icmp_ln69_reg_1027_pp3_iter41_reg <= icmp_ln69_reg_1027_pp3_iter40_reg;
                icmp_ln69_reg_1027_pp3_iter42_reg <= icmp_ln69_reg_1027_pp3_iter41_reg;
                icmp_ln69_reg_1027_pp3_iter43_reg <= icmp_ln69_reg_1027_pp3_iter42_reg;
                icmp_ln69_reg_1027_pp3_iter44_reg <= icmp_ln69_reg_1027_pp3_iter43_reg;
                icmp_ln69_reg_1027_pp3_iter45_reg <= icmp_ln69_reg_1027_pp3_iter44_reg;
                icmp_ln69_reg_1027_pp3_iter46_reg <= icmp_ln69_reg_1027_pp3_iter45_reg;
                icmp_ln69_reg_1027_pp3_iter47_reg <= icmp_ln69_reg_1027_pp3_iter46_reg;
                icmp_ln69_reg_1027_pp3_iter48_reg <= icmp_ln69_reg_1027_pp3_iter47_reg;
                icmp_ln69_reg_1027_pp3_iter4_reg <= icmp_ln69_reg_1027_pp3_iter3_reg;
                icmp_ln69_reg_1027_pp3_iter5_reg <= icmp_ln69_reg_1027_pp3_iter4_reg;
                icmp_ln69_reg_1027_pp3_iter6_reg <= icmp_ln69_reg_1027_pp3_iter5_reg;
                icmp_ln69_reg_1027_pp3_iter7_reg <= icmp_ln69_reg_1027_pp3_iter6_reg;
                icmp_ln69_reg_1027_pp3_iter8_reg <= icmp_ln69_reg_1027_pp3_iter7_reg;
                icmp_ln69_reg_1027_pp3_iter9_reg <= icmp_ln69_reg_1027_pp3_iter8_reg;
                    zext_ln70_reg_1031_pp3_iter10_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter9_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter11_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter10_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter12_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter11_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter13_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter12_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter14_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter13_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter15_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter14_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter16_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter15_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter17_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter16_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter18_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter17_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter19_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter18_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter20_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter19_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter21_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter20_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter22_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter21_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter23_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter22_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter24_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter23_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter25_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter24_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter26_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter25_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter27_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter26_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter28_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter27_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter29_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter28_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter2_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter1_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter30_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter29_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter31_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter30_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter32_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter31_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter33_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter32_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter34_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter33_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter35_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter34_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter36_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter35_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter37_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter36_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter38_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter37_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter39_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter38_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter3_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter2_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter40_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter39_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter41_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter40_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter42_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter41_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter43_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter42_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter44_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter43_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter45_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter44_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter46_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter45_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter47_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter46_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter48_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter47_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter4_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter3_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter5_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter4_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter6_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter5_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter7_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter6_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter8_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter7_reg(6 downto 0);
                    zext_ln70_reg_1031_pp3_iter9_reg(6 downto 0) <= zext_ln70_reg_1031_pp3_iter8_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                loss_V_reg_1061 <= loss_V_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                op2_V_1_reg_1056 <= grp_log_16_3_s_fu_540_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln39_reg_1112_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then
                reg_575 <= x_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln69_reg_1027 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((icmp_ln65_reg_1003 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_581 <= log_probs_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln69_reg_1027_pp3_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((icmp_ln65_reg_1003_pp2_iter14_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_586 <= grp_exp_16_3_s_fu_529_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then
                reg_590 <= probs_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_reg_1027_pp3_iter47_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                sdiv_ln1148_reg_1046 <= grp_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                sum_V_cast_reg_1017 <= sum_V_cast_fu_695_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state123)) then
                trunc_ln31_reg_1152 <= trunc_ln31_fu_857_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_866_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                trunc_ln32_reg_1167 <= trunc_ln32_fu_871_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_896_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                trunc_ln35_reg_1192 <= trunc_ln35_fu_901_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                trunc_ln39_reg_1095 <= trunc_ln39_fu_781_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_1_fu_644_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln703_reg_988(6 downto 0) <= zext_ln703_fu_653_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_709_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    zext_ln70_reg_1031(6 downto 0) <= zext_ln70_fu_718_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln703_reg_988(31 downto 7) <= "0000000000000000000000000";
    zext_ln703_reg_988_pp1_iter1_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter1_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter2_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter3_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter4_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter5_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter6_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter7_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter8_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter9_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter10_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter11_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter12_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter13_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter14_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter15_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter16_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter17_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter18_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter19_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter20_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter21_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter22_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter23_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter24_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter25_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter26_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter27_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter28_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter29_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter30_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter31_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter32_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter33_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter34_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter35_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter36_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter37_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter38_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter39_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter40_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter41_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter42_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter43_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter44_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter45_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter46_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter47_reg(31 downto 7) <= "0000000000000000000000000";
    zext_ln70_reg_1031_pp3_iter48_reg(31 downto 7) <= "0000000000000000000000000";
    i_8_cast6_cast_reg_1085(31 downto 7) <= "0000000000000000000000000";
    i_8_cast6_cast_reg_1085_pp4_iter1_reg(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state117, ap_enable_reg_pp7_iter1, ap_CS_fsm_state127, ap_enable_reg_pp8_iter1, ap_CS_fsm_state98, ap_enable_reg_pp5_iter3, ap_CS_fsm_state107, ap_enable_reg_pp6_iter3, ap_CS_fsm_state116, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_enable_reg_pp5_iter2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp2_iter15, ap_enable_reg_pp4_iter1, writetoddr_read_read_fu_170_p2, icmp_ln53_fu_600_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, grp_fu_551_p2, icmp_ln59_reg_975, ap_CS_fsm_state7, ap_enable_reg_pp1_iter0, icmp_ln59_1_fu_644_p2, ap_enable_reg_pp2_iter0, icmp_ln65_fu_675_p2, ap_enable_reg_pp2_iter16, ap_enable_reg_pp3_iter0, icmp_ln69_fu_709_p2, ap_CS_fsm_state93, ap_enable_reg_pp4_iter0, icmp_ln75_fu_755_p2, ap_enable_reg_pp5_iter0, icmp_ln39_fu_801_p2, ap_enable_reg_pp6_iter0, icmp_ln42_fu_832_p2, ap_enable_reg_pp6_iter2, ap_enable_reg_pp7_iter0, icmp_ln31_fu_866_p2, ap_enable_reg_pp8_iter0, icmp_ln34_fu_896_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter48, ap_enable_reg_pp3_iter49, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter1, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter2, ap_block_pp8_stage0_subdone, ap_enable_reg_pp8_iter2, ddrtobram_read_read_fu_164_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (grp_fu_551_p2 = ap_const_lv1_1) and (writetoddr_read_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ddrtobram_read_read_fu_164_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                elsif (((ap_start = ap_const_logic_1) and (grp_fu_551_p2 = ap_const_lv1_0) and (writetoddr_read_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state138;
                elsif (((ap_start = ap_const_logic_1) and (grp_fu_551_p2 = ap_const_lv1_1) and (writetoddr_read_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ddrtobram_read_read_fu_164_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                elsif (((ap_start = ap_const_logic_1) and (writetoddr_read_read_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln53_fu_600_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln53_fu_600_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                if (((grp_fu_551_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln59_1_fu_644_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln59_1_fu_644_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln65_fu_675_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter16 = ap_const_logic_1) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((icmp_ln65_fu_675_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln69_fu_709_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter49 = ap_const_logic_1) and (ap_enable_reg_pp3_iter48 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((icmp_ln69_fu_709_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter49 = ap_const_logic_1) and (ap_enable_reg_pp3_iter48 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((icmp_ln59_reg_975 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state138;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln75_fu_755_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((icmp_ln75_fu_755_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state98 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((icmp_ln39_fu_801_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((icmp_ln39_fu_801_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((icmp_ln42_fu_832_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((icmp_ln42_fu_832_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116))) then
                    ap_NS_fsm <= ap_ST_fsm_state138;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state117 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state117))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((icmp_ln31_fu_866_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((icmp_ln31_fu_866_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state127 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                    ap_NS_fsm <= ap_ST_fsm_state128;
                else
                    ap_NS_fsm <= ap_ST_fsm_state127;
                end if;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((icmp_ln34_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) and not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)) or ((icmp_ln34_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state137;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_fu_860_p2 <= std_logic_vector(unsigned(i_1_reg_485) + unsigned(ap_const_lv31_1));
    add_ln34_fu_890_p2 <= std_logic_vector(unsigned(i_4_reg_496) + unsigned(ap_const_lv31_1));
    add_ln39_fu_795_p2 <= std_logic_vector(unsigned(i_2_reg_463) + unsigned(ap_const_lv31_1));
    add_ln42_fu_826_p2 <= std_logic_vector(unsigned(i_5_reg_474) + unsigned(ap_const_lv31_1));
    add_ln53_fu_605_p2 <= std_logic_vector(unsigned(i_reg_386) + unsigned(ap_const_lv31_1));
    add_ln59_fu_634_p2 <= std_logic_vector(unsigned(i_3_reg_407) + unsigned(ap_const_lv31_1));
    add_ln65_fu_665_p2 <= std_logic_vector(unsigned(i_6_reg_418) + unsigned(ap_const_lv31_1));
    add_ln69_fu_699_p2 <= std_logic_vector(unsigned(i_7_reg_441) + unsigned(ap_const_lv31_1));
    add_ln703_fu_774_p2 <= std_logic_vector(unsigned(reg_590) + unsigned(ap_const_lv16_E000));
    add_ln75_fu_745_p2 <= std_logic_vector(unsigned(i_8_reg_452) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(27);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(33);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(46);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(54);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state107 <= ap_CS_fsm(32);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state116 <= ap_CS_fsm(38);
    ap_CS_fsm_state117 <= ap_CS_fsm(39);
    ap_CS_fsm_state123 <= ap_CS_fsm(45);
    ap_CS_fsm_state127 <= ap_CS_fsm(47);
    ap_CS_fsm_state133 <= ap_CS_fsm(53);
    ap_CS_fsm_state137 <= ap_CS_fsm(55);
    ap_CS_fsm_state138 <= ap_CS_fsm(56);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(8);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state80 <= ap_CS_fsm(10);
    ap_CS_fsm_state81 <= ap_CS_fsm(11);
    ap_CS_fsm_state82 <= ap_CS_fsm(12);
    ap_CS_fsm_state92 <= ap_CS_fsm(22);
    ap_CS_fsm_state93 <= ap_CS_fsm(23);
    ap_CS_fsm_state97 <= ap_CS_fsm(25);
    ap_CS_fsm_state98 <= ap_CS_fsm(26);
    ap_NS_fsm_state82 <= ap_NS_fsm(12);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter3, ap_block_state102_io)
    begin
                ap_block_pp5_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state102_io) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter3, ap_block_state102_io)
    begin
                ap_block_pp5_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state102_io) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter3, ap_block_state111_io)
    begin
                ap_block_pp6_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state111_io) and (ap_enable_reg_pp6_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter3, ap_block_state111_io)
    begin
                ap_block_pp6_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state111_io) and (ap_enable_reg_pp6_iter3 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter1, icmp_ln31_reg_1163, gmem_RVALID)
    begin
                ap_block_pp7_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln31_reg_1163 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter1, icmp_ln31_reg_1163, gmem_RVALID)
    begin
                ap_block_pp7_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln31_reg_1163 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter1, icmp_ln34_reg_1188, gmem_RVALID)
    begin
                ap_block_pp8_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln34_reg_1188 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter1, icmp_ln34_reg_1188, gmem_RVALID)
    begin
                ap_block_pp8_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln34_reg_1188 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1));
    end process;

        ap_block_state100_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state102_io_assign_proc : process(icmp_ln39_reg_1112_pp5_iter2_reg, gmem_WREADY)
    begin
                ap_block_state102_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln39_reg_1112_pp5_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state102_pp5_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state111_io_assign_proc : process(icmp_ln42_reg_1132_pp6_iter2_reg, gmem_WREADY)
    begin
                ap_block_state111_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln42_reg_1132_pp6_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state111_pp6_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state125_pp7_stage0_iter1_assign_proc : process(icmp_ln31_reg_1163, gmem_RVALID)
    begin
                ap_block_state125_pp7_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln31_reg_1163 = ap_const_lv1_0));
    end process;

        ap_block_state126_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state135_pp8_stage0_iter1_assign_proc : process(icmp_ln34_reg_1188, gmem_RVALID)
    begin
                ap_block_state135_pp8_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln34_reg_1188 = ap_const_lv1_0));
    end process;

        ap_block_state136_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp3_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp3_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp3_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp3_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp3_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp3_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp3_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp3_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp3_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp3_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp3_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp3_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp3_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp3_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp3_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp3_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp3_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp3_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp3_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp3_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp3_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp3_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp3_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp3_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp3_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp3_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp3_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp3_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp3_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp3_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp3_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp3_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp3_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp3_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp3_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln53_fu_600_p2)
    begin
        if ((icmp_ln53_fu_600_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(icmp_ln59_1_fu_644_p2)
    begin
        if ((icmp_ln59_1_fu_644_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state12_assign_proc : process(icmp_ln65_fu_675_p2)
    begin
        if ((icmp_ln65_fu_675_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state30_assign_proc : process(icmp_ln69_fu_709_p2)
    begin
        if ((icmp_ln69_fu_709_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state94_assign_proc : process(icmp_ln75_fu_755_p2)
    begin
        if ((icmp_ln75_fu_755_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state94 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state94 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state99_assign_proc : process(icmp_ln39_fu_801_p2)
    begin
        if ((icmp_ln39_fu_801_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state99 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state99 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state108_assign_proc : process(icmp_ln42_fu_832_p2)
    begin
        if ((icmp_ln42_fu_832_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state108 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state108 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state124_assign_proc : process(icmp_ln31_fu_866_p2)
    begin
        if ((icmp_ln31_fu_866_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state124 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state124 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state134_assign_proc : process(icmp_ln34_fu_896_p2)
    begin
        if ((icmp_ln34_fu_896_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state134 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state134 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14)
    begin
        if (((ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_enable_reg_pp3_iter13, ap_enable_reg_pp3_iter14, ap_enable_reg_pp3_iter16, ap_enable_reg_pp3_iter17, ap_enable_reg_pp3_iter18, ap_enable_reg_pp3_iter19, ap_enable_reg_pp3_iter20, ap_enable_reg_pp3_iter21, ap_enable_reg_pp3_iter22, ap_enable_reg_pp3_iter23, ap_enable_reg_pp3_iter24, ap_enable_reg_pp3_iter25, ap_enable_reg_pp3_iter26, ap_enable_reg_pp3_iter27, ap_enable_reg_pp3_iter28, ap_enable_reg_pp3_iter29, ap_enable_reg_pp3_iter30, ap_enable_reg_pp3_iter31, ap_enable_reg_pp3_iter32, ap_enable_reg_pp3_iter33, ap_enable_reg_pp3_iter34, ap_enable_reg_pp3_iter35, ap_enable_reg_pp3_iter36, ap_enable_reg_pp3_iter37, ap_enable_reg_pp3_iter38, ap_enable_reg_pp3_iter39, ap_enable_reg_pp3_iter40, ap_enable_reg_pp3_iter41, ap_enable_reg_pp3_iter42, ap_enable_reg_pp3_iter43, ap_enable_reg_pp3_iter44, ap_enable_reg_pp3_iter45, ap_enable_reg_pp3_iter46, ap_enable_reg_pp3_iter47, ap_enable_reg_pp3_iter48, ap_enable_reg_pp3_iter49)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter49 = ap_const_logic_0) and (ap_enable_reg_pp3_iter48 = ap_const_logic_0) and (ap_enable_reg_pp3_iter47 = ap_const_logic_0) and (ap_enable_reg_pp3_iter46 = ap_const_logic_0) and (ap_enable_reg_pp3_iter45 = ap_const_logic_0) and (ap_enable_reg_pp3_iter44 = ap_const_logic_0) and (ap_enable_reg_pp3_iter43 = ap_const_logic_0) and (ap_enable_reg_pp3_iter42 = ap_const_logic_0) and (ap_enable_reg_pp3_iter41 = ap_const_logic_0) and (ap_enable_reg_pp3_iter40 = ap_const_logic_0) and (ap_enable_reg_pp3_iter39 = ap_const_logic_0) and (ap_enable_reg_pp3_iter38 = ap_const_logic_0) and (ap_enable_reg_pp3_iter37 = ap_const_logic_0) and (ap_enable_reg_pp3_iter36 = ap_const_logic_0) and (ap_enable_reg_pp3_iter35 = ap_const_logic_0) and (ap_enable_reg_pp3_iter34 = ap_const_logic_0) and (ap_enable_reg_pp3_iter33 = ap_const_logic_0) and (ap_enable_reg_pp3_iter32 = ap_const_logic_0) and (ap_enable_reg_pp3_iter31 = ap_const_logic_0) and (ap_enable_reg_pp3_iter30 = ap_const_logic_0) and (ap_enable_reg_pp3_iter29 = ap_const_logic_0) and (ap_enable_reg_pp3_iter28 = ap_const_logic_0) and (ap_enable_reg_pp3_iter27 = ap_const_logic_0) and (ap_enable_reg_pp3_iter26 = ap_const_logic_0) and (ap_enable_reg_pp3_iter25 = ap_const_logic_0) and (ap_enable_reg_pp3_iter24 = ap_const_logic_0) and (ap_enable_reg_pp3_iter23 = ap_const_logic_0) and (ap_enable_reg_pp3_iter22 = ap_const_logic_0) and (ap_enable_reg_pp3_iter21 = ap_const_logic_0) and (ap_enable_reg_pp3_iter20 = ap_const_logic_0) and (ap_enable_reg_pp3_iter19 = ap_const_logic_0) and (ap_enable_reg_pp3_iter18 = ap_const_logic_0) and (ap_enable_reg_pp3_iter17 = ap_const_logic_0) and (ap_enable_reg_pp3_iter16 = ap_const_logic_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter3, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter3, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter2)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state138)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ddrtobram_read_read_fu_164_p2 <= (0=>ddrtobram, others=>'-');
    dx_Addr_A <= std_logic_vector(shift_left(unsigned(dx_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    dx_Addr_A_orig_assign_proc : process(ap_block_pp8_stage0, ap_block_pp6_stage0, dx_addr_2_reg_1067, icmp_ln76_reg_1081_pp4_iter1_reg, i_8_cast6_cast_reg_1085_pp4_iter1_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp4_iter2, ap_enable_reg_pp8_iter2, ap_block_pp4_stage0, zext_ln43_fu_841_p1, zext_ln35_fu_905_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            dx_Addr_A_orig <= zext_ln35_fu_905_p1;
        elsif (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            dx_Addr_A_orig <= zext_ln43_fu_841_p1;
        elsif (((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            dx_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dx_addr_2_reg_1067),32));
        elsif (((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            dx_Addr_A_orig <= i_8_cast6_cast_reg_1085_pp4_iter1_reg;
        else 
            dx_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dx_Clk_A <= ap_clk;

    dx_Din_A_assign_proc : process(ap_block_pp8_stage0, reg_590, icmp_ln76_reg_1081_pp4_iter1_reg, gmem_addr_2_read_reg_1197, ap_enable_reg_pp4_iter2, ap_enable_reg_pp8_iter2, ap_block_pp4_stage0, add_ln703_fu_774_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp8_stage0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1))) then 
            dx_Din_A <= gmem_addr_2_read_reg_1197;
        elsif (((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            dx_Din_A <= add_ln703_fu_774_p2;
        elsif (((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            dx_Din_A <= reg_590;
        else 
            dx_Din_A <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dx_EN_A_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln76_reg_1081_pp4_iter1_reg, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter2, ap_block_pp8_stage0_11001, ap_enable_reg_pp4_iter2, ap_enable_reg_pp6_iter1, ap_enable_reg_pp8_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1)) or ((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then 
            dx_EN_A <= ap_const_logic_1;
        else 
            dx_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    dx_Rst_A <= ap_rst_n_inv;

    dx_WEN_A_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln76_reg_1081_pp4_iter1_reg, ap_block_pp8_stage0_11001, icmp_ln34_reg_1188_pp8_iter1_reg, ap_enable_reg_pp4_iter2, ap_enable_reg_pp8_iter2)
    begin
        if ((((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((icmp_ln34_reg_1188_pp8_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1)) or ((icmp_ln76_reg_1081_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)))) then 
            dx_WEN_A <= ap_const_lv2_3;
        else 
            dx_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    empty_74_fu_765_p1 <= i_8_reg_452(7 - 1 downto 0);

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state117, ap_CS_fsm_state127, gmem_ARREADY, sext_ln31_fu_846_p1, sext_ln34_fu_879_p1)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
                gmem_ARADDR <= sext_ln34_fu_879_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                gmem_ARADDR <= sext_ln31_fu_846_p1;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state117, ap_CS_fsm_state127, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state117)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state98, ap_CS_fsm_state107, gmem_AWREADY, gmem_BVALID, sext_ln39_fu_784_p1, sext_ln42_fu_815_p1)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
            gmem_AWADDR <= sext_ln42_fu_815_p1;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            gmem_AWADDR <= sext_ln39_fu_784_p1;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state98, ap_CS_fsm_state107, gmem_AWREADY, gmem_BVALID)
    begin
        if (((not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state107)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state107, ap_CS_fsm_state116, gmem_AWREADY, gmem_BVALID)
    begin
        if ((((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state116)) or (not(((gmem_BVALID = ap_const_logic_0) or (gmem_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state107)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, icmp_ln31_reg_1163, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, icmp_ln34_reg_1188, ap_block_pp7_stage0_11001, ap_block_pp8_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (icmp_ln34_reg_1188 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln31_reg_1163 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_enable_reg_pp5_iter3, icmp_ln39_reg_1112_pp5_iter2_reg, ap_enable_reg_pp6_iter3, icmp_ln42_reg_1132_pp6_iter2_reg, reg_575, dx_load_reg_1141, ap_block_pp5_stage0_01001, ap_block_pp6_stage0_01001)
    begin
        if (((icmp_ln42_reg_1132_pp6_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_01001))) then 
            gmem_WDATA <= dx_load_reg_1141;
        elsif (((icmp_ln39_reg_1112_pp5_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_01001))) then 
            gmem_WDATA <= reg_575;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp5_iter3, icmp_ln39_reg_1112_pp5_iter2_reg, ap_enable_reg_pp6_iter3, icmp_ln42_reg_1132_pp6_iter2_reg, ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001)
    begin
        if ((((icmp_ln42_reg_1132_pp6_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((icmp_ln39_reg_1112_pp5_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state117, ap_CS_fsm_state127)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state117))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state98, ap_CS_fsm_state107)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state107, ap_CS_fsm_state116)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state107))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, icmp_ln31_reg_1163, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, icmp_ln34_reg_1188)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (icmp_ln34_reg_1188 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln31_reg_1163 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp5_iter3, ap_block_pp5_stage0, icmp_ln39_reg_1112_pp5_iter2_reg, ap_enable_reg_pp6_iter3, ap_block_pp6_stage0, icmp_ln42_reg_1132_pp6_iter2_reg)
    begin
        if ((((icmp_ln42_reg_1132_pp6_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0)) or ((icmp_ln39_reg_1112_pp5_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_exp_16_3_s_fu_529_ap_start <= grp_exp_16_3_s_fu_529_ap_start_reg;

    grp_fu_551_p0_assign_proc : process(ap_CS_fsm_state1, dim, dim_read_reg_915, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_551_p0 <= dim_read_reg_915;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_551_p0 <= dim;
        else 
            grp_fu_551_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_551_p2 <= "1" when (signed(grp_fu_551_p0) > signed(ap_const_lv32_0)) else "0";
    grp_fu_557_p4 <= x_ddr_read_reg_943(31 downto 1);
    grp_fu_566_p4 <= dx_ddr_read_reg_938(31 downto 1);
    grp_fu_731_p0 <= (reg_586 & ap_const_lv13_0);
    grp_fu_731_p1 <= sum_V_cast_reg_1017(16 - 1 downto 0);
    grp_log_16_3_s_fu_540_ap_start <= grp_log_16_3_s_fu_540_ap_start_reg;
    i_3_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_407),32));
    i_6_cast_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_418),32));
    i_7_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_441),32));
    i_8_cast6_cast_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_74_fu_765_p1),32));
    i_8_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_452),32));
    i_cast3_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_386),32));
    icmp_ln1494_fu_620_p2 <= "1" when (signed(x_Dout_A) > signed(max_V_1_reg_397)) else "0";
    icmp_ln31_fu_866_p2 <= "1" when (i_1_reg_485 = trunc_ln31_reg_1152) else "0";
    icmp_ln34_fu_896_p2 <= "1" when (i_4_reg_496 = trunc_ln31_reg_1152) else "0";
    icmp_ln39_fu_801_p2 <= "1" when (i_2_reg_463 = trunc_ln39_reg_1095) else "0";
    icmp_ln42_fu_832_p2 <= "1" when (i_5_reg_474 = trunc_ln39_reg_1095) else "0";
    icmp_ln53_fu_600_p2 <= "1" when (unsigned(i_cast3_fu_596_p1) < unsigned(dim_read_reg_915)) else "0";
    icmp_ln59_1_fu_644_p2 <= "1" when (i_3_cast_fu_640_p1 = dim_read_reg_915) else "0";
    icmp_ln65_fu_675_p2 <= "1" when (i_6_cast_fu_671_p1 = dim_read_reg_915) else "0";
    icmp_ln69_fu_709_p2 <= "1" when (i_7_cast_fu_705_p1 = dim_read_reg_915) else "0";
    icmp_ln75_fu_755_p2 <= "1" when (i_8_cast_fu_751_p1 = dim_read_reg_915) else "0";
    icmp_ln76_fu_760_p2 <= "1" when (i_8_cast_fu_751_p1 = y_read_reg_931) else "0";

    log_probs_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp3_stage0, zext_ln703_reg_988_pp1_iter1_reg, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, zext_ln70_fu_718_p1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, ap_block_pp3_stage0, ap_block_pp1_stage0, zext_ln66_fu_684_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            log_probs_V_address0 <= zext_ln70_fu_718_p1(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            log_probs_V_address0 <= zext_ln66_fu_684_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            log_probs_V_address0 <= zext_ln703_reg_988_pp1_iter1_reg(7 - 1 downto 0);
        else 
            log_probs_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    log_probs_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            log_probs_V_ce0 <= ap_const_logic_1;
        else 
            log_probs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_probs_V_d0 <= std_logic_vector(unsigned(x_Dout_A) - unsigned(max_V_1_reg_397));

    log_probs_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln59_1_reg_984_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((icmp_ln59_1_reg_984_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            log_probs_V_we0 <= ap_const_logic_1;
        else 
            log_probs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loss_V_fu_740_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(op2_V_1_reg_1056));
    max_V_2_fu_626_p3 <= 
        x_Dout_A when (icmp_ln1494_fu_620_p2(0) = '1') else 
        max_V_1_reg_397;

    probs_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, y_read_reg_931, zext_ln70_reg_1031_pp3_iter48_reg, ap_CS_fsm_state80, ap_enable_reg_pp4_iter0, i_8_cast6_cast_fu_769_p1, ap_enable_reg_pp3_iter49, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            probs_V_address0 <= i_8_cast6_cast_fu_769_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            probs_V_address0 <= y_read_reg_931(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter49 = ap_const_logic_1))) then 
            probs_V_address0 <= zext_ln70_reg_1031_pp3_iter48_reg(7 - 1 downto 0);
        else 
            probs_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    probs_V_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state80, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter49 = ap_const_logic_1)))) then 
            probs_V_ce0 <= ap_const_logic_1;
        else 
            probs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    probs_V_d0 <= sdiv_ln1148_reg_1046(16 - 1 downto 0);

    probs_V_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln69_reg_1027_pp3_iter48_reg, ap_enable_reg_pp3_iter49)
    begin
        if (((icmp_ln69_reg_1027_pp3_iter48_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter49 = ap_const_logic_1))) then 
            probs_V_we0 <= ap_const_logic_1;
        else 
            probs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln31_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_557_p4),32));

        sext_ln34_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_566_p4),32));

        sext_ln39_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_557_p4),32));

        sext_ln42_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_566_p4),32));

    sum_V_1_fu_689_p2 <= std_logic_vector(unsigned(reg_586) + unsigned(sum_V_reg_429));
        sum_V_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_V_reg_429),29));

    trunc_ln1494_fu_611_p1 <= i_reg_386(7 - 1 downto 0);
    trunc_ln31_fu_857_p1 <= dim_read_reg_915(31 - 1 downto 0);
    trunc_ln32_fu_871_p1 <= i_1_reg_485(7 - 1 downto 0);
    trunc_ln35_fu_901_p1 <= i_4_reg_496(7 - 1 downto 0);
    trunc_ln39_fu_781_p1 <= dim_read_reg_915(31 - 1 downto 0);
    trunc_ln40_fu_806_p1 <= i_2_reg_463(7 - 1 downto 0);
    trunc_ln43_fu_837_p1 <= i_5_reg_474(7 - 1 downto 0);
    trunc_ln66_fu_680_p1 <= i_6_reg_418(7 - 1 downto 0);
    trunc_ln703_fu_649_p1 <= i_3_reg_407(7 - 1 downto 0);
    trunc_ln70_fu_714_p1 <= i_7_reg_441(7 - 1 downto 0);
    writetoddr_read_read_fu_170_p2 <= (0=>writetoddr, others=>'-');
    x_Addr_A <= std_logic_vector(shift_left(unsigned(x_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    x_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, ap_block_pp7_stage0, ap_block_pp5_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln703_fu_653_p1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp7_iter2, zext_ln1494_fu_615_p1, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln40_fu_810_p1, zext_ln32_fu_875_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            x_Addr_A_orig <= zext_ln32_fu_875_p1;
        elsif (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            x_Addr_A_orig <= zext_ln40_fu_810_p1;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            x_Addr_A_orig <= zext_ln703_fu_653_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_Addr_A_orig <= zext_ln1494_fu_615_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_Addr_A_orig <= ap_const_lv32_0;
        else 
            x_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    x_Clk_A <= ap_clk;
    x_Din_A <= gmem_addr_read_reg_1172;

    x_EN_A_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_enable_reg_pp5_iter2, ap_block_pp5_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp7_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp5_iter1, ap_enable_reg_pp7_iter2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            x_EN_A <= ap_const_logic_1;
        else 
            x_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    x_Rst_A <= ap_rst_n_inv;

    x_WEN_A_assign_proc : process(ap_block_pp7_stage0_11001, icmp_ln31_reg_1163_pp7_iter1_reg, ap_enable_reg_pp7_iter2)
    begin
        if (((icmp_ln31_reg_1163_pp7_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            x_WEN_A <= ap_const_lv2_3;
        else 
            x_WEN_A <= ap_const_lv2_0;
        end if; 
    end process;

    zext_ln1494_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1494_fu_611_p1),32));
    zext_ln32_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln32_reg_1167_pp7_iter1_reg),32));
    zext_ln35_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln35_reg_1192_pp8_iter1_reg),32));
    zext_ln40_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln40_fu_806_p1),32));
    zext_ln43_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_fu_837_p1),32));
    zext_ln66_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln66_fu_680_p1),32));
    zext_ln703_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_fu_649_p1),32));
    zext_ln70_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln70_fu_714_p1),32));
end behav;
