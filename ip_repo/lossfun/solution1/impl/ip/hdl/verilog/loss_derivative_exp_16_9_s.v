// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module loss_derivative_exp_16_9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] x;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] f_x_lsb_table_V_address0;
reg    f_x_lsb_table_V_ce0;
wire   [10:0] f_x_lsb_table_V_q0;
wire   [4:0] exp_x_msb_2_m_1_table_V_address0;
reg    exp_x_msb_2_m_1_table_V_ce0;
wire   [24:0] exp_x_msb_2_m_1_table_V_q0;
wire   [4:0] exp_x_msb_1_table_V_address0;
reg    exp_x_msb_1_table_V_ce0;
wire   [24:0] exp_x_msb_1_table_V_q0;
wire   [0:0] tmp_fu_171_p3;
reg   [0:0] tmp_reg_516;
reg   [0:0] tmp_reg_516_pp0_iter1_reg;
reg   [0:0] tmp_reg_516_pp0_iter2_reg;
reg   [0:0] tmp_reg_516_pp0_iter3_reg;
reg   [0:0] tmp_reg_516_pp0_iter4_reg;
reg   [3:0] p_Result_s_reg_522;
reg   [3:0] p_Result_s_reg_522_pp0_iter1_reg;
wire   [0:0] trunc_ln640_1_fu_287_p1;
reg   [0:0] trunc_ln640_1_reg_527;
reg   [0:0] trunc_ln640_1_reg_527_pp0_iter1_reg;
reg   [0:0] trunc_ln640_1_reg_527_pp0_iter2_reg;
wire   [0:0] or_ln202_1_fu_315_p2;
reg   [0:0] or_ln202_1_reg_543;
reg   [0:0] or_ln202_1_reg_543_pp0_iter1_reg;
reg   [0:0] or_ln202_1_reg_543_pp0_iter2_reg;
reg   [0:0] or_ln202_1_reg_543_pp0_iter3_reg;
reg   [0:0] or_ln202_1_reg_543_pp0_iter4_reg;
wire   [0:0] or_ln202_3_fu_327_p2;
reg   [0:0] or_ln202_3_reg_548;
reg   [0:0] or_ln202_3_reg_548_pp0_iter1_reg;
reg   [0:0] or_ln202_3_reg_548_pp0_iter2_reg;
reg   [0:0] or_ln202_3_reg_548_pp0_iter3_reg;
reg   [0:0] or_ln202_3_reg_548_pp0_iter4_reg;
reg   [10:0] f_x_lsb_V_reg_553;
reg   [10:0] f_x_lsb_V_reg_553_pp0_iter2_reg;
reg   [24:0] exp_x_msb_2_m_1_V_reg_559;
reg   [24:0] exp_x_msb_2_m_1_V_reg_559_pp0_iter2_reg;
reg   [18:0] trunc_ln6_reg_565;
wire   [24:0] exp_x_msb_2_lsb_m_1_V_fu_402_p2;
reg   [24:0] exp_x_msb_2_lsb_m_1_V_reg_575;
reg   [24:0] exp_x_msb_1_V_reg_580;
reg   [24:0] exp_x_msb_1_V_reg_580_pp0_iter4_reg;
reg   [24:0] y_lo_s_V_reg_586;
reg    ap_block_pp0_stage0_subdone;
wire   [31:0] zext_ln230_fu_299_p1;
wire   [31:0] zext_ln245_fu_304_p1;
wire   [31:0] zext_ln261_fu_370_p1;
wire   [6:0] trunc_ln640_fu_159_p1;
wire   [0:0] tmp_48_fu_179_p3;
wire   [0:0] tmp_49_fu_193_p3;
wire   [0:0] tmp_53_fu_207_p3;
wire   [0:0] tmp_54_fu_221_p3;
wire   [0:0] tmp_55_fu_235_p3;
wire   [3:0] p_Result_7_fu_149_p4;
wire   [10:0] p_Result_8_fu_163_p3;
wire   [0:0] icmp_ln1498_fu_249_p2;
wire   [0:0] icmp_ln1494_fu_255_p2;
wire   [4:0] tmp_61_fu_291_p3;
wire   [4:0] tmp_60_fu_277_p4;
wire   [0:0] overf_fu_187_p2;
wire   [0:0] xor_ln222_1_fu_215_p2;
wire   [0:0] or_ln202_fu_309_p2;
wire   [0:0] xor_ln222_fu_201_p2;
wire   [0:0] xor_ln222_3_fu_243_p2;
wire   [0:0] and_ln202_fu_261_p2;
wire   [0:0] or_ln202_2_fu_321_p2;
wire   [0:0] xor_ln222_2_fu_229_p2;
wire   [17:0] p_Result_10_fu_339_p4;
wire   [24:0] r_V_fu_354_p0;
wire   [17:0] r_V_fu_354_p1;
wire   [42:0] r_V_fu_354_p2;
wire   [4:0] p_Result_9_fu_333_p3;
wire   [18:0] rhs_1_fu_378_p5;
wire   [19:0] zext_ln1192_fu_388_p1;
wire   [19:0] zext_ln703_1_fu_375_p1;
wire   [19:0] ret_V_fu_392_p2;
wire   [24:0] zext_ln703_fu_398_p1;
wire   [24:0] r_V_43_fu_413_p0;
wire   [24:0] r_V_43_fu_413_p1;
wire   [49:0] r_V_43_fu_413_p2;
wire   [0:0] xor_ln640_fu_429_p2;
wire   [24:0] y_l_V_fu_442_p2;
wire   [0:0] or_ln202_4_fu_456_p2;
wire   [21:0] select_ln640_fu_434_p3;
wire   [21:0] y_V_fu_446_p4;
wire   [21:0] p_Val2_s_fu_460_p3;
wire   [1:0] tmp_58_fu_468_p4;
wire   [0:0] p_Result_s_54_fu_484_p3;
wire   [0:0] overf_1_fu_478_p2;
wire   [0:0] overf_2_fu_492_p2;
wire   [15:0] tmp_s_fu_498_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [49:0] r_V_43_fu_413_p00;
wire   [49:0] r_V_43_fu_413_p10;
wire   [42:0] r_V_fu_354_p00;
wire   [42:0] r_V_fu_354_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

loss_derivative_exp_16_9_s_f_x_lsb_table_V #(
    .DataWidth( 11 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_lsb_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_lsb_table_V_address0),
    .ce0(f_x_lsb_table_V_ce0),
    .q0(f_x_lsb_table_V_q0)
);

loss_derivative_exp_16_9_s_exp_x_msb_2_m_1_table_V #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_2_m_1_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_2_m_1_table_V_address0),
    .ce0(exp_x_msb_2_m_1_table_V_ce0),
    .q0(exp_x_msb_2_m_1_table_V_q0)
);

loss_derivative_exp_16_9_s_exp_x_msb_1_table_V #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_1_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_V_address0),
    .ce0(exp_x_msb_1_table_V_ce0),
    .q0(exp_x_msb_1_table_V_q0)
);

loss_derivative_mul_25ns_18ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 43 ))
mul_25ns_18ns_43_1_1_U1(
    .din0(r_V_fu_354_p0),
    .din1(r_V_fu_354_p1),
    .dout(r_V_fu_354_p2)
);

loss_derivative_mul_25ns_25ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25ns_25ns_50_1_1_U2(
    .din0(r_V_43_fu_413_p0),
    .din1(r_V_43_fu_413_p1),
    .dout(r_V_43_fu_413_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        exp_x_msb_1_V_reg_580 <= exp_x_msb_1_table_V_q0;
        exp_x_msb_1_V_reg_580_pp0_iter4_reg <= exp_x_msb_1_V_reg_580;
        exp_x_msb_2_lsb_m_1_V_reg_575 <= exp_x_msb_2_lsb_m_1_V_fu_402_p2;
        exp_x_msb_2_m_1_V_reg_559_pp0_iter2_reg <= exp_x_msb_2_m_1_V_reg_559;
        f_x_lsb_V_reg_553_pp0_iter2_reg <= f_x_lsb_V_reg_553;
        or_ln202_1_reg_543_pp0_iter2_reg <= or_ln202_1_reg_543_pp0_iter1_reg;
        or_ln202_1_reg_543_pp0_iter3_reg <= or_ln202_1_reg_543_pp0_iter2_reg;
        or_ln202_1_reg_543_pp0_iter4_reg <= or_ln202_1_reg_543_pp0_iter3_reg;
        or_ln202_3_reg_548_pp0_iter2_reg <= or_ln202_3_reg_548_pp0_iter1_reg;
        or_ln202_3_reg_548_pp0_iter3_reg <= or_ln202_3_reg_548_pp0_iter2_reg;
        or_ln202_3_reg_548_pp0_iter4_reg <= or_ln202_3_reg_548_pp0_iter3_reg;
        tmp_reg_516_pp0_iter2_reg <= tmp_reg_516_pp0_iter1_reg;
        tmp_reg_516_pp0_iter3_reg <= tmp_reg_516_pp0_iter2_reg;
        tmp_reg_516_pp0_iter4_reg <= tmp_reg_516_pp0_iter3_reg;
        trunc_ln640_1_reg_527_pp0_iter2_reg <= trunc_ln640_1_reg_527_pp0_iter1_reg;
        trunc_ln6_reg_565 <= {{r_V_fu_354_p2[42:24]}};
        y_lo_s_V_reg_586 <= {{r_V_43_fu_413_p2[49:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_2_m_1_V_reg_559 <= exp_x_msb_2_m_1_table_V_q0;
        f_x_lsb_V_reg_553 <= f_x_lsb_table_V_q0;
        or_ln202_1_reg_543 <= or_ln202_1_fu_315_p2;
        or_ln202_1_reg_543_pp0_iter1_reg <= or_ln202_1_reg_543;
        or_ln202_3_reg_548 <= or_ln202_3_fu_327_p2;
        or_ln202_3_reg_548_pp0_iter1_reg <= or_ln202_3_reg_548;
        p_Result_s_reg_522 <= {{x[9:6]}};
        p_Result_s_reg_522_pp0_iter1_reg <= p_Result_s_reg_522;
        tmp_reg_516 <= x[32'd15];
        tmp_reg_516_pp0_iter1_reg <= tmp_reg_516;
        trunc_ln640_1_reg_527 <= trunc_ln640_1_fu_287_p1;
        trunc_ln640_1_reg_527_pp0_iter1_reg <= trunc_ln640_1_reg_527;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        exp_x_msb_1_table_V_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        exp_x_msb_2_m_1_table_V_ce0 = 1'b1;
    end else begin
        exp_x_msb_2_m_1_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_x_lsb_table_V_ce0 = 1'b1;
    end else begin
        f_x_lsb_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln202_fu_261_p2 = (icmp_ln1498_fu_249_p2 & icmp_ln1494_fu_255_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((overf_2_fu_492_p2[0:0] == 1'b1) ? 16'd32767 : tmp_s_fu_498_p4);

assign exp_x_msb_1_table_V_address0 = zext_ln261_fu_370_p1;

assign exp_x_msb_2_lsb_m_1_V_fu_402_p2 = (exp_x_msb_2_m_1_V_reg_559_pp0_iter2_reg + zext_ln703_fu_398_p1);

assign exp_x_msb_2_m_1_table_V_address0 = zext_ln245_fu_304_p1;

assign f_x_lsb_table_V_address0 = zext_ln230_fu_299_p1;

assign icmp_ln1494_fu_255_p2 = ((p_Result_8_fu_163_p3 > 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln1498_fu_249_p2 = ((p_Result_7_fu_149_p4 == 4'd7) ? 1'b1 : 1'b0);

assign or_ln202_1_fu_315_p2 = (xor_ln222_fu_201_p2 | or_ln202_fu_309_p2);

assign or_ln202_2_fu_321_p2 = (xor_ln222_3_fu_243_p2 | and_ln202_fu_261_p2);

assign or_ln202_3_fu_327_p2 = (xor_ln222_2_fu_229_p2 | or_ln202_2_fu_321_p2);

assign or_ln202_4_fu_456_p2 = (or_ln202_3_reg_548_pp0_iter4_reg | or_ln202_1_reg_543_pp0_iter4_reg);

assign or_ln202_fu_309_p2 = (xor_ln222_1_fu_215_p2 | overf_fu_187_p2);

assign overf_1_fu_478_p2 = ((tmp_58_fu_468_p4 != 2'd0) ? 1'b1 : 1'b0);

assign overf_2_fu_492_p2 = (p_Result_s_54_fu_484_p3 | overf_1_fu_478_p2);

assign overf_fu_187_p2 = (tmp_fu_171_p3 ^ tmp_48_fu_179_p3);

assign p_Result_10_fu_339_p4 = {{{trunc_ln640_1_reg_527_pp0_iter1_reg}, {6'd0}}, {f_x_lsb_V_reg_553}};

assign p_Result_7_fu_149_p4 = {{x[10:7]}};

assign p_Result_8_fu_163_p3 = {{trunc_ln640_fu_159_p1}, {4'd0}};

assign p_Result_9_fu_333_p3 = {{tmp_reg_516_pp0_iter1_reg}, {p_Result_s_reg_522_pp0_iter1_reg}};

assign p_Result_s_54_fu_484_p3 = p_Val2_s_fu_460_p3[32'd19];

assign p_Val2_s_fu_460_p3 = ((or_ln202_4_fu_456_p2[0:0] == 1'b1) ? select_ln640_fu_434_p3 : y_V_fu_446_p4);

assign r_V_43_fu_413_p0 = r_V_43_fu_413_p00;

assign r_V_43_fu_413_p00 = exp_x_msb_2_lsb_m_1_V_reg_575;

assign r_V_43_fu_413_p1 = r_V_43_fu_413_p10;

assign r_V_43_fu_413_p10 = exp_x_msb_1_V_reg_580;

assign r_V_fu_354_p0 = r_V_fu_354_p00;

assign r_V_fu_354_p00 = exp_x_msb_2_m_1_V_reg_559;

assign r_V_fu_354_p1 = r_V_fu_354_p10;

assign r_V_fu_354_p10 = p_Result_10_fu_339_p4;

assign ret_V_fu_392_p2 = (zext_ln1192_fu_388_p1 + zext_ln703_1_fu_375_p1);

assign rhs_1_fu_378_p5 = {{{{trunc_ln640_1_reg_527_pp0_iter2_reg}, {6'd0}}, {f_x_lsb_V_reg_553_pp0_iter2_reg}}, {1'd0}};

assign select_ln640_fu_434_p3 = ((xor_ln640_fu_429_p2[0:0] == 1'b1) ? 22'd4194303 : 22'd0);

assign tmp_48_fu_179_p3 = x[32'd10];

assign tmp_49_fu_193_p3 = x[32'd11];

assign tmp_53_fu_207_p3 = x[32'd12];

assign tmp_54_fu_221_p3 = x[32'd13];

assign tmp_55_fu_235_p3 = x[32'd14];

assign tmp_58_fu_468_p4 = {{p_Val2_s_fu_460_p3[21:20]}};

assign tmp_60_fu_277_p4 = {{x[5:1]}};

assign tmp_61_fu_291_p3 = {{trunc_ln640_1_fu_287_p1}, {4'd0}};

assign tmp_fu_171_p3 = x[32'd15];

assign tmp_s_fu_498_p4 = {{p_Val2_s_fu_460_p3[19:4]}};

assign trunc_ln640_1_fu_287_p1 = x[0:0];

assign trunc_ln640_fu_159_p1 = x[6:0];

assign xor_ln222_1_fu_215_p2 = (tmp_fu_171_p3 ^ tmp_53_fu_207_p3);

assign xor_ln222_2_fu_229_p2 = (tmp_fu_171_p3 ^ tmp_54_fu_221_p3);

assign xor_ln222_3_fu_243_p2 = (tmp_fu_171_p3 ^ tmp_55_fu_235_p3);

assign xor_ln222_fu_201_p2 = (tmp_fu_171_p3 ^ tmp_49_fu_193_p3);

assign xor_ln640_fu_429_p2 = (tmp_reg_516_pp0_iter4_reg ^ 1'd1);

assign y_V_fu_446_p4 = {{y_l_V_fu_442_p2[24:3]}};

assign y_l_V_fu_442_p2 = (exp_x_msb_1_V_reg_580_pp0_iter4_reg + y_lo_s_V_reg_586);

assign zext_ln1192_fu_388_p1 = rhs_1_fu_378_p5;

assign zext_ln230_fu_299_p1 = tmp_61_fu_291_p3;

assign zext_ln245_fu_304_p1 = tmp_60_fu_277_p4;

assign zext_ln261_fu_370_p1 = p_Result_9_fu_333_p3;

assign zext_ln703_1_fu_375_p1 = trunc_ln6_reg_565;

assign zext_ln703_fu_398_p1 = ret_V_fu_392_p2;

endmodule //loss_derivative_exp_16_9_s
