// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loss_derivative_loss_derivative,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=6057,HLS_SYN_LUT=5718,HLS_VERSION=2020_2}" *)

module loss_derivative (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        x_Addr_A,
        x_EN_A,
        x_WEN_A,
        x_Din_A,
        x_Dout_A,
        x_Clk_A,
        x_Rst_A,
        dx_Addr_A,
        dx_EN_A,
        dx_WEN_A,
        dx_Din_A,
        dx_Dout_A,
        dx_Clk_A,
        dx_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 57'd1;
parameter    ap_ST_fsm_state2 = 57'd2;
parameter    ap_ST_fsm_state3 = 57'd4;
parameter    ap_ST_fsm_pp0_stage0 = 57'd8;
parameter    ap_ST_fsm_state7 = 57'd16;
parameter    ap_ST_fsm_pp1_stage0 = 57'd32;
parameter    ap_ST_fsm_state11 = 57'd64;
parameter    ap_ST_fsm_pp2_stage0 = 57'd128;
parameter    ap_ST_fsm_state29 = 57'd256;
parameter    ap_ST_fsm_pp3_stage0 = 57'd512;
parameter    ap_ST_fsm_state80 = 57'd1024;
parameter    ap_ST_fsm_state81 = 57'd2048;
parameter    ap_ST_fsm_state82 = 57'd4096;
parameter    ap_ST_fsm_state83 = 57'd8192;
parameter    ap_ST_fsm_state84 = 57'd16384;
parameter    ap_ST_fsm_state85 = 57'd32768;
parameter    ap_ST_fsm_state86 = 57'd65536;
parameter    ap_ST_fsm_state87 = 57'd131072;
parameter    ap_ST_fsm_state88 = 57'd262144;
parameter    ap_ST_fsm_state89 = 57'd524288;
parameter    ap_ST_fsm_state90 = 57'd1048576;
parameter    ap_ST_fsm_state91 = 57'd2097152;
parameter    ap_ST_fsm_state92 = 57'd4194304;
parameter    ap_ST_fsm_state93 = 57'd8388608;
parameter    ap_ST_fsm_pp4_stage0 = 57'd16777216;
parameter    ap_ST_fsm_state97 = 57'd33554432;
parameter    ap_ST_fsm_state98 = 57'd67108864;
parameter    ap_ST_fsm_pp5_stage0 = 57'd134217728;
parameter    ap_ST_fsm_state103 = 57'd268435456;
parameter    ap_ST_fsm_state104 = 57'd536870912;
parameter    ap_ST_fsm_state105 = 57'd1073741824;
parameter    ap_ST_fsm_state106 = 57'd2147483648;
parameter    ap_ST_fsm_state107 = 57'd4294967296;
parameter    ap_ST_fsm_pp6_stage0 = 57'd8589934592;
parameter    ap_ST_fsm_state112 = 57'd17179869184;
parameter    ap_ST_fsm_state113 = 57'd34359738368;
parameter    ap_ST_fsm_state114 = 57'd68719476736;
parameter    ap_ST_fsm_state115 = 57'd137438953472;
parameter    ap_ST_fsm_state116 = 57'd274877906944;
parameter    ap_ST_fsm_state117 = 57'd549755813888;
parameter    ap_ST_fsm_state118 = 57'd1099511627776;
parameter    ap_ST_fsm_state119 = 57'd2199023255552;
parameter    ap_ST_fsm_state120 = 57'd4398046511104;
parameter    ap_ST_fsm_state121 = 57'd8796093022208;
parameter    ap_ST_fsm_state122 = 57'd17592186044416;
parameter    ap_ST_fsm_state123 = 57'd35184372088832;
parameter    ap_ST_fsm_pp7_stage0 = 57'd70368744177664;
parameter    ap_ST_fsm_state127 = 57'd140737488355328;
parameter    ap_ST_fsm_state128 = 57'd281474976710656;
parameter    ap_ST_fsm_state129 = 57'd562949953421312;
parameter    ap_ST_fsm_state130 = 57'd1125899906842624;
parameter    ap_ST_fsm_state131 = 57'd2251799813685248;
parameter    ap_ST_fsm_state132 = 57'd4503599627370496;
parameter    ap_ST_fsm_state133 = 57'd9007199254740992;
parameter    ap_ST_fsm_pp8_stage0 = 57'd18014398509481984;
parameter    ap_ST_fsm_state137 = 57'd36028797018963968;
parameter    ap_ST_fsm_state138 = 57'd72057594037927936;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] x_Addr_A;
output   x_EN_A;
output  [1:0] x_WEN_A;
output  [15:0] x_Din_A;
input  [15:0] x_Dout_A;
output   x_Clk_A;
output   x_Rst_A;
output  [31:0] dx_Addr_A;
output   dx_EN_A;
output  [1:0] dx_WEN_A;
output  [15:0] dx_Din_A;
input  [15:0] dx_Dout_A;
output   dx_Clk_A;
output   dx_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg x_EN_A;
reg[1:0] x_WEN_A;
reg dx_EN_A;
reg[1:0] dx_WEN_A;
reg[15:0] dx_Din_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [56:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x_ddr;
wire   [31:0] dx_ddr;
wire   [31:0] y;
wire   [31:0] dim;
wire    writetoddr;
wire    ddrtobram;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state117;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter1;
wire    ap_block_pp7_stage0;
reg   [0:0] icmp_ln31_reg_1163;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter1;
wire    ap_block_pp8_stage0;
reg   [0:0] icmp_ln34_reg_1188;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state98;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp5_iter3;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln39_reg_1112;
reg   [0:0] icmp_ln39_reg_1112_pp5_iter2_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state107;
reg    ap_enable_reg_pp6_iter3;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln42_reg_1132;
reg   [0:0] icmp_ln42_reg_1132_pp6_iter2_reg;
wire    ap_CS_fsm_state116;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [31:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [15:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] i_reg_386;
reg   [15:0] max_V_1_reg_397;
reg   [30:0] i_3_reg_407;
reg   [30:0] i_6_reg_418;
reg  signed [15:0] sum_V_reg_429;
reg   [30:0] i_7_reg_441;
reg   [30:0] i_8_reg_452;
reg   [30:0] i_2_reg_463;
reg   [30:0] i_5_reg_474;
reg   [30:0] i_1_reg_485;
reg   [30:0] i_4_reg_496;
reg   [15:0] reg_575;
wire    ap_CS_fsm_state3;
reg    ap_enable_reg_pp5_iter2;
wire    ap_block_state99_pp5_stage0_iter0;
wire    ap_block_state100_pp5_stage0_iter1;
wire    ap_block_state101_pp5_stage0_iter2;
wire    ap_block_state102_pp5_stage0_iter3;
reg    ap_block_state102_io;
reg    ap_block_pp5_stage0_11001;
reg   [0:0] icmp_ln39_reg_1112_pp5_iter1_reg;
wire   [15:0] log_probs_V_q0;
reg   [15:0] reg_581;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state12_pp2_stage0_iter0;
wire    ap_block_state13_pp2_stage0_iter1;
wire    ap_block_state14_pp2_stage0_iter2;
wire    ap_block_state15_pp2_stage0_iter3;
wire    ap_block_state16_pp2_stage0_iter4;
wire    ap_block_state17_pp2_stage0_iter5;
wire    ap_block_state18_pp2_stage0_iter6;
wire    ap_block_state19_pp2_stage0_iter7;
wire    ap_block_state20_pp2_stage0_iter8;
wire    ap_block_state21_pp2_stage0_iter9;
wire    ap_block_state22_pp2_stage0_iter10;
wire    ap_block_state23_pp2_stage0_iter11;
wire    ap_block_state24_pp2_stage0_iter12;
wire    ap_block_state25_pp2_stage0_iter13;
wire    ap_block_state26_pp2_stage0_iter14;
wire    ap_block_state27_pp2_stage0_iter15;
wire    ap_block_state28_pp2_stage0_iter16;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln65_reg_1003;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state30_pp3_stage0_iter0;
wire    ap_block_state31_pp3_stage0_iter1;
wire    ap_block_state32_pp3_stage0_iter2;
wire    ap_block_state33_pp3_stage0_iter3;
wire    ap_block_state34_pp3_stage0_iter4;
wire    ap_block_state35_pp3_stage0_iter5;
wire    ap_block_state36_pp3_stage0_iter6;
wire    ap_block_state37_pp3_stage0_iter7;
wire    ap_block_state38_pp3_stage0_iter8;
wire    ap_block_state39_pp3_stage0_iter9;
wire    ap_block_state40_pp3_stage0_iter10;
wire    ap_block_state41_pp3_stage0_iter11;
wire    ap_block_state42_pp3_stage0_iter12;
wire    ap_block_state43_pp3_stage0_iter13;
wire    ap_block_state44_pp3_stage0_iter14;
wire    ap_block_state45_pp3_stage0_iter15;
wire    ap_block_state46_pp3_stage0_iter16;
wire    ap_block_state47_pp3_stage0_iter17;
wire    ap_block_state48_pp3_stage0_iter18;
wire    ap_block_state49_pp3_stage0_iter19;
wire    ap_block_state50_pp3_stage0_iter20;
wire    ap_block_state51_pp3_stage0_iter21;
wire    ap_block_state52_pp3_stage0_iter22;
wire    ap_block_state53_pp3_stage0_iter23;
wire    ap_block_state54_pp3_stage0_iter24;
wire    ap_block_state55_pp3_stage0_iter25;
wire    ap_block_state56_pp3_stage0_iter26;
wire    ap_block_state57_pp3_stage0_iter27;
wire    ap_block_state58_pp3_stage0_iter28;
wire    ap_block_state59_pp3_stage0_iter29;
wire    ap_block_state60_pp3_stage0_iter30;
wire    ap_block_state61_pp3_stage0_iter31;
wire    ap_block_state62_pp3_stage0_iter32;
wire    ap_block_state63_pp3_stage0_iter33;
wire    ap_block_state64_pp3_stage0_iter34;
wire    ap_block_state65_pp3_stage0_iter35;
wire    ap_block_state66_pp3_stage0_iter36;
wire    ap_block_state67_pp3_stage0_iter37;
wire    ap_block_state68_pp3_stage0_iter38;
wire    ap_block_state69_pp3_stage0_iter39;
wire    ap_block_state70_pp3_stage0_iter40;
wire    ap_block_state71_pp3_stage0_iter41;
wire    ap_block_state72_pp3_stage0_iter42;
wire    ap_block_state73_pp3_stage0_iter43;
wire    ap_block_state74_pp3_stage0_iter44;
wire    ap_block_state75_pp3_stage0_iter45;
wire    ap_block_state76_pp3_stage0_iter46;
wire    ap_block_state77_pp3_stage0_iter47;
wire    ap_block_state78_pp3_stage0_iter48;
wire    ap_block_state79_pp3_stage0_iter49;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln69_reg_1027;
wire   [15:0] grp_exp_16_3_s_fu_529_ap_return;
reg   [15:0] reg_586;
reg    ap_enable_reg_pp2_iter15;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter14_reg;
reg    ap_enable_reg_pp3_iter15;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter14_reg;
wire   [15:0] probs_V_q0;
reg   [15:0] reg_590;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state94_pp4_stage0_iter0;
wire    ap_block_state95_pp4_stage0_iter1;
wire    ap_block_state96_pp4_stage0_iter2;
wire    ap_block_pp4_stage0_11001;
reg   [31:0] dim_read_reg_915;
reg   [31:0] y_read_reg_931;
reg   [31:0] dx_ddr_read_reg_938;
reg   [31:0] x_ddr_read_reg_943;
wire   [0:0] writetoddr_read_read_fu_170_p2;
wire   [0:0] icmp_ln53_fu_600_p2;
reg   [0:0] icmp_ln53_reg_956;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln53_reg_956_pp0_iter1_reg;
wire   [30:0] add_ln53_fu_605_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] max_V_2_fu_626_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] grp_fu_551_p2;
reg   [0:0] icmp_ln59_reg_975;
wire    ap_CS_fsm_state7;
wire   [30:0] add_ln59_fu_634_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln59_1_fu_644_p2;
reg   [0:0] icmp_ln59_1_reg_984;
reg   [0:0] icmp_ln59_1_reg_984_pp1_iter1_reg;
wire   [31:0] zext_ln703_fu_653_p1;
reg   [31:0] zext_ln703_reg_988;
reg   [31:0] zext_ln703_reg_988_pp1_iter1_reg;
wire   [30:0] add_ln65_fu_665_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln65_fu_675_p2;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter1_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter2_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter3_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter4_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter5_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter6_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter7_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter8_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter9_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter10_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter11_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter12_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter13_reg;
reg   [0:0] icmp_ln65_reg_1003_pp2_iter15_reg;
wire   [15:0] sum_V_1_fu_689_p2;
reg    ap_enable_reg_pp2_iter16;
wire  signed [28:0] sum_V_cast_fu_695_p1;
reg  signed [28:0] sum_V_cast_reg_1017;
wire    ap_CS_fsm_state29;
wire   [30:0] add_ln69_fu_699_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln69_fu_709_p2;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter1_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter2_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter3_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter4_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter5_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter6_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter7_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter8_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter9_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter10_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter11_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter12_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter13_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter15_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter16_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter17_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter18_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter19_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter20_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter21_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter22_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter23_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter24_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter25_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter26_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter27_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter28_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter29_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter30_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter31_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter32_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter33_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter34_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter35_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter36_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter37_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter38_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter39_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter40_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter41_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter42_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter43_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter44_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter45_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter46_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter47_reg;
reg   [0:0] icmp_ln69_reg_1027_pp3_iter48_reg;
wire   [31:0] zext_ln70_fu_718_p1;
reg   [31:0] zext_ln70_reg_1031;
reg   [31:0] zext_ln70_reg_1031_pp3_iter1_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter2_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter3_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter4_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter5_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter6_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter7_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter8_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter9_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter10_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter11_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter12_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter13_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter14_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter15_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter16_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter17_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter18_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter19_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter20_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter21_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter22_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter23_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter24_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter25_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter26_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter27_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter28_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter29_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter30_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter31_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter32_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter33_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter34_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter35_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter36_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter37_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter38_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter39_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter40_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter41_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter42_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter43_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter44_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter45_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter46_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter47_reg;
reg   [31:0] zext_ln70_reg_1031_pp3_iter48_reg;
wire   [15:0] grp_fu_731_p2;
reg   [15:0] sdiv_ln1148_reg_1046;
wire    ap_CS_fsm_state80;
wire   [15:0] grp_log_16_3_s_fu_540_ap_return;
reg   [15:0] op2_V_1_reg_1056;
wire    ap_CS_fsm_state92;
wire   [15:0] loss_V_fu_740_p2;
reg   [15:0] loss_V_reg_1061;
wire    ap_CS_fsm_state93;
reg   [6:0] dx_addr_2_reg_1067;
wire   [30:0] add_ln75_fu_745_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln75_fu_755_p2;
wire   [0:0] icmp_ln76_fu_760_p2;
reg   [0:0] icmp_ln76_reg_1081;
reg   [0:0] icmp_ln76_reg_1081_pp4_iter1_reg;
wire   [31:0] i_8_cast6_cast_fu_769_p1;
reg   [31:0] i_8_cast6_cast_reg_1085;
reg   [31:0] i_8_cast6_cast_reg_1085_pp4_iter1_reg;
wire   [30:0] trunc_ln39_fu_781_p1;
reg   [30:0] trunc_ln39_reg_1095;
wire   [30:0] add_ln39_fu_795_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire   [0:0] icmp_ln39_fu_801_p2;
wire   [30:0] add_ln42_fu_826_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state108_pp6_stage0_iter0;
wire    ap_block_state109_pp6_stage0_iter1;
wire    ap_block_state110_pp6_stage0_iter2;
wire    ap_block_state111_pp6_stage0_iter3;
reg    ap_block_state111_io;
reg    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln42_fu_832_p2;
reg   [0:0] icmp_ln42_reg_1132_pp6_iter1_reg;
reg   [15:0] dx_load_reg_1141;
reg    ap_enable_reg_pp6_iter2;
wire   [30:0] trunc_ln31_fu_857_p1;
reg   [30:0] trunc_ln31_reg_1152;
wire    ap_CS_fsm_state123;
wire   [30:0] add_ln31_fu_860_p2;
reg    ap_enable_reg_pp7_iter0;
wire    ap_block_state124_pp7_stage0_iter0;
reg    ap_block_state125_pp7_stage0_iter1;
wire    ap_block_state126_pp7_stage0_iter2;
reg    ap_block_pp7_stage0_11001;
wire   [0:0] icmp_ln31_fu_866_p2;
reg   [0:0] icmp_ln31_reg_1163_pp7_iter1_reg;
wire   [6:0] trunc_ln32_fu_871_p1;
reg   [6:0] trunc_ln32_reg_1167;
reg   [6:0] trunc_ln32_reg_1167_pp7_iter1_reg;
reg   [15:0] gmem_addr_read_reg_1172;
wire   [30:0] add_ln34_fu_890_p2;
reg    ap_enable_reg_pp8_iter0;
wire    ap_block_state134_pp8_stage0_iter0;
reg    ap_block_state135_pp8_stage0_iter1;
wire    ap_block_state136_pp8_stage0_iter2;
reg    ap_block_pp8_stage0_11001;
wire   [0:0] icmp_ln34_fu_896_p2;
reg   [0:0] icmp_ln34_reg_1188_pp8_iter1_reg;
wire   [6:0] trunc_ln35_fu_901_p1;
reg   [6:0] trunc_ln35_reg_1192;
reg   [6:0] trunc_ln35_reg_1192_pp8_iter1_reg;
reg   [15:0] gmem_addr_2_read_reg_1197;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state11;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state12;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state30;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg    ap_enable_reg_pp3_iter12;
reg    ap_enable_reg_pp3_iter13;
reg    ap_enable_reg_pp3_iter14;
reg    ap_enable_reg_pp3_iter16;
reg    ap_enable_reg_pp3_iter17;
reg    ap_enable_reg_pp3_iter18;
reg    ap_enable_reg_pp3_iter19;
reg    ap_enable_reg_pp3_iter20;
reg    ap_enable_reg_pp3_iter21;
reg    ap_enable_reg_pp3_iter22;
reg    ap_enable_reg_pp3_iter23;
reg    ap_enable_reg_pp3_iter24;
reg    ap_enable_reg_pp3_iter25;
reg    ap_enable_reg_pp3_iter26;
reg    ap_enable_reg_pp3_iter27;
reg    ap_enable_reg_pp3_iter28;
reg    ap_enable_reg_pp3_iter29;
reg    ap_enable_reg_pp3_iter30;
reg    ap_enable_reg_pp3_iter31;
reg    ap_enable_reg_pp3_iter32;
reg    ap_enable_reg_pp3_iter33;
reg    ap_enable_reg_pp3_iter34;
reg    ap_enable_reg_pp3_iter35;
reg    ap_enable_reg_pp3_iter36;
reg    ap_enable_reg_pp3_iter37;
reg    ap_enable_reg_pp3_iter38;
reg    ap_enable_reg_pp3_iter39;
reg    ap_enable_reg_pp3_iter40;
reg    ap_enable_reg_pp3_iter41;
reg    ap_enable_reg_pp3_iter42;
reg    ap_enable_reg_pp3_iter43;
reg    ap_enable_reg_pp3_iter44;
reg    ap_enable_reg_pp3_iter45;
reg    ap_enable_reg_pp3_iter46;
reg    ap_enable_reg_pp3_iter47;
reg    ap_enable_reg_pp3_iter48;
reg    ap_enable_reg_pp3_iter49;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state94;
reg    ap_enable_reg_pp4_iter2;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state99;
reg    ap_enable_reg_pp5_iter1;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state108;
reg    ap_enable_reg_pp6_iter1;
reg    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state124;
reg    ap_enable_reg_pp7_iter2;
wire    ap_CS_fsm_state133;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state134;
reg    ap_enable_reg_pp8_iter2;
reg   [6:0] log_probs_V_address0;
reg    log_probs_V_ce0;
reg    log_probs_V_we0;
wire   [15:0] log_probs_V_d0;
reg   [6:0] probs_V_address0;
reg    probs_V_ce0;
reg    probs_V_we0;
wire   [15:0] probs_V_d0;
wire    grp_exp_16_3_s_fu_529_ap_start;
wire    grp_exp_16_3_s_fu_529_ap_done;
wire    grp_exp_16_3_s_fu_529_ap_idle;
wire    grp_exp_16_3_s_fu_529_ap_ready;
wire    grp_log_16_3_s_fu_540_ap_start;
wire    grp_log_16_3_s_fu_540_ap_done;
wire    grp_log_16_3_s_fu_540_ap_idle;
wire    grp_log_16_3_s_fu_540_ap_ready;
reg   [15:0] loss_V_1_reg_507;
wire   [0:0] ddrtobram_read_read_fu_164_p2;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state137;
reg    grp_exp_16_3_s_fu_529_ap_start_reg;
wire    ap_block_pp2_stage0;
wire    ap_block_pp3_stage0;
reg    grp_log_16_3_s_fu_540_ap_start_reg;
reg   [56:0] ap_NS_fsm;
wire    ap_NS_fsm_state82;
wire    ap_CS_fsm_state82;
wire   [31:0] zext_ln1494_fu_615_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0;
wire   [31:0] zext_ln66_fu_684_p1;
wire    ap_block_pp4_stage0;
wire   [31:0] zext_ln40_fu_810_p1;
wire   [31:0] zext_ln43_fu_841_p1;
wire   [31:0] zext_ln32_fu_875_p1;
wire   [31:0] zext_ln35_fu_905_p1;
wire  signed [31:0] sext_ln39_fu_784_p1;
wire  signed [31:0] sext_ln42_fu_815_p1;
wire  signed [31:0] sext_ln31_fu_846_p1;
wire  signed [31:0] sext_ln34_fu_879_p1;
wire    ap_block_pp5_stage0_01001;
wire    ap_block_pp6_stage0_01001;
reg   [31:0] x_Addr_A_orig;
wire    ap_CS_fsm_state2;
reg   [31:0] dx_Addr_A_orig;
wire   [15:0] add_ln703_fu_774_p2;
reg   [31:0] grp_fu_551_p0;
wire   [31:0] i_cast3_fu_596_p1;
wire   [6:0] trunc_ln1494_fu_611_p1;
wire   [0:0] icmp_ln1494_fu_620_p2;
wire   [31:0] i_3_cast_fu_640_p1;
wire   [6:0] trunc_ln703_fu_649_p1;
wire   [31:0] i_6_cast_fu_671_p1;
wire   [6:0] trunc_ln66_fu_680_p1;
wire   [31:0] i_7_cast_fu_705_p1;
wire   [6:0] trunc_ln70_fu_714_p1;
wire   [28:0] grp_fu_731_p0;
wire  signed [15:0] grp_fu_731_p1;
wire   [31:0] i_8_cast_fu_751_p1;
wire   [6:0] empty_74_fu_765_p1;
wire   [30:0] grp_fu_557_p4;
wire   [6:0] trunc_ln40_fu_806_p1;
wire   [30:0] grp_fu_566_p4;
wire   [6:0] trunc_ln43_fu_837_p1;
wire    ap_CS_fsm_state138;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
wire    ap_ce_reg;
wire   [15:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 57'd1;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp6_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp3_iter15 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter12 = 1'b0;
#0 ap_enable_reg_pp3_iter13 = 1'b0;
#0 ap_enable_reg_pp3_iter14 = 1'b0;
#0 ap_enable_reg_pp3_iter16 = 1'b0;
#0 ap_enable_reg_pp3_iter17 = 1'b0;
#0 ap_enable_reg_pp3_iter18 = 1'b0;
#0 ap_enable_reg_pp3_iter19 = 1'b0;
#0 ap_enable_reg_pp3_iter20 = 1'b0;
#0 ap_enable_reg_pp3_iter21 = 1'b0;
#0 ap_enable_reg_pp3_iter22 = 1'b0;
#0 ap_enable_reg_pp3_iter23 = 1'b0;
#0 ap_enable_reg_pp3_iter24 = 1'b0;
#0 ap_enable_reg_pp3_iter25 = 1'b0;
#0 ap_enable_reg_pp3_iter26 = 1'b0;
#0 ap_enable_reg_pp3_iter27 = 1'b0;
#0 ap_enable_reg_pp3_iter28 = 1'b0;
#0 ap_enable_reg_pp3_iter29 = 1'b0;
#0 ap_enable_reg_pp3_iter30 = 1'b0;
#0 ap_enable_reg_pp3_iter31 = 1'b0;
#0 ap_enable_reg_pp3_iter32 = 1'b0;
#0 ap_enable_reg_pp3_iter33 = 1'b0;
#0 ap_enable_reg_pp3_iter34 = 1'b0;
#0 ap_enable_reg_pp3_iter35 = 1'b0;
#0 ap_enable_reg_pp3_iter36 = 1'b0;
#0 ap_enable_reg_pp3_iter37 = 1'b0;
#0 ap_enable_reg_pp3_iter38 = 1'b0;
#0 ap_enable_reg_pp3_iter39 = 1'b0;
#0 ap_enable_reg_pp3_iter40 = 1'b0;
#0 ap_enable_reg_pp3_iter41 = 1'b0;
#0 ap_enable_reg_pp3_iter42 = 1'b0;
#0 ap_enable_reg_pp3_iter43 = 1'b0;
#0 ap_enable_reg_pp3_iter44 = 1'b0;
#0 ap_enable_reg_pp3_iter45 = 1'b0;
#0 ap_enable_reg_pp3_iter46 = 1'b0;
#0 ap_enable_reg_pp3_iter47 = 1'b0;
#0 ap_enable_reg_pp3_iter48 = 1'b0;
#0 ap_enable_reg_pp3_iter49 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 grp_exp_16_3_s_fu_529_ap_start_reg = 1'b0;
#0 grp_log_16_3_s_fu_540_ap_start_reg = 1'b0;
end

loss_derivative_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(loss_V_1_reg_507),
    .x_ddr(x_ddr),
    .dx_ddr(dx_ddr),
    .y(y),
    .dim(dim),
    .writetoddr(writetoddr),
    .ddrtobram(ddrtobram)
);

loss_derivative_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(dim_read_reg_915),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(dim_read_reg_915),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

loss_derivative_log_probs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
log_probs_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(log_probs_V_address0),
    .ce0(log_probs_V_ce0),
    .we0(log_probs_V_we0),
    .d0(log_probs_V_d0),
    .q0(log_probs_V_q0)
);

loss_derivative_log_probs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
probs_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(probs_V_address0),
    .ce0(probs_V_ce0),
    .we0(probs_V_we0),
    .d0(probs_V_d0),
    .q0(probs_V_q0)
);

loss_derivative_exp_16_3_s grp_exp_16_3_s_fu_529(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_exp_16_3_s_fu_529_ap_start),
    .ap_done(grp_exp_16_3_s_fu_529_ap_done),
    .ap_idle(grp_exp_16_3_s_fu_529_ap_idle),
    .ap_ready(grp_exp_16_3_s_fu_529_ap_ready),
    .ap_ce(1'b1),
    .x(reg_581),
    .ap_return(grp_exp_16_3_s_fu_529_ap_return)
);

loss_derivative_log_16_3_s grp_log_16_3_s_fu_540(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_log_16_3_s_fu_540_ap_start),
    .ap_done(grp_log_16_3_s_fu_540_ap_done),
    .ap_idle(grp_log_16_3_s_fu_540_ap_idle),
    .ap_ready(grp_log_16_3_s_fu_540_ap_ready),
    .x(reg_590),
    .ap_return(grp_log_16_3_s_fu_540_ap_return)
);

loss_derivative_sdiv_29ns_16s_16_33_1 #(
    .ID( 1 ),
    .NUM_STAGE( 33 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
sdiv_29ns_16s_16_33_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_731_p0),
    .din1(grp_fu_731_p1),
    .ce(1'b1),
    .dout(grp_fu_731_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((grp_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((grp_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state12) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state12)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp2_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state30) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state30)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state30);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter17 <= ap_enable_reg_pp3_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter18 <= ap_enable_reg_pp3_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter19 <= ap_enable_reg_pp3_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter20 <= ap_enable_reg_pp3_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter21 <= ap_enable_reg_pp3_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter22 <= ap_enable_reg_pp3_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter23 <= ap_enable_reg_pp3_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter24 <= ap_enable_reg_pp3_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter25 <= ap_enable_reg_pp3_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter26 <= ap_enable_reg_pp3_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter27 <= ap_enable_reg_pp3_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter28 <= ap_enable_reg_pp3_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter29 <= ap_enable_reg_pp3_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter30 <= ap_enable_reg_pp3_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter31 <= ap_enable_reg_pp3_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter32 <= ap_enable_reg_pp3_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter33 <= ap_enable_reg_pp3_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter34 <= ap_enable_reg_pp3_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter35 <= ap_enable_reg_pp3_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter36 <= ap_enable_reg_pp3_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter37 <= ap_enable_reg_pp3_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter38 <= ap_enable_reg_pp3_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter39 <= ap_enable_reg_pp3_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter40 <= ap_enable_reg_pp3_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter41 <= ap_enable_reg_pp3_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter42 <= ap_enable_reg_pp3_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter43 <= ap_enable_reg_pp3_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter44 <= ap_enable_reg_pp3_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter45 <= ap_enable_reg_pp3_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter46 <= ap_enable_reg_pp3_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter47 <= ap_enable_reg_pp3_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter48 <= ap_enable_reg_pp3_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter49 <= ap_enable_reg_pp3_iter48;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp3_iter49 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state94) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((icmp_ln59_reg_975 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state94)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state94);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((icmp_ln59_reg_975 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state99) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state98))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state99)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state99);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state98))) begin
            ap_enable_reg_pp5_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state108) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((~((gmem_BVALID == 1'b0) | (gmem_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state107))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state108)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state108);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter3 <= ap_enable_reg_pp6_iter2;
        end else if ((~((gmem_BVALID == 1'b0) | (gmem_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state107))) begin
            ap_enable_reg_pp6_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state124) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state123)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state124)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state124);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end else if ((1'b1 == ap_CS_fsm_state123)) begin
            ap_enable_reg_pp7_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b1 == ap_condition_pp8_exit_iter0_state134) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state133)) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state134)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state134);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if ((1'b1 == ap_CS_fsm_state133)) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_exp_16_3_s_fu_529_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln69_reg_1027 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln65_reg_1003 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
            grp_exp_16_3_s_fu_529_ap_start_reg <= 1'b1;
        end else if ((grp_exp_16_3_s_fu_529_ap_ready == 1'b1)) begin
            grp_exp_16_3_s_fu_529_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_log_16_3_s_fu_540_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state81) & (1'b1 == ap_NS_fsm_state82))) begin
            grp_log_16_3_s_fu_540_ap_start_reg <= 1'b1;
        end else if ((grp_log_16_3_s_fu_540_ap_ready == 1'b1)) begin
            grp_log_16_3_s_fu_540_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        i_1_reg_485 <= 31'd0;
    end else if (((icmp_ln31_fu_866_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        i_1_reg_485 <= add_ln31_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state98))) begin
        i_2_reg_463 <= 31'd0;
    end else if (((icmp_ln39_fu_801_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_2_reg_463 <= add_ln39_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_3_reg_407 <= 31'd0;
    end else if (((icmp_ln59_1_fu_644_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_3_reg_407 <= add_ln59_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        i_4_reg_496 <= 31'd0;
    end else if (((icmp_ln34_fu_896_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        i_4_reg_496 <= add_ln34_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((gmem_BVALID == 1'b0) | (gmem_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state107))) begin
        i_5_reg_474 <= 31'd0;
    end else if (((icmp_ln42_fu_832_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        i_5_reg_474 <= add_ln42_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_6_reg_418 <= 31'd0;
    end else if (((icmp_ln65_fu_675_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_6_reg_418 <= add_ln65_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_7_reg_441 <= 31'd0;
    end else if (((icmp_ln69_fu_709_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_7_reg_441 <= add_ln69_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_755_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_8_reg_452 <= add_ln75_fu_745_p2;
    end else if (((icmp_ln59_reg_975 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
        i_8_reg_452 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln53_fu_600_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_386 <= add_ln53_fu_605_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_386 <= 31'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        loss_V_1_reg_507 <= loss_V_reg_1061;
    end else if (((icmp_ln59_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state93))) begin
        loss_V_1_reg_507 <= loss_V_fu_740_p2;
    end else if (((1'b1 == ap_CS_fsm_state137) | ((ap_start == 1'b1) & (grp_fu_551_p2 == 1'd0) & (writetoddr_read_read_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ddrtobram_read_read_fu_164_p2 == 1'd0)) | ((ap_start == 1'b1) & (grp_fu_551_p2 == 1'd0) & (writetoddr_read_read_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ddrtobram_read_read_fu_164_p2 == 1'd1)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state116)))) begin
        loss_V_1_reg_507 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln53_reg_956_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_V_1_reg_397 <= max_V_2_fu_626_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_V_1_reg_397 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sum_V_reg_429 <= 16'd0;
    end else if (((ap_enable_reg_pp2_iter16 == 1'b1) & (icmp_ln65_reg_1003_pp2_iter15_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sum_V_reg_429 <= sum_V_1_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dim_read_reg_915 <= dim;
        dx_ddr_read_reg_938 <= dx_ddr;
        x_ddr_read_reg_943 <= x_ddr;
        y_read_reg_931 <= y;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_975 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
        dx_addr_2_reg_1067 <= y_read_reg_931;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b1) & (icmp_ln42_reg_1132_pp6_iter1_reg == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        dx_load_reg_1141 <= dx_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln34_reg_1188 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        gmem_addr_2_read_reg_1197 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln31_reg_1163 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        gmem_addr_read_reg_1172 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_755_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_8_cast6_cast_reg_1085[6 : 0] <= i_8_cast6_cast_fu_769_p1[6 : 0];
        icmp_ln76_reg_1081 <= icmp_ln76_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_8_cast6_cast_reg_1085_pp4_iter1_reg[6 : 0] <= i_8_cast6_cast_reg_1085[6 : 0];
        icmp_ln76_reg_1081_pp4_iter1_reg <= icmp_ln76_reg_1081;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        icmp_ln31_reg_1163 <= icmp_ln31_fu_866_p2;
        icmp_ln31_reg_1163_pp7_iter1_reg <= icmp_ln31_reg_1163;
        trunc_ln32_reg_1167_pp7_iter1_reg <= trunc_ln32_reg_1167;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        icmp_ln34_reg_1188 <= icmp_ln34_fu_896_p2;
        icmp_ln34_reg_1188_pp8_iter1_reg <= icmp_ln34_reg_1188;
        trunc_ln35_reg_1192_pp8_iter1_reg <= trunc_ln35_reg_1192;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        icmp_ln39_reg_1112 <= icmp_ln39_fu_801_p2;
        icmp_ln39_reg_1112_pp5_iter1_reg <= icmp_ln39_reg_1112;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        icmp_ln39_reg_1112_pp5_iter2_reg <= icmp_ln39_reg_1112_pp5_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        icmp_ln42_reg_1132 <= icmp_ln42_fu_832_p2;
        icmp_ln42_reg_1132_pp6_iter1_reg <= icmp_ln42_reg_1132;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp6_stage0_11001)) begin
        icmp_ln42_reg_1132_pp6_iter2_reg <= icmp_ln42_reg_1132_pp6_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln53_reg_956 <= icmp_ln53_fu_600_p2;
        icmp_ln53_reg_956_pp0_iter1_reg <= icmp_ln53_reg_956;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln59_1_reg_984 <= icmp_ln59_1_fu_644_p2;
        icmp_ln59_1_reg_984_pp1_iter1_reg <= icmp_ln59_1_reg_984;
        zext_ln703_reg_988_pp1_iter1_reg[6 : 0] <= zext_ln703_reg_988[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln59_reg_975 <= grp_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln65_reg_1003 <= icmp_ln65_fu_675_p2;
        icmp_ln65_reg_1003_pp2_iter1_reg <= icmp_ln65_reg_1003;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln65_reg_1003_pp2_iter10_reg <= icmp_ln65_reg_1003_pp2_iter9_reg;
        icmp_ln65_reg_1003_pp2_iter11_reg <= icmp_ln65_reg_1003_pp2_iter10_reg;
        icmp_ln65_reg_1003_pp2_iter12_reg <= icmp_ln65_reg_1003_pp2_iter11_reg;
        icmp_ln65_reg_1003_pp2_iter13_reg <= icmp_ln65_reg_1003_pp2_iter12_reg;
        icmp_ln65_reg_1003_pp2_iter14_reg <= icmp_ln65_reg_1003_pp2_iter13_reg;
        icmp_ln65_reg_1003_pp2_iter15_reg <= icmp_ln65_reg_1003_pp2_iter14_reg;
        icmp_ln65_reg_1003_pp2_iter2_reg <= icmp_ln65_reg_1003_pp2_iter1_reg;
        icmp_ln65_reg_1003_pp2_iter3_reg <= icmp_ln65_reg_1003_pp2_iter2_reg;
        icmp_ln65_reg_1003_pp2_iter4_reg <= icmp_ln65_reg_1003_pp2_iter3_reg;
        icmp_ln65_reg_1003_pp2_iter5_reg <= icmp_ln65_reg_1003_pp2_iter4_reg;
        icmp_ln65_reg_1003_pp2_iter6_reg <= icmp_ln65_reg_1003_pp2_iter5_reg;
        icmp_ln65_reg_1003_pp2_iter7_reg <= icmp_ln65_reg_1003_pp2_iter6_reg;
        icmp_ln65_reg_1003_pp2_iter8_reg <= icmp_ln65_reg_1003_pp2_iter7_reg;
        icmp_ln65_reg_1003_pp2_iter9_reg <= icmp_ln65_reg_1003_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln69_reg_1027 <= icmp_ln69_fu_709_p2;
        icmp_ln69_reg_1027_pp3_iter1_reg <= icmp_ln69_reg_1027;
        zext_ln70_reg_1031_pp3_iter1_reg[6 : 0] <= zext_ln70_reg_1031[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln69_reg_1027_pp3_iter10_reg <= icmp_ln69_reg_1027_pp3_iter9_reg;
        icmp_ln69_reg_1027_pp3_iter11_reg <= icmp_ln69_reg_1027_pp3_iter10_reg;
        icmp_ln69_reg_1027_pp3_iter12_reg <= icmp_ln69_reg_1027_pp3_iter11_reg;
        icmp_ln69_reg_1027_pp3_iter13_reg <= icmp_ln69_reg_1027_pp3_iter12_reg;
        icmp_ln69_reg_1027_pp3_iter14_reg <= icmp_ln69_reg_1027_pp3_iter13_reg;
        icmp_ln69_reg_1027_pp3_iter15_reg <= icmp_ln69_reg_1027_pp3_iter14_reg;
        icmp_ln69_reg_1027_pp3_iter16_reg <= icmp_ln69_reg_1027_pp3_iter15_reg;
        icmp_ln69_reg_1027_pp3_iter17_reg <= icmp_ln69_reg_1027_pp3_iter16_reg;
        icmp_ln69_reg_1027_pp3_iter18_reg <= icmp_ln69_reg_1027_pp3_iter17_reg;
        icmp_ln69_reg_1027_pp3_iter19_reg <= icmp_ln69_reg_1027_pp3_iter18_reg;
        icmp_ln69_reg_1027_pp3_iter20_reg <= icmp_ln69_reg_1027_pp3_iter19_reg;
        icmp_ln69_reg_1027_pp3_iter21_reg <= icmp_ln69_reg_1027_pp3_iter20_reg;
        icmp_ln69_reg_1027_pp3_iter22_reg <= icmp_ln69_reg_1027_pp3_iter21_reg;
        icmp_ln69_reg_1027_pp3_iter23_reg <= icmp_ln69_reg_1027_pp3_iter22_reg;
        icmp_ln69_reg_1027_pp3_iter24_reg <= icmp_ln69_reg_1027_pp3_iter23_reg;
        icmp_ln69_reg_1027_pp3_iter25_reg <= icmp_ln69_reg_1027_pp3_iter24_reg;
        icmp_ln69_reg_1027_pp3_iter26_reg <= icmp_ln69_reg_1027_pp3_iter25_reg;
        icmp_ln69_reg_1027_pp3_iter27_reg <= icmp_ln69_reg_1027_pp3_iter26_reg;
        icmp_ln69_reg_1027_pp3_iter28_reg <= icmp_ln69_reg_1027_pp3_iter27_reg;
        icmp_ln69_reg_1027_pp3_iter29_reg <= icmp_ln69_reg_1027_pp3_iter28_reg;
        icmp_ln69_reg_1027_pp3_iter2_reg <= icmp_ln69_reg_1027_pp3_iter1_reg;
        icmp_ln69_reg_1027_pp3_iter30_reg <= icmp_ln69_reg_1027_pp3_iter29_reg;
        icmp_ln69_reg_1027_pp3_iter31_reg <= icmp_ln69_reg_1027_pp3_iter30_reg;
        icmp_ln69_reg_1027_pp3_iter32_reg <= icmp_ln69_reg_1027_pp3_iter31_reg;
        icmp_ln69_reg_1027_pp3_iter33_reg <= icmp_ln69_reg_1027_pp3_iter32_reg;
        icmp_ln69_reg_1027_pp3_iter34_reg <= icmp_ln69_reg_1027_pp3_iter33_reg;
        icmp_ln69_reg_1027_pp3_iter35_reg <= icmp_ln69_reg_1027_pp3_iter34_reg;
        icmp_ln69_reg_1027_pp3_iter36_reg <= icmp_ln69_reg_1027_pp3_iter35_reg;
        icmp_ln69_reg_1027_pp3_iter37_reg <= icmp_ln69_reg_1027_pp3_iter36_reg;
        icmp_ln69_reg_1027_pp3_iter38_reg <= icmp_ln69_reg_1027_pp3_iter37_reg;
        icmp_ln69_reg_1027_pp3_iter39_reg <= icmp_ln69_reg_1027_pp3_iter38_reg;
        icmp_ln69_reg_1027_pp3_iter3_reg <= icmp_ln69_reg_1027_pp3_iter2_reg;
        icmp_ln69_reg_1027_pp3_iter40_reg <= icmp_ln69_reg_1027_pp3_iter39_reg;
        icmp_ln69_reg_1027_pp3_iter41_reg <= icmp_ln69_reg_1027_pp3_iter40_reg;
        icmp_ln69_reg_1027_pp3_iter42_reg <= icmp_ln69_reg_1027_pp3_iter41_reg;
        icmp_ln69_reg_1027_pp3_iter43_reg <= icmp_ln69_reg_1027_pp3_iter42_reg;
        icmp_ln69_reg_1027_pp3_iter44_reg <= icmp_ln69_reg_1027_pp3_iter43_reg;
        icmp_ln69_reg_1027_pp3_iter45_reg <= icmp_ln69_reg_1027_pp3_iter44_reg;
        icmp_ln69_reg_1027_pp3_iter46_reg <= icmp_ln69_reg_1027_pp3_iter45_reg;
        icmp_ln69_reg_1027_pp3_iter47_reg <= icmp_ln69_reg_1027_pp3_iter46_reg;
        icmp_ln69_reg_1027_pp3_iter48_reg <= icmp_ln69_reg_1027_pp3_iter47_reg;
        icmp_ln69_reg_1027_pp3_iter4_reg <= icmp_ln69_reg_1027_pp3_iter3_reg;
        icmp_ln69_reg_1027_pp3_iter5_reg <= icmp_ln69_reg_1027_pp3_iter4_reg;
        icmp_ln69_reg_1027_pp3_iter6_reg <= icmp_ln69_reg_1027_pp3_iter5_reg;
        icmp_ln69_reg_1027_pp3_iter7_reg <= icmp_ln69_reg_1027_pp3_iter6_reg;
        icmp_ln69_reg_1027_pp3_iter8_reg <= icmp_ln69_reg_1027_pp3_iter7_reg;
        icmp_ln69_reg_1027_pp3_iter9_reg <= icmp_ln69_reg_1027_pp3_iter8_reg;
        zext_ln70_reg_1031_pp3_iter10_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter9_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter11_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter10_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter12_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter11_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter13_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter12_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter14_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter13_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter15_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter14_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter16_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter15_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter17_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter16_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter18_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter17_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter19_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter18_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter20_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter19_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter21_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter20_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter22_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter21_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter23_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter22_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter24_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter23_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter25_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter24_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter26_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter25_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter27_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter26_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter28_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter27_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter29_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter28_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter2_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter1_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter30_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter29_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter31_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter30_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter32_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter31_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter33_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter32_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter34_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter33_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter35_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter34_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter36_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter35_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter37_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter36_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter38_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter37_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter39_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter38_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter3_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter2_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter40_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter39_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter41_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter40_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter42_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter41_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter43_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter42_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter44_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter43_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter45_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter44_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter46_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter45_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter47_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter46_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter48_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter47_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter4_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter3_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter5_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter4_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter6_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter5_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter7_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter6_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter8_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter7_reg[6 : 0];
        zext_ln70_reg_1031_pp3_iter9_reg[6 : 0] <= zext_ln70_reg_1031_pp3_iter8_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        loss_V_reg_1061 <= loss_V_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        op2_V_1_reg_1056 <= grp_log_16_3_s_fu_540_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln39_reg_1112_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)))) begin
        reg_575 <= x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln69_reg_1027 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln65_reg_1003 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_581 <= log_probs_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln69_reg_1027_pp3_iter14_reg == 1'd0) & (ap_enable_reg_pp3_iter15 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((icmp_ln65_reg_1003_pp2_iter14_reg == 1'd0) & (ap_enable_reg_pp2_iter15 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_586 <= grp_exp_16_3_s_fu_529_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        reg_590 <= probs_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_reg_1027_pp3_iter47_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        sdiv_ln1148_reg_1046 <= grp_fu_731_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sum_V_cast_reg_1017 <= sum_V_cast_fu_695_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        trunc_ln31_reg_1152 <= trunc_ln31_fu_857_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        trunc_ln32_reg_1167 <= trunc_ln32_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_896_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        trunc_ln35_reg_1192 <= trunc_ln35_fu_901_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        trunc_ln39_reg_1095 <= trunc_ln39_fu_781_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_1_fu_644_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln703_reg_988[6 : 0] <= zext_ln703_fu_653_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_709_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        zext_ln70_reg_1031[6 : 0] <= zext_ln70_fu_718_p1[6 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln53_fu_600_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln59_1_fu_644_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln65_fu_675_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_709_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln75_fu_755_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state94 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state94 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_801_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state99 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state99 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_832_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state108 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state108 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_866_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state124 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state124 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln34_fu_896_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state134 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state134 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter15 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter49 == 1'b0) & (ap_enable_reg_pp3_iter48 == 1'b0) & (ap_enable_reg_pp3_iter47 == 1'b0) & (ap_enable_reg_pp3_iter46 == 1'b0) & (ap_enable_reg_pp3_iter45 == 1'b0) & (ap_enable_reg_pp3_iter44 == 1'b0) & (ap_enable_reg_pp3_iter43 == 1'b0) & (ap_enable_reg_pp3_iter42 == 1'b0) & (ap_enable_reg_pp3_iter41 == 1'b0) & (ap_enable_reg_pp3_iter40 == 1'b0) & (ap_enable_reg_pp3_iter39 == 1'b0) & (ap_enable_reg_pp3_iter38 == 1'b0) & (ap_enable_reg_pp3_iter37 == 1'b0) & (ap_enable_reg_pp3_iter36 == 1'b0) & (ap_enable_reg_pp3_iter35 == 1'b0) & (ap_enable_reg_pp3_iter34 == 1'b0) & (ap_enable_reg_pp3_iter33 == 1'b0) & (ap_enable_reg_pp3_iter32 == 1'b0) & (ap_enable_reg_pp3_iter31 == 1'b0) & (ap_enable_reg_pp3_iter30 == 1'b0) & (ap_enable_reg_pp3_iter29 == 1'b0) & (ap_enable_reg_pp3_iter28 == 1'b0) & (ap_enable_reg_pp3_iter27 == 1'b0) & (ap_enable_reg_pp3_iter26 == 1'b0) & (ap_enable_reg_pp3_iter25 == 1'b0) & (ap_enable_reg_pp3_iter24 == 1'b0) & (ap_enable_reg_pp3_iter23 == 1'b0) & (ap_enable_reg_pp3_iter22 == 1'b0) & (ap_enable_reg_pp3_iter21 == 1'b0) & (ap_enable_reg_pp3_iter20 == 1'b0) & (ap_enable_reg_pp3_iter19 == 1'b0) & (ap_enable_reg_pp3_iter18 == 1'b0) & (ap_enable_reg_pp3_iter17 == 1'b0) & (ap_enable_reg_pp3_iter16 == 1'b0) & (ap_enable_reg_pp3_iter14 == 1'b0) & (ap_enable_reg_pp3_iter13 == 1'b0) & (ap_enable_reg_pp3_iter12 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter3 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        dx_Addr_A_orig = zext_ln35_fu_905_p1;
    end else if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        dx_Addr_A_orig = zext_ln43_fu_841_p1;
    end else if (((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd1) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        dx_Addr_A_orig = dx_addr_2_reg_1067;
    end else if (((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        dx_Addr_A_orig = i_8_cast6_cast_reg_1085_pp4_iter1_reg;
    end else begin
        dx_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        dx_Din_A = gmem_addr_2_read_reg_1197;
    end else if (((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd1) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        dx_Din_A = add_ln703_fu_774_p2;
    end else if (((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        dx_Din_A = reg_590;
    end else begin
        dx_Din_A = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter2 == 1'b1)) | ((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)) | ((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter1 == 1'b1)) | ((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        dx_EN_A = 1'b1;
    end else begin
        dx_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((icmp_ln34_reg_1188_pp8_iter1_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter2 == 1'b1)) | ((icmp_ln76_reg_1081_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
        dx_WEN_A = 2'd3;
    end else begin
        dx_WEN_A = 2'd0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state127)) begin
            gmem_ARADDR = sext_ln34_fu_879_p1;
        end else if ((1'b1 == ap_CS_fsm_state117)) begin
            gmem_ARADDR = sext_ln31_fu_846_p1;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state127)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state117)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) | (gmem_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state107))) begin
        gmem_AWADDR = sext_ln42_fu_815_p1;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state98))) begin
        gmem_AWADDR = sext_ln39_fu_784_p1;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((gmem_BVALID == 1'b0) | (gmem_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state107)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state98)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state116)) | (~((gmem_BVALID == 1'b0) | (gmem_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state107)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln34_reg_1188 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln31_reg_1163 == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_1132_pp6_iter2_reg == 1'd0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0_01001))) begin
        gmem_WDATA = dx_load_reg_1141;
    end else if (((icmp_ln39_reg_1112_pp5_iter2_reg == 1'd0) & (ap_enable_reg_pp5_iter3 == 1'b1) & (1'b0 == ap_block_pp5_stage0_01001))) begin
        gmem_WDATA = reg_575;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln42_reg_1132_pp6_iter2_reg == 1'd0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)) | ((icmp_ln39_reg_1112_pp5_iter2_reg == 1'd0) & (ap_enable_reg_pp5_iter3 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state117))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state98))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state107))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln34_reg_1188 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0)) | ((1'b1 == ap_CS_fsm_pp7_stage0) & (icmp_ln31_reg_1163 == 1'd0) & (1'b0 == ap_block_pp7_stage0) & (ap_enable_reg_pp7_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln42_reg_1132_pp6_iter2_reg == 1'd0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0)) | ((icmp_ln39_reg_1112_pp5_iter2_reg == 1'd0) & (ap_enable_reg_pp5_iter3 == 1'b1) & (1'b0 == ap_block_pp5_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_551_p0 = dim_read_reg_915;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_551_p0 = dim;
    end else begin
        grp_fu_551_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        log_probs_V_address0 = zext_ln70_fu_718_p1;
    end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        log_probs_V_address0 = zext_ln66_fu_684_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        log_probs_V_address0 = zext_ln703_reg_988_pp1_iter1_reg;
    end else begin
        log_probs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        log_probs_V_ce0 = 1'b1;
    end else begin
        log_probs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_1_reg_984_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        log_probs_V_we0 = 1'b1;
    end else begin
        log_probs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        probs_V_address0 = i_8_cast6_cast_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        probs_V_address0 = y_read_reg_931;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter49 == 1'b1))) begin
        probs_V_address0 = zext_ln70_reg_1031_pp3_iter48_reg;
    end else begin
        probs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter49 == 1'b1)))) begin
        probs_V_ce0 = 1'b1;
    end else begin
        probs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_1027_pp3_iter48_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter49 == 1'b1))) begin
        probs_V_we0 = 1'b1;
    end else begin
        probs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (ap_enable_reg_pp7_iter2 == 1'b1))) begin
        x_Addr_A_orig = zext_ln32_fu_875_p1;
    end else if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        x_Addr_A_orig = zext_ln40_fu_810_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        x_Addr_A_orig = zext_ln703_fu_653_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        x_Addr_A_orig = zext_ln1494_fu_615_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_Addr_A_orig = 32'd0;
    end else begin
        x_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_EN_A = 1'b1;
    end else begin
        x_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1163_pp7_iter1_reg == 1'd0) & (1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1))) begin
        x_WEN_A = 2'd3;
    end else begin
        x_WEN_A = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (grp_fu_551_p2 == 1'd1) & (writetoddr_read_read_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ddrtobram_read_read_fu_164_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else if (((ap_start == 1'b1) & (grp_fu_551_p2 == 1'd0) & (writetoddr_read_read_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else if (((ap_start == 1'b1) & (grp_fu_551_p2 == 1'd1) & (writetoddr_read_read_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ddrtobram_read_read_fu_164_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else if (((ap_start == 1'b1) & (writetoddr_read_read_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln53_fu_600_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln53_fu_600_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((grp_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln59_1_fu_644_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln59_1_fu_644_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln65_fu_675_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter16 == 1'b1) & (ap_enable_reg_pp2_iter15 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter16 == 1'b1) & (ap_enable_reg_pp2_iter15 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((icmp_ln65_fu_675_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln69_fu_709_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter49 == 1'b1) & (ap_enable_reg_pp3_iter48 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln69_fu_709_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter49 == 1'b1) & (ap_enable_reg_pp3_iter48 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            if (((icmp_ln59_reg_975 == 1'd1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln75_fu_755_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((icmp_ln75_fu_755_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state98 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state98))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((icmp_ln39_fu_801_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) & ~((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((icmp_ln39_fu_801_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            if ((~((gmem_BVALID == 1'b0) | (gmem_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state107))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((icmp_ln42_fu_832_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0)) & ~((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter3 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((icmp_ln42_fu_832_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state117 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state117))) begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((icmp_ln31_fu_866_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((icmp_ln31_fu_866_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter1 == 1'b0)) | ((1'b0 == ap_block_pp7_stage0_subdone) & (ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state127 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_pp8_stage0;
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((icmp_ln34_fu_896_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone)) & ~((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter2 == 1'b1)) | ((icmp_ln34_fu_896_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_fu_860_p2 = (i_1_reg_485 + 31'd1);

assign add_ln34_fu_890_p2 = (i_4_reg_496 + 31'd1);

assign add_ln39_fu_795_p2 = (i_2_reg_463 + 31'd1);

assign add_ln42_fu_826_p2 = (i_5_reg_474 + 31'd1);

assign add_ln53_fu_605_p2 = (i_reg_386 + 31'd1);

assign add_ln59_fu_634_p2 = (i_3_reg_407 + 31'd1);

assign add_ln65_fu_665_p2 = (i_6_reg_418 + 31'd1);

assign add_ln69_fu_699_p2 = (i_7_reg_441 + 31'd1);

assign add_ln703_fu_774_p2 = ($signed(reg_590) + $signed(16'd57344));

assign add_ln75_fu_745_p2 = (i_8_reg_452 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd26];

assign ap_NS_fsm_state82 = ap_NS_fsm[32'd12];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((1'b1 == ap_block_state102_io) & (ap_enable_reg_pp5_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((1'b1 == ap_block_state102_io) & (ap_enable_reg_pp5_iter3 == 1'b1));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((1'b1 == ap_block_state111_io) & (ap_enable_reg_pp6_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((1'b1 == ap_block_state111_io) & (ap_enable_reg_pp6_iter3 == 1'b1));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln31_reg_1163 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp7_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln31_reg_1163 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1));
end

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln34_reg_1188 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln34_reg_1188 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

assign ap_block_state100_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state102_io = ((gmem_WREADY == 1'b0) & (icmp_ln39_reg_1112_pp5_iter2_reg == 1'd0));
end

assign ap_block_state102_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state111_io = ((gmem_WREADY == 1'b0) & (icmp_ln42_reg_1132_pp6_iter2_reg == 1'd0));
end

assign ap_block_state111_pp6_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state125_pp7_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln31_reg_1163 == 1'd0));
end

assign ap_block_state126_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state135_pp8_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln34_reg_1188 == 1'd0));
end

assign ap_block_state136_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp3_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp3_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp3_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp3_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp3_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp3_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp3_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp3_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp3_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp3_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp3_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp3_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp3_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp3_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp3_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp3_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp3_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp3_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp3_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp3_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp3_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp3_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp3_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp3_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp3_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp3_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp3_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp3_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp3_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp3_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp3_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp3_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp3_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp3_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp3_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp3_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp3_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ddrtobram_read_read_fu_164_p2 = ddrtobram;

assign dx_Addr_A = dx_Addr_A_orig << 32'd1;

assign dx_Clk_A = ap_clk;

assign dx_Rst_A = ap_rst_n_inv;

assign empty_74_fu_765_p1 = i_8_reg_452[6:0];

assign grp_exp_16_3_s_fu_529_ap_start = grp_exp_16_3_s_fu_529_ap_start_reg;

assign grp_fu_551_p2 = (($signed(grp_fu_551_p0) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign grp_fu_557_p4 = {{x_ddr_read_reg_943[31:1]}};

assign grp_fu_566_p4 = {{dx_ddr_read_reg_938[31:1]}};

assign grp_fu_731_p0 = {{reg_586}, {13'd0}};

assign grp_fu_731_p1 = sum_V_cast_reg_1017;

assign grp_log_16_3_s_fu_540_ap_start = grp_log_16_3_s_fu_540_ap_start_reg;

assign i_3_cast_fu_640_p1 = i_3_reg_407;

assign i_6_cast_fu_671_p1 = i_6_reg_418;

assign i_7_cast_fu_705_p1 = i_7_reg_441;

assign i_8_cast6_cast_fu_769_p1 = empty_74_fu_765_p1;

assign i_8_cast_fu_751_p1 = i_8_reg_452;

assign i_cast3_fu_596_p1 = i_reg_386;

assign icmp_ln1494_fu_620_p2 = (($signed(x_Dout_A) > $signed(max_V_1_reg_397)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_866_p2 = ((i_1_reg_485 == trunc_ln31_reg_1152) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_896_p2 = ((i_4_reg_496 == trunc_ln31_reg_1152) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_801_p2 = ((i_2_reg_463 == trunc_ln39_reg_1095) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_832_p2 = ((i_5_reg_474 == trunc_ln39_reg_1095) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_600_p2 = ((i_cast3_fu_596_p1 < dim_read_reg_915) ? 1'b1 : 1'b0);

assign icmp_ln59_1_fu_644_p2 = ((i_3_cast_fu_640_p1 == dim_read_reg_915) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_675_p2 = ((i_6_cast_fu_671_p1 == dim_read_reg_915) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_709_p2 = ((i_7_cast_fu_705_p1 == dim_read_reg_915) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_755_p2 = ((i_8_cast_fu_751_p1 == dim_read_reg_915) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_760_p2 = ((i_8_cast_fu_751_p1 == y_read_reg_931) ? 1'b1 : 1'b0);

assign log_probs_V_d0 = (x_Dout_A - max_V_1_reg_397);

assign loss_V_fu_740_p2 = (16'd0 - op2_V_1_reg_1056);

assign max_V_2_fu_626_p3 = ((icmp_ln1494_fu_620_p2[0:0] == 1'b1) ? x_Dout_A : max_V_1_reg_397);

assign probs_V_d0 = sdiv_ln1148_reg_1046[15:0];

assign sext_ln31_fu_846_p1 = $signed(grp_fu_557_p4);

assign sext_ln34_fu_879_p1 = $signed(grp_fu_566_p4);

assign sext_ln39_fu_784_p1 = $signed(grp_fu_557_p4);

assign sext_ln42_fu_815_p1 = $signed(grp_fu_566_p4);

assign sum_V_1_fu_689_p2 = ($signed(reg_586) + $signed(sum_V_reg_429));

assign sum_V_cast_fu_695_p1 = sum_V_reg_429;

assign trunc_ln1494_fu_611_p1 = i_reg_386[6:0];

assign trunc_ln31_fu_857_p1 = dim_read_reg_915[30:0];

assign trunc_ln32_fu_871_p1 = i_1_reg_485[6:0];

assign trunc_ln35_fu_901_p1 = i_4_reg_496[6:0];

assign trunc_ln39_fu_781_p1 = dim_read_reg_915[30:0];

assign trunc_ln40_fu_806_p1 = i_2_reg_463[6:0];

assign trunc_ln43_fu_837_p1 = i_5_reg_474[6:0];

assign trunc_ln66_fu_680_p1 = i_6_reg_418[6:0];

assign trunc_ln703_fu_649_p1 = i_3_reg_407[6:0];

assign trunc_ln70_fu_714_p1 = i_7_reg_441[6:0];

assign writetoddr_read_read_fu_170_p2 = writetoddr;

assign x_Addr_A = x_Addr_A_orig << 32'd1;

assign x_Clk_A = ap_clk;

assign x_Din_A = gmem_addr_read_reg_1172;

assign x_Rst_A = ap_rst_n_inv;

assign zext_ln1494_fu_615_p1 = trunc_ln1494_fu_611_p1;

assign zext_ln32_fu_875_p1 = trunc_ln32_reg_1167_pp7_iter1_reg;

assign zext_ln35_fu_905_p1 = trunc_ln35_reg_1192_pp8_iter1_reg;

assign zext_ln40_fu_810_p1 = trunc_ln40_fu_806_p1;

assign zext_ln43_fu_841_p1 = trunc_ln43_fu_837_p1;

assign zext_ln66_fu_684_p1 = trunc_ln66_fu_680_p1;

assign zext_ln703_fu_653_p1 = trunc_ln703_fu_649_p1;

assign zext_ln70_fu_718_p1 = trunc_ln70_fu_714_p1;

always @ (posedge ap_clk) begin
    zext_ln703_reg_988[31:7] <= 25'b0000000000000000000000000;
    zext_ln703_reg_988_pp1_iter1_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter1_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter2_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter3_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter4_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter5_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter6_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter7_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter8_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter9_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter10_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter11_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter12_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter13_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter14_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter15_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter16_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter17_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter18_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter19_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter20_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter21_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter22_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter23_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter24_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter25_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter26_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter27_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter28_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter29_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter30_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter31_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter32_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter33_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter34_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter35_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter36_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter37_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter38_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter39_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter40_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter41_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter42_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter43_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter44_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter45_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter46_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter47_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln70_reg_1031_pp3_iter48_reg[31:7] <= 25'b0000000000000000000000000;
    i_8_cast6_cast_reg_1085[31:7] <= 25'b0000000000000000000000000;
    i_8_cast6_cast_reg_1085_pp4_iter1_reg[31:7] <= 25'b0000000000000000000000000;
end

endmodule //loss_derivative
