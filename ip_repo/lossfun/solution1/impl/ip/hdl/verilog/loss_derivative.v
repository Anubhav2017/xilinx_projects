// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loss_derivative_loss_derivative,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=9383,HLS_SYN_LUT=8503,HLS_VERSION=2020_2}" *)

module loss_derivative (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_pp0_stage0 = 46'd256;
parameter    ap_ST_fsm_state12 = 46'd512;
parameter    ap_ST_fsm_state13 = 46'd1024;
parameter    ap_ST_fsm_state14 = 46'd2048;
parameter    ap_ST_fsm_state15 = 46'd4096;
parameter    ap_ST_fsm_state16 = 46'd8192;
parameter    ap_ST_fsm_state17 = 46'd16384;
parameter    ap_ST_fsm_state18 = 46'd32768;
parameter    ap_ST_fsm_state19 = 46'd65536;
parameter    ap_ST_fsm_state20 = 46'd131072;
parameter    ap_ST_fsm_pp1_stage0 = 46'd262144;
parameter    ap_ST_fsm_state23 = 46'd524288;
parameter    ap_ST_fsm_pp2_stage0 = 46'd1048576;
parameter    ap_ST_fsm_state27 = 46'd2097152;
parameter    ap_ST_fsm_pp3_stage0 = 46'd4194304;
parameter    ap_ST_fsm_state37 = 46'd8388608;
parameter    ap_ST_fsm_pp4_stage0 = 46'd16777216;
parameter    ap_ST_fsm_state74 = 46'd33554432;
parameter    ap_ST_fsm_state75 = 46'd67108864;
parameter    ap_ST_fsm_state76 = 46'd134217728;
parameter    ap_ST_fsm_state77 = 46'd268435456;
parameter    ap_ST_fsm_state78 = 46'd536870912;
parameter    ap_ST_fsm_state79 = 46'd1073741824;
parameter    ap_ST_fsm_state80 = 46'd2147483648;
parameter    ap_ST_fsm_state81 = 46'd4294967296;
parameter    ap_ST_fsm_state82 = 46'd8589934592;
parameter    ap_ST_fsm_state83 = 46'd17179869184;
parameter    ap_ST_fsm_state84 = 46'd34359738368;
parameter    ap_ST_fsm_state85 = 46'd68719476736;
parameter    ap_ST_fsm_state86 = 46'd137438953472;
parameter    ap_ST_fsm_pp5_stage0 = 46'd274877906944;
parameter    ap_ST_fsm_state112 = 46'd549755813888;
parameter    ap_ST_fsm_pp6_stage0 = 46'd1099511627776;
parameter    ap_ST_fsm_state116 = 46'd2199023255552;
parameter    ap_ST_fsm_state117 = 46'd4398046511104;
parameter    ap_ST_fsm_state118 = 46'd8796093022208;
parameter    ap_ST_fsm_state119 = 46'd17592186044416;
parameter    ap_ST_fsm_state120 = 46'd35184372088832;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] dx;
wire   [31:0] y;
wire   [31:0] x_size;
wire   [31:0] N;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln20_reg_804;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond4729_reg_825;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state112;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp6_stage0;
reg   [0:0] exitcond2_reg_1018;
reg   [0:0] exitcond2_reg_1018_pp6_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [62:0] loop_index451_reg_323;
reg   [31:0] i_reg_334;
reg   [15:0] max_V_1_reg_345;
reg   [30:0] i_1_reg_355;
reg   [30:0] i_2_reg_366;
reg  signed [15:0] sum_V_reg_377;
reg   [30:0] i_3_reg_389;
reg   [31:0] i_4_reg_400;
reg   [62:0] loop_index_reg_411;
wire   [15:0] log_probs_V_q0;
reg   [15:0] reg_453;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_state28_pp3_stage0_iter0;
wire    ap_block_state29_pp3_stage0_iter1;
wire    ap_block_state30_pp3_stage0_iter2;
wire    ap_block_state31_pp3_stage0_iter3;
wire    ap_block_state32_pp3_stage0_iter4;
wire    ap_block_state33_pp3_stage0_iter5;
wire    ap_block_state34_pp3_stage0_iter6;
wire    ap_block_state35_pp3_stage0_iter7;
wire    ap_block_state36_pp3_stage0_iter8;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln38_reg_902;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state38_pp4_stage0_iter0;
wire    ap_block_state39_pp4_stage0_iter1;
wire    ap_block_state40_pp4_stage0_iter2;
wire    ap_block_state41_pp4_stage0_iter3;
wire    ap_block_state42_pp4_stage0_iter4;
wire    ap_block_state43_pp4_stage0_iter5;
wire    ap_block_state44_pp4_stage0_iter6;
wire    ap_block_state45_pp4_stage0_iter7;
wire    ap_block_state46_pp4_stage0_iter8;
wire    ap_block_state47_pp4_stage0_iter9;
wire    ap_block_state48_pp4_stage0_iter10;
wire    ap_block_state49_pp4_stage0_iter11;
wire    ap_block_state50_pp4_stage0_iter12;
wire    ap_block_state51_pp4_stage0_iter13;
wire    ap_block_state52_pp4_stage0_iter14;
wire    ap_block_state53_pp4_stage0_iter15;
wire    ap_block_state54_pp4_stage0_iter16;
wire    ap_block_state55_pp4_stage0_iter17;
wire    ap_block_state56_pp4_stage0_iter18;
wire    ap_block_state57_pp4_stage0_iter19;
wire    ap_block_state58_pp4_stage0_iter20;
wire    ap_block_state59_pp4_stage0_iter21;
wire    ap_block_state60_pp4_stage0_iter22;
wire    ap_block_state61_pp4_stage0_iter23;
wire    ap_block_state62_pp4_stage0_iter24;
wire    ap_block_state63_pp4_stage0_iter25;
wire    ap_block_state64_pp4_stage0_iter26;
wire    ap_block_state65_pp4_stage0_iter27;
wire    ap_block_state66_pp4_stage0_iter28;
wire    ap_block_state67_pp4_stage0_iter29;
wire    ap_block_state68_pp4_stage0_iter30;
wire    ap_block_state69_pp4_stage0_iter31;
wire    ap_block_state70_pp4_stage0_iter32;
wire    ap_block_state71_pp4_stage0_iter33;
wire    ap_block_state72_pp4_stage0_iter34;
wire    ap_block_state73_pp4_stage0_iter35;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] icmp_ln42_reg_926;
wire   [15:0] grp_exp_16_9_s_fu_433_ap_return;
reg   [15:0] reg_458;
reg    ap_enable_reg_pp3_iter7;
reg   [0:0] icmp_ln38_reg_902_pp3_iter6_reg;
reg    ap_enable_reg_pp4_iter7;
reg   [0:0] icmp_ln42_reg_926_pp4_iter6_reg;
wire   [15:0] probs_V_q0;
reg   [15:0] reg_462;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_state87_pp5_stage0_iter0;
wire    ap_block_state88_pp5_stage0_iter1;
wire    ap_block_state89_pp5_stage0_iter2;
wire    ap_block_state90_pp5_stage0_iter3;
wire    ap_block_state91_pp5_stage0_iter4;
wire    ap_block_state92_pp5_stage0_iter5;
wire    ap_block_state93_pp5_stage0_iter6;
wire    ap_block_state94_pp5_stage0_iter7;
wire    ap_block_state95_pp5_stage0_iter8;
wire    ap_block_state96_pp5_stage0_iter9;
wire    ap_block_state97_pp5_stage0_iter10;
wire    ap_block_state98_pp5_stage0_iter11;
wire    ap_block_state99_pp5_stage0_iter12;
wire    ap_block_state100_pp5_stage0_iter13;
wire    ap_block_state101_pp5_stage0_iter14;
wire    ap_block_state102_pp5_stage0_iter15;
wire    ap_block_state103_pp5_stage0_iter16;
wire    ap_block_state104_pp5_stage0_iter17;
wire    ap_block_state105_pp5_stage0_iter18;
wire    ap_block_state106_pp5_stage0_iter19;
wire    ap_block_state107_pp5_stage0_iter20;
wire    ap_block_state108_pp5_stage0_iter21;
wire    ap_block_state109_pp5_stage0_iter22;
wire    ap_block_state110_pp5_stage0_iter23;
wire    ap_block_state111_pp5_stage0_iter24;
wire    ap_block_pp5_stage0_11001;
reg   [31:0] N_read_reg_768;
reg   [31:0] x_size_read_reg_774;
reg   [31:0] y_read_reg_787;
reg   [31:0] dx_read_reg_794;
reg   [31:0] x_read_reg_799;
wire   [0:0] icmp_ln20_fu_467_p2;
wire  signed [62:0] sext_ln20_fu_473_p1;
reg  signed [62:0] sext_ln20_reg_808;
wire   [62:0] empty_42_fu_487_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond4729_fu_493_p2;
reg   [0:0] exitcond4729_reg_825_pp0_iter1_reg;
wire   [6:0] empty_44_fu_498_p1;
reg   [6:0] empty_44_reg_829;
reg   [6:0] empty_44_reg_829_pp0_iter1_reg;
reg   [15:0] gmem_addr_read_reg_834;
reg   [15:0] max_V_reg_845;
wire   [0:0] icmp_ln26_fu_517_p2;
reg   [0:0] icmp_ln26_reg_850;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state21_pp1_stage0_iter0;
wire    ap_block_state22_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [31:0] add_ln26_fu_522_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] max_V_2_fu_543_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [0:0] icmp_ln32_fu_551_p2;
wire    ap_CS_fsm_state23;
wire   [30:0] add_ln32_fu_556_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state24_pp2_stage0_iter0;
wire    ap_block_state25_pp2_stage0_iter1;
wire    ap_block_state26_pp2_stage0_iter2;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln32_1_fu_566_p2;
reg   [0:0] icmp_ln32_1_reg_878;
reg   [0:0] icmp_ln32_1_reg_878_pp2_iter1_reg;
wire   [31:0] zext_ln703_fu_575_p1;
reg   [31:0] zext_ln703_reg_882;
reg   [31:0] zext_ln703_reg_882_pp2_iter1_reg;
wire   [15:0] sub_ln703_fu_580_p2;
reg   [15:0] sub_ln703_reg_892;
wire   [30:0] add_ln38_fu_586_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln38_fu_596_p2;
reg   [0:0] icmp_ln38_reg_902_pp3_iter1_reg;
reg   [0:0] icmp_ln38_reg_902_pp3_iter2_reg;
reg   [0:0] icmp_ln38_reg_902_pp3_iter3_reg;
reg   [0:0] icmp_ln38_reg_902_pp3_iter4_reg;
reg   [0:0] icmp_ln38_reg_902_pp3_iter5_reg;
reg   [0:0] icmp_ln38_reg_902_pp3_iter7_reg;
wire   [15:0] sum_V_1_fu_610_p2;
reg    ap_enable_reg_pp3_iter8;
wire  signed [22:0] sum_V_cast_fu_616_p1;
reg  signed [22:0] sum_V_cast_reg_916;
wire    ap_CS_fsm_state37;
wire   [30:0] add_ln42_fu_620_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln42_fu_630_p2;
reg   [0:0] icmp_ln42_reg_926_pp4_iter1_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter2_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter3_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter4_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter5_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter7_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter8_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter9_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter10_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter11_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter12_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter13_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter14_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter15_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter16_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter17_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter18_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter19_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter20_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter21_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter22_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter23_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter24_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter25_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter26_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter27_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter28_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter29_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter30_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter31_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter32_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter33_reg;
reg   [0:0] icmp_ln42_reg_926_pp4_iter34_reg;
wire   [31:0] zext_ln43_fu_639_p1;
reg   [31:0] zext_ln43_reg_930;
reg   [31:0] zext_ln43_reg_930_pp4_iter1_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter2_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter3_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter4_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter5_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter6_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter7_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter8_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter9_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter10_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter11_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter12_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter13_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter14_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter15_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter16_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter17_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter18_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter19_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter20_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter21_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter22_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter23_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter24_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter25_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter26_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter27_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter28_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter29_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter30_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter31_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter32_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter33_reg;
reg   [31:0] zext_ln43_reg_930_pp4_iter34_reg;
wire   [15:0] grp_fu_652_p2;
reg   [15:0] sdiv_ln1148_reg_945;
wire    ap_CS_fsm_state74;
wire   [15:0] loss_V_fu_661_p2;
reg   [15:0] loss_V_reg_955;
wire    ap_CS_fsm_state86;
reg   [6:0] dxbuff_V_addr_reg_959;
wire   [31:0] add_ln48_fu_667_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [0:0] icmp_ln48_fu_673_p2;
wire   [0:0] icmp_ln49_fu_678_p2;
reg   [0:0] icmp_ln49_reg_973;
reg   [0:0] icmp_ln49_reg_973_pp5_iter1_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter2_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter3_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter4_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter5_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter6_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter7_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter8_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter9_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter10_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter11_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter12_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter13_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter14_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter15_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter16_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter17_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter18_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter19_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter20_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter21_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter22_reg;
reg   [0:0] icmp_ln49_reg_973_pp5_iter23_reg;
wire   [31:0] i_4_cast_cast_fu_687_p1;
reg   [31:0] i_4_cast_cast_reg_977;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter1_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter2_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter3_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter4_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter5_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter6_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter7_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter8_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter9_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter10_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter11_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter12_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter13_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter14_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter15_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter16_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter17_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter18_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter19_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter20_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter21_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter22_reg;
reg   [31:0] i_4_cast_cast_reg_977_pp5_iter23_reg;
wire   [15:0] grp_fu_696_p2;
reg   [15:0] sdiv_ln1148_2_reg_997;
reg   [15:0] sdiv_ln1148_2_reg_997_pp5_iter23_reg;
wire   [15:0] grp_fu_715_p2;
reg   [15:0] sdiv_ln1148_1_reg_1002;
wire   [62:0] empty_50_fu_748_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state113_pp6_stage0_iter0;
wire    ap_block_state114_pp6_stage0_iter1;
wire    ap_block_state115_pp6_stage0_iter2;
reg    ap_block_state115_io;
reg    ap_block_pp6_stage0_11001;
wire   [0:0] exitcond2_fu_754_p2;
wire   [15:0] dxbuff_V_q0;
reg   [15:0] dxbuff_V_load_reg_1027;
reg    ap_enable_reg_pp6_iter1;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state20;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state21;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state24;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state27;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state28;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state38;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter6;
reg    ap_enable_reg_pp4_iter8;
reg    ap_enable_reg_pp4_iter9;
reg    ap_enable_reg_pp4_iter10;
reg    ap_enable_reg_pp4_iter11;
reg    ap_enable_reg_pp4_iter12;
reg    ap_enable_reg_pp4_iter13;
reg    ap_enable_reg_pp4_iter14;
reg    ap_enable_reg_pp4_iter15;
reg    ap_enable_reg_pp4_iter16;
reg    ap_enable_reg_pp4_iter17;
reg    ap_enable_reg_pp4_iter18;
reg    ap_enable_reg_pp4_iter19;
reg    ap_enable_reg_pp4_iter20;
reg    ap_enable_reg_pp4_iter21;
reg    ap_enable_reg_pp4_iter22;
reg    ap_enable_reg_pp4_iter23;
reg    ap_enable_reg_pp4_iter24;
reg    ap_enable_reg_pp4_iter25;
reg    ap_enable_reg_pp4_iter26;
reg    ap_enable_reg_pp4_iter27;
reg    ap_enable_reg_pp4_iter28;
reg    ap_enable_reg_pp4_iter29;
reg    ap_enable_reg_pp4_iter30;
reg    ap_enable_reg_pp4_iter31;
reg    ap_enable_reg_pp4_iter32;
reg    ap_enable_reg_pp4_iter33;
reg    ap_enable_reg_pp4_iter34;
reg    ap_enable_reg_pp4_iter35;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state87;
reg    ap_enable_reg_pp5_iter2;
reg    ap_enable_reg_pp5_iter3;
reg    ap_enable_reg_pp5_iter4;
reg    ap_enable_reg_pp5_iter5;
reg    ap_enable_reg_pp5_iter6;
reg    ap_enable_reg_pp5_iter7;
reg    ap_enable_reg_pp5_iter8;
reg    ap_enable_reg_pp5_iter9;
reg    ap_enable_reg_pp5_iter10;
reg    ap_enable_reg_pp5_iter11;
reg    ap_enable_reg_pp5_iter12;
reg    ap_enable_reg_pp5_iter13;
reg    ap_enable_reg_pp5_iter14;
reg    ap_enable_reg_pp5_iter15;
reg    ap_enable_reg_pp5_iter16;
reg    ap_enable_reg_pp5_iter17;
reg    ap_enable_reg_pp5_iter18;
reg    ap_enable_reg_pp5_iter19;
reg    ap_enable_reg_pp5_iter20;
reg    ap_enable_reg_pp5_iter21;
reg    ap_enable_reg_pp5_iter22;
reg    ap_enable_reg_pp5_iter23;
reg    ap_enable_reg_pp5_iter24;
reg    ap_block_state112_io;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state113;
reg   [6:0] log_probs_V_address0;
reg    log_probs_V_ce0;
reg    log_probs_V_we0;
reg   [6:0] probs_V_address0;
reg    probs_V_ce0;
reg    probs_V_we0;
wire   [15:0] probs_V_d0;
reg   [6:0] xbuff_V_address0;
reg    xbuff_V_ce0;
reg    xbuff_V_we0;
wire   [15:0] xbuff_V_q0;
reg   [6:0] dxbuff_V_address0;
reg    dxbuff_V_ce0;
reg    dxbuff_V_we0;
reg   [15:0] dxbuff_V_d0;
wire    grp_log_16_9_s_fu_422_ap_start;
wire    grp_log_16_9_s_fu_422_ap_done;
wire    grp_log_16_9_s_fu_422_ap_idle;
wire    grp_log_16_9_s_fu_422_ap_ready;
wire   [15:0] grp_log_16_9_s_fu_422_ap_return;
wire  signed [28:0] grp_log_16_9_s_fu_422_grp_fu_1032_p_din0;
wire   [5:0] grp_log_16_9_s_fu_422_grp_fu_1032_p_din1;
wire   [28:0] grp_log_16_9_s_fu_422_grp_fu_1032_p_dout0;
wire    grp_log_16_9_s_fu_422_grp_fu_1032_p_ce;
wire    grp_exp_16_9_s_fu_433_ap_start;
wire    grp_exp_16_9_s_fu_433_ap_done;
wire    grp_exp_16_9_s_fu_433_ap_idle;
wire    grp_exp_16_9_s_fu_433_ap_ready;
wire    ap_block_pp1_stage0;
reg    grp_log_16_9_s_fu_422_ap_start_reg;
reg   [45:0] ap_NS_fsm;
wire    ap_NS_fsm_state76;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
reg    grp_exp_16_9_s_fu_433_ap_start_reg;
wire    ap_block_pp3_stage0;
wire    ap_block_pp4_stage0;
wire   [31:0] loop_index451_cast_cast_fu_502_p1;
wire   [31:0] zext_ln1494_fu_532_p1;
wire    ap_block_pp2_stage0;
wire   [31:0] zext_ln39_fu_605_p1;
wire    ap_block_pp5_stage0;
wire   [31:0] loop_index_cast_cast_fu_763_p1;
wire  signed [31:0] p_cast_cast_fu_476_p1;
wire  signed [31:0] sext_ln25_fu_506_p1;
wire   [31:0] p_cast5_cast_fu_737_p1;
reg    ap_block_state2_io;
reg    ap_block_state120;
wire    ap_block_pp6_stage0_01001;
wire   [15:0] trunc_ln703_3_fu_720_p1;
wire   [15:0] trunc_ln703_2_fu_724_p1;
wire  signed [31:0] icmp_ln20_fu_467_p0;
wire   [30:0] grp_fu_444_p4;
wire   [6:0] trunc_ln1494_fu_528_p1;
wire   [0:0] icmp_ln1494_fu_537_p2;
wire   [31:0] i_1_cast_fu_562_p1;
wire   [6:0] trunc_ln703_fu_571_p1;
wire   [31:0] i_2_cast_fu_592_p1;
wire   [6:0] trunc_ln39_fu_601_p1;
wire   [31:0] i_3_cast_fu_626_p1;
wire   [6:0] trunc_ln43_fu_635_p1;
wire   [22:0] grp_fu_652_p0;
wire  signed [15:0] grp_fu_652_p1;
wire   [6:0] empty_48_fu_683_p1;
wire  signed [15:0] sext_ln1148_1_fu_692_p0;
wire  signed [16:0] grp_fu_696_p0;
wire  signed [15:0] sext_ln2221_fu_701_p0;
wire  signed [16:0] sext_ln2221_fu_701_p1;
wire   [16:0] add_ln1148_fu_705_p2;
wire  signed [17:0] grp_fu_715_p0;
wire   [30:0] p_cast5_fu_728_p4;
wire   [6:0] empty_52_fu_759_p1;
wire   [28:0] grp_fu_1032_p2;
wire  signed [28:0] grp_fu_1032_p0;
wire   [5:0] grp_fu_1032_p1;
reg    grp_fu_1032_ce;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
wire    ap_ce_reg;
wire   [15:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter8 = 1'b0;
#0 ap_enable_reg_pp4_iter9 = 1'b0;
#0 ap_enable_reg_pp4_iter10 = 1'b0;
#0 ap_enable_reg_pp4_iter11 = 1'b0;
#0 ap_enable_reg_pp4_iter12 = 1'b0;
#0 ap_enable_reg_pp4_iter13 = 1'b0;
#0 ap_enable_reg_pp4_iter14 = 1'b0;
#0 ap_enable_reg_pp4_iter15 = 1'b0;
#0 ap_enable_reg_pp4_iter16 = 1'b0;
#0 ap_enable_reg_pp4_iter17 = 1'b0;
#0 ap_enable_reg_pp4_iter18 = 1'b0;
#0 ap_enable_reg_pp4_iter19 = 1'b0;
#0 ap_enable_reg_pp4_iter20 = 1'b0;
#0 ap_enable_reg_pp4_iter21 = 1'b0;
#0 ap_enable_reg_pp4_iter22 = 1'b0;
#0 ap_enable_reg_pp4_iter23 = 1'b0;
#0 ap_enable_reg_pp4_iter24 = 1'b0;
#0 ap_enable_reg_pp4_iter25 = 1'b0;
#0 ap_enable_reg_pp4_iter26 = 1'b0;
#0 ap_enable_reg_pp4_iter27 = 1'b0;
#0 ap_enable_reg_pp4_iter28 = 1'b0;
#0 ap_enable_reg_pp4_iter29 = 1'b0;
#0 ap_enable_reg_pp4_iter30 = 1'b0;
#0 ap_enable_reg_pp4_iter31 = 1'b0;
#0 ap_enable_reg_pp4_iter32 = 1'b0;
#0 ap_enable_reg_pp4_iter33 = 1'b0;
#0 ap_enable_reg_pp4_iter34 = 1'b0;
#0 ap_enable_reg_pp4_iter35 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter3 = 1'b0;
#0 ap_enable_reg_pp5_iter4 = 1'b0;
#0 ap_enable_reg_pp5_iter5 = 1'b0;
#0 ap_enable_reg_pp5_iter6 = 1'b0;
#0 ap_enable_reg_pp5_iter7 = 1'b0;
#0 ap_enable_reg_pp5_iter8 = 1'b0;
#0 ap_enable_reg_pp5_iter9 = 1'b0;
#0 ap_enable_reg_pp5_iter10 = 1'b0;
#0 ap_enable_reg_pp5_iter11 = 1'b0;
#0 ap_enable_reg_pp5_iter12 = 1'b0;
#0 ap_enable_reg_pp5_iter13 = 1'b0;
#0 ap_enable_reg_pp5_iter14 = 1'b0;
#0 ap_enable_reg_pp5_iter15 = 1'b0;
#0 ap_enable_reg_pp5_iter16 = 1'b0;
#0 ap_enable_reg_pp5_iter17 = 1'b0;
#0 ap_enable_reg_pp5_iter18 = 1'b0;
#0 ap_enable_reg_pp5_iter19 = 1'b0;
#0 ap_enable_reg_pp5_iter20 = 1'b0;
#0 ap_enable_reg_pp5_iter21 = 1'b0;
#0 ap_enable_reg_pp5_iter22 = 1'b0;
#0 ap_enable_reg_pp5_iter23 = 1'b0;
#0 ap_enable_reg_pp5_iter24 = 1'b0;
#0 grp_log_16_9_s_fu_422_ap_start_reg = 1'b0;
#0 grp_exp_16_9_s_fu_433_ap_start_reg = 1'b0;
end

loss_derivative_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(loss_V_reg_955),
    .x(x),
    .dx(dx),
    .y(y),
    .x_size(x_size),
    .N(N)
);

loss_derivative_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(p_cast5_cast_fu_737_p1),
    .I_AWID(1'd0),
    .I_AWLEN(x_size_read_reg_774),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(dxbuff_V_load_reg_1027),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

loss_derivative_log_probs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
log_probs_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(log_probs_V_address0),
    .ce0(log_probs_V_ce0),
    .we0(log_probs_V_we0),
    .d0(sub_ln703_reg_892),
    .q0(log_probs_V_q0)
);

loss_derivative_log_probs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
probs_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(probs_V_address0),
    .ce0(probs_V_ce0),
    .we0(probs_V_we0),
    .d0(probs_V_d0),
    .q0(probs_V_q0)
);

loss_derivative_log_probs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
xbuff_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xbuff_V_address0),
    .ce0(xbuff_V_ce0),
    .we0(xbuff_V_we0),
    .d0(gmem_addr_read_reg_834),
    .q0(xbuff_V_q0)
);

loss_derivative_log_probs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
dxbuff_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dxbuff_V_address0),
    .ce0(dxbuff_V_ce0),
    .we0(dxbuff_V_we0),
    .d0(dxbuff_V_d0),
    .q0(dxbuff_V_q0)
);

loss_derivative_log_16_9_s grp_log_16_9_s_fu_422(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_log_16_9_s_fu_422_ap_start),
    .ap_done(grp_log_16_9_s_fu_422_ap_done),
    .ap_idle(grp_log_16_9_s_fu_422_ap_idle),
    .ap_ready(grp_log_16_9_s_fu_422_ap_ready),
    .x(reg_462),
    .ap_return(grp_log_16_9_s_fu_422_ap_return),
    .grp_fu_1032_p_din0(grp_log_16_9_s_fu_422_grp_fu_1032_p_din0),
    .grp_fu_1032_p_din1(grp_log_16_9_s_fu_422_grp_fu_1032_p_din1),
    .grp_fu_1032_p_dout0(grp_log_16_9_s_fu_422_grp_fu_1032_p_dout0),
    .grp_fu_1032_p_ce(grp_log_16_9_s_fu_422_grp_fu_1032_p_ce)
);

loss_derivative_exp_16_9_s grp_exp_16_9_s_fu_433(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_exp_16_9_s_fu_433_ap_start),
    .ap_done(grp_exp_16_9_s_fu_433_ap_done),
    .ap_idle(grp_exp_16_9_s_fu_433_ap_idle),
    .ap_ready(grp_exp_16_9_s_fu_433_ap_ready),
    .ap_ce(1'b1),
    .x(reg_453),
    .ap_return(grp_exp_16_9_s_fu_433_ap_return)
);

loss_derivative_sdiv_23ns_16s_16_27_1 #(
    .ID( 1 ),
    .NUM_STAGE( 27 ),
    .din0_WIDTH( 23 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
sdiv_23ns_16s_16_27_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_652_p0),
    .din1(grp_fu_652_p1),
    .ce(1'b1),
    .dout(grp_fu_652_p2)
);

loss_derivative_sdiv_17s_32ns_16_21_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
sdiv_17s_32ns_16_21_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_696_p0),
    .din1(N_read_reg_768),
    .ce(1'b1),
    .dout(grp_fu_696_p2)
);

loss_derivative_sdiv_18s_32ns_16_22_1 #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
sdiv_18s_32ns_16_22_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_715_p0),
    .din1(N_read_reg_768),
    .ce(1'b1),
    .dout(grp_fu_715_p2)
);

loss_derivative_mul_29s_6ns_29_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 29 ))
mul_29s_6ns_29_2_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1032_p0),
    .din1(grp_fu_1032_p1),
    .ce(grp_fu_1032_ce),
    .dout(grp_fu_1032_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state21) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state21);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((icmp_ln32_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state24)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state24);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((icmp_ln32_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state28) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state28)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state28);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            ap_enable_reg_pp3_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state38) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state38)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter14 <= ap_enable_reg_pp4_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter15 <= ap_enable_reg_pp4_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter16 <= ap_enable_reg_pp4_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter17 <= ap_enable_reg_pp4_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter18 <= ap_enable_reg_pp4_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter19 <= ap_enable_reg_pp4_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter20 <= ap_enable_reg_pp4_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter21 <= ap_enable_reg_pp4_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter22 <= ap_enable_reg_pp4_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter23 <= ap_enable_reg_pp4_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter24 <= ap_enable_reg_pp4_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter25 <= ap_enable_reg_pp4_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter26 <= ap_enable_reg_pp4_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter27 <= ap_enable_reg_pp4_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter28 <= ap_enable_reg_pp4_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter29 <= ap_enable_reg_pp4_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter30 <= ap_enable_reg_pp4_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter31 <= ap_enable_reg_pp4_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter32 <= ap_enable_reg_pp4_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter33 <= ap_enable_reg_pp4_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter34 <= ap_enable_reg_pp4_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter35 <= ap_enable_reg_pp4_iter34;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp4_iter35 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state87) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state86)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state87)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state87);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter10 <= ap_enable_reg_pp5_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter11 <= ap_enable_reg_pp5_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter12 <= ap_enable_reg_pp5_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter13 <= ap_enable_reg_pp5_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter14 <= ap_enable_reg_pp5_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter15 <= ap_enable_reg_pp5_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter16 <= ap_enable_reg_pp5_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter17 <= ap_enable_reg_pp5_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter18 <= ap_enable_reg_pp5_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter19 <= ap_enable_reg_pp5_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter20 <= ap_enable_reg_pp5_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter21 <= ap_enable_reg_pp5_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter22 <= ap_enable_reg_pp5_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter23 <= ap_enable_reg_pp5_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter24 <= ap_enable_reg_pp5_iter23;
        end else if ((1'b1 == ap_CS_fsm_state86)) begin
            ap_enable_reg_pp5_iter24 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter3 <= ap_enable_reg_pp5_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter4 <= ap_enable_reg_pp5_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter5 <= ap_enable_reg_pp5_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter6 <= ap_enable_reg_pp5_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter7 <= ap_enable_reg_pp5_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter8 <= ap_enable_reg_pp5_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter9 <= ap_enable_reg_pp5_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state113) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state112) & (1'b0 == ap_block_state112_io) & (icmp_ln20_reg_804 == 1'd1))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state113)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state113);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if (((1'b1 == ap_CS_fsm_state112) & (1'b0 == ap_block_state112_io) & (icmp_ln20_reg_804 == 1'd1))) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_exp_16_9_s_fu_433_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln42_reg_926 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln38_reg_902 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
            grp_exp_16_9_s_fu_433_ap_start_reg <= 1'b1;
        end else if ((grp_exp_16_9_s_fu_433_ap_ready == 1'b1)) begin
            grp_exp_16_9_s_fu_433_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_log_16_9_s_fu_422_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state75) & (1'b1 == ap_NS_fsm_state76))) begin
            grp_log_16_9_s_fu_422_ap_start_reg <= 1'b1;
        end else if ((grp_log_16_9_s_fu_422_ap_ready == 1'b1)) begin
            grp_log_16_9_s_fu_422_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
        i_1_reg_355 <= 31'd0;
    end else if (((icmp_ln32_1_fu_566_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_1_reg_355 <= add_ln32_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_2_reg_366 <= 31'd0;
    end else if (((icmp_ln38_fu_596_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_2_reg_366 <= add_ln38_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_3_reg_389 <= 31'd0;
    end else if (((icmp_ln42_fu_630_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_3_reg_389 <= add_ln42_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_673_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_4_reg_400 <= add_ln48_fu_667_p2;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        i_4_reg_400 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln26_fu_517_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_reg_334 <= add_ln26_fu_522_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        i_reg_334 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loop_index451_reg_323 <= 63'd0;
    end else if (((exitcond4729_fu_493_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_index451_reg_323 <= empty_42_fu_487_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state112) & (1'b0 == ap_block_state112_io) & (icmp_ln20_reg_804 == 1'd1))) begin
        loop_index_reg_411 <= 63'd0;
    end else if (((exitcond2_fu_754_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        loop_index_reg_411 <= empty_50_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln26_reg_850 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        max_V_1_reg_345 <= max_V_2_fu_543_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        max_V_1_reg_345 <= max_V_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        sum_V_reg_377 <= 16'd0;
    end else if (((ap_enable_reg_pp3_iter8 == 1'b1) & (icmp_ln38_reg_902_pp3_iter7_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        sum_V_reg_377 <= sum_V_1_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        N_read_reg_768 <= N;
        dx_read_reg_794 <= dx;
        icmp_ln20_reg_804 <= icmp_ln20_fu_467_p2;
        x_read_reg_799 <= x;
        x_size_read_reg_774 <= x_size;
        y_read_reg_787 <= y;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        dxbuff_V_addr_reg_959 <= y_read_reg_787;
        loss_V_reg_955 <= loss_V_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (exitcond2_reg_1018 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        dxbuff_V_load_reg_1027 <= dxbuff_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4729_fu_493_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_44_reg_829 <= empty_44_fu_498_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_44_reg_829_pp0_iter1_reg <= empty_44_reg_829;
        exitcond4729_reg_825 <= exitcond4729_fu_493_p2;
        exitcond4729_reg_825_pp0_iter1_reg <= exitcond4729_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        exitcond2_reg_1018 <= exitcond2_fu_754_p2;
        exitcond2_reg_1018_pp6_iter1_reg <= exitcond2_reg_1018;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4729_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_834 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_4_cast_cast_reg_977[6 : 0] <= i_4_cast_cast_fu_687_p1[6 : 0];
        icmp_ln49_reg_973 <= icmp_ln49_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp5_stage0_11001)) begin
        i_4_cast_cast_reg_977_pp5_iter10_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter9_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter11_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter10_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter12_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter11_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter13_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter12_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter14_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter13_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter15_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter14_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter16_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter15_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter17_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter16_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter18_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter17_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter19_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter18_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter20_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter19_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter21_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter20_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter22_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter21_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter23_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter22_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter2_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter1_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter3_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter2_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter4_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter3_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter5_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter4_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter6_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter5_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter7_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter6_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter8_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter7_reg[6 : 0];
        i_4_cast_cast_reg_977_pp5_iter9_reg[6 : 0] <= i_4_cast_cast_reg_977_pp5_iter8_reg[6 : 0];
        icmp_ln49_reg_973_pp5_iter10_reg <= icmp_ln49_reg_973_pp5_iter9_reg;
        icmp_ln49_reg_973_pp5_iter11_reg <= icmp_ln49_reg_973_pp5_iter10_reg;
        icmp_ln49_reg_973_pp5_iter12_reg <= icmp_ln49_reg_973_pp5_iter11_reg;
        icmp_ln49_reg_973_pp5_iter13_reg <= icmp_ln49_reg_973_pp5_iter12_reg;
        icmp_ln49_reg_973_pp5_iter14_reg <= icmp_ln49_reg_973_pp5_iter13_reg;
        icmp_ln49_reg_973_pp5_iter15_reg <= icmp_ln49_reg_973_pp5_iter14_reg;
        icmp_ln49_reg_973_pp5_iter16_reg <= icmp_ln49_reg_973_pp5_iter15_reg;
        icmp_ln49_reg_973_pp5_iter17_reg <= icmp_ln49_reg_973_pp5_iter16_reg;
        icmp_ln49_reg_973_pp5_iter18_reg <= icmp_ln49_reg_973_pp5_iter17_reg;
        icmp_ln49_reg_973_pp5_iter19_reg <= icmp_ln49_reg_973_pp5_iter18_reg;
        icmp_ln49_reg_973_pp5_iter20_reg <= icmp_ln49_reg_973_pp5_iter19_reg;
        icmp_ln49_reg_973_pp5_iter21_reg <= icmp_ln49_reg_973_pp5_iter20_reg;
        icmp_ln49_reg_973_pp5_iter22_reg <= icmp_ln49_reg_973_pp5_iter21_reg;
        icmp_ln49_reg_973_pp5_iter23_reg <= icmp_ln49_reg_973_pp5_iter22_reg;
        icmp_ln49_reg_973_pp5_iter2_reg <= icmp_ln49_reg_973_pp5_iter1_reg;
        icmp_ln49_reg_973_pp5_iter3_reg <= icmp_ln49_reg_973_pp5_iter2_reg;
        icmp_ln49_reg_973_pp5_iter4_reg <= icmp_ln49_reg_973_pp5_iter3_reg;
        icmp_ln49_reg_973_pp5_iter5_reg <= icmp_ln49_reg_973_pp5_iter4_reg;
        icmp_ln49_reg_973_pp5_iter6_reg <= icmp_ln49_reg_973_pp5_iter5_reg;
        icmp_ln49_reg_973_pp5_iter7_reg <= icmp_ln49_reg_973_pp5_iter6_reg;
        icmp_ln49_reg_973_pp5_iter8_reg <= icmp_ln49_reg_973_pp5_iter7_reg;
        icmp_ln49_reg_973_pp5_iter9_reg <= icmp_ln49_reg_973_pp5_iter8_reg;
        sdiv_ln1148_2_reg_997_pp5_iter23_reg <= sdiv_ln1148_2_reg_997;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_4_cast_cast_reg_977_pp5_iter1_reg[6 : 0] <= i_4_cast_cast_reg_977[6 : 0];
        icmp_ln49_reg_973_pp5_iter1_reg <= icmp_ln49_reg_973;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln26_reg_850 <= icmp_ln26_fu_517_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln32_1_reg_878 <= icmp_ln32_1_fu_566_p2;
        icmp_ln32_1_reg_878_pp2_iter1_reg <= icmp_ln32_1_reg_878;
        zext_ln703_reg_882_pp2_iter1_reg[6 : 0] <= zext_ln703_reg_882[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln38_reg_902 <= icmp_ln38_fu_596_p2;
        icmp_ln38_reg_902_pp3_iter1_reg <= icmp_ln38_reg_902;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln38_reg_902_pp3_iter2_reg <= icmp_ln38_reg_902_pp3_iter1_reg;
        icmp_ln38_reg_902_pp3_iter3_reg <= icmp_ln38_reg_902_pp3_iter2_reg;
        icmp_ln38_reg_902_pp3_iter4_reg <= icmp_ln38_reg_902_pp3_iter3_reg;
        icmp_ln38_reg_902_pp3_iter5_reg <= icmp_ln38_reg_902_pp3_iter4_reg;
        icmp_ln38_reg_902_pp3_iter6_reg <= icmp_ln38_reg_902_pp3_iter5_reg;
        icmp_ln38_reg_902_pp3_iter7_reg <= icmp_ln38_reg_902_pp3_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln42_reg_926 <= icmp_ln42_fu_630_p2;
        icmp_ln42_reg_926_pp4_iter1_reg <= icmp_ln42_reg_926;
        zext_ln43_reg_930_pp4_iter1_reg[6 : 0] <= zext_ln43_reg_930[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln42_reg_926_pp4_iter10_reg <= icmp_ln42_reg_926_pp4_iter9_reg;
        icmp_ln42_reg_926_pp4_iter11_reg <= icmp_ln42_reg_926_pp4_iter10_reg;
        icmp_ln42_reg_926_pp4_iter12_reg <= icmp_ln42_reg_926_pp4_iter11_reg;
        icmp_ln42_reg_926_pp4_iter13_reg <= icmp_ln42_reg_926_pp4_iter12_reg;
        icmp_ln42_reg_926_pp4_iter14_reg <= icmp_ln42_reg_926_pp4_iter13_reg;
        icmp_ln42_reg_926_pp4_iter15_reg <= icmp_ln42_reg_926_pp4_iter14_reg;
        icmp_ln42_reg_926_pp4_iter16_reg <= icmp_ln42_reg_926_pp4_iter15_reg;
        icmp_ln42_reg_926_pp4_iter17_reg <= icmp_ln42_reg_926_pp4_iter16_reg;
        icmp_ln42_reg_926_pp4_iter18_reg <= icmp_ln42_reg_926_pp4_iter17_reg;
        icmp_ln42_reg_926_pp4_iter19_reg <= icmp_ln42_reg_926_pp4_iter18_reg;
        icmp_ln42_reg_926_pp4_iter20_reg <= icmp_ln42_reg_926_pp4_iter19_reg;
        icmp_ln42_reg_926_pp4_iter21_reg <= icmp_ln42_reg_926_pp4_iter20_reg;
        icmp_ln42_reg_926_pp4_iter22_reg <= icmp_ln42_reg_926_pp4_iter21_reg;
        icmp_ln42_reg_926_pp4_iter23_reg <= icmp_ln42_reg_926_pp4_iter22_reg;
        icmp_ln42_reg_926_pp4_iter24_reg <= icmp_ln42_reg_926_pp4_iter23_reg;
        icmp_ln42_reg_926_pp4_iter25_reg <= icmp_ln42_reg_926_pp4_iter24_reg;
        icmp_ln42_reg_926_pp4_iter26_reg <= icmp_ln42_reg_926_pp4_iter25_reg;
        icmp_ln42_reg_926_pp4_iter27_reg <= icmp_ln42_reg_926_pp4_iter26_reg;
        icmp_ln42_reg_926_pp4_iter28_reg <= icmp_ln42_reg_926_pp4_iter27_reg;
        icmp_ln42_reg_926_pp4_iter29_reg <= icmp_ln42_reg_926_pp4_iter28_reg;
        icmp_ln42_reg_926_pp4_iter2_reg <= icmp_ln42_reg_926_pp4_iter1_reg;
        icmp_ln42_reg_926_pp4_iter30_reg <= icmp_ln42_reg_926_pp4_iter29_reg;
        icmp_ln42_reg_926_pp4_iter31_reg <= icmp_ln42_reg_926_pp4_iter30_reg;
        icmp_ln42_reg_926_pp4_iter32_reg <= icmp_ln42_reg_926_pp4_iter31_reg;
        icmp_ln42_reg_926_pp4_iter33_reg <= icmp_ln42_reg_926_pp4_iter32_reg;
        icmp_ln42_reg_926_pp4_iter34_reg <= icmp_ln42_reg_926_pp4_iter33_reg;
        icmp_ln42_reg_926_pp4_iter3_reg <= icmp_ln42_reg_926_pp4_iter2_reg;
        icmp_ln42_reg_926_pp4_iter4_reg <= icmp_ln42_reg_926_pp4_iter3_reg;
        icmp_ln42_reg_926_pp4_iter5_reg <= icmp_ln42_reg_926_pp4_iter4_reg;
        icmp_ln42_reg_926_pp4_iter6_reg <= icmp_ln42_reg_926_pp4_iter5_reg;
        icmp_ln42_reg_926_pp4_iter7_reg <= icmp_ln42_reg_926_pp4_iter6_reg;
        icmp_ln42_reg_926_pp4_iter8_reg <= icmp_ln42_reg_926_pp4_iter7_reg;
        icmp_ln42_reg_926_pp4_iter9_reg <= icmp_ln42_reg_926_pp4_iter8_reg;
        zext_ln43_reg_930_pp4_iter10_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter9_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter11_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter10_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter12_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter11_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter13_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter12_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter14_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter13_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter15_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter14_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter16_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter15_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter17_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter16_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter18_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter17_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter19_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter18_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter20_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter19_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter21_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter20_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter22_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter21_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter23_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter22_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter24_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter23_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter25_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter24_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter26_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter25_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter27_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter26_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter28_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter27_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter29_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter28_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter2_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter1_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter30_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter29_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter31_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter30_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter32_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter31_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter33_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter32_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter34_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter33_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter3_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter2_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter4_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter3_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter5_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter4_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter6_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter5_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter7_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter6_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter8_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter7_reg[6 : 0];
        zext_ln43_reg_930_pp4_iter9_reg[6 : 0] <= zext_ln43_reg_930_pp4_iter8_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        max_V_reg_845 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln42_reg_926 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln38_reg_902 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        reg_453 <= log_probs_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln42_reg_926_pp4_iter6_reg == 1'd0) & (ap_enable_reg_pp4_iter7 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln38_reg_902_pp3_iter6_reg == 1'd0) & (ap_enable_reg_pp3_iter7 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        reg_458 <= grp_exp_16_9_s_fu_433_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) | ((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)))) begin
        reg_462 <= probs_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_973_pp5_iter22_reg == 1'd1) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        sdiv_ln1148_1_reg_1002 <= grp_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_973_pp5_iter21_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        sdiv_ln1148_2_reg_997 <= grp_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_reg_926_pp4_iter33_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        sdiv_ln1148_reg_945 <= grp_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln20_reg_808 <= sext_ln20_fu_473_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_1_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        sub_ln703_reg_892 <= sub_ln703_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        sum_V_cast_reg_916 <= sum_V_cast_fu_616_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_630_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        zext_ln43_reg_930[6 : 0] <= zext_ln43_fu_639_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_1_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln703_reg_882[6 : 0] <= zext_ln703_fu_575_p1[6 : 0];
    end
end

always @ (*) begin
    if ((exitcond4729_fu_493_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_517_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln32_1_fu_566_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln38_fu_596_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state28 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state28 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_630_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_673_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state87 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state87 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond2_fu_754_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state113 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state113 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln20_reg_804 == 1'd1)) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter35 == 1'b0) & (ap_enable_reg_pp4_iter34 == 1'b0) & (ap_enable_reg_pp4_iter33 == 1'b0) & (ap_enable_reg_pp4_iter32 == 1'b0) & (ap_enable_reg_pp4_iter31 == 1'b0) & (ap_enable_reg_pp4_iter30 == 1'b0) & (ap_enable_reg_pp4_iter29 == 1'b0) & (ap_enable_reg_pp4_iter28 == 1'b0) & (ap_enable_reg_pp4_iter27 == 1'b0) & (ap_enable_reg_pp4_iter26 == 1'b0) & (ap_enable_reg_pp4_iter25 == 1'b0) & (ap_enable_reg_pp4_iter24 == 1'b0) & (ap_enable_reg_pp4_iter23 == 1'b0) & (ap_enable_reg_pp4_iter22 == 1'b0) & (ap_enable_reg_pp4_iter21 == 1'b0) & (ap_enable_reg_pp4_iter20 == 1'b0) & (ap_enable_reg_pp4_iter19 == 1'b0) & (ap_enable_reg_pp4_iter18 == 1'b0) & (ap_enable_reg_pp4_iter17 == 1'b0) & (ap_enable_reg_pp4_iter16 == 1'b0) & (ap_enable_reg_pp4_iter15 == 1'b0) & (ap_enable_reg_pp4_iter14 == 1'b0) & (ap_enable_reg_pp4_iter13 == 1'b0) & (ap_enable_reg_pp4_iter12 == 1'b0) & (ap_enable_reg_pp4_iter11 == 1'b0) & (ap_enable_reg_pp4_iter10 == 1'b0) & (ap_enable_reg_pp4_iter9 == 1'b0) & (ap_enable_reg_pp4_iter8 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter24 == 1'b0) & (ap_enable_reg_pp5_iter23 == 1'b0) & (ap_enable_reg_pp5_iter22 == 1'b0) & (ap_enable_reg_pp5_iter21 == 1'b0) & (ap_enable_reg_pp5_iter20 == 1'b0) & (ap_enable_reg_pp5_iter19 == 1'b0) & (ap_enable_reg_pp5_iter18 == 1'b0) & (ap_enable_reg_pp5_iter17 == 1'b0) & (ap_enable_reg_pp5_iter16 == 1'b0) & (ap_enable_reg_pp5_iter15 == 1'b0) & (ap_enable_reg_pp5_iter14 == 1'b0) & (ap_enable_reg_pp5_iter13 == 1'b0) & (ap_enable_reg_pp5_iter12 == 1'b0) & (ap_enable_reg_pp5_iter11 == 1'b0) & (ap_enable_reg_pp5_iter10 == 1'b0) & (ap_enable_reg_pp5_iter9 == 1'b0) & (ap_enable_reg_pp5_iter8 == 1'b0) & (ap_enable_reg_pp5_iter7 == 1'b0) & (ap_enable_reg_pp5_iter6 == 1'b0) & (ap_enable_reg_pp5_iter5 == 1'b0) & (ap_enable_reg_pp5_iter4 == 1'b0) & (ap_enable_reg_pp5_iter3 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln20_reg_804 == 1'd1)) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        dxbuff_V_address0 = loop_index_cast_cast_fu_763_p1;
    end else if (((icmp_ln49_reg_973_pp5_iter23_reg == 1'd1) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter24 == 1'b1))) begin
        dxbuff_V_address0 = dxbuff_V_addr_reg_959;
    end else if (((icmp_ln49_reg_973_pp5_iter23_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter24 == 1'b1))) begin
        dxbuff_V_address0 = i_4_cast_cast_reg_977_pp5_iter23_reg;
    end else begin
        dxbuff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001)) | ((icmp_ln49_reg_973_pp5_iter23_reg == 1'd1) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter24 == 1'b1)) | ((icmp_ln49_reg_973_pp5_iter23_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter24 == 1'b1)))) begin
        dxbuff_V_ce0 = 1'b1;
    end else begin
        dxbuff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter24 == 1'b1))) begin
        if ((icmp_ln49_reg_973_pp5_iter23_reg == 1'd1)) begin
            dxbuff_V_d0 = trunc_ln703_2_fu_724_p1;
        end else if ((icmp_ln49_reg_973_pp5_iter23_reg == 1'd0)) begin
            dxbuff_V_d0 = trunc_ln703_3_fu_720_p1;
        end else begin
            dxbuff_V_d0 = 'bx;
        end
    end else begin
        dxbuff_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln49_reg_973_pp5_iter23_reg == 1'd1) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter24 == 1'b1)) | ((icmp_ln49_reg_973_pp5_iter23_reg == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter24 == 1'b1)))) begin
        dxbuff_V_we0 = 1'b1;
    end else begin
        dxbuff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_ARADDR = sext_ln25_fu_506_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln20_reg_804 == 1'd1))) begin
        gmem_ARADDR = p_cast_cast_fu_476_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_ARLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln20_reg_804 == 1'd1))) begin
        gmem_ARLEN = x_size_read_reg_774;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln20_reg_804 == 1'd1)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state112) & (1'b0 == ap_block_state112_io) & (icmp_ln20_reg_804 == 1'd1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln20_reg_804 == 1'd1)) & (1'b1 == ap_CS_fsm_state120) & (icmp_ln20_reg_804 == 1'd1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4729_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_reg_1018_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_reg_804 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state112) & (icmp_ln20_reg_804 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state120) & (icmp_ln20_reg_804 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4729_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond2_reg_1018_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76))) begin
        grp_fu_1032_ce = grp_log_16_9_s_fu_422_grp_fu_1032_p_ce;
    end else begin
        grp_fu_1032_ce = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        log_probs_V_address0 = zext_ln43_fu_639_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        log_probs_V_address0 = zext_ln39_fu_605_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        log_probs_V_address0 = zext_ln703_reg_882_pp2_iter1_reg;
    end else begin
        log_probs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        log_probs_V_ce0 = 1'b1;
    end else begin
        log_probs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln32_1_reg_878_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        log_probs_V_we0 = 1'b1;
    end else begin
        log_probs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        probs_V_address0 = i_4_cast_cast_fu_687_p1;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        probs_V_address0 = y_read_reg_787;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter35 == 1'b1))) begin
        probs_V_address0 = zext_ln43_reg_930_pp4_iter34_reg;
    end else begin
        probs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter35 == 1'b1)))) begin
        probs_V_ce0 = 1'b1;
    end else begin
        probs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_926_pp4_iter34_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter35 == 1'b1))) begin
        probs_V_we0 = 1'b1;
    end else begin
        probs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        xbuff_V_address0 = zext_ln703_fu_575_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        xbuff_V_address0 = zext_ln1494_fu_532_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        xbuff_V_address0 = loop_index451_cast_cast_fu_502_p1;
    end else begin
        xbuff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        xbuff_V_ce0 = 1'b1;
    end else begin
        xbuff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond4729_reg_825_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xbuff_V_we0 = 1'b1;
    end else begin
        xbuff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln20_reg_804 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (icmp_ln20_reg_804 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond4729_fu_493_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond4729_fu_493_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln26_fu_517_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln26_fu_517_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((icmp_ln32_fu_551_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln32_1_fu_566_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln32_1_fu_566_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln38_fu_596_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter8 == 1'b1) & (ap_enable_reg_pp3_iter7 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln38_fu_596_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter8 == 1'b1) & (ap_enable_reg_pp3_iter7 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln42_fu_630_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter35 == 1'b1) & (ap_enable_reg_pp4_iter34 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln42_fu_630_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter35 == 1'b1) & (ap_enable_reg_pp4_iter34 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((icmp_ln48_fu_673_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)) & ~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter24 == 1'b1) & (ap_enable_reg_pp5_iter23 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((icmp_ln48_fu_673_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (ap_enable_reg_pp5_iter1 == 1'b0) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter24 == 1'b1) & (ap_enable_reg_pp5_iter23 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state112 : begin
            if (((1'b1 == ap_CS_fsm_state112) & (1'b0 == ap_block_state112_io) & (icmp_ln20_reg_804 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if (((1'b1 == ap_CS_fsm_state112) & (1'b0 == ap_block_state112_io) & (icmp_ln20_reg_804 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (exitcond2_fu_754_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (exitcond2_fu_754_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln20_reg_804 == 1'd1)) & (1'b1 == ap_CS_fsm_state120))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1148_fu_705_p2 = ($signed(sext_ln2221_fu_701_p1) + $signed(17'd130944));

assign add_ln26_fu_522_p2 = (i_reg_334 + 32'd1);

assign add_ln32_fu_556_p2 = (i_1_reg_355 + 31'd1);

assign add_ln38_fu_586_p2 = (i_2_reg_366 + 31'd1);

assign add_ln42_fu_620_p2 = (i_3_reg_389 + 31'd1);

assign add_ln48_fu_667_p2 = (i_4_reg_400 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd37];

assign ap_NS_fsm_state76 = ap_NS_fsm[32'd27];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond4729_reg_825 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond4729_reg_825 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((1'b1 == ap_block_state115_io) & (ap_enable_reg_pp6_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((1'b1 == ap_block_state115_io) & (ap_enable_reg_pp6_iter2 == 1'b1));
end

assign ap_block_state100_pp5_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp5_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp5_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp5_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp5_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp5_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp5_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp5_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp5_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp5_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond4729_reg_825 == 1'd0));
end

assign ap_block_state110_pp5_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp5_stage0_iter24 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state112_io = ((gmem_AWREADY == 1'b0) & (icmp_ln20_reg_804 == 1'd1));
end

assign ap_block_state113_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state115_io = ((gmem_WREADY == 1'b0) & (exitcond2_reg_1018_pp6_iter1_reg == 1'd0));
end

assign ap_block_state115_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state120 = ((gmem_BVALID == 1'b0) & (icmp_ln20_reg_804 == 1'd1));
end

assign ap_block_state21_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((gmem_ARREADY == 1'b0) & (icmp_ln20_reg_804 == 1'd1));
end

assign ap_block_state30_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp4_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp4_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp4_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp4_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp4_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp4_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp4_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp4_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp4_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp4_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp4_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp4_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp4_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp4_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp4_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp4_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp4_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp4_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp4_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp4_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp4_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp4_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp4_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp5_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp5_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp5_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp5_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp5_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp5_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp5_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp5_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp5_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp5_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_42_fu_487_p2 = (loop_index451_reg_323 + 63'd1);

assign empty_44_fu_498_p1 = loop_index451_reg_323[6:0];

assign empty_48_fu_683_p1 = i_4_reg_400[6:0];

assign empty_50_fu_748_p2 = (loop_index_reg_411 + 63'd1);

assign empty_52_fu_759_p1 = loop_index_reg_411[6:0];

assign exitcond2_fu_754_p2 = ((loop_index_reg_411 == sext_ln20_reg_808) ? 1'b1 : 1'b0);

assign exitcond4729_fu_493_p2 = ((loop_index451_reg_323 == sext_ln20_reg_808) ? 1'b1 : 1'b0);

assign grp_exp_16_9_s_fu_433_ap_start = grp_exp_16_9_s_fu_433_ap_start_reg;

assign grp_fu_1032_p0 = grp_log_16_9_s_fu_422_grp_fu_1032_p_din0;

assign grp_fu_1032_p1 = grp_log_16_9_s_fu_422_grp_fu_1032_p_din1;

assign grp_fu_444_p4 = {{x_read_reg_799[31:1]}};

assign grp_fu_652_p0 = {{reg_458}, {7'd0}};

assign grp_fu_652_p1 = sum_V_cast_reg_916;

assign grp_fu_696_p0 = sext_ln1148_1_fu_692_p0;

assign grp_fu_715_p0 = $signed(add_ln1148_fu_705_p2);

assign grp_log_16_9_s_fu_422_ap_start = grp_log_16_9_s_fu_422_ap_start_reg;

assign grp_log_16_9_s_fu_422_grp_fu_1032_p_dout0 = grp_fu_1032_p2;

assign i_1_cast_fu_562_p1 = i_1_reg_355;

assign i_2_cast_fu_592_p1 = i_2_reg_366;

assign i_3_cast_fu_626_p1 = i_3_reg_389;

assign i_4_cast_cast_fu_687_p1 = empty_48_fu_683_p1;

assign icmp_ln1494_fu_537_p2 = (($signed(xbuff_V_q0) > $signed(max_V_1_reg_345)) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_467_p0 = x_size;

assign icmp_ln20_fu_467_p2 = ((icmp_ln20_fu_467_p0 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_517_p2 = ((i_reg_334 < x_size_read_reg_774) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_566_p2 = ((i_1_cast_fu_562_p1 == x_size_read_reg_774) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_551_p2 = (($signed(x_size_read_reg_774) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_596_p2 = ((i_2_cast_fu_592_p1 == x_size_read_reg_774) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_630_p2 = ((i_3_cast_fu_626_p1 == x_size_read_reg_774) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_673_p2 = ((i_4_reg_400 == x_size_read_reg_774) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_678_p2 = ((i_4_reg_400 == y_read_reg_787) ? 1'b1 : 1'b0);

assign loop_index451_cast_cast_fu_502_p1 = empty_44_reg_829_pp0_iter1_reg;

assign loop_index_cast_cast_fu_763_p1 = empty_52_fu_759_p1;

assign loss_V_fu_661_p2 = (16'd0 - grp_log_16_9_s_fu_422_ap_return);

assign max_V_2_fu_543_p3 = ((icmp_ln1494_fu_537_p2[0:0] == 1'b1) ? xbuff_V_q0 : max_V_1_reg_345);

assign p_cast5_cast_fu_737_p1 = $signed(p_cast5_fu_728_p4);

assign p_cast5_fu_728_p4 = {{dx_read_reg_794[31:1]}};

assign p_cast_cast_fu_476_p1 = $signed(grp_fu_444_p4);

assign probs_V_d0 = sdiv_ln1148_reg_945[15:0];

assign sext_ln1148_1_fu_692_p0 = reg_462;

assign sext_ln20_fu_473_p1 = $signed(x_size_read_reg_774);

assign sext_ln2221_fu_701_p0 = reg_462;

assign sext_ln2221_fu_701_p1 = sext_ln2221_fu_701_p0;

assign sext_ln25_fu_506_p1 = $signed(grp_fu_444_p4);

assign sub_ln703_fu_580_p2 = (xbuff_V_q0 - max_V_1_reg_345);

assign sum_V_1_fu_610_p2 = ($signed(reg_458) + $signed(sum_V_reg_377));

assign sum_V_cast_fu_616_p1 = sum_V_reg_377;

assign trunc_ln1494_fu_528_p1 = i_reg_334[6:0];

assign trunc_ln39_fu_601_p1 = i_2_reg_366[6:0];

assign trunc_ln43_fu_635_p1 = i_3_reg_389[6:0];

assign trunc_ln703_2_fu_724_p1 = sdiv_ln1148_1_reg_1002[15:0];

assign trunc_ln703_3_fu_720_p1 = sdiv_ln1148_2_reg_997_pp5_iter23_reg[15:0];

assign trunc_ln703_fu_571_p1 = i_1_reg_355[6:0];

assign zext_ln1494_fu_532_p1 = trunc_ln1494_fu_528_p1;

assign zext_ln39_fu_605_p1 = trunc_ln39_fu_601_p1;

assign zext_ln43_fu_639_p1 = trunc_ln43_fu_635_p1;

assign zext_ln703_fu_575_p1 = trunc_ln703_fu_571_p1;

always @ (posedge ap_clk) begin
    zext_ln703_reg_882[31:7] <= 25'b0000000000000000000000000;
    zext_ln703_reg_882_pp2_iter1_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter1_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter2_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter3_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter4_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter5_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter6_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter7_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter8_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter9_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter10_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter11_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter12_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter13_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter14_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter15_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter16_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter17_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter18_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter19_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter20_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter21_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter22_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter23_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter24_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter25_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter26_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter27_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter28_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter29_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter30_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter31_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter32_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter33_reg[31:7] <= 25'b0000000000000000000000000;
    zext_ln43_reg_930_pp4_iter34_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter1_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter2_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter3_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter4_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter5_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter6_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter7_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter8_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter9_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter10_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter11_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter12_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter13_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter14_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter15_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter16_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter17_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter18_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter19_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter20_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter21_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter22_reg[31:7] <= 25'b0000000000000000000000000;
    i_4_cast_cast_reg_977_pp5_iter23_reg[31:7] <= 25'b0000000000000000000000000;
end

endmodule //loss_derivative
