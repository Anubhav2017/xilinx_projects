#include<stdio.h>
#include<string.h>
#include <ap_fixed.h>
#include "hls_math.h"

#define MAX_SIZE 100
#define MAX_FILTERS 10
#define MAX_WINDOW_SIZE 5

typedef ap_fixed<16,3> fixed_t;
//
//fixed_t losses={0.0719558, 2.30257, 2.30248, 2.30276, 2.30235, 2.30208, 2.30233, 2.30236, 2.30198, 2.30199, 2.30134, 2.30227, 2.30181, 2.3028, 2.3015, 2.30063, 2.30236, 2.3011, 2.30146, 2.30191, 2.30048, 2.30148, 2.30258, 2.30172, 2.3015, 2.30165, 2.30217, 2.30028, 2.30148, 2.30105, 2.30061, 2.29944, 2.30162, 2.30114, 2.30185, 2.29971, 2.30141, 2.30061, 2.30129, 2.30169, 2.2999, 2.30232, 2.30096, 2.30188, 2.30066, 2.30107, 2.29868, 2.29908, 2.29694, 2.29957, 2.29806, 2.29766, 2.30114, 2.29798, 2.29876, 2.30032, 2.29893, 2.30275, 2.30059, 2.29775, 2.30008, 2.30009, 2.29844, 2.29979, 2.29857, 2.29798, 2.29898, 2.29835, 2.29799, 2.29842, 2.29805, 2.29493, 2.29863, 2.29796, 2.30002, 2.29652, 2.29935, 2.29534, 2.29625, 2.29565, 2.29818,
//		2.29599, 2.29902, 2.29757, 2.29431, 2.29653, 2.29557, 2.29655, 2.29632, 2.2967, 2.29513, 2.29757, 2.29406,
//		2.29433, 0.0717904, 2.29832, 2.29063, 2.29492, 2.29355, 2.29434, 2.2925, 2.29208, 2.29115, 2.29086, 2.28855, 2.2936, 2.2934, 2.29373, 2.29403, 2.29075, 2.29288, 2.28626, 2.29134, 2.29474, 2.28637, 2.29165, 2.29364, 2.28812, 2.29003, 2.29204, 2.29348, 2.28497, 2.28884, 2.29149, 2.28575, 2.28257, 2.28957, 2.29008, 2.28917, 2.28124, 2.29035, 2.28425, 2.2888, 2.29362, 2.28479, 2.29176, 2.29001, 2.29212, 2.28757, 2.29238, 2.28027, 2.28064, 2.27572, 2.27953, 2.27122, 2.2686, 2.28746, 2.27576, 2.27755, 2.28221, 2.27708, 2.29586, 2.28339, 2.27466, 2.28188, 2.2818, 2.27408, 2.27551, 2.27269, 2.26873, 2.27922, 2.27218, 2.26998, 2.27275, 2.27642, 2.2586, 2.27531, 2.27187, 2.28317, 2.2643, 2.27886, 2.26194, 2.26265, 2.25757, 2.26794,
//		2.26065, 2.27288, 2.26785, 2.25577, 2.26131, 2.2619, 2.26033, 2.26036, 2.26649, 2.25202, 2.26708, 2.25367, 2.25595, 0.0708233, 2.27102, 2.23347, 2.2545, 2.24739, 2.25113, 2.24545, 2.24219, 2.23481, 2.23613, 2.22829, 2.24865, 2.24536, 2.24653, 2.24952, 2.23464, 2.24057, 2.20969, 2.2334, 2.24807, 2.2173, 2.23535, 2.23556, 2.21855, 2.22784, 2.24191, 2.24484, 2.20327, 2.21858, 2.23633, 2.2043, 2.19257, 2.22247, 2.22338, 2.21771, 2.18444, 2.2223, 2.1983, 2.21883, 2.23464, 2.20284, 2.22414, 2.22101, 2.22724, 2.20997, 2.22892, 2.18203, 2.18132, 2.16339, 2.16468, 2.13799, 2.1254, 2.19982, 2.15889, 2.16954, 2.17767, 2.15649, 2.23865, 2.18428, 2.14812, 2.17334, 2.17792, 2.14163, 2.14204, 2.13165, 2.11593, 2.1668, 2.13116, 2.11949,
//		2.13157, 2.15791, 2.07478, 2.147, 2.13064, 2.18015, 2.10183, 2.15706, 2.08377, 2.0898, 2.06268, 2.1058, 2.07915, 2.12628, 2.1025, 2.065, 2.07122, 2.08583, 2.06034, 2.06681, 2.10363, 2.03229, 2.09182, 2.04915, 2.06039, 0.0644605, 2.11496, 1.96139, 2.03798, 2.01852, 2.02319, 2.01659, 2.00164, 1.94973, 1.97627, 1.95323, 2.01964, 2.00638, 2.0147, 2.02809, 1.96871, 1.98953, 1.86289, 1.94649, 2.00461, 1.90648, 1.95225, 1.94438, 1.90323, 1.94617, 2.0083, 1.99515, 1.84764, 1.88816, 1.95498, 1.82866, 1.80268, 1.89002, 1.90552, 1.88007, 1.80324, 1.89188, 1.82566, 1.89462, 1.9321, 1.85261, 1.86644, 1.89183, 1.89581, 1.85489, 1.89783, 1.78488, 1.7847, 1.70355, 1.67507, 1.66448, 1.60802, 1.78285, 1.71148, 1.75528, 1.72244, 1.66988,
//		1.95459, 1.75841, 1.66626, 1.70912, 1.73219, 1.64897, 1.65787, 1.61335, 1.57372, 1.70946, 1.63671, 1.58254, 1.623, 1.70031, 1.49427, 1.65581, 1.59882, 1.72694, 1.57444, 1.66111, 1.47305, 1.51659, 1.46378, 1.55159, 1.49678, 1.61451, 1.51369, 1.47864, 1.45762, 1.47784, 1.40706, 1.43384, 1.547, 1.41577, 1.48404, 1.41896, 1.46062, 0.0396603, 1.58469, 1.29664, 1.36189, 1.40731, 1.35814, 1.41305, 1.35044, 1.16419, 1.3155, 1.3155, 1.39934, 1.37447, 1.39817, 1.45828, 1.33779, 1.37608, 1.10854, 1.26117, 1.37533,
//		1.20648, 1.24422, 1.24558, 1.21488, 1.32093, 1.44869, 1.35153, 1.15779, 1.19122, 1.27096, 1.06251, 1.08202, 1.12467, 1.25077, 1.13989, 1.15456, 1.19311, 1.13508, 1.21667, 1.2617, 1.2416, 1.06368, 1.25869, 1.2096, 1.21203, 1.28089, 1.14809, 1.13142, 1.00513, 0.879932, 0.976098, 0.872416, 1.04917, 1.04913, 1.17225, 0.963918, 0.946886, 1.44274, 1.09097, 1.02505, 0.988034, 1.02715, 1.02832, 1.02377, 0.942978, 0.960436, 1.08883, 0.997178, 0.906325, 0.996478, 1.06618, 0.875615, 1.02586, 0.965154, 1.14367, 0.98643, 1.02639, 0.806685, 0.876642, 0.899558, 0.900087, 0.924163, 0.996626, 0.874853, 0.912537, 0.876563, 0.837191, 0.771067, 0.847561, 0.949587, 0.868192, 0.927844, 0.82636, 0.926724, 0.0185504, 1.01431, 0.809959, 0.780381,
//		0.895475, 0.796166, 0.955451, 0.813748, 0.599868, 0.8011, 0.859208, 0.927077, 0.874867, 0.924134, 1.08503, 0.905043, 0.90767, 0.634699, 0.794466, 0.928141, 0.771011, 0.739584, 0.750612, 0.741398, 0.864816, 1.05178, 0.880324, 0.74489, 0.779504, 0.820963, 0.634761, 0.700378, 0.658752, 0.871384, 0.685543, 0.765615, 0.756855, 0.817764, 0.780325, 0.827293, 0.938145, 0.581512, 0.92781, 0.785265, 0.895851, 0.96089, 0.805043, 0.766166, 0.687254, 0.497445, 0.588591, 0.547067, 0.63827, 0.716685, 0.903196, 0.570419, 0.601181, 1.14895, 0.748407, 0.736777, 0.623263, 0.696774, 0.765946, 0.722624, 0.624535, 0.76752, 0.791904, 0.692648, 0.611638, 0.709045, 0.756025, 0.619656, 0.72831, 0.701446, 0.878472, 0.712332, 0.730979, 0.505546,
//		0.612597, 0.694574, 0.586614, 0.716991, 0.674905, 0.614307, 0.688006, 0.650708, 0.56894, 0.497728, 0.617111,
//		0.682602, 0.631889, 0.714113, 0.562478, 0.715964, 0.0121147, 0.736402, 0.628865, 0.541173, 0.675503, 0.574395, 0.793274, 0.593122, 0.417477, 0.596314, 0.673311, 0.726928, 0.681443, 0.724908, 0.953868, 0.724333, 0.72331, 0.469181, 0.589902, 0.755759, 0.627407, 0.529287, 0.550215, 0.54045, 0.651771, 0.883284, 0.673428, 0.577688, 0.624523, 0.622719, 0.481512, 0.554901, 0.484803, 0.716433, 0.50801, 0.601846, 0.55611, 0.73986, 0.583348, 0.643845, 0.831795, 0.388007, 0.801857, 0.588135, 0.778248, 0.831104, 0.639679, 0.607853, 0.563056, 0.351298, 0.413766, 0.433963, 0.450498, 0.57966, 0.789629, 0.403969, 0.456925, 1.00228, 0.59469, 0.62014, 0.471645, 0.575496, 0.658492, 0.600023, 0.483865, 0.722771, 0.650727, 0.564823,
//		0.489796, 0.585328, 0.626574, 0.521081, 0.588543, 0.590094, 0.754057, 0.588118, 0.588725, 0.372985, 0.501732, 0.611997, 0.440406, 0.642147, 0.519176, 0.514116, 0.592541, 0.546443, 0.448472, 0.376456, 0.520328, 0.560708, 0.522128, 0.614387, 0.434968, 0.623869, 0.00995524, 0.602774, 0.547755, 0.429492, 0.567398, 0.476552, 0.724241, 0.484579, 0.35562, 0.50587, 0.585072, 0.626026, 0.601482, 0.630734, 0.895154, 0.63013, 0.646936, 0.400062, 0.483227, 0.678173, 0.573963, 0.431862, 0.459503, 0.445653, 0.539079, 0.80103, 0.56864, 0.497999, 0.551297, 0.516269, 0.408993, 0.483159, 0.408831, 0.638819, 0.41945, 0.519821, 0.445714, 0.721664, 0.476715, 0.557567, 0.783177, 0.295714, 0.735675, 0.484833, 0.721639, 0.766836,
//		0.540785, 0.523983, 0.496407, 0.28086, 0.32277, 0.382761, 0.350091, 0.510174, 0.726942, 0.318469, 0.381312, 0.909731, 0.510341, 0.56083, 0.39617, 0.521015, 0.598752, 0.540591, 0.405893, 0.713717, 0.565056, 0.501441, 0.424848, 0.521426, 0.562846, 0.474126, 0.507336, 0.529331, 0.680752, 0.519628, 0.504771, 0.305012, 0.439736, 0.565438, 0.35987, 0.608239, 0.433943, 0.468222, 0.542049, 0.483322, 0.378649, 0.312752, 0.471663, 0.493225, 0.459941, 0.552537, 0.36383, 0.572825, 0.0090509, 0.530121, 0.498708, 0.366948, 0.501844,
//		0.421551, 0.683543, 0.418108, 0.332378, 0.455326, 0.534185, 0.565213, 0.562284, 0.576812, 0.859304, 0.570238, 0.607738, 0.363446, 0.417872, 0.633765, 0.548535, 0.37898, 0.411097, 0.393794, 0.468862, 0.754196, 0.506292, 0.453872, 0.507594, 0.450347, 0.364501, 0.439858, 0.368523, 0.592414, 0.363881, 0.470593, 0.376148, 0.718796, 0.40926, 0.511485, 0.754111, 0.243741, 0.690469, 0.423475, 0.687321, 0.727252, 0.473441, 0.471259, 0.451215, 0.239584, 0.26901, 0.353154, 0.288753, 0.467777, 0.684848, 0.267702, 0.334421, 0.841908, 0.457029, 0.52436, 0.352141, 0.490096, 0.558956, 0.506518, 0.355418, 0.713511, 0.505377, 0.465205, 0.383731, 0.482918, 0.525295, 0.446963, 0.452982, 0.489991, 0.630372, 0.474592, 0.449071,
//		0.26529, 0.398212, 0.533309, 0.309453, 0.589888, 0.381665, 0.443627, 0.510632, 0.43913, 0.330924, 0.27453, 0.44331, 0.450253, 0.418565, 0.507889, 0.320372, 0.539306, 0.00863187, 0.486069, 0.463681, 0.327243, 0.456142, 0.385062, 0.654017, 0.37191, 0.323944, 0.421525, 0.500599, 0.524789, 0.54019, 0.54096, 0.832109, 0.526791, 0.583077, 0.340797, 0.373447, 0.603372, 0.53283, 0.346245, 0.38172, 0.362116, 0.419817, 0.724705, 0.465013, 0.426652, 0.477588, 0.406181, 0.333045, 0.410598, 0.34359, 0.561209, 0.324224, 0.436936, 0.328612, 0.720088, 0.362185, 0.48414, 0.733341, 0.21103, 0.654933, 0.383718, 0.662866, 0.698534, 0.424212, 0.434206, 0.41679, 0.212019, 0.234107, 0.333096, 0.247753, 0.438324, 0.653012, 0.234742, 0.301946,
//		0.788337, 0.420179, 0.498679, 0.32365, 0.46872, 0.529507, 0.48457, 0.31966, 0.714905, 0.460912, 0.442084, 0.354962, 0.456922, 0.499563, 0.428908, 0.413194, 0.46149, 0.592208, 0.441075, 0.409313, 0.239721, 0.367629, 0.508708, 0.275048, 0.578704, 0.346788,
//0.428558, 0.488515, 0.405639, 0.295303, 0.24928, 0.424823, 0.420251, 0.387612, 0.473061, 0.29217, 0.51486};
//

fixed_t loss_derivative(fixed_t x[MAX_SIZE], fixed_t dx[MAX_SIZE], fixed_t* x_ddr, fixed_t* dx_ddr, int y,int dim, int iter, bool writetoddr, bool ddrtobram){

#pragma HLS INTERFACE s_axilite port=return
#pragma HLS INTERFACE bram storage_type=ram_1p latency=2 port=x
#pragma HLS INTERFACE bram storage_type=ram_1p latency=2 port=dx
#pragma HLS INTERFACE m_axi port=x_ddr offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=dx_ddr offset=slave bundle=gmem

#pragma HLS INTERFACE s_axilite port=y
#pragma HLS INTERFACE s_axilite port=iter
#pragma HLS INTERFACE s_axilite port=dim
#pragma HLS INTERFACE s_axilite port=writetoddr
#pragma HLS INTERFACE s_axilite port=ddrtobram

	fixed_t log_probs[MAX_SIZE];
	fixed_t probs[MAX_SIZE];
	fixed_t loss =0;

	if(writetoddr){
		if(ddrtobram){
			for(int i=0;i<dim;i++){
				x[i]=x_ddr[i];
			}
			for(int i=0;i<dim;i++){
				dx[i]=dx_ddr[i];
			}
		}
		else{
			for(int i=0;i<dim;i++){
				x_ddr[i]=x[i];
			}
			for(int i=0;i<dim;i++){
				dx_ddr[i]=dx[i];
			}

		}

	}

	else{

    fixed_t max = x[0];
    for(int i=1;i<dim;i++){
        if(x[i] > max){
            max = x[i];
        }
    }

    for(int i=0;i<dim;i++){
        log_probs[i] = x[i] - max;
    }

    fixed_t sum = 0;

    for(int i=0;i<dim;i++){
        sum += hls::exp(log_probs[i]);
    }

    for(int i=0;i<dim;i++){
        probs[i] = hls::exp(log_probs[i])/sum;
    }

    loss = loss - hls::log(probs[y]);

    for(int i=0;i<dim;i++){
        if(i == y){
            dx[i] = (probs[i] - 1);
        }
        else{
            dx[i] = probs[i];
        }
    }

	}

    return losses[iter];
}
