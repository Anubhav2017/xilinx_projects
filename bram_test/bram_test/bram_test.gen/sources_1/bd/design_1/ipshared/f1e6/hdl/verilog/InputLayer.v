// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="InputLayer_InputLayer,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1332,HLS_SYN_LUT=1769,HLS_VERSION=2020_2}" *)

module InputLayer (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        bram_x_Addr_A,
        bram_x_EN_A,
        bram_x_WEN_A,
        bram_x_Din_A,
        bram_x_Dout_A,
        bram_x_Clk_A,
        bram_x_Rst_A,
        bram_dx_Addr_A,
        bram_dx_EN_A,
        bram_dx_WEN_A,
        bram_dx_Din_A,
        bram_dx_Dout_A,
        bram_dx_Clk_A,
        bram_dx_Rst_A,
        bram_dx_Addr_B,
        bram_dx_EN_B,
        bram_dx_WEN_B,
        bram_dx_Din_B,
        bram_dx_Dout_B,
        bram_dx_Clk_B,
        bram_dx_Rst_B,
        ddrtobram,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_pp0_stage0 = 32'd4;
parameter    ap_ST_fsm_state6 = 32'd8;
parameter    ap_ST_fsm_state7 = 32'd16;
parameter    ap_ST_fsm_state8 = 32'd32;
parameter    ap_ST_fsm_state9 = 32'd64;
parameter    ap_ST_fsm_state10 = 32'd128;
parameter    ap_ST_fsm_state11 = 32'd256;
parameter    ap_ST_fsm_state12 = 32'd512;
parameter    ap_ST_fsm_state13 = 32'd1024;
parameter    ap_ST_fsm_state14 = 32'd2048;
parameter    ap_ST_fsm_state15 = 32'd4096;
parameter    ap_ST_fsm_state16 = 32'd8192;
parameter    ap_ST_fsm_state17 = 32'd16384;
parameter    ap_ST_fsm_state18 = 32'd32768;
parameter    ap_ST_fsm_state19 = 32'd65536;
parameter    ap_ST_fsm_state20 = 32'd131072;
parameter    ap_ST_fsm_state21 = 32'd262144;
parameter    ap_ST_fsm_state22 = 32'd524288;
parameter    ap_ST_fsm_state23 = 32'd1048576;
parameter    ap_ST_fsm_pp1_stage0 = 32'd2097152;
parameter    ap_ST_fsm_state27 = 32'd4194304;
parameter    ap_ST_fsm_state28 = 32'd8388608;
parameter    ap_ST_fsm_state29 = 32'd16777216;
parameter    ap_ST_fsm_state30 = 32'd33554432;
parameter    ap_ST_fsm_state31 = 32'd67108864;
parameter    ap_ST_fsm_state32 = 32'd134217728;
parameter    ap_ST_fsm_state33 = 32'd268435456;
parameter    ap_ST_fsm_state34 = 32'd536870912;
parameter    ap_ST_fsm_state35 = 32'd1073741824;
parameter    ap_ST_fsm_state36 = 32'd2147483648;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output  [31:0] bram_x_Addr_A;
output   bram_x_EN_A;
output  [1:0] bram_x_WEN_A;
output  [15:0] bram_x_Din_A;
input  [15:0] bram_x_Dout_A;
output   bram_x_Clk_A;
output   bram_x_Rst_A;
output  [31:0] bram_dx_Addr_A;
output   bram_dx_EN_A;
output  [1:0] bram_dx_WEN_A;
output  [15:0] bram_dx_Din_A;
input  [15:0] bram_dx_Dout_A;
output   bram_dx_Clk_A;
output   bram_dx_Rst_A;
output  [31:0] bram_dx_Addr_B;
output   bram_dx_EN_B;
output  [1:0] bram_dx_WEN_B;
output  [15:0] bram_dx_Din_B;
input  [15:0] bram_dx_Dout_B;
output   bram_dx_Clk_B;
output   bram_dx_Rst_B;
input   ddrtobram;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg bram_x_EN_A;
reg[1:0] bram_x_WEN_A;
reg[15:0] bram_x_Din_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] x;
wire   [15:0] dx;
wire   [31:0] dim;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
wire   [0:0] ddrtobram_read_read_fu_132_p2;
reg   [0:0] empty_38_reg_571;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond86_reg_658;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond108_reg_618;
reg   [0:0] exitcond108_reg_618_pp0_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state35;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [15:0] gmem_WDATA;
reg   [1:0] gmem_WSTRB;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [62:0] loop_index_reg_226;
reg   [9:0] loop_index3_reg_237;
reg   [9:0] loop_index3_reg_237_pp1_iter1_reg;
wire    ap_block_state24_pp1_stage0_iter0;
reg    ap_block_state25_pp1_stage0_iter1;
wire    ap_block_state26_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg  signed [31:0] dim_read_reg_545;
reg   [63:0] x_read_reg_550;
wire   [0:0] empty_fu_281_p1;
reg   [0:0] empty_reg_558;
wire  signed [30:0] p_cast_fu_285_p4;
reg  signed [30:0] p_cast_reg_563;
wire   [0:0] empty_38_fu_295_p2;
wire  signed [62:0] p_cast_cast_fu_304_p1;
reg  signed [62:0] p_cast_cast_reg_579;
wire  signed [32:0] empty_37_fu_310_p2;
reg  signed [32:0] empty_37_reg_584;
wire  signed [63:0] p_cast22_fu_316_p1;
reg  signed [63:0] p_cast22_reg_591;
wire  signed [31:0] p_cast_cast23_fu_346_p1;
wire   [62:0] empty_42_fu_350_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond108_fu_356_p2;
reg   [15:0] bram_x_load_reg_627;
reg    ap_enable_reg_pp0_iter1;
reg   [63:0] gmem_addr_3_reg_637;
wire   [1:0] empty_51_fu_423_p2;
reg   [1:0] empty_51_reg_643;
wire   [15:0] empty_52_fu_441_p2;
reg   [15:0] empty_52_reg_648;
wire   [9:0] empty_40_fu_447_p2;
reg   [9:0] empty_40_reg_653;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond86_fu_457_p2;
reg   [0:0] exitcond86_reg_658_pp1_iter1_reg;
reg   [15:0] gmem_addr_read_reg_662;
wire   [0:0] empty_56_fu_467_p1;
reg   [0:0] empty_56_reg_667;
wire    ap_CS_fsm_state27;
reg   [63:0] gmem_addr_2_reg_674;
wire   [9:0] grp_fu_258_p4;
reg   [9:0] tmp_3_reg_680;
reg   [15:0] gmem_addr_2_read_reg_685;
reg    ap_predicate_op72_writereq_state2;
reg    ap_predicate_op79_readreq_state2;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_CS_fsm_state23;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state24;
reg    ap_enable_reg_pp1_iter2;
reg   [9:0] ap_phi_mux_loop_index3_phi_fu_241_p4;
wire   [63:0] loop_index_cast_fu_361_p1;
wire   [63:0] p_cast17_cast_fu_366_p1;
wire   [63:0] loop_index3_cast25_fu_462_p1;
wire   [63:0] p_cast16_cast_fu_541_p1;
wire    ap_CS_fsm_state36;
wire  signed [63:0] p_cast7_cast_fu_320_p1;
wire  signed [63:0] p_cast6_cast_fu_335_p1;
wire  signed [63:0] p_cast21_cast_fu_371_p1;
wire  signed [63:0] p_cast12_cast_fu_470_p1;
wire  signed [31:0] p_cast_cast24_fu_331_p1;
reg    ap_block_state10;
wire    ap_block_pp0_stage0_01001;
reg   [31:0] bram_x_Addr_A_orig;
wire   [15:0] empty_64_fu_534_p2;
wire   [1:0] empty_63_fu_516_p2;
wire   [63:0] grp_fu_267_p2;
wire  signed [31:0] empty_fu_281_p0;
wire  signed [31:0] p_cast_fu_285_p1;
wire  signed [32:0] dim_cast4_fu_301_p1;
wire   [32:0] p_cast5_fu_307_p1;
wire   [62:0] grp_fu_249_p4;
wire   [62:0] grp_fu_271_p4;
wire   [0:0] empty_44_fu_381_p1;
wire   [3:0] tmp_6_fu_387_p3;
wire   [15:0] p_cast31_fu_395_p1;
wire   [15:0] empty_47_fu_399_p2;
wire   [7:0] empty_48_fu_405_p1;
wire   [0:0] empty_45_fu_384_p1;
wire   [0:0] empty_50_fu_413_p2;
wire   [1:0] p_cast32_fu_419_p1;
wire   [3:0] tmp_7_fu_429_p3;
wire   [15:0] p_cast19_cast_fu_409_p1;
wire   [15:0] p_cast33_fu_437_p1;
wire   [30:0] loop_index3_cast39_fu_453_p1;
wire   [0:0] empty_57_fu_480_p1;
wire   [0:0] empty_60_fu_483_p2;
wire   [3:0] tmp_fu_488_p3;
wire   [15:0] p_cast28_fu_496_p1;
wire   [15:0] empty_61_fu_500_p2;
wire   [7:0] empty_62_fu_505_p1;
wire   [1:0] p_cast29_fu_513_p1;
wire   [3:0] tmp_2_fu_523_p3;
wire   [15:0] p_cast14_cast_fu_509_p1;
wire   [15:0] p_cast30_fu_530_p1;
reg   [31:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

InputLayer_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .dx(dx),
    .dim(dim),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

InputLayer_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(gmem_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state24)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state24);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        loop_index3_reg_237 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond86_reg_658 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        loop_index3_reg_237 <= empty_40_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd0))) begin
        loop_index_reg_226 <= 63'd0;
    end else if (((exitcond108_fu_356_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loop_index_reg_226 <= empty_42_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond108_reg_618 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bram_x_load_reg_627 <= bram_x_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dim_read_reg_545 <= dim;
        empty_38_reg_571 <= empty_38_fu_295_p2;
        empty_reg_558 <= empty_fu_281_p1;
        p_cast_reg_563 <= {{p_cast_fu_285_p1[31:1]}};
        x_read_reg_550 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_37_reg_584 <= empty_37_fu_310_p2;
        p_cast22_reg_591 <= p_cast22_fu_316_p1;
        p_cast_cast_reg_579 <= p_cast_cast_fu_304_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        empty_40_reg_653 <= empty_40_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        empty_51_reg_643 <= empty_51_fu_423_p2;
        empty_52_reg_648 <= empty_52_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_558 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        empty_56_reg_667 <= empty_56_fu_467_p1;
        gmem_addr_2_reg_674 <= p_cast12_cast_fu_470_p1;
        tmp_3_reg_680 <= {{empty_37_reg_584[10:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond108_reg_618 <= exitcond108_fu_356_p2;
        exitcond108_reg_618_pp0_iter1_reg <= exitcond108_reg_618;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        exitcond86_reg_658 <= exitcond86_fu_457_p2;
        exitcond86_reg_658_pp1_iter1_reg <= exitcond86_reg_658;
        loop_index3_reg_237_pp1_iter1_reg <= loop_index3_reg_237;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        gmem_addr_2_read_reg_685 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_reg_558 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        gmem_addr_3_reg_637 <= p_cast21_cast_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond86_reg_658 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_read_reg_662 <= gmem_RDATA;
    end
end

always @ (*) begin
    if ((exitcond108_fu_356_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond86_fu_457_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond86_reg_658 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_loop_index3_phi_fu_241_p4 = empty_40_reg_653;
    end else begin
        ap_phi_mux_loop_index3_phi_fu_241_p4 = loop_index3_reg_237;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        bram_x_Addr_A_orig = p_cast16_cast_fu_541_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bram_x_Addr_A_orig = loop_index3_cast25_fu_462_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        bram_x_Addr_A_orig = p_cast17_cast_fu_366_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        bram_x_Addr_A_orig = loop_index_cast_fu_361_p1;
    end else begin
        bram_x_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        bram_x_Din_A = empty_64_fu_534_p2;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bram_x_Din_A = gmem_addr_read_reg_662;
    end else begin
        bram_x_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (~((gmem_BVALID == 1'b0) & (empty_38_reg_571 == 1'd1)) & (1'b1 == ap_CS_fsm_state10)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        bram_x_EN_A = 1'b1;
    end else begin
        bram_x_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((empty_reg_558 == 1'd1) & (1'b1 == ap_CS_fsm_state36) & (ddrtobram_read_read_fu_132_p2 == 1'd1))) begin
        bram_x_WEN_A = empty_63_fu_516_p2;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond86_reg_658_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bram_x_WEN_A = 2'd3;
    end else begin
        bram_x_WEN_A = 2'd0;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        gmem_ARADDR = gmem_addr_2_reg_674;
    end else if (((ap_predicate_op79_readreq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        gmem_ARADDR = p_cast6_cast_fu_335_p1;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        gmem_ARLEN = 32'd1;
    end else if (((ap_predicate_op79_readreq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        gmem_ARLEN = p_cast_cast23_fu_346_p1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((ap_predicate_op79_readreq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_AWADDR = gmem_addr_3_reg_637;
    end else if (((ap_predicate_op72_writereq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        gmem_AWADDR = p_cast7_cast_fu_320_p1;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        gmem_AWLEN = 32'd1;
    end else if (((ap_predicate_op72_writereq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        gmem_AWLEN = p_cast_cast24_fu_331_p1;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_predicate_op72_writereq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | (~((gmem_BVALID == 1'b0) & (empty_38_reg_571 == 1'd1)) & (1'b1 == ap_CS_fsm_state10) & (empty_38_reg_571 == 1'd1)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond86_reg_658 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_WDATA = empty_52_reg_648;
    end else if (((exitcond108_reg_618_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        gmem_WDATA = bram_x_load_reg_627;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_WSTRB = empty_51_reg_643;
    end else if (((exitcond108_reg_618_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        gmem_WSTRB = 2'd3;
    end else begin
        gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((exitcond108_reg_618_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((1'b1 == ap_CS_fsm_state2) & (empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state2) & (empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd0)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state10) & (empty_38_reg_571 == 1'd1)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond86_reg_658 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((exitcond108_reg_618_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (empty_38_reg_571 == 1'd0) & (ddrtobram_read_read_fu_132_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io) & (empty_38_reg_571 == 1'd0) & (ddrtobram_read_read_fu_132_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond108_fu_356_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond108_fu_356_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((gmem_BVALID == 1'b0) & (empty_38_reg_571 == 1'd1)) & (empty_reg_558 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if ((~((gmem_BVALID == 1'b0) & (empty_38_reg_571 == 1'd1)) & (empty_reg_558 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((exitcond86_fu_457_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((exitcond86_fu_457_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((empty_reg_558 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd31];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (exitcond86_reg_658 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (exitcond86_reg_658 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10 = ((gmem_BVALID == 1'b0) & (empty_38_reg_571 == 1'd1));
end

assign ap_block_state24_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond86_reg_658 == 1'd0));
end

assign ap_block_state26_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((ap_predicate_op79_readreq_state2 == 1'b1) & (gmem_ARREADY == 1'b0)) | ((ap_predicate_op72_writereq_state2 == 1'b1) & (gmem_AWREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((gmem_WREADY == 1'b0) & (exitcond108_reg_618_pp0_iter1_reg == 1'd0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_op72_writereq_state2 = ((empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op79_readreq_state2 = ((empty_38_reg_571 == 1'd1) & (ddrtobram_read_read_fu_132_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bram_dx_Addr_A = 32'd0;

assign bram_dx_Addr_B = 32'd0;

assign bram_dx_Clk_A = ap_clk;

assign bram_dx_Clk_B = ap_clk;

assign bram_dx_Din_A = 16'd0;

assign bram_dx_Din_B = 16'd0;

assign bram_dx_EN_A = 1'b0;

assign bram_dx_EN_B = 1'b0;

assign bram_dx_Rst_A = ap_rst_n_inv;

assign bram_dx_Rst_B = ap_rst_n_inv;

assign bram_dx_WEN_A = 2'd0;

assign bram_dx_WEN_B = 2'd0;

assign bram_x_Addr_A = bram_x_Addr_A_orig << 32'd1;

assign bram_x_Clk_A = ap_clk;

assign bram_x_Rst_A = ap_rst_n_inv;

assign ddrtobram_read_read_fu_132_p2 = ddrtobram;

assign dim_cast4_fu_301_p1 = dim_read_reg_545;

assign empty_37_fu_310_p2 = ($signed(dim_cast4_fu_301_p1) - $signed(p_cast5_fu_307_p1));

assign empty_38_fu_295_p2 = ((p_cast_fu_285_p4 != 31'd0) ? 1'b1 : 1'b0);

assign empty_40_fu_447_p2 = (ap_phi_mux_loop_index3_phi_fu_241_p4 + 10'd1);

assign empty_42_fu_350_p2 = (loop_index_reg_226 + 63'd1);

assign empty_44_fu_381_p1 = empty_37_reg_584[0:0];

assign empty_45_fu_384_p1 = x_read_reg_550[0:0];

assign empty_47_fu_399_p2 = bram_x_Dout_A >> p_cast31_fu_395_p1;

assign empty_48_fu_405_p1 = empty_47_fu_399_p2[7:0];

assign empty_50_fu_413_p2 = (empty_45_fu_384_p1 ^ empty_44_fu_381_p1);

assign empty_51_fu_423_p2 = 2'd1 << p_cast32_fu_419_p1;

assign empty_52_fu_441_p2 = p_cast19_cast_fu_409_p1 << p_cast33_fu_437_p1;

assign empty_56_fu_467_p1 = empty_37_reg_584[0:0];

assign empty_57_fu_480_p1 = x_read_reg_550[0:0];

assign empty_60_fu_483_p2 = (empty_57_fu_480_p1 ^ empty_56_reg_667);

assign empty_61_fu_500_p2 = gmem_addr_2_read_reg_685 >> p_cast28_fu_496_p1;

assign empty_62_fu_505_p1 = empty_61_fu_500_p2[7:0];

assign empty_63_fu_516_p2 = 2'd1 << p_cast29_fu_513_p1;

assign empty_64_fu_534_p2 = p_cast14_cast_fu_509_p1 << p_cast30_fu_530_p1;

assign empty_fu_281_p0 = dim;

assign empty_fu_281_p1 = empty_fu_281_p0[0:0];

assign exitcond108_fu_356_p2 = ((loop_index_reg_226 == p_cast_cast_reg_579) ? 1'b1 : 1'b0);

assign exitcond86_fu_457_p2 = ((loop_index3_cast39_fu_453_p1 == p_cast_reg_563) ? 1'b1 : 1'b0);

assign grp_fu_249_p4 = {{x_read_reg_550[63:1]}};

assign grp_fu_258_p4 = {{empty_37_reg_584[10:1]}};

assign grp_fu_267_p2 = ($signed(p_cast22_reg_591) + $signed(x_read_reg_550));

assign grp_fu_271_p4 = {{grp_fu_267_p2[63:1]}};

assign loop_index3_cast25_fu_462_p1 = loop_index3_reg_237_pp1_iter1_reg;

assign loop_index3_cast39_fu_453_p1 = ap_phi_mux_loop_index3_phi_fu_241_p4;

assign loop_index_cast_fu_361_p1 = loop_index_reg_226;

assign p_cast12_cast_fu_470_p1 = $signed(grp_fu_271_p4);

assign p_cast14_cast_fu_509_p1 = empty_62_fu_505_p1;

assign p_cast16_cast_fu_541_p1 = tmp_3_reg_680;

assign p_cast17_cast_fu_366_p1 = grp_fu_258_p4;

assign p_cast19_cast_fu_409_p1 = empty_48_fu_405_p1;

assign p_cast21_cast_fu_371_p1 = $signed(grp_fu_271_p4);

assign p_cast22_fu_316_p1 = empty_37_fu_310_p2;

assign p_cast28_fu_496_p1 = tmp_fu_488_p3;

assign p_cast29_fu_513_p1 = empty_56_reg_667;

assign p_cast30_fu_530_p1 = tmp_2_fu_523_p3;

assign p_cast31_fu_395_p1 = tmp_6_fu_387_p3;

assign p_cast32_fu_419_p1 = empty_50_fu_413_p2;

assign p_cast33_fu_437_p1 = tmp_7_fu_429_p3;

assign p_cast5_fu_307_p1 = empty_reg_558;

assign p_cast6_cast_fu_335_p1 = $signed(grp_fu_249_p4);

assign p_cast7_cast_fu_320_p1 = $signed(grp_fu_249_p4);

assign p_cast_cast23_fu_346_p1 = p_cast_reg_563;

assign p_cast_cast24_fu_331_p1 = p_cast_reg_563;

assign p_cast_cast_fu_304_p1 = p_cast_reg_563;

assign p_cast_fu_285_p1 = dim;

assign p_cast_fu_285_p4 = {{p_cast_fu_285_p1[31:1]}};

assign tmp_2_fu_523_p3 = {{empty_56_reg_667}, {3'd0}};

assign tmp_6_fu_387_p3 = {{empty_44_fu_381_p1}, {3'd0}};

assign tmp_7_fu_429_p3 = {{empty_50_fu_413_p2}, {3'd0}};

assign tmp_fu_488_p3 = {{empty_60_fu_483_p2}, {3'd0}};

endmodule //InputLayer
