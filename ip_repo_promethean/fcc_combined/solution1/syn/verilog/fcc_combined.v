// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fcc_combined_fcc_combined,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=4631,HLS_SYN_LUT=5125,HLS_VERSION=2020_2}" *)

module fcc_combined (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 91'd1;
parameter    ap_ST_fsm_state2 = 91'd2;
parameter    ap_ST_fsm_state3 = 91'd4;
parameter    ap_ST_fsm_state4 = 91'd8;
parameter    ap_ST_fsm_state5 = 91'd16;
parameter    ap_ST_fsm_state6 = 91'd32;
parameter    ap_ST_fsm_state7 = 91'd64;
parameter    ap_ST_fsm_state8 = 91'd128;
parameter    ap_ST_fsm_pp0_stage0 = 91'd256;
parameter    ap_ST_fsm_state12 = 91'd512;
parameter    ap_ST_fsm_state13 = 91'd1024;
parameter    ap_ST_fsm_state14 = 91'd2048;
parameter    ap_ST_fsm_state15 = 91'd4096;
parameter    ap_ST_fsm_state16 = 91'd8192;
parameter    ap_ST_fsm_state17 = 91'd16384;
parameter    ap_ST_fsm_state18 = 91'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 91'd65536;
parameter    ap_ST_fsm_state22 = 91'd131072;
parameter    ap_ST_fsm_state23 = 91'd262144;
parameter    ap_ST_fsm_state24 = 91'd524288;
parameter    ap_ST_fsm_state25 = 91'd1048576;
parameter    ap_ST_fsm_state26 = 91'd2097152;
parameter    ap_ST_fsm_state27 = 91'd4194304;
parameter    ap_ST_fsm_state28 = 91'd8388608;
parameter    ap_ST_fsm_state29 = 91'd16777216;
parameter    ap_ST_fsm_pp2_stage0 = 91'd33554432;
parameter    ap_ST_fsm_state33 = 91'd67108864;
parameter    ap_ST_fsm_state34 = 91'd134217728;
parameter    ap_ST_fsm_state35 = 91'd268435456;
parameter    ap_ST_fsm_state36 = 91'd536870912;
parameter    ap_ST_fsm_state37 = 91'd1073741824;
parameter    ap_ST_fsm_state38 = 91'd2147483648;
parameter    ap_ST_fsm_state39 = 91'd4294967296;
parameter    ap_ST_fsm_state40 = 91'd8589934592;
parameter    ap_ST_fsm_state41 = 91'd17179869184;
parameter    ap_ST_fsm_state42 = 91'd34359738368;
parameter    ap_ST_fsm_state43 = 91'd68719476736;
parameter    ap_ST_fsm_pp3_stage0 = 91'd137438953472;
parameter    ap_ST_fsm_state47 = 91'd274877906944;
parameter    ap_ST_fsm_state48 = 91'd549755813888;
parameter    ap_ST_fsm_pp4_stage0 = 91'd1099511627776;
parameter    ap_ST_fsm_state57 = 91'd2199023255552;
parameter    ap_ST_fsm_pp5_stage0 = 91'd4398046511104;
parameter    ap_ST_fsm_state60 = 91'd8796093022208;
parameter    ap_ST_fsm_state61 = 91'd17592186044416;
parameter    ap_ST_fsm_state62 = 91'd35184372088832;
parameter    ap_ST_fsm_state63 = 91'd70368744177664;
parameter    ap_ST_fsm_state64 = 91'd140737488355328;
parameter    ap_ST_fsm_pp6_stage0 = 91'd281474976710656;
parameter    ap_ST_fsm_state68 = 91'd562949953421312;
parameter    ap_ST_fsm_state69 = 91'd1125899906842624;
parameter    ap_ST_fsm_state70 = 91'd2251799813685248;
parameter    ap_ST_fsm_state71 = 91'd4503599627370496;
parameter    ap_ST_fsm_state72 = 91'd9007199254740992;
parameter    ap_ST_fsm_state73 = 91'd18014398509481984;
parameter    ap_ST_fsm_state74 = 91'd36028797018963968;
parameter    ap_ST_fsm_state75 = 91'd72057594037927936;
parameter    ap_ST_fsm_state76 = 91'd144115188075855872;
parameter    ap_ST_fsm_state77 = 91'd288230376151711744;
parameter    ap_ST_fsm_state78 = 91'd576460752303423488;
parameter    ap_ST_fsm_state79 = 91'd1152921504606846976;
parameter    ap_ST_fsm_state80 = 91'd2305843009213693952;
parameter    ap_ST_fsm_state81 = 91'd4611686018427387904;
parameter    ap_ST_fsm_state82 = 91'd9223372036854775808;
parameter    ap_ST_fsm_state83 = 91'd18446744073709551616;
parameter    ap_ST_fsm_state84 = 91'd36893488147419103232;
parameter    ap_ST_fsm_pp8_stage0 = 91'd73786976294838206464;
parameter    ap_ST_fsm_state88 = 91'd147573952589676412928;
parameter    ap_ST_fsm_state89 = 91'd295147905179352825856;
parameter    ap_ST_fsm_state90 = 91'd590295810358705651712;
parameter    ap_ST_fsm_state91 = 91'd1180591620717411303424;
parameter    ap_ST_fsm_state92 = 91'd2361183241434822606848;
parameter    ap_ST_fsm_state93 = 91'd4722366482869645213696;
parameter    ap_ST_fsm_state94 = 91'd9444732965739290427392;
parameter    ap_ST_fsm_state95 = 91'd18889465931478580854784;
parameter    ap_ST_fsm_state96 = 91'd37778931862957161709568;
parameter    ap_ST_fsm_pp9_stage0 = 91'd75557863725914323419136;
parameter    ap_ST_fsm_state103 = 91'd151115727451828646838272;
parameter    ap_ST_fsm_state104 = 91'd302231454903657293676544;
parameter    ap_ST_fsm_pp10_stage0 = 91'd604462909807314587353088;
parameter    ap_ST_fsm_state108 = 91'd1208925819614629174706176;
parameter    ap_ST_fsm_state109 = 91'd2417851639229258349412352;
parameter    ap_ST_fsm_state110 = 91'd4835703278458516698824704;
parameter    ap_ST_fsm_state111 = 91'd9671406556917033397649408;
parameter    ap_ST_fsm_state112 = 91'd19342813113834066795298816;
parameter    ap_ST_fsm_pp11_stage0 = 91'd38685626227668133590597632;
parameter    ap_ST_fsm_state116 = 91'd77371252455336267181195264;
parameter    ap_ST_fsm_state117 = 91'd154742504910672534362390528;
parameter    ap_ST_fsm_state118 = 91'd309485009821345068724781056;
parameter    ap_ST_fsm_state119 = 91'd618970019642690137449562112;
parameter    ap_ST_fsm_state120 = 91'd1237940039285380274899124224;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM2_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM2_USER_VALUE = 0;
parameter    C_M_AXI_GMEM2_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM2_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_AWADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_AWID;
output  [7:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [C_M_AXI_GMEM2_AWUSER_WIDTH - 1:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_WDATA;
output  [C_M_AXI_GMEM2_WSTRB_WIDTH - 1:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_WID;
output  [C_M_AXI_GMEM2_WUSER_WIDTH - 1:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [C_M_AXI_GMEM2_ADDR_WIDTH - 1:0] m_axi_gmem2_ARADDR;
output  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_ARID;
output  [7:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [C_M_AXI_GMEM2_ARUSER_WIDTH - 1:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [C_M_AXI_GMEM2_DATA_WIDTH - 1:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_RID;
input  [C_M_AXI_GMEM2_RUSER_WIDTH - 1:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [C_M_AXI_GMEM2_ID_WIDTH - 1:0] m_axi_gmem2_BID;
input  [C_M_AXI_GMEM2_BUSER_WIDTH - 1:0] m_axi_gmem2_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [90:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] dx;
wire   [31:0] wt;
wire   [31:0] dwt;
wire   [31:0] b;
wire   [31:0] db;
wire   [31:0] y;
wire   [31:0] dy;
wire   [31:0] xdim;
wire   [31:0] ydim;
wire    fwprop;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln37_1_reg_1684;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln41_reg_1709;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln45_1_reg_1743;
wire    ap_CS_fsm_state90;
reg   [0:0] icmp_ln45_reg_1723;
wire    ap_CS_fsm_pp9_stage0;
reg    ap_enable_reg_pp9_iter1;
wire    ap_block_pp9_stage0;
reg   [0:0] icmp_ln66_reg_2108;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state104;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp10_iter2;
wire    ap_block_pp10_stage0;
reg   [0:0] icmp_ln71_reg_2152;
reg   [0:0] icmp_ln71_reg_2152_pp10_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state112;
reg   [0:0] icmp_ln37_reg_1663;
reg   [0:0] fwprop_read_reg_1596;
reg    gmem2_blk_n_AR;
wire    ap_CS_fsm_state78;
reg    gmem2_blk_n_R;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter1;
wire    ap_block_pp8_stage0;
reg   [0:0] icmp_ln56_reg_2050;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln81_reg_1815;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_state64;
reg    gmem2_blk_n_W;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln98_reg_1976;
reg   [0:0] icmp_ln98_reg_1976_pp6_iter1_reg;
reg    gmem2_blk_n_B;
wire    ap_CS_fsm_state72;
reg    ap_enable_reg_pp11_iter2;
wire    ap_block_pp11_stage0;
reg   [0:0] icmp_ln106_reg_2182;
reg   [0:0] icmp_ln106_reg_2182_pp11_iter1_reg;
wire    ap_CS_fsm_state120;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg    gmem2_AWVALID;
wire    gmem2_AWREADY;
reg   [31:0] gmem2_AWADDR;
reg    gmem2_WVALID;
wire    gmem2_WREADY;
reg   [15:0] gmem2_WDATA;
reg    gmem2_ARVALID;
wire    gmem2_ARREADY;
reg   [31:0] gmem2_ARADDR;
wire    gmem2_RVALID;
reg    gmem2_RREADY;
wire   [15:0] gmem2_RDATA;
wire    gmem2_RLAST;
wire   [0:0] gmem2_RID;
wire   [0:0] gmem2_RUSER;
wire   [1:0] gmem2_RRESP;
wire    gmem2_BVALID;
reg    gmem2_BREADY;
wire   [1:0] gmem2_BRESP;
wire   [0:0] gmem2_BID;
wire   [0:0] gmem2_BUSER;
reg   [30:0] i_reg_564;
reg   [30:0] i_1_reg_575;
reg   [30:0] i_2_reg_586;
reg   [30:0] j_reg_609;
reg   [62:0] indvar_flatten_reg_620;
reg   [30:0] i_6_reg_631;
reg   [30:0] j_1_reg_642;
reg   [30:0] i_8_reg_653;
reg   [30:0] j_4_reg_676;
reg   [30:0] j_2_reg_710;
reg   [30:0] j_3_reg_732;
reg   [15:0] rhs_reg_743;
reg   [30:0] i_9_reg_754;
reg   [30:0] i_11_reg_765;
reg   [31:0] ydim_read_reg_1600;
reg   [31:0] xdim_read_reg_1610;
reg   [31:0] dy_read_reg_1632;
reg   [31:0] y_read_reg_1637;
reg   [31:0] dwt_read_reg_1642;
reg   [31:0] wt_read_reg_1648;
reg   [31:0] dx_read_reg_1653;
reg   [31:0] x_read_reg_1658;
wire   [0:0] icmp_ln37_fu_785_p2;
reg   [31:0] gmem_addr_reg_1667;
wire   [30:0] trunc_ln37_fu_811_p1;
reg   [30:0] trunc_ln37_reg_1673;
wire    ap_CS_fsm_state8;
wire   [30:0] add_ln37_fu_814_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln37_1_fu_820_p2;
reg   [0:0] icmp_ln37_1_reg_1684_pp0_iter1_reg;
wire   [5:0] trunc_ln38_fu_825_p1;
reg   [5:0] trunc_ln38_reg_1688;
reg   [5:0] trunc_ln38_reg_1688_pp0_iter1_reg;
reg   [15:0] gmem_addr_read_reg_1693;
wire   [30:0] add_ln41_fu_853_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln41_fu_859_p2;
reg   [0:0] icmp_ln41_reg_1709_pp1_iter1_reg;
wire   [5:0] trunc_ln42_fu_864_p1;
reg   [5:0] trunc_ln42_reg_1713;
reg   [5:0] trunc_ln42_reg_1713_pp1_iter1_reg;
reg   [15:0] gmem_addr_1_read_reg_1718;
wire   [0:0] icmp_ln45_fu_872_p2;
wire    ap_CS_fsm_state22;
wire   [30:0] trunc_ln45_fu_888_p1;
reg   [30:0] trunc_ln45_reg_1733;
wire    ap_CS_fsm_state29;
wire   [30:0] add_ln45_fu_891_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state30_pp2_stage0_iter0;
reg    ap_block_state31_pp2_stage0_iter1;
wire    ap_block_state32_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln45_1_fu_897_p2;
reg   [0:0] icmp_ln45_1_reg_1743_pp2_iter1_reg;
wire   [5:0] trunc_ln46_fu_902_p1;
reg   [5:0] trunc_ln46_reg_1747;
reg   [5:0] trunc_ln46_reg_1747_pp2_iter1_reg;
reg   [15:0] gmem_addr_2_read_reg_1752;
wire   [30:0] empty_62_fu_910_p1;
reg   [30:0] empty_62_reg_1757;
wire    ap_CS_fsm_state33;
wire  signed [30:0] empty_63_fu_913_p1;
reg  signed [30:0] empty_63_reg_1765;
wire   [30:0] add_ln80_fu_916_p2;
reg   [30:0] add_ln80_reg_1771;
wire    ap_CS_fsm_state34;
wire   [5:0] empty_65_fu_927_p1;
reg   [5:0] empty_65_reg_1779;
wire   [0:0] icmp_ln80_fu_922_p2;
wire   [30:0] grp_fu_931_p2;
reg   [30:0] empty_66_reg_1794;
wire    ap_CS_fsm_state35;
wire   [11:0] mul_ln82_fu_951_p2;
reg   [11:0] mul_ln82_reg_1799;
wire    ap_CS_fsm_state36;
reg   [31:0] gmem2_addr_reg_1804;
wire   [30:0] add_ln81_fu_989_p2;
reg    ap_enable_reg_pp3_iter0;
wire    ap_block_state44_pp3_stage0_iter0;
reg    ap_block_state45_pp3_stage0_iter1;
wire    ap_block_state46_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
wire   [0:0] icmp_ln81_fu_999_p2;
reg   [0:0] icmp_ln81_reg_1815_pp3_iter1_reg;
wire   [11:0] add_ln82_fu_1008_p2;
reg   [11:0] add_ln82_reg_1819;
reg   [11:0] add_ln82_reg_1819_pp3_iter1_reg;
reg   [15:0] gmem2_addr_read_reg_1824;
wire   [62:0] grp_fu_942_p2;
reg   [62:0] mul_ln86_reg_1829;
wire    ap_CS_fsm_state48;
wire   [62:0] add_ln86_1_fu_1017_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state49_pp4_stage0_iter0;
wire    ap_block_state50_pp4_stage0_iter1;
wire    ap_block_state51_pp4_stage0_iter2;
wire    ap_block_state52_pp4_stage0_iter3;
wire    ap_block_state53_pp4_stage0_iter4;
wire    ap_block_state54_pp4_stage0_iter5;
wire    ap_block_state55_pp4_stage0_iter6;
wire    ap_block_state56_pp4_stage0_iter7;
wire    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln86_fu_1032_p2;
reg   [0:0] icmp_ln86_reg_1839;
reg   [0:0] icmp_ln86_reg_1839_pp4_iter1_reg;
reg   [0:0] icmp_ln86_reg_1839_pp4_iter2_reg;
reg   [0:0] icmp_ln86_reg_1839_pp4_iter3_reg;
reg   [0:0] icmp_ln86_reg_1839_pp4_iter4_reg;
reg   [0:0] icmp_ln86_reg_1839_pp4_iter5_reg;
reg   [0:0] icmp_ln86_reg_1839_pp4_iter6_reg;
wire   [5:0] select_ln86_2_fu_1059_p3;
reg   [5:0] select_ln86_2_reg_1843;
wire   [30:0] select_ln86_3_fu_1071_p3;
wire   [11:0] trunc_ln1118_fu_1079_p1;
reg   [11:0] trunc_ln1118_reg_1858;
reg   [11:0] trunc_ln1118_reg_1858_pp4_iter1_reg;
wire   [30:0] add_ln87_fu_1083_p2;
reg   [5:0] dxbuf_V_addr_1_reg_1874;
reg   [5:0] dxbuf_V_addr_1_reg_1874_pp4_iter2_reg;
reg   [5:0] dxbuf_V_addr_1_reg_1874_pp4_iter3_reg;
reg   [5:0] dxbuf_V_addr_1_reg_1874_pp4_iter4_reg;
reg   [5:0] dxbuf_V_addr_1_reg_1874_pp4_iter5_reg;
reg   [5:0] dxbuf_V_addr_1_reg_1874_pp4_iter6_reg;
wire  signed [28:0] sext_ln86_fu_1098_p1;
reg  signed [28:0] sext_ln86_reg_1885;
reg  signed [28:0] sext_ln86_reg_1885_pp4_iter3_reg;
reg   [11:0] dwbuf_V_addr_1_reg_1901;
reg   [11:0] dwbuf_V_addr_1_reg_1901_pp4_iter4_reg;
wire   [30:0] add_ln93_fu_1151_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state58_pp5_stage0_iter0;
wire    ap_block_state59_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln93_fu_1157_p2;
reg   [0:0] icmp_ln93_reg_1927;
reg   [5:0] dbbuf_V_addr_reg_1931;
wire   [30:0] add_ln97_fu_1179_p2;
reg   [30:0] add_ln97_reg_1942;
wire    ap_CS_fsm_state61;
wire   [5:0] empty_72_fu_1190_p1;
reg   [5:0] empty_72_reg_1950;
wire   [0:0] icmp_ln97_fu_1185_p2;
wire   [30:0] grp_fu_1194_p2;
reg   [30:0] empty_73_reg_1955;
wire    ap_CS_fsm_state62;
wire   [11:0] mul_ln99_fu_1202_p2;
reg   [11:0] mul_ln99_reg_1960;
wire    ap_CS_fsm_state63;
reg   [31:0] gmem2_addr_2_reg_1965;
wire   [30:0] add_ln98_fu_1240_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state65_pp6_stage0_iter0;
wire    ap_block_state66_pp6_stage0_iter1;
wire    ap_block_state67_pp6_stage0_iter2;
reg    ap_block_state67_io;
reg    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln98_fu_1250_p2;
wire   [15:0] dwbuf_V_q1;
reg   [15:0] dwbuf_V_load_reg_1985;
reg    ap_enable_reg_pp6_iter1;
wire   [30:0] add_ln51_fu_1269_p2;
wire    ap_CS_fsm_state73;
wire   [30:0] empty_49_fu_1293_p1;
reg   [30:0] empty_49_reg_1998;
wire    ap_CS_fsm_state74;
wire  signed [30:0] empty_50_fu_1296_p1;
reg  signed [30:0] empty_50_reg_2005;
wire   [30:0] add_ln55_fu_1299_p2;
reg   [30:0] add_ln55_reg_2010;
wire    ap_CS_fsm_state75;
wire   [5:0] empty_52_fu_1310_p1;
reg   [5:0] empty_52_reg_2018;
wire   [0:0] icmp_ln55_fu_1305_p2;
reg   [31:0] gmem_addr_3_reg_2023;
wire   [30:0] grp_fu_1314_p2;
reg   [30:0] empty_53_reg_2029;
wire    ap_CS_fsm_state76;
wire   [11:0] mul_ln57_fu_1332_p2;
reg   [11:0] mul_ln57_reg_2034;
wire    ap_CS_fsm_state77;
reg   [31:0] gmem2_addr_1_reg_2039;
wire   [30:0] add_ln56_fu_1370_p2;
reg    ap_enable_reg_pp8_iter0;
wire    ap_block_state85_pp8_stage0_iter0;
reg    ap_block_state86_pp8_stage0_iter1;
wire    ap_block_state87_pp8_stage0_iter2;
reg    ap_block_pp8_stage0_11001;
wire   [0:0] icmp_ln56_fu_1380_p2;
reg   [0:0] icmp_ln56_reg_2050_pp8_iter1_reg;
wire   [11:0] add_ln57_fu_1389_p2;
reg   [11:0] add_ln57_reg_2054;
reg   [11:0] add_ln57_reg_2054_pp8_iter1_reg;
reg   [15:0] gmem2_addr_1_read_reg_2059;
wire   [30:0] add_ln62_fu_1398_p2;
reg   [30:0] add_ln62_reg_2064;
wire    ap_CS_fsm_state89;
wire   [5:0] trunc_ln64_fu_1409_p1;
reg   [5:0] trunc_ln64_reg_2072;
wire   [0:0] icmp_ln62_fu_1404_p2;
reg   [5:0] ybuf_V_addr_reg_2082;
reg   [31:0] gmem_addr_4_reg_2087;
wire   [11:0] mul_ln1116_fu_1441_p2;
reg   [11:0] mul_ln1116_reg_2093;
wire   [15:0] bbuf_V_q0;
reg   [15:0] bbuf_V_load_reg_2098;
wire   [30:0] add_ln66_fu_1447_p2;
reg    ap_enable_reg_pp9_iter0;
wire    ap_block_state97_pp9_stage0_iter0;
reg    ap_block_state98_pp9_stage0_iter1;
wire    ap_block_state99_pp9_stage0_iter2;
wire    ap_block_state100_pp9_stage0_iter3;
wire    ap_block_state101_pp9_stage0_iter4;
wire    ap_block_state102_pp9_stage0_iter5;
reg    ap_block_pp9_stage0_11001;
wire   [0:0] icmp_ln66_fu_1457_p2;
reg   [0:0] icmp_ln66_reg_2108_pp9_iter1_reg;
reg   [0:0] icmp_ln66_reg_2108_pp9_iter2_reg;
reg   [0:0] icmp_ln66_reg_2108_pp9_iter3_reg;
reg   [0:0] icmp_ln66_reg_2108_pp9_iter4_reg;
wire   [11:0] add_ln1116_fu_1466_p2;
reg   [11:0] add_ln1116_reg_2112;
reg  signed [15:0] gmem_addr_3_read_reg_2122;
reg    ap_enable_reg_pp9_iter5;
wire   [30:0] add_ln71_fu_1499_p2;
wire    ap_CS_fsm_pp10_stage0;
reg    ap_enable_reg_pp10_iter0;
wire    ap_block_state105_pp10_stage0_iter0;
wire    ap_block_state106_pp10_stage0_iter1;
wire    ap_block_state107_pp10_stage0_iter2;
reg    ap_block_state107_io;
reg    ap_block_pp10_stage0_11001;
wire   [0:0] icmp_ln71_fu_1505_p2;
wire   [15:0] ybuf_V_q0;
reg   [15:0] ybuf_V_load_reg_2161;
reg    ap_enable_reg_pp10_iter1;
wire   [30:0] trunc_ln106_fu_1519_p1;
reg   [30:0] trunc_ln106_reg_2166;
wire   [30:0] add_ln106_fu_1542_p2;
wire    ap_CS_fsm_pp11_stage0;
reg    ap_enable_reg_pp11_iter0;
wire    ap_block_state113_pp11_stage0_iter0;
wire    ap_block_state114_pp11_stage0_iter1;
wire    ap_block_state115_pp11_stage0_iter2;
reg    ap_block_state115_io;
reg    ap_block_pp11_stage0_11001;
wire   [0:0] icmp_ln106_fu_1548_p2;
wire   [15:0] dxbuf_V_q1;
reg   [15:0] dxbuf_V_load_reg_2191;
reg    ap_enable_reg_pp11_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state30;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state43;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state44;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state49;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter6;
reg    ap_enable_reg_pp4_iter7;
wire    ap_CS_fsm_state57;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state58;
reg    ap_enable_reg_pp5_iter1;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state65;
wire    ap_CS_fsm_state84;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state85;
reg    ap_enable_reg_pp8_iter2;
wire    ap_CS_fsm_state96;
reg    ap_block_pp9_stage0_subdone;
reg    ap_condition_pp9_flush_enable;
reg    ap_enable_reg_pp9_iter2;
reg    ap_enable_reg_pp9_iter3;
reg    ap_enable_reg_pp9_iter4;
reg    ap_condition_pp9_exit_iter3_state100;
reg    ap_block_pp10_stage0_subdone;
reg    ap_condition_pp10_exit_iter0_state105;
reg    ap_predicate_op569_writeresp_state112;
reg    ap_block_state112;
reg    ap_block_state112_io;
reg    ap_block_pp11_stage0_subdone;
reg    ap_condition_pp11_exit_iter0_state113;
reg   [5:0] xbuf_V_address0;
reg    xbuf_V_ce0;
reg    xbuf_V_we0;
wire  signed [15:0] xbuf_V_q0;
reg   [5:0] dxbuf_V_address0;
reg    dxbuf_V_ce0;
reg    dxbuf_V_we0;
reg   [15:0] dxbuf_V_d0;
reg   [5:0] dxbuf_V_address1;
reg    dxbuf_V_ce1;
reg   [11:0] wbuf_V_address0;
reg    wbuf_V_ce0;
reg    wbuf_V_we0;
wire  signed [15:0] wbuf_V_q0;
reg   [5:0] bbuf_V_address0;
reg    bbuf_V_ce0;
reg    bbuf_V_we0;
reg   [11:0] dwbuf_V_address0;
reg    dwbuf_V_ce0;
reg    dwbuf_V_we0;
reg   [15:0] dwbuf_V_d0;
reg   [11:0] dwbuf_V_address1;
reg    dwbuf_V_ce1;
reg    dbbuf_V_ce0;
reg    dbbuf_V_we0;
wire   [15:0] dbbuf_V_d0;
wire   [5:0] dbbuf_V_address1;
reg    dbbuf_V_ce1;
wire   [15:0] dbbuf_V_q1;
reg   [5:0] ybuf_V_address0;
reg    ybuf_V_ce0;
reg    ybuf_V_we0;
reg   [15:0] ybuf_V_d0;
reg   [5:0] dybuf_V_address0;
reg    dybuf_V_ce0;
reg    dybuf_V_we0;
wire  signed [15:0] dybuf_V_q0;
reg  signed [30:0] i_4_reg_597;
wire    ap_CS_fsm_state47;
reg  signed [30:0] i_10_reg_664;
reg    ap_block_state72;
wire    ap_CS_fsm_state60;
reg   [30:0] i_3_reg_687;
wire   [0:0] icmp_ln51_fu_1279_p2;
reg  signed [30:0] i_5_reg_698;
wire    ap_CS_fsm_state88;
reg   [30:0] i_7_reg_721;
wire    ap_CS_fsm_state103;
reg   [15:0] ap_phi_mux_rhs_phi_fu_747_p4;
wire   [31:0] zext_ln38_fu_829_p1;
wire   [31:0] zext_ln42_fu_868_p1;
wire   [31:0] zext_ln46_fu_906_p1;
wire   [31:0] zext_ln82_1_fu_1013_p1;
wire   [31:0] zext_ln86_2_fu_1089_p1;
wire    ap_block_pp4_stage0;
wire   [31:0] zext_ln1118_fu_1093_p1;
wire   [31:0] zext_ln1118_2_fu_1106_p1;
wire   [31:0] zext_ln703_fu_1166_p1;
wire    ap_block_pp5_stage0;
wire   [31:0] zext_ln99_1_fu_1264_p1;
wire   [31:0] zext_ln52_fu_1288_p1;
wire   [31:0] zext_ln57_1_fu_1394_p1;
wire   [31:0] zext_ln64_fu_1413_p1;
wire   [31:0] zext_ln1116_1_fu_1471_p1;
wire   [31:0] zext_ln72_fu_1514_p1;
wire   [31:0] zext_ln107_fu_1557_p1;
wire  signed [31:0] sext_ln37_fu_801_p1;
wire  signed [31:0] sext_ln41_fu_842_p1;
wire  signed [31:0] sext_ln45_fu_877_p1;
wire  signed [31:0] sext_ln81_fu_979_p1;
wire  signed [31:0] sext_ln98_fu_1230_p1;
wire  signed [31:0] sext_ln66_fu_1319_p1;
wire  signed [31:0] sext_ln56_fu_1360_p1;
wire  signed [31:0] sext_ln71_fu_1428_p1;
wire  signed [31:0] sext_ln106_fu_1531_p1;
wire    ap_block_pp6_stage0_01001;
reg    ap_block_state90_io;
wire    ap_block_pp10_stage0_01001;
reg    ap_block_state120;
wire    ap_block_pp11_stage0_01001;
wire   [30:0] trunc_ln_fu_791_p4;
wire   [30:0] trunc_ln1_fu_833_p4;
wire   [30:0] grp_fu_776_p4;
wire   [30:0] grp_fu_942_p0;
wire   [31:0] grp_fu_942_p1;
wire   [5:0] mul_ln82_fu_951_p0;
wire   [6:0] mul_ln82_fu_951_p1;
wire   [31:0] tmp_fu_957_p3;
wire   [31:0] empty_67_fu_964_p2;
wire   [30:0] trunc_ln7_fu_969_p4;
wire   [31:0] j_cast_fu_995_p1;
wire   [11:0] trunc_ln82_fu_1004_p1;
wire   [31:0] j_1_cast_fu_1023_p1;
wire   [0:0] icmp_ln87_fu_1027_p2;
wire   [30:0] add_ln86_fu_1037_p2;
wire   [5:0] trunc_ln86_fu_1051_p1;
wire   [5:0] trunc_ln86_1_fu_1055_p1;
wire   [30:0] select_ln86_fu_1043_p3;
wire   [11:0] grp_fu_1562_p3;
wire  signed [28:0] grp_fu_1570_p3;
wire  signed [28:0] grp_fu_1579_p3;
wire   [5:0] trunc_ln703_fu_1162_p1;
wire   [5:0] mul_ln99_fu_1202_p0;
wire   [6:0] mul_ln99_fu_1202_p1;
wire   [31:0] tmp_2_fu_1208_p3;
wire   [31:0] empty_74_fu_1215_p2;
wire   [30:0] trunc_ln6_fu_1220_p4;
wire   [31:0] j_4_cast_fu_1246_p1;
wire   [11:0] trunc_ln99_fu_1255_p1;
wire   [11:0] add_ln99_fu_1259_p2;
wire   [31:0] i_3_cast_fu_1275_p1;
wire   [5:0] trunc_ln52_fu_1284_p1;
wire   [5:0] mul_ln57_fu_1332_p0;
wire   [6:0] mul_ln57_fu_1332_p1;
wire   [31:0] tmp_1_fu_1338_p3;
wire   [31:0] empty_54_fu_1345_p2;
wire   [30:0] trunc_ln3_fu_1350_p4;
wire   [31:0] j_2_cast_fu_1376_p1;
wire   [11:0] trunc_ln57_fu_1385_p1;
wire   [30:0] trunc_ln5_fu_1419_p4;
wire   [5:0] mul_ln1116_fu_1441_p0;
wire   [6:0] mul_ln1116_fu_1441_p1;
wire   [31:0] j_3_cast_fu_1453_p1;
wire   [11:0] trunc_ln1116_fu_1462_p1;
wire  signed [28:0] grp_fu_1587_p3;
wire   [5:0] trunc_ln72_fu_1510_p1;
wire   [30:0] trunc_ln9_fu_1522_p4;
wire   [5:0] trunc_ln107_fu_1553_p1;
wire   [5:0] grp_fu_1562_p0;
wire   [6:0] grp_fu_1562_p1;
wire   [28:0] grp_fu_1570_p2;
wire  signed [15:0] grp_fu_1579_p1;
wire   [28:0] grp_fu_1579_p2;
wire   [28:0] grp_fu_1587_p2;
reg    grp_fu_1587_ce;
reg   [90:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
reg    ap_idle_pp9;
wire    ap_enable_pp9;
reg    ap_idle_pp10;
wire    ap_enable_pp10;
reg    ap_idle_pp11;
wire    ap_enable_pp11;
wire   [11:0] grp_fu_1562_p00;
wire   [62:0] grp_fu_942_p00;
wire   [62:0] grp_fu_942_p10;
wire   [11:0] mul_ln1116_fu_1441_p00;
wire   [11:0] mul_ln57_fu_1332_p00;
wire   [11:0] mul_ln82_fu_951_p00;
wire   [11:0] mul_ln99_fu_1202_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 91'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 ap_enable_reg_pp10_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp11_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter5 = 1'b0;
#0 ap_enable_reg_pp10_iter0 = 1'b0;
#0 ap_enable_reg_pp10_iter1 = 1'b0;
#0 ap_enable_reg_pp11_iter0 = 1'b0;
#0 ap_enable_reg_pp11_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter3 = 1'b0;
#0 ap_enable_reg_pp9_iter4 = 1'b0;
end

fcc_combined_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .x(x),
    .dx(dx),
    .wt(wt),
    .dwt(dwt),
    .b(b),
    .db(db),
    .y(y),
    .dy(dy),
    .xdim(xdim),
    .ydim(ydim),
    .fwprop(fwprop),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

fcc_combined_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_4_reg_2087),
    .I_AWID(1'd0),
    .I_AWLEN(ydim_read_reg_1600),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(ybuf_V_load_reg_2161),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

fcc_combined_gmem2_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM2_CACHE_VALUE ))
gmem2_m_axi_U(
    .AWVALID(m_axi_gmem2_AWVALID),
    .AWREADY(m_axi_gmem2_AWREADY),
    .AWADDR(m_axi_gmem2_AWADDR),
    .AWID(m_axi_gmem2_AWID),
    .AWLEN(m_axi_gmem2_AWLEN),
    .AWSIZE(m_axi_gmem2_AWSIZE),
    .AWBURST(m_axi_gmem2_AWBURST),
    .AWLOCK(m_axi_gmem2_AWLOCK),
    .AWCACHE(m_axi_gmem2_AWCACHE),
    .AWPROT(m_axi_gmem2_AWPROT),
    .AWQOS(m_axi_gmem2_AWQOS),
    .AWREGION(m_axi_gmem2_AWREGION),
    .AWUSER(m_axi_gmem2_AWUSER),
    .WVALID(m_axi_gmem2_WVALID),
    .WREADY(m_axi_gmem2_WREADY),
    .WDATA(m_axi_gmem2_WDATA),
    .WSTRB(m_axi_gmem2_WSTRB),
    .WLAST(m_axi_gmem2_WLAST),
    .WID(m_axi_gmem2_WID),
    .WUSER(m_axi_gmem2_WUSER),
    .ARVALID(m_axi_gmem2_ARVALID),
    .ARREADY(m_axi_gmem2_ARREADY),
    .ARADDR(m_axi_gmem2_ARADDR),
    .ARID(m_axi_gmem2_ARID),
    .ARLEN(m_axi_gmem2_ARLEN),
    .ARSIZE(m_axi_gmem2_ARSIZE),
    .ARBURST(m_axi_gmem2_ARBURST),
    .ARLOCK(m_axi_gmem2_ARLOCK),
    .ARCACHE(m_axi_gmem2_ARCACHE),
    .ARPROT(m_axi_gmem2_ARPROT),
    .ARQOS(m_axi_gmem2_ARQOS),
    .ARREGION(m_axi_gmem2_ARREGION),
    .ARUSER(m_axi_gmem2_ARUSER),
    .RVALID(m_axi_gmem2_RVALID),
    .RREADY(m_axi_gmem2_RREADY),
    .RDATA(m_axi_gmem2_RDATA),
    .RLAST(m_axi_gmem2_RLAST),
    .RID(m_axi_gmem2_RID),
    .RUSER(m_axi_gmem2_RUSER),
    .RRESP(m_axi_gmem2_RRESP),
    .BVALID(m_axi_gmem2_BVALID),
    .BREADY(m_axi_gmem2_BREADY),
    .BRESP(m_axi_gmem2_BRESP),
    .BID(m_axi_gmem2_BID),
    .BUSER(m_axi_gmem2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem2_ARVALID),
    .I_ARREADY(gmem2_ARREADY),
    .I_ARADDR(gmem2_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(xdim_read_reg_1610),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem2_RVALID),
    .I_RREADY(gmem2_RREADY),
    .I_RDATA(gmem2_RDATA),
    .I_RID(gmem2_RID),
    .I_RUSER(gmem2_RUSER),
    .I_RRESP(gmem2_RRESP),
    .I_RLAST(gmem2_RLAST),
    .I_AWVALID(gmem2_AWVALID),
    .I_AWREADY(gmem2_AWREADY),
    .I_AWADDR(gmem2_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(xdim_read_reg_1610),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem2_WVALID),
    .I_WREADY(gmem2_WREADY),
    .I_WDATA(gmem2_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem2_BVALID),
    .I_BREADY(gmem2_BREADY),
    .I_BRESP(gmem2_BRESP),
    .I_BID(gmem2_BID),
    .I_BUSER(gmem2_BUSER)
);

fcc_combined_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
xbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xbuf_V_address0),
    .ce0(xbuf_V_ce0),
    .we0(xbuf_V_we0),
    .d0(gmem_addr_2_read_reg_1752),
    .q0(xbuf_V_q0)
);

fcc_combined_dxbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dxbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dxbuf_V_address0),
    .ce0(dxbuf_V_ce0),
    .we0(dxbuf_V_we0),
    .d0(dxbuf_V_d0),
    .address1(dxbuf_V_address1),
    .ce1(dxbuf_V_ce1),
    .q1(dxbuf_V_q1)
);

fcc_combined_wbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
wbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(wbuf_V_address0),
    .ce0(wbuf_V_ce0),
    .we0(wbuf_V_we0),
    .d0(gmem2_addr_1_read_reg_2059),
    .q0(wbuf_V_q0)
);

fcc_combined_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
bbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bbuf_V_address0),
    .ce0(bbuf_V_ce0),
    .we0(bbuf_V_we0),
    .d0(gmem_addr_read_reg_1693),
    .q0(bbuf_V_q0)
);

fcc_combined_dwbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
dwbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dwbuf_V_address0),
    .ce0(dwbuf_V_ce0),
    .we0(dwbuf_V_we0),
    .d0(dwbuf_V_d0),
    .address1(dwbuf_V_address1),
    .ce1(dwbuf_V_ce1),
    .q1(dwbuf_V_q1)
);

fcc_combined_dxbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dbbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dbbuf_V_addr_reg_1931),
    .ce0(dbbuf_V_ce0),
    .we0(dbbuf_V_we0),
    .d0(dbbuf_V_d0),
    .address1(dbbuf_V_address1),
    .ce1(dbbuf_V_ce1),
    .q1(dbbuf_V_q1)
);

fcc_combined_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
ybuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ybuf_V_address0),
    .ce0(ybuf_V_ce0),
    .we0(ybuf_V_we0),
    .d0(ybuf_V_d0),
    .q0(ybuf_V_q0)
);

fcc_combined_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dybuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dybuf_V_address0),
    .ce0(dybuf_V_ce0),
    .we0(dybuf_V_we0),
    .d0(gmem_addr_1_read_reg_1718),
    .q0(dybuf_V_q0)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_4_reg_597),
    .din1(empty_63_reg_1765),
    .ce(1'b1),
    .dout(grp_fu_931_p2)
);

fcc_combined_mul_31ns_32ns_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 63 ))
mul_31ns_32ns_63_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_942_p0),
    .din1(grp_fu_942_p1),
    .ce(1'b1),
    .dout(grp_fu_942_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U3(
    .din0(mul_ln82_fu_951_p0),
    .din1(mul_ln82_fu_951_p1),
    .dout(mul_ln82_fu_951_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_10_reg_664),
    .din1(empty_63_reg_1765),
    .ce(1'b1),
    .dout(grp_fu_1194_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U5(
    .din0(mul_ln99_fu_1202_p0),
    .din1(mul_ln99_fu_1202_p1),
    .dout(mul_ln99_fu_1202_p2)
);

fcc_combined_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(i_5_reg_698),
    .din1(empty_50_reg_2005),
    .ce(1'b1),
    .dout(grp_fu_1314_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U7(
    .din0(mul_ln57_fu_1332_p0),
    .din1(mul_ln57_fu_1332_p1),
    .dout(mul_ln57_fu_1332_p2)
);

fcc_combined_mul_6ns_7ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
mul_6ns_7ns_12_1_1_U8(
    .din0(mul_ln1116_fu_1441_p0),
    .din1(mul_ln1116_fu_1441_p1),
    .dout(mul_ln1116_fu_1441_p2)
);

fcc_combined_mac_muladd_6ns_7ns_12ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mac_muladd_6ns_7ns_12ns_12_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1562_p0),
    .din1(grp_fu_1562_p1),
    .din2(trunc_ln1118_reg_1858_pp4_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_1562_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(xbuf_V_q0),
    .din1(dybuf_V_q0),
    .din2(grp_fu_1570_p2),
    .ce(1'b1),
    .dout(grp_fu_1570_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(wbuf_V_q0),
    .din1(grp_fu_1579_p1),
    .din2(grp_fu_1579_p2),
    .ce(1'b1),
    .dout(grp_fu_1579_p3)
);

fcc_combined_mac_muladd_16s_16s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_16s_29ns_29_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(gmem_addr_3_read_reg_2122),
    .din1(wbuf_V_q0),
    .din2(grp_fu_1587_p2),
    .ce(grp_fu_1587_ce),
    .dout(grp_fu_1587_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp10_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp10_stage0_subdone) & (1'b1 == ap_condition_pp10_exit_iter0_state105) & (1'b1 == ap_CS_fsm_pp10_stage0))) begin
            ap_enable_reg_pp10_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state104))) begin
            ap_enable_reg_pp10_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp10_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp10_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp10_exit_iter0_state105)) begin
                ap_enable_reg_pp10_iter1 <= (1'b1 ^ ap_condition_pp10_exit_iter0_state105);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp10_iter1 <= ap_enable_reg_pp10_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp10_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp10_stage0_subdone)) begin
            ap_enable_reg_pp10_iter2 <= ap_enable_reg_pp10_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state104))) begin
            ap_enable_reg_pp10_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp11_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp11_stage0_subdone) & (1'b1 == ap_condition_pp11_exit_iter0_state113) & (1'b1 == ap_CS_fsm_pp11_stage0))) begin
            ap_enable_reg_pp11_iter0 <= 1'b0;
        end else if ((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
            ap_enable_reg_pp11_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp11_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp11_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp11_exit_iter0_state113)) begin
                ap_enable_reg_pp11_iter1 <= (1'b1 ^ ap_condition_pp11_exit_iter0_state113);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp11_iter1 <= ap_enable_reg_pp11_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp11_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp11_stage0_subdone)) begin
            ap_enable_reg_pp11_iter2 <= ap_enable_reg_pp11_iter1;
        end else if ((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
            ap_enable_reg_pp11_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state19))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state30))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state30)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state30);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state44))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state44)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state44);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state49))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state49)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state49);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp4_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state58))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_condition_pp5_exit_iter0_state58))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state58);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp6_stage0_subdone) & (1'b1 == ap_condition_pp6_exit_iter0_state65) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state65)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state65);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if (((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp8_stage0_subdone) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b1 == ap_condition_pp8_exit_iter0_state85))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state84)) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state85)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state85);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if ((1'b1 == ap_CS_fsm_state84)) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp9_flush_enable)) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state96)) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter3 <= ap_enable_reg_pp9_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp9_exit_iter3_state100)) begin
                ap_enable_reg_pp9_iter4 <= ap_enable_reg_pp9_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp9_iter4 <= ap_enable_reg_pp9_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter5 <= ap_enable_reg_pp9_iter4;
        end else if ((1'b1 == ap_CS_fsm_state96)) begin
            ap_enable_reg_pp9_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        i_10_reg_664 <= 31'd0;
    end else if ((~((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1)) & (1'b1 == ap_CS_fsm_state72))) begin
        i_10_reg_664 <= add_ln97_reg_1942;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
        i_11_reg_765 <= 31'd0;
    end else if (((1'b0 == ap_block_pp11_stage0_11001) & (1'b1 == ap_CS_fsm_pp11_stage0) & (icmp_ln106_fu_1548_p2 == 1'd0) & (ap_enable_reg_pp11_iter0 == 1'b1))) begin
        i_11_reg_765 <= add_ln106_fu_1542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_1_reg_575 <= 31'd0;
    end else if (((icmp_ln41_fu_859_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_1_reg_575 <= add_ln41_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_2_reg_586 <= 31'd0;
    end else if (((icmp_ln45_1_fu_897_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_2_reg_586 <= add_ln45_fu_891_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((fwprop_read_reg_1596 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        i_3_reg_687 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln51_fu_1279_p2 == 1'd0))) begin
        i_3_reg_687 <= add_ln51_fu_1269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((fwprop_read_reg_1596 == 1'd0) & (icmp_ln37_reg_1663 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        i_4_reg_597 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        i_4_reg_597 <= add_ln80_reg_1771;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1663 == 1'd1) & (1'b1 == ap_CS_fsm_state74))) begin
        i_5_reg_698 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        i_5_reg_698 <= add_ln55_reg_2010;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_1032_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_6_reg_631 <= select_ln86_3_fu_1071_p3;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        i_6_reg_631 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln55_fu_1305_p2 == 1'd1))) begin
        i_7_reg_721 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        i_7_reg_721 <= add_ln62_reg_2064;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        i_8_reg_653 <= 31'd0;
    end else if (((icmp_ln93_fu_1157_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        i_8_reg_653 <= add_ln93_fu_1151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state104))) begin
        i_9_reg_754 <= 31'd0;
    end else if (((1'b0 == ap_block_pp10_stage0_11001) & (1'b1 == ap_CS_fsm_pp10_stage0) & (icmp_ln71_fu_1505_p2 == 1'd0) & (ap_enable_reg_pp10_iter0 == 1'b1))) begin
        i_9_reg_754 <= add_ln71_fu_1499_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_564 <= 31'd0;
    end else if (((icmp_ln37_1_fu_820_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_564 <= add_ln37_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_1032_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        indvar_flatten_reg_620 <= add_ln86_1_fu_1017_p2;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        indvar_flatten_reg_620 <= 63'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_1032_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        j_1_reg_642 <= add_ln87_fu_1083_p2;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        j_1_reg_642 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        j_2_reg_710 <= 31'd0;
    end else if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln56_fu_1380_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1))) begin
        j_2_reg_710 <= add_ln56_fu_1370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln66_fu_1457_p2 == 1'd0) & (ap_enable_reg_pp9_iter0 == 1'b1))) begin
        j_3_reg_732 <= add_ln66_fu_1447_p2;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        j_3_reg_732 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        j_4_reg_676 <= 31'd0;
    end else if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln98_fu_1250_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        j_4_reg_676 <= add_ln98_fu_1240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        j_reg_609 <= 31'd0;
    end else if (((icmp_ln81_fu_999_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        j_reg_609 <= add_ln81_fu_989_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (ap_enable_reg_pp9_iter5 == 1'b1) & (icmp_ln66_reg_2108_pp9_iter4_reg == 1'd0))) begin
        rhs_reg_743 <= {{grp_fu_1587_p3[28:13]}};
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        rhs_reg_743 <= bbuf_V_load_reg_2098;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln66_fu_1457_p2 == 1'd0))) begin
        add_ln1116_reg_2112 <= add_ln1116_fu_1466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        add_ln55_reg_2010 <= add_ln55_fu_1299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln56_fu_1380_p2 == 1'd0))) begin
        add_ln57_reg_2054 <= add_ln57_fu_1389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        add_ln57_reg_2054_pp8_iter1_reg <= add_ln57_reg_2054;
        icmp_ln56_reg_2050 <= icmp_ln56_fu_1380_p2;
        icmp_ln56_reg_2050_pp8_iter1_reg <= icmp_ln56_reg_2050;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        add_ln62_reg_2064 <= add_ln62_fu_1398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        add_ln80_reg_1771 <= add_ln80_fu_916_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_fu_999_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln82_reg_1819 <= add_ln82_fu_1008_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln82_reg_1819_pp3_iter1_reg <= add_ln82_reg_1819;
        icmp_ln81_reg_1815 <= icmp_ln81_fu_999_p2;
        icmp_ln81_reg_1815_pp3_iter1_reg <= icmp_ln81_reg_1815;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        add_ln97_reg_1942 <= add_ln97_fu_1179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        bbuf_V_load_reg_2098 <= bbuf_V_q0;
        mul_ln1116_reg_2093 <= mul_ln1116_fu_1441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_fu_1157_p2 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        dbbuf_V_addr_reg_1931 <= zext_ln703_fu_1166_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1839_pp4_iter2_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        dwbuf_V_addr_1_reg_1901 <= zext_ln1118_2_fu_1106_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        dwbuf_V_addr_1_reg_1901_pp4_iter4_reg <= dwbuf_V_addr_1_reg_1901;
        dxbuf_V_addr_1_reg_1874_pp4_iter2_reg <= dxbuf_V_addr_1_reg_1874;
        dxbuf_V_addr_1_reg_1874_pp4_iter3_reg <= dxbuf_V_addr_1_reg_1874_pp4_iter2_reg;
        dxbuf_V_addr_1_reg_1874_pp4_iter4_reg <= dxbuf_V_addr_1_reg_1874_pp4_iter3_reg;
        dxbuf_V_addr_1_reg_1874_pp4_iter5_reg <= dxbuf_V_addr_1_reg_1874_pp4_iter4_reg;
        dxbuf_V_addr_1_reg_1874_pp4_iter6_reg <= dxbuf_V_addr_1_reg_1874_pp4_iter5_reg;
        icmp_ln86_reg_1839_pp4_iter2_reg <= icmp_ln86_reg_1839_pp4_iter1_reg;
        icmp_ln86_reg_1839_pp4_iter3_reg <= icmp_ln86_reg_1839_pp4_iter2_reg;
        icmp_ln86_reg_1839_pp4_iter4_reg <= icmp_ln86_reg_1839_pp4_iter3_reg;
        icmp_ln86_reg_1839_pp4_iter5_reg <= icmp_ln86_reg_1839_pp4_iter4_reg;
        icmp_ln86_reg_1839_pp4_iter6_reg <= icmp_ln86_reg_1839_pp4_iter5_reg;
        sext_ln86_reg_1885_pp4_iter3_reg <= sext_ln86_reg_1885;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_reg_1976 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter1 == 1'b1))) begin
        dwbuf_V_load_reg_1985 <= dwbuf_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dwt_read_reg_1642 <= dwt;
        dx_read_reg_1653 <= dx;
        dy_read_reg_1632 <= dy;
        fwprop_read_reg_1596 <= fwprop;
        icmp_ln37_reg_1663 <= icmp_ln37_fu_785_p2;
        wt_read_reg_1648 <= wt;
        x_read_reg_1658 <= x;
        xdim_read_reg_1610 <= xdim;
        y_read_reg_1637 <= y;
        ydim_read_reg_1600 <= ydim;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1839 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        dxbuf_V_addr_1_reg_1874 <= zext_ln1118_fu_1093_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln106_reg_2182 == 1'd0) & (1'b0 == ap_block_pp11_stage0_11001) & (1'b1 == ap_CS_fsm_pp11_stage0) & (ap_enable_reg_pp11_iter1 == 1'b1))) begin
        dxbuf_V_load_reg_2191 <= dxbuf_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_1663 == 1'd1) & (1'b1 == ap_CS_fsm_state74))) begin
        empty_49_reg_1998 <= empty_49_fu_1293_p1;
        empty_50_reg_2005 <= empty_50_fu_1296_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln55_fu_1305_p2 == 1'd0))) begin
        empty_52_reg_2018 <= empty_52_fu_1310_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        empty_53_reg_2029 <= grp_fu_1314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((fwprop_read_reg_1596 == 1'd0) & (icmp_ln37_reg_1663 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        empty_62_reg_1757 <= empty_62_fu_910_p1;
        empty_63_reg_1765 <= empty_63_fu_913_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_922_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
        empty_65_reg_1779 <= empty_65_fu_927_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        empty_66_reg_1794 <= grp_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_1185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state61))) begin
        empty_72_reg_1950 <= empty_72_fu_1190_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        empty_73_reg_1955 <= grp_fu_1194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_2050 == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0))) begin
        gmem2_addr_1_read_reg_2059 <= gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        gmem2_addr_1_reg_2039 <= sext_ln56_fu_1360_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state63))) begin
        gmem2_addr_2_reg_1965 <= sext_ln98_fu_1230_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln81_reg_1815 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        gmem2_addr_read_reg_1824 <= gmem2_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        gmem2_addr_reg_1804 <= sext_ln81_fu_979_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_reg_1709 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        gmem_addr_1_read_reg_1718 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_1_reg_1743 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        gmem_addr_2_read_reg_1752 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_reg_2108 == 1'd0) & (1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        gmem_addr_3_read_reg_2122 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln55_fu_1305_p2 == 1'd1))) begin
        gmem_addr_3_reg_2023 <= sext_ln66_fu_1319_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln62_fu_1404_p2 == 1'd1))) begin
        gmem_addr_4_reg_2087 <= sext_ln71_fu_1428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_1_reg_1684 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_read_reg_1693 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_785_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        gmem_addr_reg_1667 <= sext_ln37_fu_801_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp11_stage0_11001) & (1'b1 == ap_CS_fsm_pp11_stage0))) begin
        icmp_ln106_reg_2182 <= icmp_ln106_fu_1548_p2;
        icmp_ln106_reg_2182_pp11_iter1_reg <= icmp_ln106_reg_2182;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln37_1_reg_1684 <= icmp_ln37_1_fu_820_p2;
        icmp_ln37_1_reg_1684_pp0_iter1_reg <= icmp_ln37_1_reg_1684;
        trunc_ln38_reg_1688_pp0_iter1_reg <= trunc_ln38_reg_1688;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln41_reg_1709 <= icmp_ln41_fu_859_p2;
        icmp_ln41_reg_1709_pp1_iter1_reg <= icmp_ln41_reg_1709;
        trunc_ln42_reg_1713_pp1_iter1_reg <= trunc_ln42_reg_1713;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln45_1_reg_1743 <= icmp_ln45_1_fu_897_p2;
        icmp_ln45_1_reg_1743_pp2_iter1_reg <= icmp_ln45_1_reg_1743;
        trunc_ln46_reg_1747_pp2_iter1_reg <= trunc_ln46_reg_1747;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        icmp_ln45_reg_1723 <= icmp_ln45_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        icmp_ln66_reg_2108 <= icmp_ln66_fu_1457_p2;
        icmp_ln66_reg_2108_pp9_iter1_reg <= icmp_ln66_reg_2108;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp9_stage0_11001)) begin
        icmp_ln66_reg_2108_pp9_iter2_reg <= icmp_ln66_reg_2108_pp9_iter1_reg;
        icmp_ln66_reg_2108_pp9_iter3_reg <= icmp_ln66_reg_2108_pp9_iter2_reg;
        icmp_ln66_reg_2108_pp9_iter4_reg <= icmp_ln66_reg_2108_pp9_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp10_stage0_11001) & (1'b1 == ap_CS_fsm_pp10_stage0))) begin
        icmp_ln71_reg_2152 <= icmp_ln71_fu_1505_p2;
        icmp_ln71_reg_2152_pp10_iter1_reg <= icmp_ln71_reg_2152;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln86_reg_1839 <= icmp_ln86_fu_1032_p2;
        icmp_ln86_reg_1839_pp4_iter1_reg <= icmp_ln86_reg_1839;
        trunc_ln1118_reg_1858_pp4_iter1_reg <= trunc_ln1118_reg_1858;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln93_reg_1927 <= icmp_ln93_fu_1157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln98_reg_1976 <= icmp_ln98_fu_1250_p2;
        icmp_ln98_reg_1976_pp6_iter1_reg <= icmp_ln98_reg_1976;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        mul_ln57_reg_2034 <= mul_ln57_fu_1332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        mul_ln82_reg_1799 <= mul_ln82_fu_951_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        mul_ln86_reg_1829 <= grp_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        mul_ln99_reg_1960 <= mul_ln99_fu_1202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_fu_1032_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        select_ln86_2_reg_1843 <= select_ln86_2_fu_1059_p3;
        trunc_ln1118_reg_1858 <= trunc_ln1118_fu_1079_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln86_reg_1839_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        sext_ln86_reg_1885 <= sext_ln86_fu_1098_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
        trunc_ln106_reg_2166 <= trunc_ln106_fu_1519_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln37_reg_1673 <= trunc_ln37_fu_811_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_1_fu_820_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln38_reg_1688 <= trunc_ln38_fu_825_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_859_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        trunc_ln42_reg_1713 <= trunc_ln42_fu_864_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        trunc_ln45_reg_1733 <= trunc_ln45_fu_888_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_1_fu_897_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        trunc_ln46_reg_1747 <= trunc_ln46_fu_902_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln62_fu_1404_p2 == 1'd0))) begin
        trunc_ln64_reg_2072 <= trunc_ln64_fu_1409_p1;
        ybuf_V_addr_reg_2082 <= zext_ln64_fu_1413_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_reg_2152 == 1'd0) & (1'b0 == ap_block_pp10_stage0_11001) & (1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter1 == 1'b1))) begin
        ybuf_V_load_reg_2161 <= ybuf_V_q0;
    end
end

always @ (*) begin
    if ((icmp_ln37_1_fu_820_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln71_fu_1505_p2 == 1'd1)) begin
        ap_condition_pp10_exit_iter0_state105 = 1'b1;
    end else begin
        ap_condition_pp10_exit_iter0_state105 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln106_fu_1548_p2 == 1'd1)) begin
        ap_condition_pp11_exit_iter0_state113 = 1'b1;
    end else begin
        ap_condition_pp11_exit_iter0_state113 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln41_fu_859_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln45_1_fu_897_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln81_fu_999_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state44 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state44 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln86_fu_1032_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state49 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state49 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln93_fu_1157_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln98_fu_1250_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state65 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state65 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_1380_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state85 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state85 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter3 == 1'b1) & (ap_enable_reg_pp9_iter2 == 1'b0))) begin
        ap_condition_pp9_exit_iter3_state100 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter3_state100 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0_subdone) & (1'b1 == ap_CS_fsm_pp9_stage0) & (icmp_ln66_fu_1457_p2 == 1'd1))) begin
        ap_condition_pp9_flush_enable = 1'b1;
    end else begin
        ap_condition_pp9_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1)) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp10_iter2 == 1'b0) & (ap_enable_reg_pp10_iter1 == 1'b0) & (ap_enable_reg_pp10_iter0 == 1'b0))) begin
        ap_idle_pp10 = 1'b1;
    end else begin
        ap_idle_pp10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp11_iter2 == 1'b0) & (ap_enable_reg_pp11_iter1 == 1'b0) & (ap_enable_reg_pp11_iter0 == 1'b0))) begin
        ap_idle_pp11 = 1'b1;
    end else begin
        ap_idle_pp11 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter3 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b0) & (ap_enable_reg_pp9_iter5 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0) & (ap_enable_reg_pp9_iter5 == 1'b1) & (icmp_ln66_reg_2108_pp9_iter4_reg == 1'd0))) begin
        ap_phi_mux_rhs_phi_fu_747_p4 = {{grp_fu_1587_p3[28:13]}};
    end else begin
        ap_phi_mux_rhs_phi_fu_747_p4 = rhs_reg_743;
    end
end

always @ (*) begin
    if ((~((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1)) & (1'b1 == ap_CS_fsm_state120))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        bbuf_V_address0 = zext_ln64_fu_1413_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bbuf_V_address0 = zext_ln38_fu_829_p1;
    end else begin
        bbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        bbuf_V_ce0 = 1'b1;
    end else begin
        bbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_1_reg_1684_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        bbuf_V_we0 = 1'b1;
    end else begin
        bbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        dbbuf_V_ce0 = 1'b1;
    end else begin
        dbbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        dbbuf_V_ce1 = 1'b1;
    end else begin
        dbbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1927 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        dbbuf_V_we0 = 1'b1;
    end else begin
        dbbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter5 == 1'b1))) begin
        dwbuf_V_address0 = dwbuf_V_addr_1_reg_1901_pp4_iter4_reg;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dwbuf_V_address0 = zext_ln82_1_fu_1013_p1;
    end else begin
        dwbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        dwbuf_V_address1 = zext_ln99_1_fu_1264_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        dwbuf_V_address1 = zext_ln1118_2_fu_1106_p1;
    end else begin
        dwbuf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        dwbuf_V_ce0 = 1'b1;
    end else begin
        dwbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
        dwbuf_V_ce1 = 1'b1;
    end else begin
        dwbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter5 == 1'b1))) begin
        dwbuf_V_d0 = {{grp_fu_1570_p3[28:13]}};
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        dwbuf_V_d0 = gmem2_addr_read_reg_1824;
    end else begin
        dwbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_1839_pp4_iter4_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((icmp_ln81_reg_1815_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
        dwbuf_V_we0 = 1'b1;
    end else begin
        dwbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        dxbuf_V_address0 = zext_ln52_fu_1288_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter7 == 1'b1))) begin
        dxbuf_V_address0 = dxbuf_V_addr_1_reg_1874_pp4_iter6_reg;
    end else begin
        dxbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp11_stage0) & (1'b1 == ap_CS_fsm_pp11_stage0) & (ap_enable_reg_pp11_iter0 == 1'b1))) begin
        dxbuf_V_address1 = zext_ln107_fu_1557_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter5 == 1'b1))) begin
        dxbuf_V_address1 = dxbuf_V_addr_1_reg_1874_pp4_iter4_reg;
    end else begin
        dxbuf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter7 == 1'b1)))) begin
        dxbuf_V_ce0 = 1'b1;
    end else begin
        dxbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((1'b0 == ap_block_pp11_stage0_11001) & (1'b1 == ap_CS_fsm_pp11_stage0) & (ap_enable_reg_pp11_iter0 == 1'b1)))) begin
        dxbuf_V_ce1 = 1'b1;
    end else begin
        dxbuf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        dxbuf_V_d0 = 16'd0;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter7 == 1'b1))) begin
        dxbuf_V_d0 = {{grp_fu_1579_p3[28:13]}};
    end else begin
        dxbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln86_reg_1839_pp4_iter6_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter7 == 1'b1)) | ((1'b1 == ap_CS_fsm_state73) & (icmp_ln51_fu_1279_p2 == 1'd0)))) begin
        dxbuf_V_we0 = 1'b1;
    end else begin
        dxbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        dybuf_V_address0 = zext_ln703_fu_1166_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        dybuf_V_address0 = zext_ln86_2_fu_1089_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dybuf_V_address0 = zext_ln42_fu_868_p1;
    end else begin
        dybuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        dybuf_V_ce0 = 1'b1;
    end else begin
        dybuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_reg_1709_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        dybuf_V_we0 = 1'b1;
    end else begin
        dybuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((gmem2_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state78)) begin
            gmem2_ARADDR = gmem2_addr_1_reg_2039;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            gmem2_ARADDR = gmem2_addr_reg_1804;
        end else begin
            gmem2_ARADDR = 'bx;
        end
    end else begin
        gmem2_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37)) | ((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78)))) begin
        gmem2_ARVALID = 1'b1;
    end else begin
        gmem2_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
        gmem2_AWADDR = sext_ln106_fu_1531_p1;
    end else if (((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
        gmem2_AWADDR = gmem2_addr_2_reg_1965;
    end else begin
        gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112)) | ((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64)))) begin
        gmem2_AWVALID = 1'b1;
    end else begin
        gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1)) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state120)) | (~((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1)) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state72)))) begin
        gmem2_BREADY = 1'b1;
    end else begin
        gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln81_reg_1815 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((icmp_ln56_reg_2050 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001) & (1'b1 == ap_CS_fsm_pp8_stage0)))) begin
        gmem2_RREADY = 1'b1;
    end else begin
        gmem2_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln106_reg_2182_pp11_iter1_reg == 1'd0) & (ap_enable_reg_pp11_iter2 == 1'b1) & (1'b0 == ap_block_pp11_stage0_01001))) begin
        gmem2_WDATA = dxbuf_V_load_reg_2191;
    end else if (((icmp_ln98_reg_1976_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_01001))) begin
        gmem2_WDATA = dwbuf_V_load_reg_1985;
    end else begin
        gmem2_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln106_reg_2182_pp11_iter1_reg == 1'd0) & (ap_enable_reg_pp11_iter2 == 1'b1) & (1'b0 == ap_block_pp11_stage0_11001)) | ((icmp_ln98_reg_1976_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)))) begin
        gmem2_WVALID = 1'b1;
    end else begin
        gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state78))) begin
        gmem2_blk_n_AR = m_axi_gmem2_ARREADY;
    end else begin
        gmem2_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | ((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112)))) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state120)) | ((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state72)))) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln81_reg_1815 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((icmp_ln56_reg_2050 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b0 == ap_block_pp8_stage0) & (1'b1 == ap_CS_fsm_pp8_stage0)))) begin
        gmem2_blk_n_R = m_axi_gmem2_RVALID;
    end else begin
        gmem2_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln106_reg_2182_pp11_iter1_reg == 1'd0) & (ap_enable_reg_pp11_iter2 == 1'b1) & (1'b0 == ap_block_pp11_stage0)) | ((icmp_ln98_reg_1976_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0)))) begin
        gmem2_blk_n_W = m_axi_gmem2_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_1723 == 1'd1) & (1'b0 == ap_block_state90_io) & (1'b1 == ap_CS_fsm_state90))) begin
        gmem_ARADDR = gmem_addr_3_reg_2023;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        gmem_ARADDR = sext_ln45_fu_877_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_ARADDR = sext_ln41_fu_842_p1;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARADDR = gmem_addr_reg_1667;
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln45_reg_1723 == 1'd1) & (1'b0 == ap_block_state90_io) & (1'b1 == ap_CS_fsm_state90)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)))) begin
        gmem_ARLEN = xdim_read_reg_1610;
    end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARLEN = ydim_read_reg_1600;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln45_reg_1723 == 1'd1) & (1'b0 == ap_block_state90_io) & (1'b1 == ap_CS_fsm_state90)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state104))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (1'b1 == ap_CS_fsm_state112) & (ap_predicate_op569_writeresp_state112 == 1'b1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln66_reg_2108 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1) & (1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0)) | ((icmp_ln45_1_reg_1743 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln41_reg_1709 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln37_1_reg_1684 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln71_reg_2152_pp10_iter1_reg == 1'd0) & (ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2) | ((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state90)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((fwprop_read_reg_1596 == 1'd1) & (icmp_ln37_reg_1663 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln66_reg_2108 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1) & (1'b0 == ap_block_pp9_stage0) & (1'b1 == ap_CS_fsm_pp9_stage0)) | ((icmp_ln45_1_reg_1743 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((icmp_ln41_reg_1709 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln37_1_reg_1684 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln71_reg_2152_pp10_iter1_reg == 1'd0) & (ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        grp_fu_1587_ce = 1'b1;
    end else begin
        grp_fu_1587_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b0 == ap_block_pp9_stage0) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        wbuf_V_address0 = zext_ln1116_1_fu_1471_p1;
    end else if (((1'b0 == ap_block_pp8_stage0) & (ap_enable_reg_pp8_iter2 == 1'b1))) begin
        wbuf_V_address0 = zext_ln57_1_fu_1394_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter3 == 1'b1))) begin
        wbuf_V_address0 = zext_ln1118_2_fu_1106_p1;
    end else begin
        wbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter3 == 1'b1)) | ((ap_enable_reg_pp9_iter1 == 1'b1) & (1'b0 == ap_block_pp9_stage0_11001) & (1'b1 == ap_CS_fsm_pp9_stage0)) | ((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter2 == 1'b1)))) begin
        wbuf_V_ce0 = 1'b1;
    end else begin
        wbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp8_stage0_11001) & (ap_enable_reg_pp8_iter2 == 1'b1) & (icmp_ln56_reg_2050_pp8_iter1_reg == 1'd0))) begin
        wbuf_V_we0 = 1'b1;
    end else begin
        wbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1))) begin
        xbuf_V_address0 = zext_ln1118_fu_1093_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        xbuf_V_address0 = zext_ln46_fu_906_p1;
    end else begin
        xbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        xbuf_V_ce0 = 1'b1;
    end else begin
        xbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_1_reg_1743_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        xbuf_V_we0 = 1'b1;
    end else begin
        xbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp10_stage0) & (1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter0 == 1'b1))) begin
        ybuf_V_address0 = zext_ln72_fu_1514_p1;
    end else if (((1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state103))) begin
        ybuf_V_address0 = ybuf_V_addr_reg_2082;
    end else begin
        ybuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) | ((1'b0 == ap_block_state90_io) & (1'b1 == ap_CS_fsm_state90)) | ((1'b0 == ap_block_pp10_stage0_11001) & (1'b1 == ap_CS_fsm_pp10_stage0) & (ap_enable_reg_pp10_iter0 == 1'b1)))) begin
        ybuf_V_ce0 = 1'b1;
    end else begin
        ybuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        ybuf_V_d0 = rhs_reg_743;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        ybuf_V_d0 = bbuf_V_q0;
    end else begin
        ybuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state103)) | ((1'b0 == ap_block_state90_io) & (1'b1 == ap_CS_fsm_state90)))) begin
        ybuf_V_we0 = 1'b1;
    end else begin
        ybuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln37_fu_785_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else if (((ap_start == 1'b1) & (icmp_ln37_fu_785_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln37_1_fu_820_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln37_1_fu_820_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln41_fu_859_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln41_fu_859_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln45_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln45_1_fu_897_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((icmp_ln45_1_fu_897_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((fwprop_read_reg_1596 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else if (((fwprop_read_reg_1596 == 1'd0) & (icmp_ln37_reg_1663 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln80_fu_922_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((icmp_ln45_reg_1723 == 1'd0) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln81_fu_999_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((icmp_ln81_fu_999_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln86_fu_1032_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter7 == 1'b1) & (ap_enable_reg_pp4_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln86_fu_1032_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter7 == 1'b1) & (ap_enable_reg_pp4_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((icmp_ln93_fu_1157_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((icmp_ln93_fu_1157_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((icmp_ln97_fu_1185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((icmp_ln45_reg_1723 == 1'd0) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln98_fu_1250_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)) & ~((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0)) | ((1'b0 == ap_block_pp6_stage0_subdone) & (ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln98_fu_1250_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if ((~((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1)) & (1'b1 == ap_CS_fsm_state72))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (icmp_ln51_fu_1279_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((icmp_ln37_reg_1663 == 1'd1) & (1'b1 == ap_CS_fsm_state74))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (icmp_ln55_fu_1305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln45_reg_1723 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((gmem2_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_pp8_stage0;
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (icmp_ln56_fu_1380_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1)) & ~((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (ap_enable_reg_pp8_iter2 == 1'b1)) | ((ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (icmp_ln56_fu_1380_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state89 : begin
            if (((1'b1 == ap_CS_fsm_state89) & (icmp_ln62_fu_1404_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            if (((icmp_ln45_reg_1723 == 1'd0) & (1'b0 == ap_block_state90_io) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else if (((icmp_ln45_reg_1723 == 1'd1) & (1'b0 == ap_block_state90_io) & (1'b1 == ap_CS_fsm_state90))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_pp9_stage0;
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((~((1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter3 == 1'b1) & (ap_enable_reg_pp9_iter2 == 1'b0)) & ~((1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if ((((1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter3 == 1'b1) & (ap_enable_reg_pp9_iter2 == 1'b0)) | ((1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter4 == 1'b0) & (ap_enable_reg_pp9_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state104 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state104))) begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end
        end
        ap_ST_fsm_pp10_stage0 : begin
            if ((~((1'b0 == ap_block_pp10_stage0_subdone) & (ap_enable_reg_pp10_iter1 == 1'b0) & (icmp_ln71_fu_1505_p2 == 1'd1) & (ap_enable_reg_pp10_iter0 == 1'b1)) & ~((ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone) & (ap_enable_reg_pp10_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end else if ((((ap_enable_reg_pp10_iter2 == 1'b1) & (1'b0 == ap_block_pp10_stage0_subdone) & (ap_enable_reg_pp10_iter1 == 1'b0)) | ((1'b0 == ap_block_pp10_stage0_subdone) & (ap_enable_reg_pp10_iter1 == 1'b0) & (icmp_ln71_fu_1505_p2 == 1'd1) & (ap_enable_reg_pp10_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp10_stage0;
            end
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            if ((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (icmp_ln45_reg_1723 == 1'd1) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_pp11_stage0;
            end else if ((~((1'b1 == ap_block_state112_io) | ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1))) & (icmp_ln45_reg_1723 == 1'd0) & (1'b1 == ap_CS_fsm_state112))) begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_pp11_stage0 : begin
            if ((~((1'b0 == ap_block_pp11_stage0_subdone) & (ap_enable_reg_pp11_iter1 == 1'b0) & (icmp_ln106_fu_1548_p2 == 1'd1) & (ap_enable_reg_pp11_iter0 == 1'b1)) & ~((ap_enable_reg_pp11_iter2 == 1'b1) & (1'b0 == ap_block_pp11_stage0_subdone) & (ap_enable_reg_pp11_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp11_stage0;
            end else if ((((ap_enable_reg_pp11_iter2 == 1'b1) & (1'b0 == ap_block_pp11_stage0_subdone) & (ap_enable_reg_pp11_iter1 == 1'b0)) | ((1'b0 == ap_block_pp11_stage0_subdone) & (ap_enable_reg_pp11_iter1 == 1'b0) & (icmp_ln106_fu_1548_p2 == 1'd1) & (ap_enable_reg_pp11_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp11_stage0;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            if ((~((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1)) & (1'b1 == ap_CS_fsm_state120))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state120;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_fu_1542_p2 = (i_11_reg_765 + 31'd1);

assign add_ln1116_fu_1466_p2 = (mul_ln1116_reg_2093 + trunc_ln1116_fu_1462_p1);

assign add_ln37_fu_814_p2 = (i_reg_564 + 31'd1);

assign add_ln41_fu_853_p2 = (i_1_reg_575 + 31'd1);

assign add_ln45_fu_891_p2 = (i_2_reg_586 + 31'd1);

assign add_ln51_fu_1269_p2 = (i_3_reg_687 + 31'd1);

assign add_ln55_fu_1299_p2 = ($signed(i_5_reg_698) + $signed(31'd1));

assign add_ln56_fu_1370_p2 = (j_2_reg_710 + 31'd1);

assign add_ln57_fu_1389_p2 = (mul_ln57_reg_2034 + trunc_ln57_fu_1385_p1);

assign add_ln62_fu_1398_p2 = (i_7_reg_721 + 31'd1);

assign add_ln66_fu_1447_p2 = (j_3_reg_732 + 31'd1);

assign add_ln71_fu_1499_p2 = (i_9_reg_754 + 31'd1);

assign add_ln80_fu_916_p2 = ($signed(i_4_reg_597) + $signed(31'd1));

assign add_ln81_fu_989_p2 = (j_reg_609 + 31'd1);

assign add_ln82_fu_1008_p2 = (mul_ln82_reg_1799 + trunc_ln82_fu_1004_p1);

assign add_ln86_1_fu_1017_p2 = (indvar_flatten_reg_620 + 63'd1);

assign add_ln86_fu_1037_p2 = (i_6_reg_631 + 31'd1);

assign add_ln87_fu_1083_p2 = (select_ln86_fu_1043_p3 + 31'd1);

assign add_ln93_fu_1151_p2 = (i_8_reg_653 + 31'd1);

assign add_ln97_fu_1179_p2 = ($signed(i_10_reg_664) + $signed(31'd1));

assign add_ln98_fu_1240_p2 = (j_4_reg_676 + 31'd1);

assign add_ln99_fu_1259_p2 = (mul_ln99_reg_1960 + trunc_ln99_fu_1255_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp10_stage0 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_pp11_stage0 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln37_1_reg_1684 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln37_1_reg_1684 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp10_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp10_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp10_stage0_11001 = ((ap_enable_reg_pp10_iter2 == 1'b1) & (1'b1 == ap_block_state107_io));
end

always @ (*) begin
    ap_block_pp10_stage0_subdone = ((ap_enable_reg_pp10_iter2 == 1'b1) & (1'b1 == ap_block_state107_io));
end

assign ap_block_pp11_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp11_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp11_stage0_11001 = ((ap_enable_reg_pp11_iter2 == 1'b1) & (1'b1 == ap_block_state115_io));
end

always @ (*) begin
    ap_block_pp11_stage0_subdone = ((ap_enable_reg_pp11_iter2 == 1'b1) & (1'b1 == ap_block_state115_io));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln41_reg_1709 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln41_reg_1709 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln45_1_reg_1743 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln45_1_reg_1743 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((gmem2_RVALID == 1'b0) & (icmp_ln81_reg_1815 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((gmem2_RVALID == 1'b0) & (icmp_ln81_reg_1815 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b1 == ap_block_state67_io));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((ap_enable_reg_pp6_iter2 == 1'b1) & (1'b1 == ap_block_state67_io));
end

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((gmem2_RVALID == 1'b0) & (icmp_ln56_reg_2050 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((gmem2_RVALID == 1'b0) & (icmp_ln56_reg_2050 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1));
end

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp9_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln66_reg_2108 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp9_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln66_reg_2108 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1));
end

assign ap_block_state100_pp9_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp9_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp9_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp10_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp10_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state107_io = ((gmem_WREADY == 1'b0) & (icmp_ln71_reg_2152_pp10_iter1_reg == 1'd0));
end

assign ap_block_state107_pp10_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln37_1_reg_1684 == 1'd0));
end

always @ (*) begin
    ap_block_state112 = ((gmem_BVALID == 1'b0) & (ap_predicate_op569_writeresp_state112 == 1'b1));
end

always @ (*) begin
    ap_block_state112_io = ((gmem2_AWREADY == 1'b0) & (icmp_ln45_reg_1723 == 1'd1));
end

assign ap_block_state113_pp11_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp11_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state115_io = ((gmem2_WREADY == 1'b0) & (icmp_ln106_reg_2182_pp11_iter1_reg == 1'd0));
end

assign ap_block_state115_pp11_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state120 = ((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1));
end

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln41_reg_1709 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln45_1_reg_1743 == 1'd0));
end

assign ap_block_state32_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state45_pp3_stage0_iter1 = ((gmem2_RVALID == 1'b0) & (icmp_ln81_reg_1815 == 1'd0));
end

assign ap_block_state46_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state67_io = ((gmem2_WREADY == 1'b0) & (icmp_ln98_reg_1976_pp6_iter1_reg == 1'd0));
end

assign ap_block_state67_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72 = ((gmem2_BVALID == 1'b0) & (icmp_ln45_reg_1723 == 1'd1));
end

assign ap_block_state85_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state86_pp8_stage0_iter1 = ((gmem2_RVALID == 1'b0) & (icmp_ln56_reg_2050 == 1'd0));
end

assign ap_block_state87_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state90_io = ((gmem_ARREADY == 1'b0) & (icmp_ln45_reg_1723 == 1'd1));
end

assign ap_block_state97_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state98_pp9_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln66_reg_2108 == 1'd0));
end

assign ap_block_state99_pp9_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp10 = (ap_idle_pp10 ^ 1'b1);

assign ap_enable_pp11 = (ap_idle_pp11 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

always @ (*) begin
    ap_predicate_op569_writeresp_state112 = ((fwprop_read_reg_1596 == 1'd1) & (icmp_ln37_reg_1663 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dbbuf_V_address1 = zext_ln703_fu_1166_p1;

assign dbbuf_V_d0 = ($signed(dybuf_V_q0) + $signed(dbbuf_V_q1));

assign empty_49_fu_1293_p1 = ydim_read_reg_1600[30:0];

assign empty_50_fu_1296_p1 = xdim_read_reg_1610[30:0];

assign empty_52_fu_1310_p1 = i_5_reg_698[5:0];

assign empty_54_fu_1345_p2 = (tmp_1_fu_1338_p3 + wt_read_reg_1648);

assign empty_62_fu_910_p1 = ydim_read_reg_1600[30:0];

assign empty_63_fu_913_p1 = xdim_read_reg_1610[30:0];

assign empty_65_fu_927_p1 = i_4_reg_597[5:0];

assign empty_67_fu_964_p2 = (tmp_fu_957_p3 + dwt_read_reg_1642);

assign empty_72_fu_1190_p1 = i_10_reg_664[5:0];

assign empty_74_fu_1215_p2 = (tmp_2_fu_1208_p3 + dwt_read_reg_1642);

assign grp_fu_1562_p0 = grp_fu_1562_p00;

assign grp_fu_1562_p00 = select_ln86_2_fu_1059_p3;

assign grp_fu_1562_p1 = 12'd50;

assign grp_fu_1570_p2 = {{dwbuf_V_q1}, {13'd0}};

assign grp_fu_1579_p1 = sext_ln86_reg_1885_pp4_iter3_reg;

assign grp_fu_1579_p2 = {{dxbuf_V_q1}, {13'd0}};

assign grp_fu_1587_p2 = {{ap_phi_mux_rhs_phi_fu_747_p4}, {13'd0}};

assign grp_fu_776_p4 = {{x_read_reg_1658[31:1]}};

assign grp_fu_942_p0 = grp_fu_942_p00;

assign grp_fu_942_p00 = empty_62_reg_1757;

assign grp_fu_942_p1 = grp_fu_942_p10;

assign grp_fu_942_p10 = xdim_read_reg_1610;

assign i_3_cast_fu_1275_p1 = i_3_reg_687;

assign icmp_ln106_fu_1548_p2 = ((i_11_reg_765 == trunc_ln106_reg_2166) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_820_p2 = ((i_reg_564 == trunc_ln37_reg_1673) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_785_p2 = (($signed(ydim) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_859_p2 = ((i_1_reg_575 == trunc_ln37_reg_1673) ? 1'b1 : 1'b0);

assign icmp_ln45_1_fu_897_p2 = ((i_2_reg_586 == trunc_ln45_reg_1733) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_872_p2 = (($signed(xdim_read_reg_1610) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_1279_p2 = ((i_3_cast_fu_1275_p1 == xdim_read_reg_1610) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_1305_p2 = ((i_5_reg_698 == empty_49_reg_1998) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_1380_p2 = ((j_2_cast_fu_1376_p1 == xdim_read_reg_1610) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_1404_p2 = ((i_7_reg_721 == empty_49_reg_1998) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1457_p2 = ((j_3_cast_fu_1453_p1 == xdim_read_reg_1610) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_1505_p2 = ((i_9_reg_754 == empty_49_reg_1998) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_922_p2 = ((i_4_reg_597 == empty_62_reg_1757) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_999_p2 = ((j_cast_fu_995_p1 == xdim_read_reg_1610) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_1032_p2 = ((indvar_flatten_reg_620 == mul_ln86_reg_1829) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_1027_p2 = ((j_1_cast_fu_1023_p1 == xdim_read_reg_1610) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_1157_p2 = ((i_8_reg_653 == empty_62_reg_1757) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_1185_p2 = ((i_10_reg_664 == empty_62_reg_1757) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_1250_p2 = ((j_4_cast_fu_1246_p1 == xdim_read_reg_1610) ? 1'b1 : 1'b0);

assign j_1_cast_fu_1023_p1 = j_1_reg_642;

assign j_2_cast_fu_1376_p1 = j_2_reg_710;

assign j_3_cast_fu_1453_p1 = j_3_reg_732;

assign j_4_cast_fu_1246_p1 = j_4_reg_676;

assign j_cast_fu_995_p1 = j_reg_609;

assign mul_ln1116_fu_1441_p0 = mul_ln1116_fu_1441_p00;

assign mul_ln1116_fu_1441_p00 = trunc_ln64_reg_2072;

assign mul_ln1116_fu_1441_p1 = 12'd50;

assign mul_ln57_fu_1332_p0 = mul_ln57_fu_1332_p00;

assign mul_ln57_fu_1332_p00 = empty_52_reg_2018;

assign mul_ln57_fu_1332_p1 = 12'd50;

assign mul_ln82_fu_951_p0 = mul_ln82_fu_951_p00;

assign mul_ln82_fu_951_p00 = empty_65_reg_1779;

assign mul_ln82_fu_951_p1 = 12'd50;

assign mul_ln99_fu_1202_p0 = mul_ln99_fu_1202_p00;

assign mul_ln99_fu_1202_p00 = empty_72_reg_1950;

assign mul_ln99_fu_1202_p1 = 12'd50;

assign select_ln86_2_fu_1059_p3 = ((icmp_ln87_fu_1027_p2[0:0] == 1'b1) ? trunc_ln86_fu_1051_p1 : trunc_ln86_1_fu_1055_p1);

assign select_ln86_3_fu_1071_p3 = ((icmp_ln87_fu_1027_p2[0:0] == 1'b1) ? add_ln86_fu_1037_p2 : i_6_reg_631);

assign select_ln86_fu_1043_p3 = ((icmp_ln87_fu_1027_p2[0:0] == 1'b1) ? 31'd0 : j_1_reg_642);

assign sext_ln106_fu_1531_p1 = $signed(trunc_ln9_fu_1522_p4);

assign sext_ln37_fu_801_p1 = $signed(trunc_ln_fu_791_p4);

assign sext_ln41_fu_842_p1 = $signed(trunc_ln1_fu_833_p4);

assign sext_ln45_fu_877_p1 = $signed(grp_fu_776_p4);

assign sext_ln56_fu_1360_p1 = $signed(trunc_ln3_fu_1350_p4);

assign sext_ln66_fu_1319_p1 = $signed(grp_fu_776_p4);

assign sext_ln71_fu_1428_p1 = $signed(trunc_ln5_fu_1419_p4);

assign sext_ln81_fu_979_p1 = $signed(trunc_ln7_fu_969_p4);

assign sext_ln86_fu_1098_p1 = dybuf_V_q0;

assign sext_ln98_fu_1230_p1 = $signed(trunc_ln6_fu_1220_p4);

assign tmp_1_fu_1338_p3 = {{empty_53_reg_2029}, {1'd0}};

assign tmp_2_fu_1208_p3 = {{empty_73_reg_1955}, {1'd0}};

assign tmp_fu_957_p3 = {{empty_66_reg_1794}, {1'd0}};

assign trunc_ln106_fu_1519_p1 = xdim_read_reg_1610[30:0];

assign trunc_ln107_fu_1553_p1 = i_11_reg_765[5:0];

assign trunc_ln1116_fu_1462_p1 = j_3_reg_732[11:0];

assign trunc_ln1118_fu_1079_p1 = select_ln86_fu_1043_p3[11:0];

assign trunc_ln1_fu_833_p4 = {{dy_read_reg_1632[31:1]}};

assign trunc_ln37_fu_811_p1 = ydim_read_reg_1600[30:0];

assign trunc_ln38_fu_825_p1 = i_reg_564[5:0];

assign trunc_ln3_fu_1350_p4 = {{empty_54_fu_1345_p2[31:1]}};

assign trunc_ln42_fu_864_p1 = i_1_reg_575[5:0];

assign trunc_ln45_fu_888_p1 = xdim_read_reg_1610[30:0];

assign trunc_ln46_fu_902_p1 = i_2_reg_586[5:0];

assign trunc_ln52_fu_1284_p1 = i_3_reg_687[5:0];

assign trunc_ln57_fu_1385_p1 = j_2_reg_710[11:0];

assign trunc_ln5_fu_1419_p4 = {{y_read_reg_1637[31:1]}};

assign trunc_ln64_fu_1409_p1 = i_7_reg_721[5:0];

assign trunc_ln6_fu_1220_p4 = {{empty_74_fu_1215_p2[31:1]}};

assign trunc_ln703_fu_1162_p1 = i_8_reg_653[5:0];

assign trunc_ln72_fu_1510_p1 = i_9_reg_754[5:0];

assign trunc_ln7_fu_969_p4 = {{empty_67_fu_964_p2[31:1]}};

assign trunc_ln82_fu_1004_p1 = j_reg_609[11:0];

assign trunc_ln86_1_fu_1055_p1 = i_6_reg_631[5:0];

assign trunc_ln86_fu_1051_p1 = add_ln86_fu_1037_p2[5:0];

assign trunc_ln99_fu_1255_p1 = j_4_reg_676[11:0];

assign trunc_ln9_fu_1522_p4 = {{dx_read_reg_1653[31:1]}};

assign trunc_ln_fu_791_p4 = {{b[31:1]}};

assign zext_ln107_fu_1557_p1 = trunc_ln107_fu_1553_p1;

assign zext_ln1116_1_fu_1471_p1 = add_ln1116_reg_2112;

assign zext_ln1118_2_fu_1106_p1 = grp_fu_1562_p3;

assign zext_ln1118_fu_1093_p1 = trunc_ln1118_reg_1858;

assign zext_ln38_fu_829_p1 = trunc_ln38_reg_1688_pp0_iter1_reg;

assign zext_ln42_fu_868_p1 = trunc_ln42_reg_1713_pp1_iter1_reg;

assign zext_ln46_fu_906_p1 = trunc_ln46_reg_1747_pp2_iter1_reg;

assign zext_ln52_fu_1288_p1 = trunc_ln52_fu_1284_p1;

assign zext_ln57_1_fu_1394_p1 = add_ln57_reg_2054_pp8_iter1_reg;

assign zext_ln64_fu_1413_p1 = trunc_ln64_fu_1409_p1;

assign zext_ln703_fu_1166_p1 = trunc_ln703_fu_1162_p1;

assign zext_ln72_fu_1514_p1 = trunc_ln72_fu_1510_p1;

assign zext_ln82_1_fu_1013_p1 = add_ln82_reg_1819_pp3_iter1_reg;

assign zext_ln86_2_fu_1089_p1 = select_ln86_2_reg_1843;

assign zext_ln99_1_fu_1264_p1 = add_ln99_fu_1259_p2;

endmodule //fcc_combined
