// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module loss_derivative_exp_16_3_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] x;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] f_x_msb_3_table_V_address0;
reg    f_x_msb_3_table_V_ce0;
wire   [31:0] f_x_msb_3_table_V_q0;
wire   [7:0] f_x_msb_2_table_V_address0;
reg    f_x_msb_2_table_V_ce0;
wire   [45:0] f_x_msb_2_table_V_q0;
wire   [7:0] exp_x_msb_1_table_V_address0;
reg    exp_x_msb_1_table_V_ce0;
wire   [49:0] exp_x_msb_1_table_V_q0;
reg   [0:0] tmp_46_reg_465;
reg   [0:0] tmp_46_reg_465_pp0_iter1_reg;
reg   [0:0] tmp_46_reg_465_pp0_iter2_reg;
reg   [0:0] tmp_46_reg_465_pp0_iter3_reg;
reg   [0:0] tmp_46_reg_465_pp0_iter4_reg;
reg   [0:0] tmp_46_reg_465_pp0_iter5_reg;
reg   [5:0] tmp_reg_470;
reg   [5:0] tmp_reg_470_pp0_iter1_reg;
reg   [5:0] tmp_reg_470_pp0_iter2_reg;
reg   [5:0] tmp_reg_470_pp0_iter3_reg;
reg   [5:0] tmp_reg_470_pp0_iter4_reg;
reg   [5:0] tmp_reg_470_pp0_iter5_reg;
wire   [7:0] tmp_55_fu_171_p4;
reg   [7:0] tmp_55_reg_475;
wire   [1:0] trunc_ln640_fu_181_p1;
reg   [1:0] trunc_ln640_reg_480;
reg   [1:0] trunc_ln640_reg_480_pp0_iter1_reg;
reg   [31:0] f_x_msb_3_V_reg_495;
wire   [8:0] ret_V_7_fu_220_p2;
reg   [8:0] ret_V_7_reg_500;
reg   [8:0] ret_V_7_reg_500_pp0_iter2_reg;
reg   [8:0] ret_V_7_reg_500_pp0_iter3_reg;
reg   [8:0] ret_V_7_reg_500_pp0_iter4_reg;
reg   [8:0] ret_V_7_reg_500_pp0_iter5_reg;
reg   [8:0] ret_V_7_reg_500_pp0_iter6_reg;
wire   [40:0] trunc_ln640_1_fu_226_p1;
reg   [40:0] trunc_ln640_1_reg_506;
reg   [40:0] trunc_ln640_1_reg_506_pp0_iter2_reg;
reg   [40:0] trunc_ln640_1_reg_506_pp0_iter3_reg;
reg   [40:0] trunc_ln640_1_reg_506_pp0_iter4_reg;
reg   [40:0] trunc_ln640_1_reg_506_pp0_iter5_reg;
reg   [40:0] trunc_ln640_1_reg_506_pp0_iter6_reg;
wire   [46:0] rhs_2_fu_230_p5;
reg   [46:0] rhs_2_reg_512;
reg   [46:0] rhs_2_reg_512_pp0_iter3_reg;
reg   [46:0] rhs_2_reg_512_pp0_iter4_reg;
reg   [46:0] rhs_2_reg_512_pp0_iter5_reg;
reg   [46:0] rhs_2_reg_512_pp0_iter6_reg;
reg   [44:0] trunc_ln_reg_527;
reg   [49:0] exp_x_msb_2_3_4_lsb_m_1_V_reg_537;
reg   [49:0] exp_x_msb_1_V_reg_542;
reg   [49:0] exp_x_msb_1_V_reg_542_pp0_iter8_reg;
reg   [49:0] exp_x_msb_1_V_reg_542_pp0_iter9_reg;
reg   [49:0] exp_x_msb_1_V_reg_542_pp0_iter10_reg;
reg   [49:0] exp_x_msb_1_V_reg_542_pp0_iter11_reg;
reg   [49:0] exp_x_msb_1_V_reg_542_pp0_iter12_reg;
reg   [47:0] trunc_ln703_2_reg_558;
reg    ap_block_pp0_stage0_subdone;
wire   [31:0] zext_ln369_fu_193_p1;
wire   [31:0] zext_ln445_fu_198_p1;
wire   [31:0] zext_ln523_fu_280_p1;
wire   [4:0] tmp_56_fu_185_p3;
wire   [4:0] p_Result_8_fu_203_p4;
wire   [8:0] zext_ln703_2_fu_217_p1;
wire   [8:0] zext_ln703_1_fu_213_p1;
wire   [49:0] p_Result_9_fu_240_p3;
wire   [49:0] grp_fu_254_p0;
wire   [46:0] grp_fu_254_p1;
wire  signed [6:0] sext_ln640_fu_260_p1;
wire   [96:0] grp_fu_254_p2;
wire   [7:0] p_Result_7_fu_263_p3;
wire   [55:0] rhs_1_fu_288_p4;
wire   [55:0] zext_ln1192_fu_285_p1;
wire   [55:0] ret_V_8_fu_296_p2;
wire   [55:0] zext_ln1192_1_fu_302_p1;
wire   [55:0] ret_V_fu_305_p2;
wire   [49:0] grp_fu_327_p0;
wire   [49:0] grp_fu_327_p1;
wire   [99:0] grp_fu_327_p2;
wire   [49:0] zext_ln703_fu_343_p1;
wire   [49:0] y_l_V_fu_346_p2;
wire   [1:0] tmp_49_fu_351_p4;
wire   [0:0] p_Result_s_fu_367_p3;
wire   [0:0] overf_fu_361_p2;
wire   [2:0] tmp_52_fu_381_p4;
wire   [0:0] icmp_ln533_fu_391_p2;
wire   [0:0] or_ln533_fu_375_p2;
wire   [4:0] tmp_53_fu_403_p4;
wire   [0:0] icmp_ln533_1_fu_413_p2;
wire   [0:0] or_ln533_1_fu_397_p2;
wire   [9:0] tmp_54_fu_425_p4;
wire   [0:0] icmp_ln533_2_fu_435_p2;
wire   [0:0] or_ln533_2_fu_419_p2;
wire   [0:0] overf_1_fu_441_p2;
wire   [15:0] tmp_s_fu_447_p4;
reg    grp_fu_254_ce;
reg    grp_fu_327_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to12;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [96:0] grp_fu_254_p00;
wire   [96:0] grp_fu_254_p10;
wire   [99:0] grp_fu_327_p00;
wire   [99:0] grp_fu_327_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

loss_derivative_exp_16_3_s_f_x_msb_3_table_V #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_msb_3_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_3_table_V_address0),
    .ce0(f_x_msb_3_table_V_ce0),
    .q0(f_x_msb_3_table_V_q0)
);

loss_derivative_exp_16_3_s_f_x_msb_2_table_V #(
    .DataWidth( 46 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
f_x_msb_2_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_msb_2_table_V_address0),
    .ce0(f_x_msb_2_table_V_ce0),
    .q0(f_x_msb_2_table_V_q0)
);

loss_derivative_exp_16_3_s_exp_x_msb_1_table_V #(
    .DataWidth( 50 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
exp_x_msb_1_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_V_address0),
    .ce0(exp_x_msb_1_table_V_ce0),
    .q0(exp_x_msb_1_table_V_q0)
);

loss_derivative_mul_50ns_47ns_97_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 50 ),
    .din1_WIDTH( 47 ),
    .dout_WIDTH( 97 ))
mul_50ns_47ns_97_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_254_p0),
    .din1(grp_fu_254_p1),
    .ce(grp_fu_254_ce),
    .dout(grp_fu_254_p2)
);

loss_derivative_mul_50ns_50ns_100_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 50 ),
    .din1_WIDTH( 50 ),
    .dout_WIDTH( 100 ))
mul_50ns_50ns_100_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_327_p0),
    .din1(grp_fu_327_p1),
    .ce(grp_fu_327_ce),
    .dout(grp_fu_327_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        exp_x_msb_1_V_reg_542 <= exp_x_msb_1_table_V_q0;
        exp_x_msb_1_V_reg_542_pp0_iter10_reg <= exp_x_msb_1_V_reg_542_pp0_iter9_reg;
        exp_x_msb_1_V_reg_542_pp0_iter11_reg <= exp_x_msb_1_V_reg_542_pp0_iter10_reg;
        exp_x_msb_1_V_reg_542_pp0_iter12_reg <= exp_x_msb_1_V_reg_542_pp0_iter11_reg;
        exp_x_msb_1_V_reg_542_pp0_iter8_reg <= exp_x_msb_1_V_reg_542;
        exp_x_msb_1_V_reg_542_pp0_iter9_reg <= exp_x_msb_1_V_reg_542_pp0_iter8_reg;
        exp_x_msb_2_3_4_lsb_m_1_V_reg_537 <= {{ret_V_fu_305_p2[55:6]}};
        ret_V_7_reg_500_pp0_iter2_reg <= ret_V_7_reg_500;
        ret_V_7_reg_500_pp0_iter3_reg <= ret_V_7_reg_500_pp0_iter2_reg;
        ret_V_7_reg_500_pp0_iter4_reg <= ret_V_7_reg_500_pp0_iter3_reg;
        ret_V_7_reg_500_pp0_iter5_reg <= ret_V_7_reg_500_pp0_iter4_reg;
        ret_V_7_reg_500_pp0_iter6_reg <= ret_V_7_reg_500_pp0_iter5_reg;
        rhs_2_reg_512[34 : 3] <= rhs_2_fu_230_p5[34 : 3];
rhs_2_reg_512[46 : 45] <= rhs_2_fu_230_p5[46 : 45];
        rhs_2_reg_512_pp0_iter3_reg[34 : 3] <= rhs_2_reg_512[34 : 3];
rhs_2_reg_512_pp0_iter3_reg[46 : 45] <= rhs_2_reg_512[46 : 45];
        rhs_2_reg_512_pp0_iter4_reg[34 : 3] <= rhs_2_reg_512_pp0_iter3_reg[34 : 3];
rhs_2_reg_512_pp0_iter4_reg[46 : 45] <= rhs_2_reg_512_pp0_iter3_reg[46 : 45];
        rhs_2_reg_512_pp0_iter5_reg[34 : 3] <= rhs_2_reg_512_pp0_iter4_reg[34 : 3];
rhs_2_reg_512_pp0_iter5_reg[46 : 45] <= rhs_2_reg_512_pp0_iter4_reg[46 : 45];
        rhs_2_reg_512_pp0_iter6_reg[34 : 3] <= rhs_2_reg_512_pp0_iter5_reg[34 : 3];
rhs_2_reg_512_pp0_iter6_reg[46 : 45] <= rhs_2_reg_512_pp0_iter5_reg[46 : 45];
        tmp_46_reg_465_pp0_iter2_reg <= tmp_46_reg_465_pp0_iter1_reg;
        tmp_46_reg_465_pp0_iter3_reg <= tmp_46_reg_465_pp0_iter2_reg;
        tmp_46_reg_465_pp0_iter4_reg <= tmp_46_reg_465_pp0_iter3_reg;
        tmp_46_reg_465_pp0_iter5_reg <= tmp_46_reg_465_pp0_iter4_reg;
        tmp_reg_470_pp0_iter2_reg <= tmp_reg_470_pp0_iter1_reg;
        tmp_reg_470_pp0_iter3_reg <= tmp_reg_470_pp0_iter2_reg;
        tmp_reg_470_pp0_iter4_reg <= tmp_reg_470_pp0_iter3_reg;
        tmp_reg_470_pp0_iter5_reg <= tmp_reg_470_pp0_iter4_reg;
        trunc_ln640_1_reg_506_pp0_iter2_reg <= trunc_ln640_1_reg_506;
        trunc_ln640_1_reg_506_pp0_iter3_reg <= trunc_ln640_1_reg_506_pp0_iter2_reg;
        trunc_ln640_1_reg_506_pp0_iter4_reg <= trunc_ln640_1_reg_506_pp0_iter3_reg;
        trunc_ln640_1_reg_506_pp0_iter5_reg <= trunc_ln640_1_reg_506_pp0_iter4_reg;
        trunc_ln640_1_reg_506_pp0_iter6_reg <= trunc_ln640_1_reg_506_pp0_iter5_reg;
        trunc_ln703_2_reg_558 <= {{grp_fu_327_p2[99:52]}};
        trunc_ln_reg_527 <= {{grp_fu_254_p2[96:52]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_msb_3_V_reg_495 <= f_x_msb_3_table_V_q0;
        ret_V_7_reg_500 <= ret_V_7_fu_220_p2;
        tmp_46_reg_465 <= x[32'd15];
        tmp_46_reg_465_pp0_iter1_reg <= tmp_46_reg_465;
        tmp_55_reg_475 <= {{x[9:2]}};
        tmp_reg_470 <= {{x[15:10]}};
        tmp_reg_470_pp0_iter1_reg <= tmp_reg_470;
        trunc_ln640_1_reg_506 <= trunc_ln640_1_fu_226_p1;
        trunc_ln640_reg_480 <= trunc_ln640_fu_181_p1;
        trunc_ln640_reg_480_pp0_iter1_reg <= trunc_ln640_reg_480;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to12 = 1'b1;
    end else begin
        ap_idle_pp0_0to12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to12 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        exp_x_msb_1_table_V_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_x_msb_2_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_2_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_x_msb_3_table_V_ce0 = 1'b1;
    end else begin
        f_x_msb_3_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_254_ce = 1'b1;
    end else begin
        grp_fu_254_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_327_ce = 1'b1;
    end else begin
        grp_fu_327_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((overf_1_fu_441_p2[0:0] == 1'b1) ? 16'd32767 : tmp_s_fu_447_p4);

assign exp_x_msb_1_table_V_address0 = zext_ln523_fu_280_p1;

assign f_x_msb_2_table_V_address0 = zext_ln445_fu_198_p1;

assign f_x_msb_3_table_V_address0 = zext_ln369_fu_193_p1;

assign grp_fu_254_p0 = grp_fu_254_p00;

assign grp_fu_254_p00 = p_Result_9_fu_240_p3;

assign grp_fu_254_p1 = grp_fu_254_p10;

assign grp_fu_254_p10 = rhs_2_fu_230_p5;

assign grp_fu_327_p0 = grp_fu_327_p00;

assign grp_fu_327_p00 = exp_x_msb_2_3_4_lsb_m_1_V_reg_537;

assign grp_fu_327_p1 = grp_fu_327_p10;

assign grp_fu_327_p10 = exp_x_msb_1_V_reg_542;

assign icmp_ln533_1_fu_413_p2 = ((tmp_53_fu_403_p4 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln533_2_fu_435_p2 = ((tmp_54_fu_425_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln533_fu_391_p2 = ((tmp_52_fu_381_p4 != 3'd0) ? 1'b1 : 1'b0);

assign or_ln533_1_fu_397_p2 = (or_ln533_fu_375_p2 | icmp_ln533_fu_391_p2);

assign or_ln533_2_fu_419_p2 = (or_ln533_1_fu_397_p2 | icmp_ln533_1_fu_413_p2);

assign or_ln533_fu_375_p2 = (p_Result_s_fu_367_p3 | overf_fu_361_p2);

assign overf_1_fu_441_p2 = (or_ln533_2_fu_419_p2 | icmp_ln533_2_fu_435_p2);

assign overf_fu_361_p2 = ((tmp_49_fu_351_p4 != 2'd0) ? 1'b1 : 1'b0);

assign p_Result_7_fu_263_p3 = {{tmp_46_reg_465_pp0_iter5_reg}, {sext_ln640_fu_260_p1}};

assign p_Result_8_fu_203_p4 = {{f_x_msb_2_table_V_q0[45:41]}};

assign p_Result_9_fu_240_p3 = {{ret_V_7_reg_500}, {trunc_ln640_1_reg_506}};

assign p_Result_s_fu_367_p3 = y_l_V_fu_346_p2[32'd47];

assign ret_V_7_fu_220_p2 = (zext_ln703_2_fu_217_p1 + zext_ln703_1_fu_213_p1);

assign ret_V_8_fu_296_p2 = (rhs_1_fu_288_p4 + zext_ln1192_fu_285_p1);

assign ret_V_fu_305_p2 = (ret_V_8_fu_296_p2 + zext_ln1192_1_fu_302_p1);

assign rhs_1_fu_288_p4 = {{{ret_V_7_reg_500_pp0_iter6_reg}, {trunc_ln640_1_reg_506_pp0_iter6_reg}}, {6'd0}};

assign rhs_2_fu_230_p5 = {{{{trunc_ln640_reg_480_pp0_iter1_reg}, {10'd0}}, {f_x_msb_3_V_reg_495}}, {3'd0}};

assign sext_ln640_fu_260_p1 = $signed(tmp_reg_470_pp0_iter5_reg);

assign tmp_49_fu_351_p4 = {{y_l_V_fu_346_p2[49:48]}};

assign tmp_52_fu_381_p4 = {{y_l_V_fu_346_p2[46:44]}};

assign tmp_53_fu_403_p4 = {{y_l_V_fu_346_p2[43:39]}};

assign tmp_54_fu_425_p4 = {{y_l_V_fu_346_p2[38:29]}};

assign tmp_55_fu_171_p4 = {{x[9:2]}};

assign tmp_56_fu_185_p3 = {{trunc_ln640_fu_181_p1}, {3'd0}};

assign tmp_s_fu_447_p4 = {{y_l_V_fu_346_p2[29:14]}};

assign trunc_ln640_1_fu_226_p1 = f_x_msb_2_table_V_q0[40:0];

assign trunc_ln640_fu_181_p1 = x[1:0];

assign y_l_V_fu_346_p2 = (exp_x_msb_1_V_reg_542_pp0_iter12_reg + zext_ln703_fu_343_p1);

assign zext_ln1192_1_fu_302_p1 = rhs_2_reg_512_pp0_iter6_reg;

assign zext_ln1192_fu_285_p1 = trunc_ln_reg_527;

assign zext_ln369_fu_193_p1 = tmp_56_fu_185_p3;

assign zext_ln445_fu_198_p1 = tmp_55_fu_171_p4;

assign zext_ln523_fu_280_p1 = p_Result_7_fu_263_p3;

assign zext_ln703_1_fu_213_p1 = p_Result_8_fu_203_p4;

assign zext_ln703_2_fu_217_p1 = tmp_55_reg_475;

assign zext_ln703_fu_343_p1 = trunc_ln703_2_reg_558;

always @ (posedge ap_clk) begin
    rhs_2_reg_512[2:0] <= 3'b000;
    rhs_2_reg_512[44:35] <= 10'b0000000000;
    rhs_2_reg_512_pp0_iter3_reg[2:0] <= 3'b000;
    rhs_2_reg_512_pp0_iter3_reg[44:35] <= 10'b0000000000;
    rhs_2_reg_512_pp0_iter4_reg[2:0] <= 3'b000;
    rhs_2_reg_512_pp0_iter4_reg[44:35] <= 10'b0000000000;
    rhs_2_reg_512_pp0_iter5_reg[2:0] <= 3'b000;
    rhs_2_reg_512_pp0_iter5_reg[44:35] <= 10'b0000000000;
    rhs_2_reg_512_pp0_iter6_reg[2:0] <= 3'b000;
    rhs_2_reg_512_pp0_iter6_reg[44:35] <= 10'b0000000000;
end

endmodule //loss_derivative_exp_16_3_s
