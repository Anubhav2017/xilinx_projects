// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loss_derivative_loss_derivative,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=5810,HLS_SYN_LUT=5337,HLS_VERSION=2020_2}" *)

module loss_derivative (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 46'd32768;
parameter    ap_ST_fsm_state19 = 46'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 46'd131072;
parameter    ap_ST_fsm_state22 = 46'd262144;
parameter    ap_ST_fsm_pp2_stage0 = 46'd524288;
parameter    ap_ST_fsm_state25 = 46'd1048576;
parameter    ap_ST_fsm_pp3_stage0 = 46'd2097152;
parameter    ap_ST_fsm_state42 = 46'd4194304;
parameter    ap_ST_fsm_pp4_stage0 = 46'd8388608;
parameter    ap_ST_fsm_state91 = 46'd16777216;
parameter    ap_ST_fsm_state92 = 46'd33554432;
parameter    ap_ST_fsm_state93 = 46'd67108864;
parameter    ap_ST_fsm_state94 = 46'd134217728;
parameter    ap_ST_fsm_state95 = 46'd268435456;
parameter    ap_ST_fsm_state96 = 46'd536870912;
parameter    ap_ST_fsm_state97 = 46'd1073741824;
parameter    ap_ST_fsm_state98 = 46'd2147483648;
parameter    ap_ST_fsm_state99 = 46'd4294967296;
parameter    ap_ST_fsm_state100 = 46'd8589934592;
parameter    ap_ST_fsm_state101 = 46'd17179869184;
parameter    ap_ST_fsm_state102 = 46'd34359738368;
parameter    ap_ST_fsm_state103 = 46'd68719476736;
parameter    ap_ST_fsm_state104 = 46'd137438953472;
parameter    ap_ST_fsm_pp5_stage0 = 46'd274877906944;
parameter    ap_ST_fsm_state107 = 46'd549755813888;
parameter    ap_ST_fsm_pp6_stage0 = 46'd1099511627776;
parameter    ap_ST_fsm_state111 = 46'd2199023255552;
parameter    ap_ST_fsm_state112 = 46'd4398046511104;
parameter    ap_ST_fsm_state113 = 46'd8796093022208;
parameter    ap_ST_fsm_state114 = 46'd17592186044416;
parameter    ap_ST_fsm_state115 = 46'd35184372088832;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] x;
wire   [31:0] dx;
wire   [31:0] y;
wire   [31:0] dim;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state9;
reg   [0:0] icmp_ln32_reg_738;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln32_1_reg_757;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state107;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln67_reg_915;
reg   [0:0] icmp_ln67_reg_915_pp6_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state115;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [15:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [30:0] i_reg_303;
reg   [30:0] i_1_reg_314;
reg   [15:0] max_V_1_reg_325;
reg   [30:0] i_2_reg_335;
reg   [30:0] i_3_reg_346;
reg  signed [15:0] sum_V_reg_357;
reg   [30:0] i_4_reg_369;
reg   [30:0] i_5_reg_380;
reg   [30:0] i_6_reg_391;
wire   [15:0] grp_exp_16_3_s_fu_402_ap_return;
reg   [15:0] reg_425;
reg    ap_enable_reg_pp3_iter14;
wire    ap_block_state26_pp3_stage0_iter0;
wire    ap_block_state27_pp3_stage0_iter1;
wire    ap_block_state28_pp3_stage0_iter2;
wire    ap_block_state29_pp3_stage0_iter3;
wire    ap_block_state30_pp3_stage0_iter4;
wire    ap_block_state31_pp3_stage0_iter5;
wire    ap_block_state32_pp3_stage0_iter6;
wire    ap_block_state33_pp3_stage0_iter7;
wire    ap_block_state34_pp3_stage0_iter8;
wire    ap_block_state35_pp3_stage0_iter9;
wire    ap_block_state36_pp3_stage0_iter10;
wire    ap_block_state37_pp3_stage0_iter11;
wire    ap_block_state38_pp3_stage0_iter12;
wire    ap_block_state39_pp3_stage0_iter13;
wire    ap_block_state40_pp3_stage0_iter14;
wire    ap_block_state41_pp3_stage0_iter15;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln48_reg_814;
reg   [0:0] icmp_ln48_reg_814_pp3_iter13_reg;
reg    ap_enable_reg_pp4_iter14;
wire    ap_block_state43_pp4_stage0_iter0;
wire    ap_block_state44_pp4_stage0_iter1;
wire    ap_block_state45_pp4_stage0_iter2;
wire    ap_block_state46_pp4_stage0_iter3;
wire    ap_block_state47_pp4_stage0_iter4;
wire    ap_block_state48_pp4_stage0_iter5;
wire    ap_block_state49_pp4_stage0_iter6;
wire    ap_block_state50_pp4_stage0_iter7;
wire    ap_block_state51_pp4_stage0_iter8;
wire    ap_block_state52_pp4_stage0_iter9;
wire    ap_block_state53_pp4_stage0_iter10;
wire    ap_block_state54_pp4_stage0_iter11;
wire    ap_block_state55_pp4_stage0_iter12;
wire    ap_block_state56_pp4_stage0_iter13;
wire    ap_block_state57_pp4_stage0_iter14;
wire    ap_block_state58_pp4_stage0_iter15;
wire    ap_block_state59_pp4_stage0_iter16;
wire    ap_block_state60_pp4_stage0_iter17;
wire    ap_block_state61_pp4_stage0_iter18;
wire    ap_block_state62_pp4_stage0_iter19;
wire    ap_block_state63_pp4_stage0_iter20;
wire    ap_block_state64_pp4_stage0_iter21;
wire    ap_block_state65_pp4_stage0_iter22;
wire    ap_block_state66_pp4_stage0_iter23;
wire    ap_block_state67_pp4_stage0_iter24;
wire    ap_block_state68_pp4_stage0_iter25;
wire    ap_block_state69_pp4_stage0_iter26;
wire    ap_block_state70_pp4_stage0_iter27;
wire    ap_block_state71_pp4_stage0_iter28;
wire    ap_block_state72_pp4_stage0_iter29;
wire    ap_block_state73_pp4_stage0_iter30;
wire    ap_block_state74_pp4_stage0_iter31;
wire    ap_block_state75_pp4_stage0_iter32;
wire    ap_block_state76_pp4_stage0_iter33;
wire    ap_block_state77_pp4_stage0_iter34;
wire    ap_block_state78_pp4_stage0_iter35;
wire    ap_block_state79_pp4_stage0_iter36;
wire    ap_block_state80_pp4_stage0_iter37;
wire    ap_block_state81_pp4_stage0_iter38;
wire    ap_block_state82_pp4_stage0_iter39;
wire    ap_block_state83_pp4_stage0_iter40;
wire    ap_block_state84_pp4_stage0_iter41;
wire    ap_block_state85_pp4_stage0_iter42;
wire    ap_block_state86_pp4_stage0_iter43;
wire    ap_block_state87_pp4_stage0_iter44;
wire    ap_block_state88_pp4_stage0_iter45;
wire    ap_block_state89_pp4_stage0_iter46;
wire    ap_block_state90_pp4_stage0_iter47;
wire    ap_block_pp4_stage0_11001;
reg   [0:0] icmp_ln52_reg_838;
reg   [0:0] icmp_ln52_reg_838_pp4_iter13_reg;
reg   [31:0] dim_read_reg_706;
reg   [31:0] y_read_reg_720;
reg   [31:0] dx_read_reg_727;
reg   [31:0] gmem_addr_reg_732;
wire   [0:0] icmp_ln32_fu_449_p2;
wire    ap_CS_fsm_state8;
reg   [15:0] max_V_reg_742;
wire   [30:0] trunc_ln32_fu_454_p1;
reg   [30:0] trunc_ln32_reg_747;
wire    ap_CS_fsm_state15;
wire   [30:0] add_ln32_fu_457_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state16_pp0_stage0_iter0;
reg    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln32_1_fu_463_p2;
reg   [0:0] icmp_ln32_1_reg_757_pp0_iter1_reg;
wire   [3:0] trunc_ln33_fu_468_p1;
reg   [3:0] trunc_ln33_reg_761;
reg   [3:0] trunc_ln33_reg_761_pp0_iter1_reg;
reg   [15:0] gmem_addr_read_reg_766;
wire   [0:0] icmp_ln36_fu_480_p2;
reg   [0:0] icmp_ln36_reg_771;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state20_pp1_stage0_iter0;
wire    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [30:0] add_ln36_fu_485_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [15:0] max_V_2_fu_506_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [30:0] add_ln42_fu_514_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state23_pp2_stage0_iter0;
wire    ap_block_state24_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln42_fu_524_p2;
reg   [0:0] icmp_ln42_reg_795;
wire   [31:0] zext_ln703_fu_533_p1;
reg   [31:0] zext_ln703_reg_799;
wire   [30:0] add_ln48_fu_545_p2;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln48_fu_555_p2;
reg   [0:0] icmp_ln48_reg_814_pp3_iter1_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter2_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter3_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter4_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter5_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter6_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter7_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter8_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter9_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter10_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter11_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter12_reg;
reg   [0:0] icmp_ln48_reg_814_pp3_iter14_reg;
wire   [15:0] sum_V_1_fu_569_p2;
reg    ap_enable_reg_pp3_iter15;
wire  signed [28:0] sum_V_cast_fu_575_p1;
reg  signed [28:0] sum_V_cast_reg_828;
wire    ap_CS_fsm_state42;
wire   [30:0] add_ln52_fu_579_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] icmp_ln52_fu_589_p2;
reg   [0:0] icmp_ln52_reg_838_pp4_iter1_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter2_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter3_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter4_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter5_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter6_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter7_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter8_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter9_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter10_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter11_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter12_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter14_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter15_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter16_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter17_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter18_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter19_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter20_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter21_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter22_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter23_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter24_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter25_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter26_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter27_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter28_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter29_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter30_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter31_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter32_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter33_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter34_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter35_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter36_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter37_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter38_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter39_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter40_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter41_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter42_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter43_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter44_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter45_reg;
reg   [0:0] icmp_ln52_reg_838_pp4_iter46_reg;
wire   [31:0] zext_ln53_fu_598_p1;
reg   [31:0] zext_ln53_reg_842;
reg   [31:0] zext_ln53_reg_842_pp4_iter1_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter2_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter3_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter4_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter5_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter6_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter7_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter8_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter9_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter10_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter11_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter12_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter13_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter14_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter15_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter16_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter17_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter18_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter19_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter20_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter21_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter22_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter23_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter24_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter25_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter26_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter27_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter28_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter29_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter30_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter31_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter32_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter33_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter34_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter35_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter36_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter37_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter38_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter39_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter40_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter41_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter42_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter43_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter44_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter45_reg;
reg   [31:0] zext_ln53_reg_842_pp4_iter46_reg;
wire    ap_CS_fsm_state91;
wire   [15:0] probs_V_q0;
reg   [15:0] x_V_2_reg_862;
wire    ap_CS_fsm_state92;
wire   [15:0] grp_log_16_3_s_fu_414_ap_return;
reg   [15:0] op2_V_1_reg_867;
wire    ap_CS_fsm_state103;
wire   [15:0] loss_V_fu_621_p2;
reg   [15:0] loss_V_reg_872;
wire    ap_CS_fsm_state104;
reg   [3:0] dxbuf_V_addr_reg_876;
wire   [30:0] add_ln58_fu_626_p2;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire    ap_block_state105_pp5_stage0_iter0;
wire    ap_block_state106_pp5_stage0_iter1;
wire    ap_block_pp5_stage0_11001;
wire   [0:0] icmp_ln58_fu_636_p2;
wire   [0:0] icmp_ln59_fu_641_p2;
reg   [0:0] icmp_ln59_reg_890;
wire   [31:0] i_5_cast5_cast_fu_650_p1;
reg   [31:0] i_5_cast5_cast_reg_894;
wire   [30:0] add_ln67_fu_682_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state108_pp6_stage0_iter0;
wire    ap_block_state109_pp6_stage0_iter1;
wire    ap_block_state110_pp6_stage0_iter2;
reg    ap_block_state110_io;
reg    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln67_fu_692_p2;
wire   [15:0] dxbuf_V_q0;
reg   [15:0] dxbuf_V_load_reg_924;
reg    ap_enable_reg_pp6_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state16;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state19;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
wire    ap_CS_fsm_state22;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state23;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state25;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state26;
reg    ap_enable_reg_pp3_iter1;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
reg    ap_enable_reg_pp3_iter7;
reg    ap_enable_reg_pp3_iter8;
reg    ap_enable_reg_pp3_iter9;
reg    ap_enable_reg_pp3_iter10;
reg    ap_enable_reg_pp3_iter11;
reg    ap_enable_reg_pp3_iter12;
reg    ap_enable_reg_pp3_iter13;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state43;
reg    ap_enable_reg_pp4_iter1;
reg    ap_enable_reg_pp4_iter2;
reg    ap_enable_reg_pp4_iter3;
reg    ap_enable_reg_pp4_iter4;
reg    ap_enable_reg_pp4_iter5;
reg    ap_enable_reg_pp4_iter6;
reg    ap_enable_reg_pp4_iter7;
reg    ap_enable_reg_pp4_iter8;
reg    ap_enable_reg_pp4_iter9;
reg    ap_enable_reg_pp4_iter10;
reg    ap_enable_reg_pp4_iter11;
reg    ap_enable_reg_pp4_iter12;
reg    ap_enable_reg_pp4_iter13;
reg    ap_enable_reg_pp4_iter15;
reg    ap_enable_reg_pp4_iter16;
reg    ap_enable_reg_pp4_iter17;
reg    ap_enable_reg_pp4_iter18;
reg    ap_enable_reg_pp4_iter19;
reg    ap_enable_reg_pp4_iter20;
reg    ap_enable_reg_pp4_iter21;
reg    ap_enable_reg_pp4_iter22;
reg    ap_enable_reg_pp4_iter23;
reg    ap_enable_reg_pp4_iter24;
reg    ap_enable_reg_pp4_iter25;
reg    ap_enable_reg_pp4_iter26;
reg    ap_enable_reg_pp4_iter27;
reg    ap_enable_reg_pp4_iter28;
reg    ap_enable_reg_pp4_iter29;
reg    ap_enable_reg_pp4_iter30;
reg    ap_enable_reg_pp4_iter31;
reg    ap_enable_reg_pp4_iter32;
reg    ap_enable_reg_pp4_iter33;
reg    ap_enable_reg_pp4_iter34;
reg    ap_enable_reg_pp4_iter35;
reg    ap_enable_reg_pp4_iter36;
reg    ap_enable_reg_pp4_iter37;
reg    ap_enable_reg_pp4_iter38;
reg    ap_enable_reg_pp4_iter39;
reg    ap_enable_reg_pp4_iter40;
reg    ap_enable_reg_pp4_iter41;
reg    ap_enable_reg_pp4_iter42;
reg    ap_enable_reg_pp4_iter43;
reg    ap_enable_reg_pp4_iter44;
reg    ap_enable_reg_pp4_iter45;
reg    ap_enable_reg_pp4_iter46;
reg    ap_enable_reg_pp4_iter47;
wire    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state105;
reg    ap_enable_reg_pp5_iter1;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state108;
reg   [3:0] xbuf_V_address0;
reg    xbuf_V_ce0;
reg    xbuf_V_we0;
wire   [15:0] xbuf_V_q0;
reg   [3:0] dxbuf_V_address0;
reg    dxbuf_V_ce0;
reg    dxbuf_V_we0;
reg   [15:0] dxbuf_V_d0;
reg   [3:0] log_probs_V_address0;
reg    log_probs_V_ce0;
reg    log_probs_V_we0;
wire   [15:0] log_probs_V_d0;
wire   [15:0] log_probs_V_q0;
reg   [3:0] probs_V_address0;
reg    probs_V_ce0;
reg    probs_V_we0;
wire   [15:0] probs_V_d0;
wire    grp_exp_16_3_s_fu_402_ap_start;
wire    grp_exp_16_3_s_fu_402_ap_done;
wire    grp_exp_16_3_s_fu_402_ap_idle;
wire    grp_exp_16_3_s_fu_402_ap_ready;
wire    grp_log_16_3_s_fu_414_ap_start;
wire    grp_log_16_3_s_fu_414_ap_done;
wire    grp_log_16_3_s_fu_414_ap_idle;
wire    grp_log_16_3_s_fu_414_ap_ready;
wire    ap_block_pp1_stage0;
reg    grp_exp_16_3_s_fu_402_ap_start_reg;
wire    ap_block_pp3_stage0;
wire    ap_block_pp4_stage0;
reg    grp_log_16_3_s_fu_414_ap_start_reg;
reg   [45:0] ap_NS_fsm;
wire    ap_NS_fsm_state93;
wire    ap_CS_fsm_state93;
wire   [31:0] zext_ln33_fu_472_p1;
wire   [31:0] zext_ln1494_fu_495_p1;
wire    ap_block_pp2_stage0;
wire   [31:0] zext_ln49_fu_564_p1;
wire    ap_block_pp5_stage0;
wire   [31:0] zext_ln68_fu_701_p1;
wire  signed [31:0] sext_ln30_fu_439_p1;
wire   [31:0] sext_ln67_fu_671_p1;
reg    ap_block_state9_io;
reg    ap_block_state115;
wire    ap_block_pp6_stage0_01001;
wire   [15:0] add_ln703_fu_655_p2;
wire   [30:0] trunc_ln_fu_429_p4;
wire   [31:0] i_1_cast1_fu_476_p1;
wire   [3:0] trunc_ln1494_fu_491_p1;
wire   [0:0] icmp_ln1494_fu_500_p2;
wire   [31:0] i_2_cast_fu_520_p1;
wire   [3:0] trunc_ln703_fu_529_p1;
wire   [31:0] i_3_cast_fu_551_p1;
wire   [3:0] trunc_ln49_fu_560_p1;
wire   [31:0] i_4_cast_fu_585_p1;
wire   [3:0] trunc_ln53_fu_594_p1;
wire   [28:0] grp_fu_611_p0;
wire  signed [15:0] grp_fu_611_p1;
wire   [15:0] grp_fu_611_p2;
wire   [31:0] i_5_cast_fu_632_p1;
wire   [3:0] empty_62_fu_646_p1;
wire   [30:0] trunc_ln7_fu_662_p4;
wire   [31:0] i_6_cast_fu_688_p1;
wire   [3:0] trunc_ln68_fu_697_p1;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_condition_1334;
wire    ap_ce_reg;
wire   [15:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 46'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter14 = 1'b0;
#0 ap_enable_reg_pp4_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter15 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp3_iter7 = 1'b0;
#0 ap_enable_reg_pp3_iter8 = 1'b0;
#0 ap_enable_reg_pp3_iter9 = 1'b0;
#0 ap_enable_reg_pp3_iter10 = 1'b0;
#0 ap_enable_reg_pp3_iter11 = 1'b0;
#0 ap_enable_reg_pp3_iter12 = 1'b0;
#0 ap_enable_reg_pp3_iter13 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp4_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter7 = 1'b0;
#0 ap_enable_reg_pp4_iter8 = 1'b0;
#0 ap_enable_reg_pp4_iter9 = 1'b0;
#0 ap_enable_reg_pp4_iter10 = 1'b0;
#0 ap_enable_reg_pp4_iter11 = 1'b0;
#0 ap_enable_reg_pp4_iter12 = 1'b0;
#0 ap_enable_reg_pp4_iter13 = 1'b0;
#0 ap_enable_reg_pp4_iter15 = 1'b0;
#0 ap_enable_reg_pp4_iter16 = 1'b0;
#0 ap_enable_reg_pp4_iter17 = 1'b0;
#0 ap_enable_reg_pp4_iter18 = 1'b0;
#0 ap_enable_reg_pp4_iter19 = 1'b0;
#0 ap_enable_reg_pp4_iter20 = 1'b0;
#0 ap_enable_reg_pp4_iter21 = 1'b0;
#0 ap_enable_reg_pp4_iter22 = 1'b0;
#0 ap_enable_reg_pp4_iter23 = 1'b0;
#0 ap_enable_reg_pp4_iter24 = 1'b0;
#0 ap_enable_reg_pp4_iter25 = 1'b0;
#0 ap_enable_reg_pp4_iter26 = 1'b0;
#0 ap_enable_reg_pp4_iter27 = 1'b0;
#0 ap_enable_reg_pp4_iter28 = 1'b0;
#0 ap_enable_reg_pp4_iter29 = 1'b0;
#0 ap_enable_reg_pp4_iter30 = 1'b0;
#0 ap_enable_reg_pp4_iter31 = 1'b0;
#0 ap_enable_reg_pp4_iter32 = 1'b0;
#0 ap_enable_reg_pp4_iter33 = 1'b0;
#0 ap_enable_reg_pp4_iter34 = 1'b0;
#0 ap_enable_reg_pp4_iter35 = 1'b0;
#0 ap_enable_reg_pp4_iter36 = 1'b0;
#0 ap_enable_reg_pp4_iter37 = 1'b0;
#0 ap_enable_reg_pp4_iter38 = 1'b0;
#0 ap_enable_reg_pp4_iter39 = 1'b0;
#0 ap_enable_reg_pp4_iter40 = 1'b0;
#0 ap_enable_reg_pp4_iter41 = 1'b0;
#0 ap_enable_reg_pp4_iter42 = 1'b0;
#0 ap_enable_reg_pp4_iter43 = 1'b0;
#0 ap_enable_reg_pp4_iter44 = 1'b0;
#0 ap_enable_reg_pp4_iter45 = 1'b0;
#0 ap_enable_reg_pp4_iter46 = 1'b0;
#0 ap_enable_reg_pp4_iter47 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 grp_exp_16_3_s_fu_402_ap_start_reg = 1'b0;
#0 grp_log_16_3_s_fu_414_ap_start_reg = 1'b0;
end

loss_derivative_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(loss_V_reg_872),
    .x(x),
    .dx(dx),
    .y(y),
    .dim(dim)
);

loss_derivative_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_addr_reg_732),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(sext_ln67_fu_671_p1),
    .I_AWID(1'd0),
    .I_AWLEN(dim_read_reg_706),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(dxbuf_V_load_reg_924),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

loss_derivative_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
xbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(xbuf_V_address0),
    .ce0(xbuf_V_ce0),
    .we0(xbuf_V_we0),
    .d0(gmem_addr_read_reg_766),
    .q0(xbuf_V_q0)
);

loss_derivative_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dxbuf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dxbuf_V_address0),
    .ce0(dxbuf_V_ce0),
    .we0(dxbuf_V_we0),
    .d0(dxbuf_V_d0),
    .q0(dxbuf_V_q0)
);

loss_derivative_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
log_probs_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(log_probs_V_address0),
    .ce0(log_probs_V_ce0),
    .we0(log_probs_V_we0),
    .d0(log_probs_V_d0),
    .q0(log_probs_V_q0)
);

loss_derivative_xbuf_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
probs_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(probs_V_address0),
    .ce0(probs_V_ce0),
    .we0(probs_V_we0),
    .d0(probs_V_d0),
    .q0(probs_V_q0)
);

loss_derivative_exp_16_3_s grp_exp_16_3_s_fu_402(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_exp_16_3_s_fu_402_ap_start),
    .ap_done(grp_exp_16_3_s_fu_402_ap_done),
    .ap_idle(grp_exp_16_3_s_fu_402_ap_idle),
    .ap_ready(grp_exp_16_3_s_fu_402_ap_ready),
    .ap_ce(1'b1),
    .x(log_probs_V_q0),
    .ap_return(grp_exp_16_3_s_fu_402_ap_return)
);

loss_derivative_log_16_3_s grp_log_16_3_s_fu_414(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_log_16_3_s_fu_414_ap_start),
    .ap_done(grp_log_16_3_s_fu_414_ap_done),
    .ap_idle(grp_log_16_3_s_fu_414_ap_idle),
    .ap_ready(grp_log_16_3_s_fu_414_ap_ready),
    .x(x_V_2_reg_862),
    .ap_return(grp_log_16_3_s_fu_414_ap_return)
);

loss_derivative_sdiv_29ns_16s_16_33_1 #(
    .ID( 1 ),
    .NUM_STAGE( 33 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
sdiv_29ns_16s_16_33_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_611_p0),
    .din1(grp_fu_611_p1),
    .ce(1'b1),
    .dout(grp_fu_611_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state16)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln32_reg_738 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state23) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state23);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln32_reg_738 == 1'd1))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state26)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp3_iter15 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state43) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state43)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state43);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter14 <= ap_enable_reg_pp4_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter15 <= ap_enable_reg_pp4_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter16 <= ap_enable_reg_pp4_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter17 <= ap_enable_reg_pp4_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter18 <= ap_enable_reg_pp4_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter19 <= ap_enable_reg_pp4_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter20 <= ap_enable_reg_pp4_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter21 <= ap_enable_reg_pp4_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter22 <= ap_enable_reg_pp4_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter23 <= ap_enable_reg_pp4_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter24 <= ap_enable_reg_pp4_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter25 <= ap_enable_reg_pp4_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter26 <= ap_enable_reg_pp4_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter27 <= ap_enable_reg_pp4_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter28 <= ap_enable_reg_pp4_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter29 <= ap_enable_reg_pp4_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter30 <= ap_enable_reg_pp4_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter31 <= ap_enable_reg_pp4_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter32 <= ap_enable_reg_pp4_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter33 <= ap_enable_reg_pp4_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter34 <= ap_enable_reg_pp4_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter35 <= ap_enable_reg_pp4_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter36 <= ap_enable_reg_pp4_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter37 <= ap_enable_reg_pp4_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter38 <= ap_enable_reg_pp4_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter39 <= ap_enable_reg_pp4_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter40 <= ap_enable_reg_pp4_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter41 <= ap_enable_reg_pp4_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter42 <= ap_enable_reg_pp4_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter43 <= ap_enable_reg_pp4_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter44 <= ap_enable_reg_pp4_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter45 <= ap_enable_reg_pp4_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter46 <= ap_enable_reg_pp4_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter47 <= ap_enable_reg_pp4_iter46;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_enable_reg_pp4_iter47 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state105) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state104) & (icmp_ln32_reg_738 == 1'd1))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state105) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state105);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((1'b1 == ap_CS_fsm_state104) & (icmp_ln32_reg_738 == 1'd1))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state108) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state108)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state108);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_exp_16_3_s_fu_402_ap_start_reg <= 1'b0;
    end else begin
        if ((((icmp_ln52_fu_589_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln48_fu_555_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
            grp_exp_16_3_s_fu_402_ap_start_reg <= 1'b1;
        end else if ((grp_exp_16_3_s_fu_402_ap_ready == 1'b1)) begin
            grp_exp_16_3_s_fu_402_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_log_16_3_s_fu_414_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state92) & (1'b1 == ap_NS_fsm_state93))) begin
            grp_log_16_3_s_fu_414_ap_start_reg <= 1'b1;
        end else if ((grp_log_16_3_s_fu_414_ap_ready == 1'b1)) begin
            grp_log_16_3_s_fu_414_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln36_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_314 <= add_ln36_fu_485_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i_1_reg_314 <= 31'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln32_reg_738 == 1'd1))) begin
        i_2_reg_335 <= 31'd0;
    end else if (((icmp_ln42_fu_524_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_335 <= add_ln42_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_3_reg_346 <= 31'd0;
    end else if (((icmp_ln48_fu_555_p2 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_3_reg_346 <= add_ln48_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_4_reg_369 <= 31'd0;
    end else if (((icmp_ln52_fu_589_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_4_reg_369 <= add_ln52_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_636_p2 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_5_reg_380 <= add_ln58_fu_626_p2;
    end else if (((1'b1 == ap_CS_fsm_state104) & (icmp_ln32_reg_738 == 1'd1))) begin
        i_5_reg_380 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
        i_6_reg_391 <= 31'd0;
    end else if (((icmp_ln67_fu_692_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        i_6_reg_391 <= add_ln67_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_reg_303 <= 31'd0;
    end else if (((icmp_ln32_1_fu_463_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_303 <= add_ln32_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln36_reg_771 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        max_V_1_reg_325 <= max_V_2_fu_506_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        max_V_1_reg_325 <= max_V_reg_742;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sum_V_reg_357 <= 16'd0;
    end else if (((ap_enable_reg_pp3_iter15 == 1'b1) & (icmp_ln48_reg_814_pp3_iter14_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        sum_V_reg_357 <= sum_V_1_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dim_read_reg_706 <= dim;
        dx_read_reg_727 <= dx;
        gmem_addr_reg_732 <= sext_ln30_fu_439_p1;
        y_read_reg_720 <= y;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state104) & (icmp_ln32_reg_738 == 1'd1))) begin
        dxbuf_V_addr_reg_876 <= y_read_reg_720;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln67_reg_915 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        dxbuf_V_load_reg_924 <= dxbuf_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_1_reg_757 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        gmem_addr_read_reg_766 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_636_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        i_5_cast5_cast_reg_894[3 : 0] <= i_5_cast5_cast_fu_650_p1[3 : 0];
        icmp_ln59_reg_890 <= icmp_ln59_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln32_1_reg_757 <= icmp_ln32_1_fu_463_p2;
        icmp_ln32_1_reg_757_pp0_iter1_reg <= icmp_ln32_1_reg_757;
        trunc_ln33_reg_761_pp0_iter1_reg <= trunc_ln33_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln32_reg_738 <= icmp_ln32_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln36_reg_771 <= icmp_ln36_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln42_reg_795 <= icmp_ln42_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln48_reg_814 <= icmp_ln48_fu_555_p2;
        icmp_ln48_reg_814_pp3_iter1_reg <= icmp_ln48_reg_814;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        icmp_ln48_reg_814_pp3_iter10_reg <= icmp_ln48_reg_814_pp3_iter9_reg;
        icmp_ln48_reg_814_pp3_iter11_reg <= icmp_ln48_reg_814_pp3_iter10_reg;
        icmp_ln48_reg_814_pp3_iter12_reg <= icmp_ln48_reg_814_pp3_iter11_reg;
        icmp_ln48_reg_814_pp3_iter13_reg <= icmp_ln48_reg_814_pp3_iter12_reg;
        icmp_ln48_reg_814_pp3_iter14_reg <= icmp_ln48_reg_814_pp3_iter13_reg;
        icmp_ln48_reg_814_pp3_iter2_reg <= icmp_ln48_reg_814_pp3_iter1_reg;
        icmp_ln48_reg_814_pp3_iter3_reg <= icmp_ln48_reg_814_pp3_iter2_reg;
        icmp_ln48_reg_814_pp3_iter4_reg <= icmp_ln48_reg_814_pp3_iter3_reg;
        icmp_ln48_reg_814_pp3_iter5_reg <= icmp_ln48_reg_814_pp3_iter4_reg;
        icmp_ln48_reg_814_pp3_iter6_reg <= icmp_ln48_reg_814_pp3_iter5_reg;
        icmp_ln48_reg_814_pp3_iter7_reg <= icmp_ln48_reg_814_pp3_iter6_reg;
        icmp_ln48_reg_814_pp3_iter8_reg <= icmp_ln48_reg_814_pp3_iter7_reg;
        icmp_ln48_reg_814_pp3_iter9_reg <= icmp_ln48_reg_814_pp3_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln52_reg_838 <= icmp_ln52_fu_589_p2;
        icmp_ln52_reg_838_pp4_iter1_reg <= icmp_ln52_reg_838;
        zext_ln53_reg_842_pp4_iter1_reg[3 : 0] <= zext_ln53_reg_842[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp4_stage0_11001)) begin
        icmp_ln52_reg_838_pp4_iter10_reg <= icmp_ln52_reg_838_pp4_iter9_reg;
        icmp_ln52_reg_838_pp4_iter11_reg <= icmp_ln52_reg_838_pp4_iter10_reg;
        icmp_ln52_reg_838_pp4_iter12_reg <= icmp_ln52_reg_838_pp4_iter11_reg;
        icmp_ln52_reg_838_pp4_iter13_reg <= icmp_ln52_reg_838_pp4_iter12_reg;
        icmp_ln52_reg_838_pp4_iter14_reg <= icmp_ln52_reg_838_pp4_iter13_reg;
        icmp_ln52_reg_838_pp4_iter15_reg <= icmp_ln52_reg_838_pp4_iter14_reg;
        icmp_ln52_reg_838_pp4_iter16_reg <= icmp_ln52_reg_838_pp4_iter15_reg;
        icmp_ln52_reg_838_pp4_iter17_reg <= icmp_ln52_reg_838_pp4_iter16_reg;
        icmp_ln52_reg_838_pp4_iter18_reg <= icmp_ln52_reg_838_pp4_iter17_reg;
        icmp_ln52_reg_838_pp4_iter19_reg <= icmp_ln52_reg_838_pp4_iter18_reg;
        icmp_ln52_reg_838_pp4_iter20_reg <= icmp_ln52_reg_838_pp4_iter19_reg;
        icmp_ln52_reg_838_pp4_iter21_reg <= icmp_ln52_reg_838_pp4_iter20_reg;
        icmp_ln52_reg_838_pp4_iter22_reg <= icmp_ln52_reg_838_pp4_iter21_reg;
        icmp_ln52_reg_838_pp4_iter23_reg <= icmp_ln52_reg_838_pp4_iter22_reg;
        icmp_ln52_reg_838_pp4_iter24_reg <= icmp_ln52_reg_838_pp4_iter23_reg;
        icmp_ln52_reg_838_pp4_iter25_reg <= icmp_ln52_reg_838_pp4_iter24_reg;
        icmp_ln52_reg_838_pp4_iter26_reg <= icmp_ln52_reg_838_pp4_iter25_reg;
        icmp_ln52_reg_838_pp4_iter27_reg <= icmp_ln52_reg_838_pp4_iter26_reg;
        icmp_ln52_reg_838_pp4_iter28_reg <= icmp_ln52_reg_838_pp4_iter27_reg;
        icmp_ln52_reg_838_pp4_iter29_reg <= icmp_ln52_reg_838_pp4_iter28_reg;
        icmp_ln52_reg_838_pp4_iter2_reg <= icmp_ln52_reg_838_pp4_iter1_reg;
        icmp_ln52_reg_838_pp4_iter30_reg <= icmp_ln52_reg_838_pp4_iter29_reg;
        icmp_ln52_reg_838_pp4_iter31_reg <= icmp_ln52_reg_838_pp4_iter30_reg;
        icmp_ln52_reg_838_pp4_iter32_reg <= icmp_ln52_reg_838_pp4_iter31_reg;
        icmp_ln52_reg_838_pp4_iter33_reg <= icmp_ln52_reg_838_pp4_iter32_reg;
        icmp_ln52_reg_838_pp4_iter34_reg <= icmp_ln52_reg_838_pp4_iter33_reg;
        icmp_ln52_reg_838_pp4_iter35_reg <= icmp_ln52_reg_838_pp4_iter34_reg;
        icmp_ln52_reg_838_pp4_iter36_reg <= icmp_ln52_reg_838_pp4_iter35_reg;
        icmp_ln52_reg_838_pp4_iter37_reg <= icmp_ln52_reg_838_pp4_iter36_reg;
        icmp_ln52_reg_838_pp4_iter38_reg <= icmp_ln52_reg_838_pp4_iter37_reg;
        icmp_ln52_reg_838_pp4_iter39_reg <= icmp_ln52_reg_838_pp4_iter38_reg;
        icmp_ln52_reg_838_pp4_iter3_reg <= icmp_ln52_reg_838_pp4_iter2_reg;
        icmp_ln52_reg_838_pp4_iter40_reg <= icmp_ln52_reg_838_pp4_iter39_reg;
        icmp_ln52_reg_838_pp4_iter41_reg <= icmp_ln52_reg_838_pp4_iter40_reg;
        icmp_ln52_reg_838_pp4_iter42_reg <= icmp_ln52_reg_838_pp4_iter41_reg;
        icmp_ln52_reg_838_pp4_iter43_reg <= icmp_ln52_reg_838_pp4_iter42_reg;
        icmp_ln52_reg_838_pp4_iter44_reg <= icmp_ln52_reg_838_pp4_iter43_reg;
        icmp_ln52_reg_838_pp4_iter45_reg <= icmp_ln52_reg_838_pp4_iter44_reg;
        icmp_ln52_reg_838_pp4_iter46_reg <= icmp_ln52_reg_838_pp4_iter45_reg;
        icmp_ln52_reg_838_pp4_iter4_reg <= icmp_ln52_reg_838_pp4_iter3_reg;
        icmp_ln52_reg_838_pp4_iter5_reg <= icmp_ln52_reg_838_pp4_iter4_reg;
        icmp_ln52_reg_838_pp4_iter6_reg <= icmp_ln52_reg_838_pp4_iter5_reg;
        icmp_ln52_reg_838_pp4_iter7_reg <= icmp_ln52_reg_838_pp4_iter6_reg;
        icmp_ln52_reg_838_pp4_iter8_reg <= icmp_ln52_reg_838_pp4_iter7_reg;
        icmp_ln52_reg_838_pp4_iter9_reg <= icmp_ln52_reg_838_pp4_iter8_reg;
        zext_ln53_reg_842_pp4_iter10_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter9_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter11_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter10_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter12_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter11_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter13_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter12_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter14_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter13_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter15_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter14_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter16_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter15_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter17_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter16_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter18_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter17_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter19_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter18_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter20_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter19_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter21_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter20_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter22_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter21_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter23_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter22_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter24_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter23_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter25_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter24_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter26_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter25_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter27_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter26_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter28_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter27_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter29_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter28_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter2_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter1_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter30_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter29_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter31_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter30_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter32_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter31_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter33_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter32_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter34_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter33_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter35_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter34_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter36_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter35_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter37_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter36_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter38_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter37_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter39_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter38_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter3_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter2_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter40_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter39_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter41_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter40_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter42_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter41_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter43_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter42_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter44_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter43_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter45_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter44_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter46_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter45_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter4_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter3_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter5_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter4_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter6_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter5_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter7_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter6_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter8_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter7_reg[3 : 0];
        zext_ln53_reg_842_pp4_iter9_reg[3 : 0] <= zext_ln53_reg_842_pp4_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        icmp_ln67_reg_915 <= icmp_ln67_fu_692_p2;
        icmp_ln67_reg_915_pp6_iter1_reg <= icmp_ln67_reg_915;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state104)) begin
        loss_V_reg_872 <= loss_V_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_V_reg_742 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        op2_V_1_reg_867 <= grp_log_16_3_s_fu_414_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln52_reg_838_pp4_iter13_reg == 1'd0) & (ap_enable_reg_pp4_iter14 == 1'b1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((icmp_ln48_reg_814_pp3_iter13_reg == 1'd0) & (ap_enable_reg_pp3_iter14 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        reg_425 <= grp_exp_16_3_s_fu_402_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        sum_V_cast_reg_828 <= sum_V_cast_fu_575_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        trunc_ln32_reg_747 <= trunc_ln32_fu_454_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_1_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln33_reg_761 <= trunc_ln33_fu_468_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        x_V_2_reg_862 <= probs_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_589_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        zext_ln53_reg_842[3 : 0] <= zext_ln53_fu_598_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln703_reg_799[3 : 0] <= zext_ln703_fu_533_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln32_1_fu_463_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_480_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_524_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_fu_555_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln52_fu_589_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state43 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state43 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln58_fu_636_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state105 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state105 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln67_fu_692_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state108 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state108 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln32_reg_738 == 1'd1)) & (1'b1 == ap_CS_fsm_state115))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter13 == 1'b0) & (ap_enable_reg_pp3_iter12 == 1'b0) & (ap_enable_reg_pp3_iter11 == 1'b0) & (ap_enable_reg_pp3_iter10 == 1'b0) & (ap_enable_reg_pp3_iter9 == 1'b0) & (ap_enable_reg_pp3_iter8 == 1'b0) & (ap_enable_reg_pp3_iter7 == 1'b0) & (ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter15 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter14 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter28 == 1'b0) & (ap_enable_reg_pp4_iter27 == 1'b0) & (ap_enable_reg_pp4_iter26 == 1'b0) & (ap_enable_reg_pp4_iter25 == 1'b0) & (ap_enable_reg_pp4_iter24 == 1'b0) & (ap_enable_reg_pp4_iter23 == 1'b0) & (ap_enable_reg_pp4_iter22 == 1'b0) & (ap_enable_reg_pp4_iter21 == 1'b0) & (ap_enable_reg_pp4_iter20 == 1'b0) & (ap_enable_reg_pp4_iter19 == 1'b0) & (ap_enable_reg_pp4_iter18 == 1'b0) & (ap_enable_reg_pp4_iter17 == 1'b0) & (ap_enable_reg_pp4_iter16 == 1'b0) & (ap_enable_reg_pp4_iter15 == 1'b0) & (ap_enable_reg_pp4_iter13 == 1'b0) & (ap_enable_reg_pp4_iter12 == 1'b0) & (ap_enable_reg_pp4_iter11 == 1'b0) & (ap_enable_reg_pp4_iter10 == 1'b0) & (ap_enable_reg_pp4_iter9 == 1'b0) & (ap_enable_reg_pp4_iter8 == 1'b0) & (ap_enable_reg_pp4_iter7 == 1'b0) & (ap_enable_reg_pp4_iter6 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter14 == 1'b0) & (ap_enable_reg_pp4_iter47 == 1'b0) & (ap_enable_reg_pp4_iter46 == 1'b0) & (ap_enable_reg_pp4_iter45 == 1'b0) & (ap_enable_reg_pp4_iter44 == 1'b0) & (ap_enable_reg_pp4_iter43 == 1'b0) & (ap_enable_reg_pp4_iter42 == 1'b0) & (ap_enable_reg_pp4_iter41 == 1'b0) & (ap_enable_reg_pp4_iter40 == 1'b0) & (ap_enable_reg_pp4_iter39 == 1'b0) & (ap_enable_reg_pp4_iter38 == 1'b0) & (ap_enable_reg_pp4_iter37 == 1'b0) & (ap_enable_reg_pp4_iter36 == 1'b0) & (ap_enable_reg_pp4_iter35 == 1'b0) & (ap_enable_reg_pp4_iter34 == 1'b0) & (ap_enable_reg_pp4_iter33 == 1'b0) & (ap_enable_reg_pp4_iter32 == 1'b0) & (ap_enable_reg_pp4_iter31 == 1'b0) & (ap_enable_reg_pp4_iter30 == 1'b0) & (ap_enable_reg_pp4_iter29 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln32_reg_738 == 1'd1)) & (1'b1 == ap_CS_fsm_state115))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        dxbuf_V_address0 = zext_ln68_fu_701_p1;
    end else if (((icmp_ln59_reg_890 == 1'd1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        dxbuf_V_address0 = dxbuf_V_addr_reg_876;
    end else if (((icmp_ln59_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1))) begin
        dxbuf_V_address0 = i_5_cast5_cast_reg_894;
    end else begin
        dxbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001)) | ((icmp_ln59_reg_890 == 1'd1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((icmp_ln59_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1)))) begin
        dxbuf_V_ce0 = 1'b1;
    end else begin
        dxbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1334)) begin
        if ((icmp_ln59_reg_890 == 1'd1)) begin
            dxbuf_V_d0 = add_ln703_fu_655_p2;
        end else if ((icmp_ln59_reg_890 == 1'd0)) begin
            dxbuf_V_d0 = probs_V_q0;
        end else begin
            dxbuf_V_d0 = 'bx;
        end
    end else begin
        dxbuf_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln59_reg_890 == 1'd1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1)) | ((icmp_ln59_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1)))) begin
        dxbuf_V_we0 = 1'b1;
    end else begin
        dxbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state9_io) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln32_reg_738 == 1'd1))) begin
        gmem_ARLEN = dim_read_reg_706;
    end else if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_ARLEN = 32'd1;
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state9_io) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln32_reg_738 == 1'd1)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_BVALID == 1'b0) & (icmp_ln32_reg_738 == 1'd1)) & (1'b1 == ap_CS_fsm_state115) & (icmp_ln32_reg_738 == 1'd1))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_1_reg_757 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)) | (~((1'b1 == ap_block_state9_io) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_reg_915_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln32_reg_738 == 1'd1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state115) & (icmp_ln32_reg_738 == 1'd1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_1_reg_757 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln67_reg_915_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        log_probs_V_address0 = zext_ln53_fu_598_p1;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        log_probs_V_address0 = zext_ln49_fu_564_p1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        log_probs_V_address0 = zext_ln703_reg_799;
    end else begin
        log_probs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        log_probs_V_ce0 = 1'b1;
    end else begin
        log_probs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln42_reg_795 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        log_probs_V_we0 = 1'b1;
    end else begin
        log_probs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        probs_V_address0 = i_5_cast5_cast_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        probs_V_address0 = y_read_reg_720;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter47 == 1'b1))) begin
        probs_V_address0 = zext_ln53_reg_842_pp4_iter46_reg;
    end else begin
        probs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | ((ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter47 == 1'b1)))) begin
        probs_V_ce0 = 1'b1;
    end else begin
        probs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_reg_838_pp4_iter46_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter47 == 1'b1))) begin
        probs_V_we0 = 1'b1;
    end else begin
        probs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        xbuf_V_address0 = zext_ln703_fu_533_p1;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        xbuf_V_address0 = zext_ln1494_fu_495_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        xbuf_V_address0 = zext_ln33_fu_472_p1;
    end else begin
        xbuf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        xbuf_V_ce0 = 1'b1;
    end else begin
        xbuf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln32_1_reg_757_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xbuf_V_we0 = 1'b1;
    end else begin
        xbuf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((1'b1 == ap_block_state9_io) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln32_reg_738 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else if ((~((1'b1 == ap_block_state9_io) | (gmem_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln32_reg_738 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln32_1_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln32_1_fu_463_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln36_fu_480_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln36_fu_480_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (icmp_ln32_reg_738 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln42_fu_524_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln42_fu_524_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln48_fu_555_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter15 == 1'b1) & (ap_enable_reg_pp3_iter14 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln48_fu_555_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter15 == 1'b1) & (ap_enable_reg_pp3_iter14 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln52_fu_589_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter47 == 1'b1) & (ap_enable_reg_pp4_iter46 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter1 == 1'b0) & (icmp_ln52_fu_589_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter47 == 1'b1) & (ap_enable_reg_pp4_iter46 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            if (((1'b1 == ap_CS_fsm_state104) & (icmp_ln32_reg_738 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((icmp_ln58_fu_636_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((icmp_ln58_fu_636_p2 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state107 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state107))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state107;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln67_fu_692_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln67_fu_692_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            if ((~((gmem_BVALID == 1'b0) & (icmp_ln32_reg_738 == 1'd1)) & (1'b1 == ap_CS_fsm_state115))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_457_p2 = (i_reg_303 + 31'd1);

assign add_ln36_fu_485_p2 = (i_1_reg_314 + 31'd1);

assign add_ln42_fu_514_p2 = (i_2_reg_335 + 31'd1);

assign add_ln48_fu_545_p2 = (i_3_reg_346 + 31'd1);

assign add_ln52_fu_579_p2 = (i_4_reg_369 + 31'd1);

assign add_ln58_fu_626_p2 = (i_5_reg_380 + 31'd1);

assign add_ln67_fu_682_p2 = (i_6_reg_391 + 31'd1);

assign add_ln703_fu_655_p2 = ($signed(probs_V_q0) + $signed(16'd57344));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd26];

assign ap_NS_fsm_state93 = ap_NS_fsm[32'd26];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln32_1_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln32_1_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((1'b1 == ap_block_state110_io) & (ap_enable_reg_pp6_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((1'b1 == ap_block_state110_io) & (ap_enable_reg_pp6_iter2 == 1'b1));
end

assign ap_block_state105_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state110_io = ((gmem_WREADY == 1'b0) & (icmp_ln67_reg_915_pp6_iter1_reg == 1'd0));
end

assign ap_block_state110_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state115 = ((gmem_BVALID == 1'b0) & (icmp_ln32_reg_738 == 1'd1));
end

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln32_1_reg_757 == 1'd0));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp3_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp3_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp3_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp3_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp3_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp3_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp4_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp4_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp4_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp4_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp4_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp4_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp4_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp4_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp4_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp4_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp4_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp4_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp4_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp4_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp4_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp4_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp4_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp4_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp4_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp4_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp4_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp4_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp4_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp4_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp4_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp4_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp4_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp4_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp4_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp4_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp4_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp4_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp4_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp4_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp4_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp4_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp4_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp4_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp4_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp4_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp4_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp4_stage0_iter47 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((gmem_ARREADY == 1'b0) & (icmp_ln32_reg_738 == 1'd1));
end

always @ (*) begin
    ap_condition_1334 = ((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_62_fu_646_p1 = i_5_reg_380[3:0];

assign grp_exp_16_3_s_fu_402_ap_start = grp_exp_16_3_s_fu_402_ap_start_reg;

assign grp_fu_611_p0 = {{reg_425}, {13'd0}};

assign grp_fu_611_p1 = sum_V_cast_reg_828;

assign grp_log_16_3_s_fu_414_ap_start = grp_log_16_3_s_fu_414_ap_start_reg;

assign i_1_cast1_fu_476_p1 = i_1_reg_314;

assign i_2_cast_fu_520_p1 = i_2_reg_335;

assign i_3_cast_fu_551_p1 = i_3_reg_346;

assign i_4_cast_fu_585_p1 = i_4_reg_369;

assign i_5_cast5_cast_fu_650_p1 = empty_62_fu_646_p1;

assign i_5_cast_fu_632_p1 = i_5_reg_380;

assign i_6_cast_fu_688_p1 = i_6_reg_391;

assign icmp_ln1494_fu_500_p2 = (($signed(xbuf_V_q0) > $signed(max_V_1_reg_325)) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_463_p2 = ((i_reg_303 == trunc_ln32_reg_747) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_449_p2 = (($signed(dim_read_reg_706) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_480_p2 = ((i_1_cast1_fu_476_p1 < dim_read_reg_706) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_524_p2 = ((i_2_cast_fu_520_p1 == dim_read_reg_706) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_555_p2 = ((i_3_cast_fu_551_p1 == dim_read_reg_706) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_589_p2 = ((i_4_cast_fu_585_p1 == dim_read_reg_706) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_636_p2 = ((i_5_cast_fu_632_p1 == dim_read_reg_706) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_641_p2 = ((i_5_cast_fu_632_p1 == y_read_reg_720) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_692_p2 = ((i_6_cast_fu_688_p1 == dim_read_reg_706) ? 1'b1 : 1'b0);

assign log_probs_V_d0 = (xbuf_V_q0 - max_V_1_reg_325);

assign loss_V_fu_621_p2 = (16'd0 - op2_V_1_reg_867);

assign max_V_2_fu_506_p3 = ((icmp_ln1494_fu_500_p2[0:0] == 1'b1) ? xbuf_V_q0 : max_V_1_reg_325);

assign probs_V_d0 = grp_fu_611_p2[15:0];

assign sext_ln30_fu_439_p1 = $signed(trunc_ln_fu_429_p4);

assign sext_ln67_fu_671_p1 = $signed(trunc_ln7_fu_662_p4);

assign sum_V_1_fu_569_p2 = ($signed(reg_425) + $signed(sum_V_reg_357));

assign sum_V_cast_fu_575_p1 = sum_V_reg_357;

assign trunc_ln1494_fu_491_p1 = i_1_reg_314[3:0];

assign trunc_ln32_fu_454_p1 = dim_read_reg_706[30:0];

assign trunc_ln33_fu_468_p1 = i_reg_303[3:0];

assign trunc_ln49_fu_560_p1 = i_3_reg_346[3:0];

assign trunc_ln53_fu_594_p1 = i_4_reg_369[3:0];

assign trunc_ln68_fu_697_p1 = i_6_reg_391[3:0];

assign trunc_ln703_fu_529_p1 = i_2_reg_335[3:0];

assign trunc_ln7_fu_662_p4 = {{dx_read_reg_727[31:1]}};

assign trunc_ln_fu_429_p4 = {{x[31:1]}};

assign zext_ln1494_fu_495_p1 = trunc_ln1494_fu_491_p1;

assign zext_ln33_fu_472_p1 = trunc_ln33_reg_761_pp0_iter1_reg;

assign zext_ln49_fu_564_p1 = trunc_ln49_fu_560_p1;

assign zext_ln53_fu_598_p1 = trunc_ln53_fu_594_p1;

assign zext_ln68_fu_701_p1 = trunc_ln68_fu_697_p1;

assign zext_ln703_fu_533_p1 = trunc_ln703_fu_529_p1;

always @ (posedge ap_clk) begin
    zext_ln703_reg_799[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter1_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter2_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter3_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter4_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter5_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter6_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter7_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter8_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter9_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter10_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter11_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter12_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter13_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter14_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter15_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter16_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter17_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter18_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter19_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter20_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter21_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter22_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter23_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter24_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter25_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter26_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter27_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter28_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter29_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter30_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter31_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter32_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter33_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter34_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter35_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter36_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter37_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter38_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter39_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter40_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter41_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter42_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter43_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter44_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter45_reg[31:4] <= 28'b0000000000000000000000000000;
    zext_ln53_reg_842_pp4_iter46_reg[31:4] <= 28'b0000000000000000000000000000;
    i_5_cast5_cast_reg_894[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //loss_derivative
