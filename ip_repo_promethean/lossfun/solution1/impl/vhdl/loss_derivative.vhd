-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loss_derivative is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of loss_derivative is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loss_derivative_loss_derivative,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=5810,HLS_SYN_LUT=5337,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv16_E000 : STD_LOGIC_VECTOR (15 downto 0) := "1110000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x : STD_LOGIC_VECTOR (31 downto 0);
    signal dx : STD_LOGIC_VECTOR (31 downto 0);
    signal y : STD_LOGIC_VECTOR (31 downto 0);
    signal dim : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln32_reg_738 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln32_1_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln67_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_reg_915_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_303 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_314 : STD_LOGIC_VECTOR (30 downto 0);
    signal max_V_1_reg_325 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_reg_335 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_346 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_V_reg_357 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_reg_369 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_5_reg_380 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_6_reg_391 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_exp_16_3_s_fu_402_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_425 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter14 : STD_LOGIC := '0';
    signal ap_block_state26_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state30_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state33_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state34_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state35_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state38_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state39_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_state40_pp3_stage0_iter14 : BOOLEAN;
    signal ap_block_state41_pp3_stage0_iter15 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln48_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter14 : STD_LOGIC := '0';
    signal ap_block_state43_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state45_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state46_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state47_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state48_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_state49_pp4_stage0_iter6 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter7 : BOOLEAN;
    signal ap_block_state51_pp4_stage0_iter8 : BOOLEAN;
    signal ap_block_state52_pp4_stage0_iter9 : BOOLEAN;
    signal ap_block_state53_pp4_stage0_iter10 : BOOLEAN;
    signal ap_block_state54_pp4_stage0_iter11 : BOOLEAN;
    signal ap_block_state55_pp4_stage0_iter12 : BOOLEAN;
    signal ap_block_state56_pp4_stage0_iter13 : BOOLEAN;
    signal ap_block_state57_pp4_stage0_iter14 : BOOLEAN;
    signal ap_block_state58_pp4_stage0_iter15 : BOOLEAN;
    signal ap_block_state59_pp4_stage0_iter16 : BOOLEAN;
    signal ap_block_state60_pp4_stage0_iter17 : BOOLEAN;
    signal ap_block_state61_pp4_stage0_iter18 : BOOLEAN;
    signal ap_block_state62_pp4_stage0_iter19 : BOOLEAN;
    signal ap_block_state63_pp4_stage0_iter20 : BOOLEAN;
    signal ap_block_state64_pp4_stage0_iter21 : BOOLEAN;
    signal ap_block_state65_pp4_stage0_iter22 : BOOLEAN;
    signal ap_block_state66_pp4_stage0_iter23 : BOOLEAN;
    signal ap_block_state67_pp4_stage0_iter24 : BOOLEAN;
    signal ap_block_state68_pp4_stage0_iter25 : BOOLEAN;
    signal ap_block_state69_pp4_stage0_iter26 : BOOLEAN;
    signal ap_block_state70_pp4_stage0_iter27 : BOOLEAN;
    signal ap_block_state71_pp4_stage0_iter28 : BOOLEAN;
    signal ap_block_state72_pp4_stage0_iter29 : BOOLEAN;
    signal ap_block_state73_pp4_stage0_iter30 : BOOLEAN;
    signal ap_block_state74_pp4_stage0_iter31 : BOOLEAN;
    signal ap_block_state75_pp4_stage0_iter32 : BOOLEAN;
    signal ap_block_state76_pp4_stage0_iter33 : BOOLEAN;
    signal ap_block_state77_pp4_stage0_iter34 : BOOLEAN;
    signal ap_block_state78_pp4_stage0_iter35 : BOOLEAN;
    signal ap_block_state79_pp4_stage0_iter36 : BOOLEAN;
    signal ap_block_state80_pp4_stage0_iter37 : BOOLEAN;
    signal ap_block_state81_pp4_stage0_iter38 : BOOLEAN;
    signal ap_block_state82_pp4_stage0_iter39 : BOOLEAN;
    signal ap_block_state83_pp4_stage0_iter40 : BOOLEAN;
    signal ap_block_state84_pp4_stage0_iter41 : BOOLEAN;
    signal ap_block_state85_pp4_stage0_iter42 : BOOLEAN;
    signal ap_block_state86_pp4_stage0_iter43 : BOOLEAN;
    signal ap_block_state87_pp4_stage0_iter44 : BOOLEAN;
    signal ap_block_state88_pp4_stage0_iter45 : BOOLEAN;
    signal ap_block_state89_pp4_stage0_iter46 : BOOLEAN;
    signal ap_block_state90_pp4_stage0_iter47 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln52_reg_838 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dim_read_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_read_reg_720 : STD_LOGIC_VECTOR (31 downto 0);
    signal dx_read_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal max_V_reg_742 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln32_fu_454_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln32_reg_747 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln32_fu_457_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state16_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_1_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_757_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln33_fu_468_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln33_reg_761 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln33_reg_761_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_addr_read_reg_766 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln36_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln36_fu_485_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal max_V_2_fu_506_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal add_ln42_fu_514_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state23_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln42_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln703_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln703_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln48_fu_545_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln48_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_814_pp3_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_1_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter15 : STD_LOGIC := '0';
    signal sum_V_cast_fu_575_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sum_V_cast_reg_828 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln52_fu_579_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln52_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_838_pp4_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln53_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter23_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter25_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter26_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter27_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter30_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter31_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter32_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter33_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter34_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter35_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter36_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter37_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter38_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter39_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter40_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter41_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter42_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter43_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter44_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter45_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln53_reg_842_pp4_iter46_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal probs_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_2_reg_862 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_log_16_3_s_fu_414_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_V_1_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal loss_V_fu_621_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal loss_V_reg_872 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal dxbuf_V_addr_reg_876 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln58_fu_626_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_block_state105_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state106_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal icmp_ln58_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_cast5_cast_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_cast5_cast_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_fu_682_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state108_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state109_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state110_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state110_io : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln67_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dxbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dxbuf_V_load_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter47 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state105 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state108 : STD_LOGIC;
    signal xbuf_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xbuf_V_ce0 : STD_LOGIC;
    signal xbuf_V_we0 : STD_LOGIC;
    signal xbuf_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dxbuf_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dxbuf_V_ce0 : STD_LOGIC;
    signal dxbuf_V_we0 : STD_LOGIC;
    signal dxbuf_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal log_probs_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal log_probs_V_ce0 : STD_LOGIC;
    signal log_probs_V_we0 : STD_LOGIC;
    signal log_probs_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal log_probs_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal probs_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal probs_V_ce0 : STD_LOGIC;
    signal probs_V_we0 : STD_LOGIC;
    signal probs_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_exp_16_3_s_fu_402_ap_start : STD_LOGIC;
    signal grp_exp_16_3_s_fu_402_ap_done : STD_LOGIC;
    signal grp_exp_16_3_s_fu_402_ap_idle : STD_LOGIC;
    signal grp_exp_16_3_s_fu_402_ap_ready : STD_LOGIC;
    signal grp_log_16_3_s_fu_414_ap_start : STD_LOGIC;
    signal grp_log_16_3_s_fu_414_ap_done : STD_LOGIC;
    signal grp_log_16_3_s_fu_414_ap_idle : STD_LOGIC;
    signal grp_log_16_3_s_fu_414_ap_ready : STD_LOGIC;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_exp_16_3_s_fu_402_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal grp_log_16_3_s_fu_414_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_NS_fsm_state93 : STD_LOGIC;
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal zext_ln33_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1494_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln49_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal zext_ln68_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln30_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state115 : BOOLEAN;
    signal ap_block_pp6_stage0_01001 : BOOLEAN;
    signal add_ln703_fu_655_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_429_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_cast1_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1494_fu_491_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1494_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_cast_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln703_fu_529_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_fu_560_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_cast_fu_585_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln53_fu_594_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_611_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_611_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_5_cast_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_62_fu_646_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln7_fu_662_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_6_cast_fu_688_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln68_fu_697_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_condition_1334 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (15 downto 0);

    component loss_derivative_exp_16_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_log_16_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_sdiv_29ns_16s_16_33_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (28 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_xbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component loss_derivative_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (15 downto 0);
        x : OUT STD_LOGIC_VECTOR (31 downto 0);
        dx : OUT STD_LOGIC_VECTOR (31 downto 0);
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        dim : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component loss_derivative_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component loss_derivative_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => loss_V_reg_872,
        x => x,
        dx => dx,
        y => y,
        dim => dim);

    gmem_m_axi_U : component loss_derivative_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_reg_732,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => sext_ln67_fu_671_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => dim_read_reg_706,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => dxbuf_V_load_reg_924,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    xbuf_V_U : component loss_derivative_xbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => xbuf_V_address0,
        ce0 => xbuf_V_ce0,
        we0 => xbuf_V_we0,
        d0 => gmem_addr_read_reg_766,
        q0 => xbuf_V_q0);

    dxbuf_V_U : component loss_derivative_xbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dxbuf_V_address0,
        ce0 => dxbuf_V_ce0,
        we0 => dxbuf_V_we0,
        d0 => dxbuf_V_d0,
        q0 => dxbuf_V_q0);

    log_probs_V_U : component loss_derivative_xbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => log_probs_V_address0,
        ce0 => log_probs_V_ce0,
        we0 => log_probs_V_we0,
        d0 => log_probs_V_d0,
        q0 => log_probs_V_q0);

    probs_V_U : component loss_derivative_xbuf_V
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => probs_V_address0,
        ce0 => probs_V_ce0,
        we0 => probs_V_we0,
        d0 => probs_V_d0,
        q0 => probs_V_q0);

    grp_exp_16_3_s_fu_402 : component loss_derivative_exp_16_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_16_3_s_fu_402_ap_start,
        ap_done => grp_exp_16_3_s_fu_402_ap_done,
        ap_idle => grp_exp_16_3_s_fu_402_ap_idle,
        ap_ready => grp_exp_16_3_s_fu_402_ap_ready,
        ap_ce => ap_const_logic_1,
        x => log_probs_V_q0,
        ap_return => grp_exp_16_3_s_fu_402_ap_return);

    grp_log_16_3_s_fu_414 : component loss_derivative_log_16_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_log_16_3_s_fu_414_ap_start,
        ap_done => grp_log_16_3_s_fu_414_ap_done,
        ap_idle => grp_log_16_3_s_fu_414_ap_idle,
        ap_ready => grp_log_16_3_s_fu_414_ap_ready,
        x => x_V_2_reg_862,
        ap_return => grp_log_16_3_s_fu_414_ap_return);

    sdiv_29ns_16s_16_33_1_U21 : component loss_derivative_sdiv_29ns_16s_16_33_1
    generic map (
        ID => 1,
        NUM_STAGE => 33,
        din0_WIDTH => 29,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_611_p0,
        din1 => grp_fu_611_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_611_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state16)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state16);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state20);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state23);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state43) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state43)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state43);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter10 <= ap_enable_reg_pp4_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter11 <= ap_enable_reg_pp4_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter12 <= ap_enable_reg_pp4_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter13 <= ap_enable_reg_pp4_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter14 <= ap_enable_reg_pp4_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter15 <= ap_enable_reg_pp4_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter16 <= ap_enable_reg_pp4_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter17 <= ap_enable_reg_pp4_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter18 <= ap_enable_reg_pp4_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter19 <= ap_enable_reg_pp4_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter20 <= ap_enable_reg_pp4_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter21 <= ap_enable_reg_pp4_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter22 <= ap_enable_reg_pp4_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter23 <= ap_enable_reg_pp4_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter24 <= ap_enable_reg_pp4_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter25 <= ap_enable_reg_pp4_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter26 <= ap_enable_reg_pp4_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter27 <= ap_enable_reg_pp4_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter28 <= ap_enable_reg_pp4_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter29 <= ap_enable_reg_pp4_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter30 <= ap_enable_reg_pp4_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter31 <= ap_enable_reg_pp4_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter32 <= ap_enable_reg_pp4_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter33 <= ap_enable_reg_pp4_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter34 <= ap_enable_reg_pp4_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter35 <= ap_enable_reg_pp4_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter36 <= ap_enable_reg_pp4_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter37 <= ap_enable_reg_pp4_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter38 <= ap_enable_reg_pp4_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter39 <= ap_enable_reg_pp4_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter40 <= ap_enable_reg_pp4_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter41 <= ap_enable_reg_pp4_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter42 <= ap_enable_reg_pp4_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter43 <= ap_enable_reg_pp4_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter44 <= ap_enable_reg_pp4_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter45 <= ap_enable_reg_pp4_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter46 <= ap_enable_reg_pp4_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter47 <= ap_enable_reg_pp4_iter46;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_enable_reg_pp4_iter47 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter6 <= ap_enable_reg_pp4_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter7 <= ap_enable_reg_pp4_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter8 <= ap_enable_reg_pp4_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter9 <= ap_enable_reg_pp4_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state105) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state105) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state105);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state108) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state108)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state108);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_16_3_s_fu_402_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exp_16_3_s_fu_402_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln52_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln48_fu_555_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
                    grp_exp_16_3_s_fu_402_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_16_3_s_fu_402_ap_ready = ap_const_logic_1)) then 
                    grp_exp_16_3_s_fu_402_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_log_16_3_s_fu_414_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_log_16_3_s_fu_414_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state92) and (ap_const_logic_1 = ap_NS_fsm_state93))) then 
                    grp_log_16_3_s_fu_414_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_log_16_3_s_fu_414_ap_ready = ap_const_logic_1)) then 
                    grp_log_16_3_s_fu_414_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln36_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_314 <= add_ln36_fu_485_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_1_reg_314 <= ap_const_lv31_1;
            end if; 
        end if;
    end process;

    i_2_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
                i_2_reg_335 <= ap_const_lv31_0;
            elsif (((icmp_ln42_fu_524_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_335 <= add_ln42_fu_514_p2;
            end if; 
        end if;
    end process;

    i_3_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_3_reg_346 <= ap_const_lv31_0;
            elsif (((icmp_ln48_fu_555_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_3_reg_346 <= add_ln48_fu_545_p2;
            end if; 
        end if;
    end process;

    i_4_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_4_reg_369 <= ap_const_lv31_0;
            elsif (((icmp_ln52_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_4_reg_369 <= add_ln52_fu_579_p2;
            end if; 
        end if;
    end process;

    i_5_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_636_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                i_5_reg_380 <= add_ln58_fu_626_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
                i_5_reg_380 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_6_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
                i_6_reg_391 <= ap_const_lv31_0;
            elsif (((icmp_ln67_fu_692_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                i_6_reg_391 <= add_ln67_fu_682_p2;
            end if; 
        end if;
    end process;

    i_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_reg_303 <= ap_const_lv31_0;
            elsif (((icmp_ln32_1_fu_463_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_303 <= add_ln32_fu_457_p2;
            end if; 
        end if;
    end process;

    max_V_1_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln36_reg_771 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                max_V_1_reg_325 <= max_V_2_fu_506_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                max_V_1_reg_325 <= max_V_reg_742;
            end if; 
        end if;
    end process;

    sum_V_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                sum_V_reg_357 <= ap_const_lv16_0;
            elsif (((ap_enable_reg_pp3_iter15 = ap_const_logic_1) and (icmp_ln48_reg_814_pp3_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                sum_V_reg_357 <= sum_V_1_fu_569_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                dim_read_reg_706 <= dim;
                dx_read_reg_727 <= dx;
                gmem_addr_reg_732 <= sext_ln30_fu_439_p1;
                y_read_reg_720 <= y;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then
                dxbuf_V_addr_reg_876 <= y_read_reg_720(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln67_reg_915 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                dxbuf_V_load_reg_924 <= dxbuf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_1_reg_757 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                gmem_addr_read_reg_766 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_636_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                    i_5_cast5_cast_reg_894(3 downto 0) <= i_5_cast5_cast_fu_650_p1(3 downto 0);
                icmp_ln59_reg_890 <= icmp_ln59_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln32_1_reg_757 <= icmp_ln32_1_fu_463_p2;
                icmp_ln32_1_reg_757_pp0_iter1_reg <= icmp_ln32_1_reg_757;
                trunc_ln33_reg_761_pp0_iter1_reg <= trunc_ln33_reg_761;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln32_reg_738 <= icmp_ln32_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln36_reg_771 <= icmp_ln36_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln42_reg_795 <= icmp_ln42_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln48_reg_814 <= icmp_ln48_fu_555_p2;
                icmp_ln48_reg_814_pp3_iter1_reg <= icmp_ln48_reg_814;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                icmp_ln48_reg_814_pp3_iter10_reg <= icmp_ln48_reg_814_pp3_iter9_reg;
                icmp_ln48_reg_814_pp3_iter11_reg <= icmp_ln48_reg_814_pp3_iter10_reg;
                icmp_ln48_reg_814_pp3_iter12_reg <= icmp_ln48_reg_814_pp3_iter11_reg;
                icmp_ln48_reg_814_pp3_iter13_reg <= icmp_ln48_reg_814_pp3_iter12_reg;
                icmp_ln48_reg_814_pp3_iter14_reg <= icmp_ln48_reg_814_pp3_iter13_reg;
                icmp_ln48_reg_814_pp3_iter2_reg <= icmp_ln48_reg_814_pp3_iter1_reg;
                icmp_ln48_reg_814_pp3_iter3_reg <= icmp_ln48_reg_814_pp3_iter2_reg;
                icmp_ln48_reg_814_pp3_iter4_reg <= icmp_ln48_reg_814_pp3_iter3_reg;
                icmp_ln48_reg_814_pp3_iter5_reg <= icmp_ln48_reg_814_pp3_iter4_reg;
                icmp_ln48_reg_814_pp3_iter6_reg <= icmp_ln48_reg_814_pp3_iter5_reg;
                icmp_ln48_reg_814_pp3_iter7_reg <= icmp_ln48_reg_814_pp3_iter6_reg;
                icmp_ln48_reg_814_pp3_iter8_reg <= icmp_ln48_reg_814_pp3_iter7_reg;
                icmp_ln48_reg_814_pp3_iter9_reg <= icmp_ln48_reg_814_pp3_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln52_reg_838 <= icmp_ln52_fu_589_p2;
                icmp_ln52_reg_838_pp4_iter1_reg <= icmp_ln52_reg_838;
                    zext_ln53_reg_842_pp4_iter1_reg(3 downto 0) <= zext_ln53_reg_842(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp4_stage0_11001)) then
                icmp_ln52_reg_838_pp4_iter10_reg <= icmp_ln52_reg_838_pp4_iter9_reg;
                icmp_ln52_reg_838_pp4_iter11_reg <= icmp_ln52_reg_838_pp4_iter10_reg;
                icmp_ln52_reg_838_pp4_iter12_reg <= icmp_ln52_reg_838_pp4_iter11_reg;
                icmp_ln52_reg_838_pp4_iter13_reg <= icmp_ln52_reg_838_pp4_iter12_reg;
                icmp_ln52_reg_838_pp4_iter14_reg <= icmp_ln52_reg_838_pp4_iter13_reg;
                icmp_ln52_reg_838_pp4_iter15_reg <= icmp_ln52_reg_838_pp4_iter14_reg;
                icmp_ln52_reg_838_pp4_iter16_reg <= icmp_ln52_reg_838_pp4_iter15_reg;
                icmp_ln52_reg_838_pp4_iter17_reg <= icmp_ln52_reg_838_pp4_iter16_reg;
                icmp_ln52_reg_838_pp4_iter18_reg <= icmp_ln52_reg_838_pp4_iter17_reg;
                icmp_ln52_reg_838_pp4_iter19_reg <= icmp_ln52_reg_838_pp4_iter18_reg;
                icmp_ln52_reg_838_pp4_iter20_reg <= icmp_ln52_reg_838_pp4_iter19_reg;
                icmp_ln52_reg_838_pp4_iter21_reg <= icmp_ln52_reg_838_pp4_iter20_reg;
                icmp_ln52_reg_838_pp4_iter22_reg <= icmp_ln52_reg_838_pp4_iter21_reg;
                icmp_ln52_reg_838_pp4_iter23_reg <= icmp_ln52_reg_838_pp4_iter22_reg;
                icmp_ln52_reg_838_pp4_iter24_reg <= icmp_ln52_reg_838_pp4_iter23_reg;
                icmp_ln52_reg_838_pp4_iter25_reg <= icmp_ln52_reg_838_pp4_iter24_reg;
                icmp_ln52_reg_838_pp4_iter26_reg <= icmp_ln52_reg_838_pp4_iter25_reg;
                icmp_ln52_reg_838_pp4_iter27_reg <= icmp_ln52_reg_838_pp4_iter26_reg;
                icmp_ln52_reg_838_pp4_iter28_reg <= icmp_ln52_reg_838_pp4_iter27_reg;
                icmp_ln52_reg_838_pp4_iter29_reg <= icmp_ln52_reg_838_pp4_iter28_reg;
                icmp_ln52_reg_838_pp4_iter2_reg <= icmp_ln52_reg_838_pp4_iter1_reg;
                icmp_ln52_reg_838_pp4_iter30_reg <= icmp_ln52_reg_838_pp4_iter29_reg;
                icmp_ln52_reg_838_pp4_iter31_reg <= icmp_ln52_reg_838_pp4_iter30_reg;
                icmp_ln52_reg_838_pp4_iter32_reg <= icmp_ln52_reg_838_pp4_iter31_reg;
                icmp_ln52_reg_838_pp4_iter33_reg <= icmp_ln52_reg_838_pp4_iter32_reg;
                icmp_ln52_reg_838_pp4_iter34_reg <= icmp_ln52_reg_838_pp4_iter33_reg;
                icmp_ln52_reg_838_pp4_iter35_reg <= icmp_ln52_reg_838_pp4_iter34_reg;
                icmp_ln52_reg_838_pp4_iter36_reg <= icmp_ln52_reg_838_pp4_iter35_reg;
                icmp_ln52_reg_838_pp4_iter37_reg <= icmp_ln52_reg_838_pp4_iter36_reg;
                icmp_ln52_reg_838_pp4_iter38_reg <= icmp_ln52_reg_838_pp4_iter37_reg;
                icmp_ln52_reg_838_pp4_iter39_reg <= icmp_ln52_reg_838_pp4_iter38_reg;
                icmp_ln52_reg_838_pp4_iter3_reg <= icmp_ln52_reg_838_pp4_iter2_reg;
                icmp_ln52_reg_838_pp4_iter40_reg <= icmp_ln52_reg_838_pp4_iter39_reg;
                icmp_ln52_reg_838_pp4_iter41_reg <= icmp_ln52_reg_838_pp4_iter40_reg;
                icmp_ln52_reg_838_pp4_iter42_reg <= icmp_ln52_reg_838_pp4_iter41_reg;
                icmp_ln52_reg_838_pp4_iter43_reg <= icmp_ln52_reg_838_pp4_iter42_reg;
                icmp_ln52_reg_838_pp4_iter44_reg <= icmp_ln52_reg_838_pp4_iter43_reg;
                icmp_ln52_reg_838_pp4_iter45_reg <= icmp_ln52_reg_838_pp4_iter44_reg;
                icmp_ln52_reg_838_pp4_iter46_reg <= icmp_ln52_reg_838_pp4_iter45_reg;
                icmp_ln52_reg_838_pp4_iter4_reg <= icmp_ln52_reg_838_pp4_iter3_reg;
                icmp_ln52_reg_838_pp4_iter5_reg <= icmp_ln52_reg_838_pp4_iter4_reg;
                icmp_ln52_reg_838_pp4_iter6_reg <= icmp_ln52_reg_838_pp4_iter5_reg;
                icmp_ln52_reg_838_pp4_iter7_reg <= icmp_ln52_reg_838_pp4_iter6_reg;
                icmp_ln52_reg_838_pp4_iter8_reg <= icmp_ln52_reg_838_pp4_iter7_reg;
                icmp_ln52_reg_838_pp4_iter9_reg <= icmp_ln52_reg_838_pp4_iter8_reg;
                    zext_ln53_reg_842_pp4_iter10_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter9_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter11_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter10_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter12_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter11_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter13_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter12_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter14_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter13_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter15_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter14_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter16_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter15_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter17_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter16_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter18_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter17_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter19_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter18_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter20_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter19_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter21_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter20_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter22_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter21_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter23_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter22_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter24_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter23_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter25_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter24_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter26_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter25_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter27_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter26_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter28_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter27_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter29_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter28_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter2_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter1_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter30_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter29_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter31_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter30_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter32_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter31_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter33_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter32_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter34_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter33_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter35_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter34_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter36_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter35_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter37_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter36_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter38_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter37_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter39_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter38_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter3_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter2_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter40_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter39_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter41_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter40_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter42_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter41_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter43_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter42_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter44_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter43_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter45_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter44_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter46_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter45_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter4_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter3_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter5_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter4_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter6_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter5_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter7_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter6_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter8_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter7_reg(3 downto 0);
                    zext_ln53_reg_842_pp4_iter9_reg(3 downto 0) <= zext_ln53_reg_842_pp4_iter8_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                icmp_ln67_reg_915 <= icmp_ln67_fu_692_p2;
                icmp_ln67_reg_915_pp6_iter1_reg <= icmp_ln67_reg_915;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                loss_V_reg_872 <= loss_V_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                max_V_reg_742 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                op2_V_1_reg_867 <= grp_log_16_3_s_fu_414_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln52_reg_838_pp4_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((icmp_ln48_reg_814_pp3_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then
                reg_425 <= grp_exp_16_3_s_fu_402_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                sum_V_cast_reg_828 <= sum_V_cast_fu_575_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln32_reg_747 <= trunc_ln32_fu_454_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_1_fu_463_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln33_reg_761 <= trunc_ln33_fu_468_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                x_V_2_reg_862 <= probs_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_fu_589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                    zext_ln53_reg_842(3 downto 0) <= zext_ln53_fu_598_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_524_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    zext_ln703_reg_799(3 downto 0) <= zext_ln703_fu_533_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln703_reg_799(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter1_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter2_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter3_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter4_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter5_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter6_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter7_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter8_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter9_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter10_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter11_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter12_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter13_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter14_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter15_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter16_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter17_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter18_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter19_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter20_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter21_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter22_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter23_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter24_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter25_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter26_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter27_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter28_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter29_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter30_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter31_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter32_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter33_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter34_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter35_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter36_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter37_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter38_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter39_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter40_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter41_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter42_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter43_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter44_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter45_reg(31 downto 4) <= "0000000000000000000000000000";
    zext_ln53_reg_842_pp4_iter46_reg(31 downto 4) <= "0000000000000000000000000000";
    i_5_cast5_cast_reg_894(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln32_reg_738, ap_enable_reg_pp0_iter1, ap_CS_fsm_state107, ap_enable_reg_pp6_iter2, ap_CS_fsm_state115, gmem_AWREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_enable_reg_pp3_iter14, ap_enable_reg_pp0_iter0, icmp_ln32_1_fu_463_p2, icmp_ln36_fu_480_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, icmp_ln42_fu_524_p2, ap_enable_reg_pp3_iter0, icmp_ln48_fu_555_p2, ap_enable_reg_pp3_iter15, ap_enable_reg_pp4_iter0, icmp_ln52_fu_589_p2, ap_CS_fsm_state104, ap_enable_reg_pp5_iter0, icmp_ln58_fu_636_p2, ap_enable_reg_pp6_iter0, icmp_ln67_fu_692_p2, ap_enable_reg_pp6_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_CS_fsm_state22, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter46, ap_enable_reg_pp4_iter47, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, ap_block_state9_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_const_boolean_1 = ap_block_state9_io) or (gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln32_reg_738 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif ((not(((ap_const_boolean_1 = ap_block_state9_io) or (gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln32_1_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln32_1_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln36_fu_480_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln36_fu_480_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln42_fu_524_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln42_fu_524_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln48_fu_555_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter15 = ap_const_logic_1) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln48_fu_555_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter15 = ap_const_logic_1) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln52_fu_589_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter47 = ap_const_logic_1) and (ap_enable_reg_pp4_iter46 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (icmp_ln52_fu_589_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter47 = ap_const_logic_1) and (ap_enable_reg_pp4_iter46 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state91;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state104) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((icmp_ln58_fu_636_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((icmp_ln58_fu_636_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state107 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln67_fu_692_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln67_fu_692_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state111;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln32_reg_738 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state115))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln32_fu_457_p2 <= std_logic_vector(unsigned(i_reg_303) + unsigned(ap_const_lv31_1));
    add_ln36_fu_485_p2 <= std_logic_vector(unsigned(i_1_reg_314) + unsigned(ap_const_lv31_1));
    add_ln42_fu_514_p2 <= std_logic_vector(unsigned(i_2_reg_335) + unsigned(ap_const_lv31_1));
    add_ln48_fu_545_p2 <= std_logic_vector(unsigned(i_3_reg_346) + unsigned(ap_const_lv31_1));
    add_ln52_fu_579_p2 <= std_logic_vector(unsigned(i_4_reg_369) + unsigned(ap_const_lv31_1));
    add_ln58_fu_626_p2 <= std_logic_vector(unsigned(i_5_reg_380) + unsigned(ap_const_lv31_1));
    add_ln67_fu_682_p2 <= std_logic_vector(unsigned(i_6_reg_391) + unsigned(ap_const_lv31_1));
    add_ln703_fu_655_p2 <= std_logic_vector(unsigned(probs_V_q0) + unsigned(ap_const_lv16_E000));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(38);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state103 <= ap_CS_fsm(36);
    ap_CS_fsm_state104 <= ap_CS_fsm(37);
    ap_CS_fsm_state107 <= ap_CS_fsm(39);
    ap_CS_fsm_state115 <= ap_CS_fsm(45);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(20);
    ap_CS_fsm_state42 <= ap_CS_fsm(22);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state91 <= ap_CS_fsm(24);
    ap_CS_fsm_state92 <= ap_CS_fsm(25);
    ap_CS_fsm_state93 <= ap_CS_fsm(26);
    ap_NS_fsm_state93 <= ap_NS_fsm(26);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln32_1_reg_757, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln32_1_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln32_1_reg_757, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln32_1_reg_757 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state110_io)
    begin
                ap_block_pp6_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state110_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state110_io)
    begin
                ap_block_pp6_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state110_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;

        ap_block_state105_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state110_io_assign_proc : process(icmp_ln67_reg_915_pp6_iter1_reg, gmem_WREADY)
    begin
                ap_block_state110_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln67_reg_915_pp6_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state110_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state115_assign_proc : process(icmp_ln32_reg_738, gmem_BVALID)
    begin
                ap_block_state115 <= ((gmem_BVALID = ap_const_logic_0) and (icmp_ln32_reg_738 = ap_const_lv1_1));
    end process;

        ap_block_state16_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter1_assign_proc : process(icmp_ln32_1_reg_757, gmem_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln32_1_reg_757 = ap_const_lv1_0));
    end process;

        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp3_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp3_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp3_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp4_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp4_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp4_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp4_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp4_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp4_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp4_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp4_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp4_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp4_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp4_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp4_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp4_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp4_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp4_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp4_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp4_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp4_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp4_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp4_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp4_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp4_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp4_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp4_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp4_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp4_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp4_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp4_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp4_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp4_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp4_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp4_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp4_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp4_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp4_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp4_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp4_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp4_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp4_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp4_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp4_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(icmp_ln32_reg_738, gmem_ARREADY)
    begin
                ap_block_state9_io <= ((gmem_ARREADY = ap_const_logic_0) and (icmp_ln32_reg_738 = ap_const_lv1_1));
    end process;


    ap_condition_1334_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
                ap_condition_1334 <= ((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state16_assign_proc : process(icmp_ln32_1_fu_463_p2)
    begin
        if ((icmp_ln32_1_fu_463_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(icmp_ln36_fu_480_p2)
    begin
        if ((icmp_ln36_fu_480_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state23_assign_proc : process(icmp_ln42_fu_524_p2)
    begin
        if ((icmp_ln42_fu_524_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state26_assign_proc : process(icmp_ln48_fu_555_p2)
    begin
        if ((icmp_ln48_fu_555_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state43_assign_proc : process(icmp_ln52_fu_589_p2)
    begin
        if ((icmp_ln52_fu_589_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state105_assign_proc : process(icmp_ln58_fu_636_p2)
    begin
        if ((icmp_ln58_fu_636_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state105 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state105 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state108_assign_proc : process(icmp_ln67_fu_692_p2)
    begin
        if ((icmp_ln67_fu_692_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state108 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state108 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln32_reg_738, ap_CS_fsm_state115, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln32_reg_738 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state115))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter14, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_enable_reg_pp3_iter13)
    begin
        if (((ap_enable_reg_pp3_iter13 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter14, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter6, ap_enable_reg_pp4_iter7, ap_enable_reg_pp4_iter8, ap_enable_reg_pp4_iter9, ap_enable_reg_pp4_iter10, ap_enable_reg_pp4_iter11, ap_enable_reg_pp4_iter12, ap_enable_reg_pp4_iter13, ap_enable_reg_pp4_iter15, ap_enable_reg_pp4_iter16, ap_enable_reg_pp4_iter17, ap_enable_reg_pp4_iter18, ap_enable_reg_pp4_iter19, ap_enable_reg_pp4_iter20, ap_enable_reg_pp4_iter21, ap_enable_reg_pp4_iter22, ap_enable_reg_pp4_iter23, ap_enable_reg_pp4_iter24, ap_enable_reg_pp4_iter25, ap_enable_reg_pp4_iter26, ap_enable_reg_pp4_iter27, ap_enable_reg_pp4_iter28, ap_enable_reg_pp4_iter29, ap_enable_reg_pp4_iter30, ap_enable_reg_pp4_iter31, ap_enable_reg_pp4_iter32, ap_enable_reg_pp4_iter33, ap_enable_reg_pp4_iter34, ap_enable_reg_pp4_iter35, ap_enable_reg_pp4_iter36, ap_enable_reg_pp4_iter37, ap_enable_reg_pp4_iter38, ap_enable_reg_pp4_iter39, ap_enable_reg_pp4_iter40, ap_enable_reg_pp4_iter41, ap_enable_reg_pp4_iter42, ap_enable_reg_pp4_iter43, ap_enable_reg_pp4_iter44, ap_enable_reg_pp4_iter45, ap_enable_reg_pp4_iter46, ap_enable_reg_pp4_iter47)
    begin
        if (((ap_enable_reg_pp4_iter28 = ap_const_logic_0) and (ap_enable_reg_pp4_iter27 = ap_const_logic_0) and (ap_enable_reg_pp4_iter26 = ap_const_logic_0) and (ap_enable_reg_pp4_iter25 = ap_const_logic_0) and (ap_enable_reg_pp4_iter24 = ap_const_logic_0) and (ap_enable_reg_pp4_iter23 = ap_const_logic_0) and (ap_enable_reg_pp4_iter22 = ap_const_logic_0) and (ap_enable_reg_pp4_iter21 = ap_const_logic_0) and (ap_enable_reg_pp4_iter20 = ap_const_logic_0) and (ap_enable_reg_pp4_iter19 = ap_const_logic_0) and (ap_enable_reg_pp4_iter18 = ap_const_logic_0) and (ap_enable_reg_pp4_iter17 = ap_const_logic_0) and (ap_enable_reg_pp4_iter16 = ap_const_logic_0) and (ap_enable_reg_pp4_iter15 = ap_const_logic_0) and (ap_enable_reg_pp4_iter13 = ap_const_logic_0) and (ap_enable_reg_pp4_iter12 = ap_const_logic_0) and (ap_enable_reg_pp4_iter11 = ap_const_logic_0) and (ap_enable_reg_pp4_iter10 = ap_const_logic_0) and (ap_enable_reg_pp4_iter9 = ap_const_logic_0) and (ap_enable_reg_pp4_iter8 = ap_const_logic_0) and (ap_enable_reg_pp4_iter7 = ap_const_logic_0) and (ap_enable_reg_pp4_iter6 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter14 = ap_const_logic_0) and (ap_enable_reg_pp4_iter47 = ap_const_logic_0) and (ap_enable_reg_pp4_iter46 = ap_const_logic_0) and (ap_enable_reg_pp4_iter45 = ap_const_logic_0) and (ap_enable_reg_pp4_iter44 = ap_const_logic_0) and (ap_enable_reg_pp4_iter43 = ap_const_logic_0) and (ap_enable_reg_pp4_iter42 = ap_const_logic_0) and (ap_enable_reg_pp4_iter41 = ap_const_logic_0) and (ap_enable_reg_pp4_iter40 = ap_const_logic_0) and (ap_enable_reg_pp4_iter39 = ap_const_logic_0) and (ap_enable_reg_pp4_iter38 = ap_const_logic_0) and (ap_enable_reg_pp4_iter37 = ap_const_logic_0) and (ap_enable_reg_pp4_iter36 = ap_const_logic_0) and (ap_enable_reg_pp4_iter35 = ap_const_logic_0) and (ap_enable_reg_pp4_iter34 = ap_const_logic_0) and (ap_enable_reg_pp4_iter33 = ap_const_logic_0) and (ap_enable_reg_pp4_iter32 = ap_const_logic_0) and (ap_enable_reg_pp4_iter31 = ap_const_logic_0) and (ap_enable_reg_pp4_iter30 = ap_const_logic_0) and (ap_enable_reg_pp4_iter29 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln32_reg_738, ap_CS_fsm_state115, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln32_reg_738 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state115))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dxbuf_V_address0_assign_proc : process(ap_block_pp6_stage0, dxbuf_V_addr_reg_876, ap_CS_fsm_pp5_stage0, icmp_ln59_reg_890, i_5_cast5_cast_reg_894, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, zext_ln68_fu_701_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            dxbuf_V_address0 <= zext_ln68_fu_701_p1(4 - 1 downto 0);
        elsif (((icmp_ln59_reg_890 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            dxbuf_V_address0 <= dxbuf_V_addr_reg_876;
        elsif (((icmp_ln59_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1))) then 
            dxbuf_V_address0 <= i_5_cast5_cast_reg_894(4 - 1 downto 0);
        else 
            dxbuf_V_address0 <= "XXXX";
        end if; 
    end process;


    dxbuf_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln59_reg_890, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp6_stage0_11001, ap_enable_reg_pp5_iter1)
    begin
        if ((((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)) or ((icmp_ln59_reg_890 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((icmp_ln59_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)))) then 
            dxbuf_V_ce0 <= ap_const_logic_1;
        else 
            dxbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dxbuf_V_d0_assign_proc : process(probs_V_q0, icmp_ln59_reg_890, add_ln703_fu_655_p2, ap_condition_1334)
    begin
        if ((ap_const_boolean_1 = ap_condition_1334)) then
            if ((icmp_ln59_reg_890 = ap_const_lv1_1)) then 
                dxbuf_V_d0 <= add_ln703_fu_655_p2;
            elsif ((icmp_ln59_reg_890 = ap_const_lv1_0)) then 
                dxbuf_V_d0 <= probs_V_q0;
            else 
                dxbuf_V_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            dxbuf_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dxbuf_V_we0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, icmp_ln59_reg_890, ap_enable_reg_pp5_iter1)
    begin
        if ((((icmp_ln59_reg_890 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)) or ((icmp_ln59_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1)))) then 
            dxbuf_V_we0 <= ap_const_logic_1;
        else 
            dxbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_62_fu_646_p1 <= i_5_reg_380(4 - 1 downto 0);

    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln32_reg_738, gmem_ARREADY, gmem_RVALID, dim_read_reg_706, ap_block_state9_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state9_io) or (gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
            gmem_ARLEN <= dim_read_reg_706;
        elsif (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln32_reg_738, gmem_ARREADY, gmem_RVALID, ap_block_state9_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state9_io) or (gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln32_reg_738 = ap_const_lv1_1)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state107, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state107))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(icmp_ln32_reg_738, ap_CS_fsm_state115, gmem_BVALID)
    begin
        if ((not(((gmem_BVALID = ap_const_logic_0) and (icmp_ln32_reg_738 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln32_1_reg_757, gmem_RVALID, ap_block_pp0_stage0_11001, ap_block_state9_io)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_1_reg_757 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_const_boolean_1 = ap_block_state9_io) or (gmem_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp6_iter2, icmp_ln67_reg_915_pp6_iter1_reg, ap_block_pp6_stage0_11001)
    begin
        if (((icmp_ln67_reg_915_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln32_reg_738)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln32_reg_738 = ap_const_lv1_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state107)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, icmp_ln32_reg_738, ap_CS_fsm_state115)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln32_reg_738 = ap_const_lv1_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln32_1_reg_757)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_1_reg_757 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, icmp_ln67_reg_915_pp6_iter1_reg)
    begin
        if (((icmp_ln67_reg_915_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_exp_16_3_s_fu_402_ap_start <= grp_exp_16_3_s_fu_402_ap_start_reg;
    grp_fu_611_p0 <= (reg_425 & ap_const_lv13_0);
    grp_fu_611_p1 <= sum_V_cast_reg_828(16 - 1 downto 0);
    grp_log_16_3_s_fu_414_ap_start <= grp_log_16_3_s_fu_414_ap_start_reg;
    i_1_cast1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_314),32));
    i_2_cast_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_335),32));
    i_3_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_346),32));
    i_4_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_369),32));
    i_5_cast5_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_62_fu_646_p1),32));
    i_5_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_380),32));
    i_6_cast_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_391),32));
    icmp_ln1494_fu_500_p2 <= "1" when (signed(xbuf_V_q0) > signed(max_V_1_reg_325)) else "0";
    icmp_ln32_1_fu_463_p2 <= "1" when (i_reg_303 = trunc_ln32_reg_747) else "0";
    icmp_ln32_fu_449_p2 <= "1" when (signed(dim_read_reg_706) > signed(ap_const_lv32_0)) else "0";
    icmp_ln36_fu_480_p2 <= "1" when (unsigned(i_1_cast1_fu_476_p1) < unsigned(dim_read_reg_706)) else "0";
    icmp_ln42_fu_524_p2 <= "1" when (i_2_cast_fu_520_p1 = dim_read_reg_706) else "0";
    icmp_ln48_fu_555_p2 <= "1" when (i_3_cast_fu_551_p1 = dim_read_reg_706) else "0";
    icmp_ln52_fu_589_p2 <= "1" when (i_4_cast_fu_585_p1 = dim_read_reg_706) else "0";
    icmp_ln58_fu_636_p2 <= "1" when (i_5_cast_fu_632_p1 = dim_read_reg_706) else "0";
    icmp_ln59_fu_641_p2 <= "1" when (i_5_cast_fu_632_p1 = y_read_reg_720) else "0";
    icmp_ln67_fu_692_p2 <= "1" when (i_6_cast_fu_688_p1 = dim_read_reg_706) else "0";

    log_probs_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, zext_ln703_reg_799, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln53_fu_598_p1, ap_enable_reg_pp2_iter1, ap_block_pp3_stage0, ap_block_pp4_stage0, ap_block_pp2_stage0, zext_ln49_fu_564_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            log_probs_V_address0 <= zext_ln53_fu_598_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            log_probs_V_address0 <= zext_ln49_fu_564_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            log_probs_V_address0 <= zext_ln703_reg_799(4 - 1 downto 0);
        else 
            log_probs_V_address0 <= "XXXX";
        end if; 
    end process;


    log_probs_V_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            log_probs_V_ce0 <= ap_const_logic_1;
        else 
            log_probs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    log_probs_V_d0 <= std_logic_vector(unsigned(xbuf_V_q0) - unsigned(max_V_1_reg_325));

    log_probs_V_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln42_reg_795, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln42_reg_795 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            log_probs_V_we0 <= ap_const_logic_1;
        else 
            log_probs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loss_V_fu_621_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(op2_V_1_reg_867));
    max_V_2_fu_506_p3 <= 
        xbuf_V_q0 when (icmp_ln1494_fu_500_p2(0) = '1') else 
        max_V_1_reg_325;

    probs_V_address0_assign_proc : process(y_read_reg_720, zext_ln53_reg_842_pp4_iter46_reg, ap_CS_fsm_state91, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, i_5_cast5_cast_fu_650_p1, ap_enable_reg_pp4_iter47, ap_block_pp4_stage0, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            probs_V_address0 <= i_5_cast5_cast_fu_650_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            probs_V_address0 <= y_read_reg_720(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter47 = ap_const_logic_1))) then 
            probs_V_address0 <= zext_ln53_reg_842_pp4_iter46_reg(4 - 1 downto 0);
        else 
            probs_V_address0 <= "XXXX";
        end if; 
    end process;


    probs_V_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_CS_fsm_state91, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_block_pp5_stage0_11001, ap_enable_reg_pp4_iter47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or ((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter47 = ap_const_logic_1)))) then 
            probs_V_ce0 <= ap_const_logic_1;
        else 
            probs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    probs_V_d0 <= grp_fu_611_p2(16 - 1 downto 0);

    probs_V_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln52_reg_838_pp4_iter46_reg, ap_enable_reg_pp4_iter47)
    begin
        if (((icmp_ln52_reg_838_pp4_iter46_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter47 = ap_const_logic_1))) then 
            probs_V_we0 <= ap_const_logic_1;
        else 
            probs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln30_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_429_p4),32));

        sext_ln67_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_662_p4),32));

    sum_V_1_fu_569_p2 <= std_logic_vector(unsigned(reg_425) + unsigned(sum_V_reg_357));
        sum_V_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_V_reg_357),29));

    trunc_ln1494_fu_491_p1 <= i_1_reg_314(4 - 1 downto 0);
    trunc_ln32_fu_454_p1 <= dim_read_reg_706(31 - 1 downto 0);
    trunc_ln33_fu_468_p1 <= i_reg_303(4 - 1 downto 0);
    trunc_ln49_fu_560_p1 <= i_3_reg_346(4 - 1 downto 0);
    trunc_ln53_fu_594_p1 <= i_4_reg_369(4 - 1 downto 0);
    trunc_ln68_fu_697_p1 <= i_6_reg_391(4 - 1 downto 0);
    trunc_ln703_fu_529_p1 <= i_2_reg_335(4 - 1 downto 0);
    trunc_ln7_fu_662_p4 <= dx_read_reg_727(31 downto 1);
    trunc_ln_fu_429_p4 <= x(31 downto 1);

    xbuf_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln703_fu_533_p1, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0, zext_ln33_fu_472_p1, zext_ln1494_fu_495_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            xbuf_V_address0 <= zext_ln703_fu_533_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            xbuf_V_address0 <= zext_ln1494_fu_495_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            xbuf_V_address0 <= zext_ln33_fu_472_p1(4 - 1 downto 0);
        else 
            xbuf_V_address0 <= "XXXX";
        end if; 
    end process;


    xbuf_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            xbuf_V_ce0 <= ap_const_logic_1;
        else 
            xbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xbuf_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln32_1_reg_757_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln32_1_reg_757_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xbuf_V_we0 <= ap_const_logic_1;
        else 
            xbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1494_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1494_fu_491_p1),32));
    zext_ln33_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln33_reg_761_pp0_iter1_reg),32));
    zext_ln49_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln49_fu_560_p1),32));
    zext_ln53_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln53_fu_594_p1),32));
    zext_ln68_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln68_fu_697_p1),32));
    zext_ln703_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_fu_529_p1),32));
end behav;
