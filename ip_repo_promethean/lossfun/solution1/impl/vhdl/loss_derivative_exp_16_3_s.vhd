-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loss_derivative_exp_16_3_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of loss_derivative_exp_16_3_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_46_reg_465 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_465_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_465_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_465_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_465_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_465_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_470 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_470_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_470_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_470_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_470_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_470_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_55_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln640_fu_181_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln640_reg_480 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln640_reg_480_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal f_x_msb_3_V_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_7_fu_220_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_reg_500 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_reg_500_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_reg_500_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_reg_500_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_reg_500_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_reg_500_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln640_1_fu_226_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_1_reg_506 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_1_reg_506_pp0_iter2_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_1_reg_506_pp0_iter3_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_1_reg_506_pp0_iter4_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_1_reg_506_pp0_iter5_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln640_1_reg_506_pp0_iter6_reg : STD_LOGIC_VECTOR (40 downto 0);
    signal rhs_2_fu_230_p5 : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_2_reg_512 : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_2_reg_512_pp0_iter3_reg : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_2_reg_512_pp0_iter4_reg : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_2_reg_512_pp0_iter5_reg : STD_LOGIC_VECTOR (46 downto 0);
    signal rhs_2_reg_512_pp0_iter6_reg : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln_reg_527 : STD_LOGIC_VECTOR (44 downto 0);
    signal exp_x_msb_2_3_4_lsb_m_1_V_reg_537 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_542 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_542_pp0_iter8_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_542_pp0_iter9_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_542_pp0_iter10_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_542_pp0_iter11_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_x_msb_1_V_reg_542_pp0_iter12_reg : STD_LOGIC_VECTOR (49 downto 0);
    signal trunc_ln703_2_reg_558 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln369_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln445_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln523_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_185_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_8_fu_203_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln703_2_fu_217_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln703_1_fu_213_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_9_fu_240_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln640_fu_260_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (96 downto 0);
    signal p_Result_7_fu_263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_1_fu_288_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1192_fu_285_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_8_fu_296_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1192_1_fu_302_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_fu_305_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_327_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal zext_ln703_fu_343_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_346_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_49_fu_351_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_s_fu_367_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_381_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln533_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_403_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln533_1_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_425_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln533_2_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_2_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_1_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_447_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_254_ce : STD_LOGIC;
    signal grp_fu_327_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_254_p00 : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_254_p10 : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_327_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal grp_fu_327_p10 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component loss_derivative_mul_50ns_47ns_97_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (46 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (96 downto 0) );
    end component;


    component loss_derivative_mul_50ns_50ns_100_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component loss_derivative_exp_16_3_s_f_x_msb_3_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component loss_derivative_exp_16_3_s_f_x_msb_2_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component loss_derivative_exp_16_3_s_exp_x_msb_1_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_3_table_V_U : component loss_derivative_exp_16_3_s_f_x_msb_3_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component loss_derivative_exp_16_3_s_f_x_msb_2_table_V
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component loss_derivative_exp_16_3_s_exp_x_msb_1_table_V
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    mul_50ns_47ns_97_5_1_U1 : component loss_derivative_mul_50ns_47ns_97_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 50,
        din1_WIDTH => 47,
        dout_WIDTH => 97)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    mul_50ns_50ns_100_5_1_U2 : component loss_derivative_mul_50ns_50ns_100_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_327_p0,
        din1 => grp_fu_327_p1,
        ce => grp_fu_327_ce,
        dout => grp_fu_327_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                exp_x_msb_1_V_reg_542 <= exp_x_msb_1_table_V_q0;
                exp_x_msb_1_V_reg_542_pp0_iter10_reg <= exp_x_msb_1_V_reg_542_pp0_iter9_reg;
                exp_x_msb_1_V_reg_542_pp0_iter11_reg <= exp_x_msb_1_V_reg_542_pp0_iter10_reg;
                exp_x_msb_1_V_reg_542_pp0_iter12_reg <= exp_x_msb_1_V_reg_542_pp0_iter11_reg;
                exp_x_msb_1_V_reg_542_pp0_iter8_reg <= exp_x_msb_1_V_reg_542;
                exp_x_msb_1_V_reg_542_pp0_iter9_reg <= exp_x_msb_1_V_reg_542_pp0_iter8_reg;
                exp_x_msb_2_3_4_lsb_m_1_V_reg_537 <= ret_V_fu_305_p2(55 downto 6);
                ret_V_7_reg_500_pp0_iter2_reg <= ret_V_7_reg_500;
                ret_V_7_reg_500_pp0_iter3_reg <= ret_V_7_reg_500_pp0_iter2_reg;
                ret_V_7_reg_500_pp0_iter4_reg <= ret_V_7_reg_500_pp0_iter3_reg;
                ret_V_7_reg_500_pp0_iter5_reg <= ret_V_7_reg_500_pp0_iter4_reg;
                ret_V_7_reg_500_pp0_iter6_reg <= ret_V_7_reg_500_pp0_iter5_reg;
                    rhs_2_reg_512(34 downto 3) <= rhs_2_fu_230_p5(34 downto 3);    rhs_2_reg_512(46 downto 45) <= rhs_2_fu_230_p5(46 downto 45);
                    rhs_2_reg_512_pp0_iter3_reg(34 downto 3) <= rhs_2_reg_512(34 downto 3);    rhs_2_reg_512_pp0_iter3_reg(46 downto 45) <= rhs_2_reg_512(46 downto 45);
                    rhs_2_reg_512_pp0_iter4_reg(34 downto 3) <= rhs_2_reg_512_pp0_iter3_reg(34 downto 3);    rhs_2_reg_512_pp0_iter4_reg(46 downto 45) <= rhs_2_reg_512_pp0_iter3_reg(46 downto 45);
                    rhs_2_reg_512_pp0_iter5_reg(34 downto 3) <= rhs_2_reg_512_pp0_iter4_reg(34 downto 3);    rhs_2_reg_512_pp0_iter5_reg(46 downto 45) <= rhs_2_reg_512_pp0_iter4_reg(46 downto 45);
                    rhs_2_reg_512_pp0_iter6_reg(34 downto 3) <= rhs_2_reg_512_pp0_iter5_reg(34 downto 3);    rhs_2_reg_512_pp0_iter6_reg(46 downto 45) <= rhs_2_reg_512_pp0_iter5_reg(46 downto 45);
                tmp_46_reg_465_pp0_iter2_reg <= tmp_46_reg_465_pp0_iter1_reg;
                tmp_46_reg_465_pp0_iter3_reg <= tmp_46_reg_465_pp0_iter2_reg;
                tmp_46_reg_465_pp0_iter4_reg <= tmp_46_reg_465_pp0_iter3_reg;
                tmp_46_reg_465_pp0_iter5_reg <= tmp_46_reg_465_pp0_iter4_reg;
                tmp_reg_470_pp0_iter2_reg <= tmp_reg_470_pp0_iter1_reg;
                tmp_reg_470_pp0_iter3_reg <= tmp_reg_470_pp0_iter2_reg;
                tmp_reg_470_pp0_iter4_reg <= tmp_reg_470_pp0_iter3_reg;
                tmp_reg_470_pp0_iter5_reg <= tmp_reg_470_pp0_iter4_reg;
                trunc_ln640_1_reg_506_pp0_iter2_reg <= trunc_ln640_1_reg_506;
                trunc_ln640_1_reg_506_pp0_iter3_reg <= trunc_ln640_1_reg_506_pp0_iter2_reg;
                trunc_ln640_1_reg_506_pp0_iter4_reg <= trunc_ln640_1_reg_506_pp0_iter3_reg;
                trunc_ln640_1_reg_506_pp0_iter5_reg <= trunc_ln640_1_reg_506_pp0_iter4_reg;
                trunc_ln640_1_reg_506_pp0_iter6_reg <= trunc_ln640_1_reg_506_pp0_iter5_reg;
                trunc_ln703_2_reg_558 <= grp_fu_327_p2(99 downto 52);
                trunc_ln_reg_527 <= grp_fu_254_p2(96 downto 52);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_x_msb_3_V_reg_495 <= f_x_msb_3_table_V_q0;
                ret_V_7_reg_500 <= ret_V_7_fu_220_p2;
                tmp_46_reg_465 <= x(15 downto 15);
                tmp_46_reg_465_pp0_iter1_reg <= tmp_46_reg_465;
                tmp_55_reg_475 <= x(9 downto 2);
                tmp_reg_470 <= x(15 downto 10);
                tmp_reg_470_pp0_iter1_reg <= tmp_reg_470;
                trunc_ln640_1_reg_506 <= trunc_ln640_1_fu_226_p1;
                trunc_ln640_reg_480 <= trunc_ln640_fu_181_p1;
                trunc_ln640_reg_480_pp0_iter1_reg <= trunc_ln640_reg_480;
            end if;
        end if;
    end process;
    rhs_2_reg_512(2 downto 0) <= "000";
    rhs_2_reg_512(44 downto 35) <= "0000000000";
    rhs_2_reg_512_pp0_iter3_reg(2 downto 0) <= "000";
    rhs_2_reg_512_pp0_iter3_reg(44 downto 35) <= "0000000000";
    rhs_2_reg_512_pp0_iter4_reg(2 downto 0) <= "000";
    rhs_2_reg_512_pp0_iter4_reg(44 downto 35) <= "0000000000";
    rhs_2_reg_512_pp0_iter5_reg(2 downto 0) <= "000";
    rhs_2_reg_512_pp0_iter5_reg(44 downto 35) <= "0000000000";
    rhs_2_reg_512_pp0_iter6_reg(2 downto 0) <= "000";
    rhs_2_reg_512_pp0_iter6_reg(44 downto 35) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv16_7FFF when (overf_1_fu_441_p2(0) = '1') else 
        tmp_s_fu_447_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln523_fu_280_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_table_V_address0 <= zext_ln445_fu_198_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln369_fu_193_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_254_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_254_p0 <= grp_fu_254_p00(50 - 1 downto 0);
    grp_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_240_p3),97));
    grp_fu_254_p1 <= grp_fu_254_p10(47 - 1 downto 0);
    grp_fu_254_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_2_fu_230_p5),97));

    grp_fu_327_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_327_ce <= ap_const_logic_1;
        else 
            grp_fu_327_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_327_p0 <= grp_fu_327_p00(50 - 1 downto 0);
    grp_fu_327_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_m_1_V_reg_537),100));
    grp_fu_327_p1 <= grp_fu_327_p10(50 - 1 downto 0);
    grp_fu_327_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_V_reg_542),100));
    icmp_ln533_1_fu_413_p2 <= "0" when (tmp_53_fu_403_p4 = ap_const_lv5_0) else "1";
    icmp_ln533_2_fu_435_p2 <= "0" when (tmp_54_fu_425_p4 = ap_const_lv10_0) else "1";
    icmp_ln533_fu_391_p2 <= "0" when (tmp_52_fu_381_p4 = ap_const_lv3_0) else "1";
    or_ln533_1_fu_397_p2 <= (or_ln533_fu_375_p2 or icmp_ln533_fu_391_p2);
    or_ln533_2_fu_419_p2 <= (or_ln533_1_fu_397_p2 or icmp_ln533_1_fu_413_p2);
    or_ln533_fu_375_p2 <= (p_Result_s_fu_367_p3 or overf_fu_361_p2);
    overf_1_fu_441_p2 <= (or_ln533_2_fu_419_p2 or icmp_ln533_2_fu_435_p2);
    overf_fu_361_p2 <= "0" when (tmp_49_fu_351_p4 = ap_const_lv2_0) else "1";
    p_Result_7_fu_263_p3 <= (tmp_46_reg_465_pp0_iter5_reg & sext_ln640_fu_260_p1);
    p_Result_8_fu_203_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_9_fu_240_p3 <= (ret_V_7_reg_500 & trunc_ln640_1_reg_506);
    p_Result_s_fu_367_p3 <= y_l_V_fu_346_p2(47 downto 47);
    ret_V_7_fu_220_p2 <= std_logic_vector(unsigned(zext_ln703_2_fu_217_p1) + unsigned(zext_ln703_1_fu_213_p1));
    ret_V_8_fu_296_p2 <= std_logic_vector(unsigned(rhs_1_fu_288_p4) + unsigned(zext_ln1192_fu_285_p1));
    ret_V_fu_305_p2 <= std_logic_vector(unsigned(ret_V_8_fu_296_p2) + unsigned(zext_ln1192_1_fu_302_p1));
    rhs_1_fu_288_p4 <= ((ret_V_7_reg_500_pp0_iter6_reg & trunc_ln640_1_reg_506_pp0_iter6_reg) & ap_const_lv6_0);
    rhs_2_fu_230_p5 <= (((trunc_ln640_reg_480_pp0_iter1_reg & ap_const_lv10_0) & f_x_msb_3_V_reg_495) & ap_const_lv3_0);
        sext_ln640_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_470_pp0_iter5_reg),7));

    tmp_49_fu_351_p4 <= y_l_V_fu_346_p2(49 downto 48);
    tmp_52_fu_381_p4 <= y_l_V_fu_346_p2(46 downto 44);
    tmp_53_fu_403_p4 <= y_l_V_fu_346_p2(43 downto 39);
    tmp_54_fu_425_p4 <= y_l_V_fu_346_p2(38 downto 29);
    tmp_55_fu_171_p4 <= x(9 downto 2);
    tmp_56_fu_185_p3 <= (trunc_ln640_fu_181_p1 & ap_const_lv3_0);
    tmp_s_fu_447_p4 <= y_l_V_fu_346_p2(29 downto 14);
    trunc_ln640_1_fu_226_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln640_fu_181_p1 <= x(2 - 1 downto 0);
    y_l_V_fu_346_p2 <= std_logic_vector(unsigned(exp_x_msb_1_V_reg_542_pp0_iter12_reg) + unsigned(zext_ln703_fu_343_p1));
    zext_ln1192_1_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_2_reg_512_pp0_iter6_reg),56));
    zext_ln1192_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_527),56));
    zext_ln369_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_185_p3),32));
    zext_ln445_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_171_p4),32));
    zext_ln523_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_263_p3),32));
    zext_ln703_1_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_203_p4),9));
    zext_ln703_2_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_reg_475),9));
    zext_ln703_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln703_2_reg_558),50));
end behav;
